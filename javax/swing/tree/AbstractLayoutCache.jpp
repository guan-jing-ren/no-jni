#ifndef javax_swing_tree_AbstractLayoutCache_HPP
#define javax_swing_tree_AbstractLayoutCache_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::AbstractLayoutCache : public jObject<::javax::swing::tree::AbstractLayoutCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "AbstractLayoutCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::awt::Rectangle(::javax::swing::tree::TreePath, ::java::awt::Rectangle)>("getBounds"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("getExpandedState"), //
		jMethod<::javax::swing::tree::TreeModel()>("getModel"), //
		jMethod<::javax::swing::tree::AbstractLayoutCache$NodeDimensions()>("getNodeDimensions"), //
		jMethod<::javax::swing::tree::TreePath(::jint, ::jint)>("getPathClosestTo"), //
		jMethod<::javax::swing::tree::TreePath(::jint)>("getPathForRow"), //
		jMethod<::jint()>("getPreferredHeight"), //
		jMethod<::jint(::java::awt::Rectangle)>("getPreferredWidth"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::jint(::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::jint()>("getRowHeight"), //
		jMethod<::jint *(::javax::swing::tree::TreePath *)>("getRowsForPaths"), //
		jMethod<::javax::swing::tree::TreeSelectionModel()>("getSelectionModel"), //
		jMethod<::jint(::javax::swing::tree::TreePath)>("getVisibleChildCount"), //
		jMethod<::java::util::Enumeration(::javax::swing::tree::TreePath)>("getVisiblePathsFrom"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("invalidatePathBounds"), //
		jMethod<::jvoid()>("invalidateSizes"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isExpanded"), //
		jMethod<::jboolean()>("isRootVisible"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath, ::jboolean)>("setExpandedState"), //
		jMethod<::jvoid(::javax::swing::tree::TreeModel)>("setModel"), //
		jMethod<::jvoid(::javax::swing::tree::AbstractLayoutCache$NodeDimensions)>("setNodeDimensions"), //
		jMethod<::jvoid(::jboolean)>("setRootVisible"), //
		jMethod<::jvoid(::jint)>("setRowHeight"), //
		jMethod<::jvoid(::javax::swing::tree::TreeSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesChanged"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesInserted"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeNodesRemoved"), //
		jMethod<::jvoid(::javax::swing::event::TreeModelEvent)>("treeStructureChanged"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandedState")] != -1);
		return call<R>("getExpandedState", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::AbstractLayoutCache$NodeDimensions, typename... Args>
	auto getNodeDimensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNodeDimensions")] != -1);
		return call<R>("getNodeDimensions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathClosestTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathClosestTo")] != -1);
		return call<R>("getPathClosestTo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreferredHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredHeight")] != -1);
		return call<R>("getPreferredHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreferredWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredWidth")] != -1);
		return call<R>("getPreferredWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeight")] != -1);
		return call<R>("getRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getRowsForPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowsForPaths")] != -1);
		return call<R>("getRowsForPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleChildCount")] != -1);
		return call<R>("getVisibleChildCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getVisiblePathsFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisiblePathsFrom")] != -1);
		return call<R>("getVisiblePathsFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidatePathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidatePathBounds")] != -1);
		return call<R>("invalidatePathBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateSizes")] != -1);
		return call<R>("invalidateSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExpanded")] != -1);
		return call<R>("isExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRootVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRootVisible")] != -1);
		return call<R>("isRootVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandedState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandedState")] != -1);
		return call<R>("setExpandedState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNodeDimensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNodeDimensions")] != -1);
		return call<R>("setNodeDimensions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRootVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRootVisible")] != -1);
		return call<R>("setRootVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowHeight")] != -1);
		return call<R>("setRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesChanged")] != -1);
		return call<R>("treeNodesChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesInserted")] != -1);
		return call<R>("treeNodesInserted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeNodesRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeNodesRemoved")] != -1);
		return call<R>("treeNodesRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeStructureChanged")] != -1);
		return call<R>("treeStructureChanged", std::forward<Args>(args)...);
	}

};

#endif
