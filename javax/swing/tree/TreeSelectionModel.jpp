#ifndef javax_swing_tree_TreeSelectionModel_HPP
#define javax_swing_tree_TreeSelectionModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::TreeSelectionModel : public jObject<::javax::swing::tree::TreeSelectionModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "TreeSelectionModel";

	constexpr static Enume field_signatures{
		jField<::jint>("CONTIGUOUS_TREE_SELECTION"), //
		jField<::jint>("DISCONTIGUOUS_TREE_SELECTION"), //
		jField<::jint>("SINGLE_TREE_SELECTION"), //
	};

	template<typename F = ::jint>
	static auto CONTIGUOUS_TREE_SELECTION() {
		static_assert(field_signatures[jField<F>("CONTIGUOUS_TREE_SELECTION")] != -1);
		return sat<F>("CONTIGUOUS_TREE_SELECTION");
	}

	template<typename F = ::jint>
	static auto DISCONTIGUOUS_TREE_SELECTION() {
		static_assert(field_signatures[jField<F>("DISCONTIGUOUS_TREE_SELECTION")] != -1);
		return sat<F>("DISCONTIGUOUS_TREE_SELECTION");
	}

	template<typename F = ::jint>
	static auto SINGLE_TREE_SELECTION() {
		static_assert(field_signatures[jField<F>("SINGLE_TREE_SELECTION")] != -1);
		return sat<F>("SINGLE_TREE_SELECTION");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("addSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("addSelectionPaths"), //
		jMethod<::jvoid(::javax::swing::event::TreeSelectionListener)>("addTreeSelectionListener"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::javax::swing::tree::TreePath()>("getLeadSelectionPath"), //
		jMethod<::jint()>("getLeadSelectionRow"), //
		jMethod<::jint()>("getMaxSelectionRow"), //
		jMethod<::jint()>("getMinSelectionRow"), //
		jMethod<::javax::swing::tree::RowMapper()>("getRowMapper"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::jint()>("getSelectionMode"), //
		jMethod<::javax::swing::tree::TreePath()>("getSelectionPath"), //
		jMethod<::javax::swing::tree::TreePath *()>("getSelectionPaths"), //
		jMethod<::jint *()>("getSelectionRows"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isPathSelected"), //
		jMethod<::jboolean(::jint)>("isRowSelected"), //
		jMethod<::jboolean()>("isSelectionEmpty"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("removeSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("removeSelectionPaths"), //
		jMethod<::jvoid(::javax::swing::event::TreeSelectionListener)>("removeTreeSelectionListener"), //
		jMethod<::jvoid()>("resetRowSelection"), //
		jMethod<::jvoid(::javax::swing::tree::RowMapper)>("setRowMapper"), //
		jMethod<::jvoid(::jint)>("setSelectionMode"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("setSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("setSelectionPaths"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionPath")] != -1);
		return call<R>("addSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionPaths")] != -1);
		return call<R>("addSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTreeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeSelectionListener")] != -1);
		return call<R>("addTreeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getLeadSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSelectionPath")] != -1);
		return call<R>("getLeadSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSelectionRow")] != -1);
		return call<R>("getLeadSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxSelectionRow")] != -1);
		return call<R>("getMaxSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinSelectionRow")] != -1);
		return call<R>("getMinSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::RowMapper, typename... Args>
	auto getRowMapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowMapper")] != -1);
		return call<R>("getRowMapper", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionMode")] != -1);
		return call<R>("getSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionPath")] != -1);
		return call<R>("getSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath *, typename... Args>
	auto getSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionPaths")] != -1);
		return call<R>("getSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectionRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionRows")] != -1);
		return call<R>("getSelectionRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPathSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPathSelected")] != -1);
		return call<R>("isPathSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRowSelected")] != -1);
		return call<R>("isRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelectionEmpty")] != -1);
		return call<R>("isSelectionEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionPath")] != -1);
		return call<R>("removeSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionPaths")] != -1);
		return call<R>("removeSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeSelectionListener")] != -1);
		return call<R>("removeTreeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetRowSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetRowSelection")] != -1);
		return call<R>("resetRowSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowMapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowMapper")] != -1);
		return call<R>("setRowMapper", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionMode")] != -1);
		return call<R>("setSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionPath")] != -1);
		return call<R>("setSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionPaths")] != -1);
		return call<R>("setSelectionPaths", std::forward<Args>(args)...);
	}

};

#endif
