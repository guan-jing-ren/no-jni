#ifndef javax_swing_tree_DefaultMutableTreeNode_HPP
#define javax_swing_tree_DefaultMutableTreeNode_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::DefaultMutableTreeNode : public jObject<::javax::swing::tree::DefaultMutableTreeNode, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "DefaultMutableTreeNode";

	constexpr static Enume field_signatures{
		jField<::java::util::Enumeration>("EMPTY_ENUMERATION"), //
	};

	template<typename F = ::java::util::Enumeration>
	static auto EMPTY_ENUMERATION() {
		static_assert(field_signatures[jField<F>("EMPTY_ENUMERATION")] != -1);
		return sat<F>("EMPTY_ENUMERATION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::jboolean)>(), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode)>("add"), //
		jMethod<::java::util::Enumeration()>("breadthFirstEnumeration"), //
		jMethod<::java::util::Enumeration()>("children"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::util::Enumeration()>("depthFirstEnumeration"), //
		jMethod<::jboolean()>("getAllowsChildren"), //
		jMethod<::javax::swing::tree::TreeNode(::javax::swing::tree::TreeNode)>("getChildAfter"), //
		jMethod<::javax::swing::tree::TreeNode(::jint)>("getChildAt"), //
		jMethod<::javax::swing::tree::TreeNode(::javax::swing::tree::TreeNode)>("getChildBefore"), //
		jMethod<::jint()>("getChildCount"), //
		jMethod<::jint()>("getDepth"), //
		jMethod<::javax::swing::tree::TreeNode()>("getFirstChild"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getFirstLeaf"), //
		jMethod<::jint(::javax::swing::tree::TreeNode)>("getIndex"), //
		jMethod<::javax::swing::tree::TreeNode()>("getLastChild"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getLastLeaf"), //
		jMethod<::jint()>("getLeafCount"), //
		jMethod<::jint()>("getLevel"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getNextLeaf"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getNextNode"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getNextSibling"), //
		jMethod<::javax::swing::tree::TreeNode()>("getParent"), //
		jMethod<::javax::swing::tree::TreeNode *()>("getPath"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getPreviousLeaf"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getPreviousNode"), //
		jMethod<::javax::swing::tree::DefaultMutableTreeNode()>("getPreviousSibling"), //
		jMethod<::javax::swing::tree::TreeNode()>("getRoot"), //
		jMethod<::javax::swing::tree::TreeNode(::javax::swing::tree::DefaultMutableTreeNode)>("getSharedAncestor"), //
		jMethod<::jint()>("getSiblingCount"), //
		jMethod<::java::lang::Object()>("getUserObject"), //
		jMethod<::java::lang::Object *()>("getUserObjectPath"), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode, ::jint)>("insert"), //
		jMethod<::jboolean()>("isLeaf"), //
		jMethod<::jboolean(::javax::swing::tree::TreeNode)>("isNodeAncestor"), //
		jMethod<::jboolean(::javax::swing::tree::TreeNode)>("isNodeChild"), //
		jMethod<::jboolean(::javax::swing::tree::DefaultMutableTreeNode)>("isNodeDescendant"), //
		jMethod<::jboolean(::javax::swing::tree::DefaultMutableTreeNode)>("isNodeRelated"), //
		jMethod<::jboolean(::javax::swing::tree::TreeNode)>("isNodeSibling"), //
		jMethod<::jboolean()>("isRoot"), //
		jMethod<::java::util::Enumeration(::javax::swing::tree::TreeNode)>("pathFromAncestorEnumeration"), //
		jMethod<::java::util::Enumeration()>("postorderEnumeration"), //
		jMethod<::java::util::Enumeration()>("preorderEnumeration"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode)>("remove"), //
		jMethod<::jvoid()>("removeAllChildren"), //
		jMethod<::jvoid()>("removeFromParent"), //
		jMethod<::jvoid(::jboolean)>("setAllowsChildren"), //
		jMethod<::jvoid(::javax::swing::tree::MutableTreeNode)>("setParent"), //
		jMethod<::jvoid(::java::lang::Object)>("setUserObject"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto breadthFirstEnumeration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("breadthFirstEnumeration")] != -1);
		return call<R>("breadthFirstEnumeration", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("children")] != -1);
		return call<R>("children", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto depthFirstEnumeration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("depthFirstEnumeration")] != -1);
		return call<R>("depthFirstEnumeration", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllowsChildren")] != -1);
		return call<R>("getAllowsChildren", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getChildAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildAfter")] != -1);
		return call<R>("getChildAfter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getChildAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildAt")] != -1);
		return call<R>("getChildAt", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getChildBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildBefore")] != -1);
		return call<R>("getChildBefore", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildCount")] != -1);
		return call<R>("getChildCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDepth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDepth")] != -1);
		return call<R>("getDepth", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getFirstChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstChild")] != -1);
		return call<R>("getFirstChild", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getFirstLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstLeaf")] != -1);
		return call<R>("getFirstLeaf", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getLastChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastChild")] != -1);
		return call<R>("getLastChild", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getLastLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLastLeaf")] != -1);
		return call<R>("getLastLeaf", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeafCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeafCount")] != -1);
		return call<R>("getLeafCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getNextLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextLeaf")] != -1);
		return call<R>("getNextLeaf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getNextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextNode")] != -1);
		return call<R>("getNextNode", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getNextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextSibling")] != -1);
		return call<R>("getNextSibling", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode *, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getPreviousLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousLeaf")] != -1);
		return call<R>("getPreviousLeaf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getPreviousNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousNode")] != -1);
		return call<R>("getPreviousNode", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::DefaultMutableTreeNode, typename... Args>
	auto getPreviousSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreviousSibling")] != -1);
		return call<R>("getPreviousSibling", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getSharedAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSharedAncestor")] != -1);
		return call<R>("getSharedAncestor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSiblingCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSiblingCount")] != -1);
		return call<R>("getSiblingCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getUserObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserObject")] != -1);
		return call<R>("getUserObject", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getUserObjectPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUserObjectPath")] != -1);
		return call<R>("getUserObjectPath", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNodeAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNodeAncestor")] != -1);
		return call<R>("isNodeAncestor", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNodeChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNodeChild")] != -1);
		return call<R>("isNodeChild", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNodeDescendant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNodeDescendant")] != -1);
		return call<R>("isNodeDescendant", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNodeRelated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNodeRelated")] != -1);
		return call<R>("isNodeRelated", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNodeSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNodeSibling")] != -1);
		return call<R>("isNodeSibling", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRoot")] != -1);
		return call<R>("isRoot", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto pathFromAncestorEnumeration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("pathFromAncestorEnumeration")] != -1);
		return call<R>("pathFromAncestorEnumeration", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto postorderEnumeration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postorderEnumeration")] != -1);
		return call<R>("postorderEnumeration", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto preorderEnumeration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preorderEnumeration")] != -1);
		return call<R>("preorderEnumeration", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllChildren")] != -1);
		return call<R>("removeAllChildren", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFromParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeFromParent")] != -1);
		return call<R>("removeFromParent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAllowsChildren")] != -1);
		return call<R>("setAllowsChildren", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUserObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUserObject")] != -1);
		return call<R>("setUserObject", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
