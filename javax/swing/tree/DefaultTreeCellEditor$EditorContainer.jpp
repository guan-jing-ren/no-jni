#ifndef javax_swing_tree_DefaultTreeCellEditor$EditorContainer_HPP
#define javax_swing_tree_DefaultTreeCellEditor$EditorContainer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::tree::DefaultTreeCellEditor$EditorContainer : public jObject<::javax::swing::tree::DefaultTreeCellEditor$EditorContainer, ::java::awt::Container> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_tree / "DefaultTreeCellEditor$EditorContainer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::tree::DefaultTreeCellEditor)>(), //
		jMethod<::jvoid()>("EditorContainer"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto EditorContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("EditorContainer")] != -1);
		return call<R>("EditorContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

};

#endif
