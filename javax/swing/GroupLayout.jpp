#ifndef javax_swing_GroupLayout_HPP
#define javax_swing_GroupLayout_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::GroupLayout : public jObject<::javax::swing::GroupLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "GroupLayout";

	constexpr static Enume field_signatures{
		jField<::jint>("DEFAULT_SIZE"), //
		jField<::jint>("PREFERRED_SIZE"), //
	};

	template<typename F = ::jint>
	static auto DEFAULT_SIZE() {
		static_assert(field_signatures[jField<F>("DEFAULT_SIZE")] != -1);
		return sat<F>("DEFAULT_SIZE");
	}

	template<typename F = ::jint>
	static auto PREFERRED_SIZE() {
		static_assert(field_signatures[jField<F>("PREFERRED_SIZE")] != -1);
		return sat<F>("PREFERRED_SIZE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Container)>(), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("addLayoutComponent"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::jboolean, ::jboolean)>("createBaselineGroup"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup()>("createParallelGroup"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::javax::swing::GroupLayout$Alignment)>("createParallelGroup"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::javax::swing::GroupLayout$Alignment, ::jboolean)>("createParallelGroup"), //
		jMethod<::javax::swing::GroupLayout$SequentialGroup()>("createSequentialGroup"), //
		jMethod<::jboolean()>("getAutoCreateContainerGaps"), //
		jMethod<::jboolean()>("getAutoCreateGaps"), //
		jMethod<::jboolean()>("getHonorsVisibility"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentX"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentY"), //
		jMethod<::javax::swing::LayoutStyle()>("getLayoutStyle"), //
		jMethod<::jvoid(::java::awt::Container)>("invalidateLayout"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::jvoid(::jint, ::java::awt::Component *)>("linkSize"), //
		jMethod<::jvoid(::java::awt::Component *)>("linkSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("maximumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Component)>("replace"), //
		jMethod<::jvoid(::jboolean)>("setAutoCreateContainerGaps"), //
		jMethod<::jvoid(::jboolean)>("setAutoCreateGaps"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Boolean)>("setHonorsVisibility"), //
		jMethod<::jvoid(::jboolean)>("setHonorsVisibility"), //
		jMethod<::jvoid(::javax::swing::GroupLayout$Group)>("setHorizontalGroup"), //
		jMethod<::jvoid(::javax::swing::LayoutStyle)>("setLayoutStyle"), //
		jMethod<::jvoid(::javax::swing::GroupLayout$Group)>("setVerticalGroup"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$ParallelGroup, typename... Args>
	auto createBaselineGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createBaselineGroup")] != -1);
		return call<R>("createBaselineGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$ParallelGroup, typename... Args>
	auto createParallelGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createParallelGroup")] != -1);
		return call<R>("createParallelGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$SequentialGroup, typename... Args>
	auto createSequentialGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSequentialGroup")] != -1);
		return call<R>("createSequentialGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoCreateContainerGaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoCreateContainerGaps")] != -1);
		return call<R>("getAutoCreateContainerGaps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoCreateGaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoCreateGaps")] != -1);
		return call<R>("getAutoCreateGaps", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getHonorsVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHonorsVisibility")] != -1);
		return call<R>("getHonorsVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentX")] != -1);
		return call<R>("getLayoutAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentY")] != -1);
		return call<R>("getLayoutAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LayoutStyle, typename... Args>
	auto getLayoutStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutStyle")] != -1);
		return call<R>("getLayoutStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateLayout")] != -1);
		return call<R>("invalidateLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto linkSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("linkSize")] != -1);
		return call<R>("linkSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto maximumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximumLayoutSize")] != -1);
		return call<R>("maximumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoCreateContainerGaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoCreateContainerGaps")] != -1);
		return call<R>("setAutoCreateContainerGaps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoCreateGaps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoCreateGaps")] != -1);
		return call<R>("setAutoCreateGaps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHonorsVisibility(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHonorsVisibility")] != -1);
		return call<R>("setHonorsVisibility", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalGroup")] != -1);
		return call<R>("setHorizontalGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayoutStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayoutStyle")] != -1);
		return call<R>("setLayoutStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalGroup")] != -1);
		return call<R>("setVerticalGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
