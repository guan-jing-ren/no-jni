#ifndef javax_swing_JTable$PrintMode_HPP
#define javax_swing_JTable$PrintMode_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTable$PrintMode : public jObject<::javax::swing::JTable$PrintMode, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTable$PrintMode";

	constexpr static Enume field_signatures{
		jField<::javax::swing::JTable$PrintMode>("FIT_WIDTH"), //
		jField<::javax::swing::JTable$PrintMode>("NORMAL"), //
	};

	template<typename F = ::javax::swing::JTable$PrintMode>
	static auto FIT_WIDTH() {
		static_assert(field_signatures[jField<F>("FIT_WIDTH")] != -1);
		return sat<F>("FIT_WIDTH");
	}

	template<typename F = ::javax::swing::JTable$PrintMode>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::JTable$PrintMode(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::JTable$PrintMode *()>("values"), //
	};

	template<typename R = ::javax::swing::JTable$PrintMode, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JTable$PrintMode *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
