#ifndef javax_swing_JTree$DropLocation_HPP
#define javax_swing_JTree$DropLocation_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTree$DropLocation : public jObject<::javax::swing::JTree$DropLocation, ::javax::swing::TransferHandler$DropLocation> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTree$DropLocation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getChildIndex"), //
		jMethod<::javax::swing::tree::TreePath()>("getPath"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getChildIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildIndex")] != -1);
		return call<R>("getChildIndex", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
