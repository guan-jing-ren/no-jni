#ifndef javax_swing_JInternalFrame$JDesktopIcon_HPP
#define javax_swing_JInternalFrame$JDesktopIcon_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JInternalFrame$JDesktopIcon : public jObject<::javax::swing::JInternalFrame$JDesktopIcon, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JInternalFrame$JDesktopIcon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JDesktopPane()>("getDesktopPane"), //
		jMethod<::javax::swing::JInternalFrame()>("getInternalFrame"), //
		jMethod<::javax::swing::plaf::DesktopIconUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("setInternalFrame"), //
		jMethod<::jvoid(::javax::swing::plaf::DesktopIconUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JDesktopPane, typename... Args>
	auto getDesktopPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDesktopPane")] != -1);
		return call<R>("getDesktopPane", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto getInternalFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInternalFrame")] != -1);
		return call<R>("getInternalFrame", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::DesktopIconUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInternalFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInternalFrame")] != -1);
		return call<R>("setInternalFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
