#ifndef javax_swing_JTable_HPP
#define javax_swing_JTable_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTable : public jObject<::javax::swing::JTable, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTable";

	constexpr static Enume field_signatures{
		jField<::jint>("AUTO_RESIZE_ALL_COLUMNS"), //
		jField<::jint>("AUTO_RESIZE_LAST_COLUMN"), //
		jField<::jint>("AUTO_RESIZE_NEXT_COLUMN"), //
		jField<::jint>("AUTO_RESIZE_OFF"), //
		jField<::jint>("AUTO_RESIZE_SUBSEQUENT_COLUMNS"), //
	};

	template<typename F = ::jint>
	static auto AUTO_RESIZE_ALL_COLUMNS() {
		static_assert(field_signatures[jField<F>("AUTO_RESIZE_ALL_COLUMNS")] != -1);
		return sat<F>("AUTO_RESIZE_ALL_COLUMNS");
	}

	template<typename F = ::jint>
	static auto AUTO_RESIZE_LAST_COLUMN() {
		static_assert(field_signatures[jField<F>("AUTO_RESIZE_LAST_COLUMN")] != -1);
		return sat<F>("AUTO_RESIZE_LAST_COLUMN");
	}

	template<typename F = ::jint>
	static auto AUTO_RESIZE_NEXT_COLUMN() {
		static_assert(field_signatures[jField<F>("AUTO_RESIZE_NEXT_COLUMN")] != -1);
		return sat<F>("AUTO_RESIZE_NEXT_COLUMN");
	}

	template<typename F = ::jint>
	static auto AUTO_RESIZE_OFF() {
		static_assert(field_signatures[jField<F>("AUTO_RESIZE_OFF")] != -1);
		return sat<F>("AUTO_RESIZE_OFF");
	}

	template<typename F = ::jint>
	static auto AUTO_RESIZE_SUBSEQUENT_COLUMNS() {
		static_assert(field_signatures[jField<F>("AUTO_RESIZE_SUBSEQUENT_COLUMNS")] != -1);
		return sat<F>("AUTO_RESIZE_SUBSEQUENT_COLUMNS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::util::Vector, ::java::util::Vector)>(), //
		jConstructor<::jvoid(::javax::swing::table::TableModel)>(), //
		jConstructor<::jvoid(::javax::swing::table::TableModel, ::javax::swing::table::TableColumnModel)>(), //
		jConstructor<::jvoid(::javax::swing::table::TableModel, ::javax::swing::table::TableColumnModel, ::javax::swing::ListSelectionModel)>(), //
		jConstructor<::jvoid(::java::lang::Object **, ::java::lang::Object *)>(), //
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("addColumn"), //
		jMethod<::jvoid(::jint, ::jint)>("addColumnSelectionInterval"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::jint, ::jint)>("addRowSelectionInterval"), //
		jMethod<::jvoid(::jint, ::jint, ::jboolean, ::jboolean)>("changeSelection"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnAdded"), //
		jMethod<::jint(::java::awt::Point)>("columnAtPoint"), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("columnMarginChanged"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnMoved"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnRemoved"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionEvent)>("columnSelectionChanged"), //
		jMethod<::jint(::jint)>("convertColumnIndexToModel"), //
		jMethod<::jint(::jint)>("convertColumnIndexToView"), //
		jMethod<::jint(::jint)>("convertRowIndexToModel"), //
		jMethod<::jint(::jint)>("convertRowIndexToView"), //
		jMethod<::jvoid()>("createDefaultColumnsFromModel"), //
		jMethod<::javax::swing::JScrollPane(::javax::swing::JTable)>("createScrollPaneForTable"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::jboolean(::jint, ::jint)>("editCellAt"), //
		jMethod<::jboolean(::jint, ::jint, ::java::util::EventObject)>("editCellAt"), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("editingCanceled"), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("editingStopped"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jboolean()>("getAutoCreateColumnsFromModel"), //
		jMethod<::jboolean()>("getAutoCreateRowSorter"), //
		jMethod<::jint()>("getAutoResizeMode"), //
		jMethod<::javax::swing::table::TableCellEditor()>("getCellEditor"), //
		jMethod<::javax::swing::table::TableCellEditor(::jint, ::jint)>("getCellEditor"), //
		jMethod<::java::awt::Rectangle(::jint, ::jint, ::jboolean)>("getCellRect"), //
		jMethod<::javax::swing::table::TableCellRenderer(::jint, ::jint)>("getCellRenderer"), //
		jMethod<::jboolean()>("getCellSelectionEnabled"), //
		jMethod<::javax::swing::table::TableColumn(::java::lang::Object)>("getColumn"), //
		jMethod<::java::lang::Class(::jint)>("getColumnClass"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::javax::swing::table::TableColumnModel()>("getColumnModel"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::jboolean()>("getColumnSelectionAllowed"), //
		jMethod<::javax::swing::table::TableCellEditor(::java::lang::Class)>("getDefaultEditor"), //
		jMethod<::javax::swing::table::TableCellRenderer(::java::lang::Class)>("getDefaultRenderer"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::JTable$DropLocation()>("getDropLocation"), //
		jMethod<::javax::swing::DropMode()>("getDropMode"), //
		jMethod<::jint()>("getEditingColumn"), //
		jMethod<::jint()>("getEditingRow"), //
		jMethod<::java::awt::Component()>("getEditorComponent"), //
		jMethod<::jboolean()>("getFillsViewportHeight"), //
		jMethod<::java::awt::Color()>("getGridColor"), //
		jMethod<::java::awt::Dimension()>("getIntercellSpacing"), //
		jMethod<::javax::swing::table::TableModel()>("getModel"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::java::awt::print::Printable(::javax::swing::JTable$PrintMode, ::java::text::MessageFormat, ::java::text::MessageFormat)>("getPrintable"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::jint()>("getRowHeight"), //
		jMethod<::jint(::jint)>("getRowHeight"), //
		jMethod<::jint()>("getRowMargin"), //
		jMethod<::jboolean()>("getRowSelectionAllowed"), //
		jMethod<::javax::swing::RowSorter()>("getRowSorter"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableBlockIncrement"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::jint()>("getSelectedColumn"), //
		jMethod<::jint()>("getSelectedColumnCount"), //
		jMethod<::jint *()>("getSelectedColumns"), //
		jMethod<::jint()>("getSelectedRow"), //
		jMethod<::jint()>("getSelectedRowCount"), //
		jMethod<::jint *()>("getSelectedRows"), //
		jMethod<::java::awt::Color()>("getSelectionBackground"), //
		jMethod<::java::awt::Color()>("getSelectionForeground"), //
		jMethod<::javax::swing::ListSelectionModel()>("getSelectionModel"), //
		jMethod<::jboolean()>("getShowHorizontalLines"), //
		jMethod<::jboolean()>("getShowVerticalLines"), //
		jMethod<::jboolean()>("getSurrendersFocusOnKeystroke"), //
		jMethod<::javax::swing::table::JTableHeader()>("getTableHeader"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::javax::swing::plaf::TableUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("getUpdateSelectionOnSort"), //
		jMethod<::java::lang::Object(::jint, ::jint)>("getValueAt"), //
		jMethod<::jboolean(::jint, ::jint)>("isCellEditable"), //
		jMethod<::jboolean(::jint, ::jint)>("isCellSelected"), //
		jMethod<::jboolean(::jint)>("isColumnSelected"), //
		jMethod<::jboolean()>("isEditing"), //
		jMethod<::jboolean(::jint)>("isRowSelected"), //
		jMethod<::jvoid(::jint, ::jint)>("moveColumn"), //
		jMethod<::java::awt::Component(::javax::swing::table::TableCellEditor, ::jint, ::jint)>("prepareEditor"), //
		jMethod<::java::awt::Component(::javax::swing::table::TableCellRenderer, ::jint, ::jint)>("prepareRenderer"), //
		jMethod<::jboolean()>("print"), //
		jMethod<::jboolean(::javax::swing::JTable$PrintMode)>("print"), //
		jMethod<::jboolean(::javax::swing::JTable$PrintMode, ::java::text::MessageFormat, ::java::text::MessageFormat)>("print"), //
		jMethod<::jboolean(::javax::swing::JTable$PrintMode, ::java::text::MessageFormat, ::java::text::MessageFormat, ::jboolean, ::javax::print::attribute::PrintRequestAttributeSet, ::jboolean)>("print"), //
		jMethod<::jboolean(::javax::swing::JTable$PrintMode, ::java::text::MessageFormat, ::java::text::MessageFormat, ::jboolean, ::javax::print::attribute::PrintRequestAttributeSet, ::jboolean, ::javax::print::PrintService)>("print"), //
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("removeColumn"), //
		jMethod<::jvoid(::jint, ::jint)>("removeColumnSelectionInterval"), //
		jMethod<::jvoid()>("removeEditor"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::jint, ::jint)>("removeRowSelectionInterval"), //
		jMethod<::jint(::java::awt::Point)>("rowAtPoint"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::jboolean)>("setAutoCreateColumnsFromModel"), //
		jMethod<::jvoid(::jboolean)>("setAutoCreateRowSorter"), //
		jMethod<::jvoid(::jint)>("setAutoResizeMode"), //
		jMethod<::jvoid(::javax::swing::table::TableCellEditor)>("setCellEditor"), //
		jMethod<::jvoid(::jboolean)>("setCellSelectionEnabled"), //
		jMethod<::jvoid(::javax::swing::table::TableColumnModel)>("setColumnModel"), //
		jMethod<::jvoid(::jboolean)>("setColumnSelectionAllowed"), //
		jMethod<::jvoid(::jint, ::jint)>("setColumnSelectionInterval"), //
		jMethod<::jvoid(::java::lang::Class, ::javax::swing::table::TableCellEditor)>("setDefaultEditor"), //
		jMethod<::jvoid(::java::lang::Class, ::javax::swing::table::TableCellRenderer)>("setDefaultRenderer"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::DropMode)>("setDropMode"), //
		jMethod<::jvoid(::jint)>("setEditingColumn"), //
		jMethod<::jvoid(::jint)>("setEditingRow"), //
		jMethod<::jvoid(::jboolean)>("setFillsViewportHeight"), //
		jMethod<::jvoid(::java::awt::Color)>("setGridColor"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setIntercellSpacing"), //
		jMethod<::jvoid(::javax::swing::table::TableModel)>("setModel"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setPreferredScrollableViewportSize"), //
		jMethod<::jvoid(::jint)>("setRowHeight"), //
		jMethod<::jvoid(::jint, ::jint)>("setRowHeight"), //
		jMethod<::jvoid(::jint)>("setRowMargin"), //
		jMethod<::jvoid(::jboolean)>("setRowSelectionAllowed"), //
		jMethod<::jvoid(::jint, ::jint)>("setRowSelectionInterval"), //
		jMethod<::jvoid(::javax::swing::RowSorter)>("setRowSorter"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectionBackground"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectionForeground"), //
		jMethod<::jvoid(::jint)>("setSelectionMode"), //
		jMethod<::jvoid(::javax::swing::ListSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::jboolean)>("setShowGrid"), //
		jMethod<::jvoid(::jboolean)>("setShowHorizontalLines"), //
		jMethod<::jvoid(::jboolean)>("setShowVerticalLines"), //
		jMethod<::jvoid(::jboolean)>("setSurrendersFocusOnKeystroke"), //
		jMethod<::jvoid(::javax::swing::table::JTableHeader)>("setTableHeader"), //
		jMethod<::jvoid(::javax::swing::plaf::TableUI)>("setUI"), //
		jMethod<::jvoid(::jboolean)>("setUpdateSelectionOnSort"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("setValueAt"), //
		jMethod<::jvoid(::jint)>("sizeColumnsToFit"), //
		jMethod<::jvoid(::jboolean)>("sizeColumnsToFit"), //
		jMethod<::jvoid(::javax::swing::event::RowSorterEvent)>("sorterChanged"), //
		jMethod<::jvoid(::javax::swing::event::TableModelEvent)>("tableChanged"), //
		jMethod<::jvoid()>("updateUI"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionEvent)>("valueChanged"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addColumn")] != -1);
		return call<R>("addColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addColumnSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addColumnSelectionInterval")] != -1);
		return call<R>("addColumnSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRowSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRowSelectionInterval")] != -1);
		return call<R>("addRowSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changeSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changeSelection")] != -1);
		return call<R>("changeSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnAdded")] != -1);
		return call<R>("columnAdded", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto columnAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnAtPoint")] != -1);
		return call<R>("columnAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnMarginChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnMarginChanged")] != -1);
		return call<R>("columnMarginChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnMoved")] != -1);
		return call<R>("columnMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnRemoved")] != -1);
		return call<R>("columnRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("columnSelectionChanged")] != -1);
		return call<R>("columnSelectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertColumnIndexToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertColumnIndexToModel")] != -1);
		return call<R>("convertColumnIndexToModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertColumnIndexToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertColumnIndexToView")] != -1);
		return call<R>("convertColumnIndexToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertRowIndexToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertRowIndexToModel")] != -1);
		return call<R>("convertRowIndexToModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertRowIndexToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertRowIndexToView")] != -1);
		return call<R>("convertRowIndexToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createDefaultColumnsFromModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDefaultColumnsFromModel")] != -1);
		return call<R>("createDefaultColumnsFromModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollPane, typename... Args>
	static auto createScrollPaneForTable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createScrollPaneForTable")] != -1);
		return scall<R>("createScrollPaneForTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto editCellAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("editCellAt")] != -1);
		return call<R>("editCellAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto editingCanceled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("editingCanceled")] != -1);
		return call<R>("editingCanceled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto editingStopped(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("editingStopped")] != -1);
		return call<R>("editingStopped", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoCreateColumnsFromModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoCreateColumnsFromModel")] != -1);
		return call<R>("getAutoCreateColumnsFromModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoCreateRowSorter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoCreateRowSorter")] != -1);
		return call<R>("getAutoCreateRowSorter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAutoResizeMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoResizeMode")] != -1);
		return call<R>("getAutoResizeMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellEditor, typename... Args>
	auto getCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellEditor")] != -1);
		return call<R>("getCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getCellRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellRect")] != -1);
		return call<R>("getCellRect", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellRenderer, typename... Args>
	auto getCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellRenderer")] != -1);
		return call<R>("getCellRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCellSelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellSelectionEnabled")] != -1);
		return call<R>("getCellSelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumn, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getColumnClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnClass")] != -1);
		return call<R>("getColumnClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumnModel, typename... Args>
	auto getColumnModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnModel")] != -1);
		return call<R>("getColumnModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getColumnSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnSelectionAllowed")] != -1);
		return call<R>("getColumnSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellEditor, typename... Args>
	auto getDefaultEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultEditor")] != -1);
		return call<R>("getDefaultEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellRenderer, typename... Args>
	auto getDefaultRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRenderer")] != -1);
		return call<R>("getDefaultRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JTable$DropLocation, typename... Args>
	auto getDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropLocation")] != -1);
		return call<R>("getDropLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DropMode, typename... Args>
	auto getDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropMode")] != -1);
		return call<R>("getDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEditingColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditingColumn")] != -1);
		return call<R>("getEditingColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEditingRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditingRow")] != -1);
		return call<R>("getEditingRow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getEditorComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditorComponent")] != -1);
		return call<R>("getEditorComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFillsViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFillsViewportHeight")] != -1);
		return call<R>("getFillsViewportHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getGridColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGridColor")] != -1);
		return call<R>("getGridColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getIntercellSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntercellSpacing")] != -1);
		return call<R>("getIntercellSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::Printable, typename... Args>
	auto getPrintable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintable")] != -1);
		return call<R>("getPrintable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeight")] != -1);
		return call<R>("getRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowMargin")] != -1);
		return call<R>("getRowMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getRowSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowSelectionAllowed")] != -1);
		return call<R>("getRowSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::RowSorter, typename... Args>
	auto getRowSorter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowSorter")] != -1);
		return call<R>("getRowSorter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableBlockIncrement")] != -1);
		return call<R>("getScrollableBlockIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumn")] != -1);
		return call<R>("getSelectedColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumnCount")] != -1);
		return call<R>("getSelectedColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumns")] != -1);
		return call<R>("getSelectedColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedRow")] != -1);
		return call<R>("getSelectedRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedRowCount")] != -1);
		return call<R>("getSelectedRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedRows")] != -1);
		return call<R>("getSelectedRows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionBackground")] != -1);
		return call<R>("getSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionForeground")] != -1);
		return call<R>("getSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShowHorizontalLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShowHorizontalLines")] != -1);
		return call<R>("getShowHorizontalLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShowVerticalLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShowVerticalLines")] != -1);
		return call<R>("getShowVerticalLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSurrendersFocusOnKeystroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSurrendersFocusOnKeystroke")] != -1);
		return call<R>("getSurrendersFocusOnKeystroke", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::JTableHeader, typename... Args>
	auto getTableHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableHeader")] != -1);
		return call<R>("getTableHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::TableUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUpdateSelectionOnSort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUpdateSelectionOnSort")] != -1);
		return call<R>("getUpdateSelectionOnSort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueAt")] != -1);
		return call<R>("getValueAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCellEditable")] != -1);
		return call<R>("isCellEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCellSelected")] != -1);
		return call<R>("isCellSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isColumnSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isColumnSelected")] != -1);
		return call<R>("isColumnSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditing")] != -1);
		return call<R>("isEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRowSelected")] != -1);
		return call<R>("isRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveColumn")] != -1);
		return call<R>("moveColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto prepareEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareEditor")] != -1);
		return call<R>("prepareEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto prepareRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareRenderer")] != -1);
		return call<R>("prepareRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeColumn")] != -1);
		return call<R>("removeColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeColumnSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeColumnSelectionInterval")] != -1);
		return call<R>("removeColumnSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeEditor")] != -1);
		return call<R>("removeEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRowSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeRowSelectionInterval")] != -1);
		return call<R>("removeRowSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto rowAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rowAtPoint")] != -1);
		return call<R>("rowAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoCreateColumnsFromModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoCreateColumnsFromModel")] != -1);
		return call<R>("setAutoCreateColumnsFromModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoCreateRowSorter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoCreateRowSorter")] != -1);
		return call<R>("setAutoCreateRowSorter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoResizeMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoResizeMode")] != -1);
		return call<R>("setAutoResizeMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellEditor")] != -1);
		return call<R>("setCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellSelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellSelectionEnabled")] != -1);
		return call<R>("setCellSelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnModel")] != -1);
		return call<R>("setColumnModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnSelectionAllowed")] != -1);
		return call<R>("setColumnSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnSelectionInterval")] != -1);
		return call<R>("setColumnSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultEditor")] != -1);
		return call<R>("setDefaultEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultRenderer")] != -1);
		return call<R>("setDefaultRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropMode")] != -1);
		return call<R>("setDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditingColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditingColumn")] != -1);
		return call<R>("setEditingColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditingRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditingRow")] != -1);
		return call<R>("setEditingRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFillsViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFillsViewportHeight")] != -1);
		return call<R>("setFillsViewportHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGridColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGridColor")] != -1);
		return call<R>("setGridColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIntercellSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIntercellSpacing")] != -1);
		return call<R>("setIntercellSpacing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPreferredScrollableViewportSize")] != -1);
		return call<R>("setPreferredScrollableViewportSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowHeight")] != -1);
		return call<R>("setRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowMargin")] != -1);
		return call<R>("setRowMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowSelectionAllowed")] != -1);
		return call<R>("setRowSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowSelectionInterval")] != -1);
		return call<R>("setRowSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowSorter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowSorter")] != -1);
		return call<R>("setRowSorter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionBackground")] != -1);
		return call<R>("setSelectionBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionForeground")] != -1);
		return call<R>("setSelectionForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionMode")] != -1);
		return call<R>("setSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowGrid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowGrid")] != -1);
		return call<R>("setShowGrid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowHorizontalLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowHorizontalLines")] != -1);
		return call<R>("setShowHorizontalLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowVerticalLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowVerticalLines")] != -1);
		return call<R>("setShowVerticalLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSurrendersFocusOnKeystroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSurrendersFocusOnKeystroke")] != -1);
		return call<R>("setSurrendersFocusOnKeystroke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTableHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTableHeader")] != -1);
		return call<R>("setTableHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUpdateSelectionOnSort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUpdateSelectionOnSort")] != -1);
		return call<R>("setUpdateSelectionOnSort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueAt")] != -1);
		return call<R>("setValueAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sizeColumnsToFit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sizeColumnsToFit")] != -1);
		return call<R>("sizeColumnsToFit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sorterChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sorterChanged")] != -1);
		return call<R>("sorterChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto tableChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tableChanged")] != -1);
		return call<R>("tableChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto valueChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueChanged")] != -1);
		return call<R>("valueChanged", std::forward<Args>(args)...);
	}

};

#endif
