#ifndef javax_swing_JFormattedTextField_HPP
#define javax_swing_JFormattedTextField_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JFormattedTextField : public jObject<::javax::swing::JFormattedTextField, ::javax::swing::JTextField> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JFormattedTextField";

	constexpr static Enume field_signatures{
		jField<::jint>("COMMIT"), //
		jField<::jint>("COMMIT_OR_REVERT"), //
		jField<::jint>("PERSIST"), //
		jField<::jint>("REVERT"), //
	};

	template<typename F = ::jint>
	static auto COMMIT() {
		static_assert(field_signatures[jField<F>("COMMIT")] != -1);
		return sat<F>("COMMIT");
	}

	template<typename F = ::jint>
	static auto COMMIT_OR_REVERT() {
		static_assert(field_signatures[jField<F>("COMMIT_OR_REVERT")] != -1);
		return sat<F>("COMMIT_OR_REVERT");
	}

	template<typename F = ::jint>
	static auto PERSIST() {
		static_assert(field_signatures[jField<F>("PERSIST")] != -1);
		return sat<F>("PERSIST");
	}

	template<typename F = ::jint>
	static auto REVERT() {
		static_assert(field_signatures[jField<F>("REVERT")] != -1);
		return sat<F>("REVERT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::text::Format)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatterFactory)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatterFactory, ::java::lang::Object)>(), //
		jMethod<::jvoid()>("commitEdit"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::jint()>("getFocusLostBehavior"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter()>("getFormatter"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatterFactory()>("getFormatterFactory"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jboolean()>("isEditValid"), //
		jMethod<::jvoid(::javax::swing::text::Document)>("setDocument"), //
		jMethod<::jvoid(::jint)>("setFocusLostBehavior"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatterFactory)>("setFormatterFactory"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto commitEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("commitEdit")] != -1);
		return call<R>("commitEdit", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFocusLostBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusLostBehavior")] != -1);
		return call<R>("getFocusLostBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormatter")] != -1);
		return call<R>("getFormatter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatterFactory, typename... Args>
	auto getFormatterFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormatterFactory")] != -1);
		return call<R>("getFormatterFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditValid")] != -1);
		return call<R>("isEditValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocument")] != -1);
		return call<R>("setDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusLostBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusLostBehavior")] != -1);
		return call<R>("setFocusLostBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormatterFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFormatterFactory")] != -1);
		return call<R>("setFormatterFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
