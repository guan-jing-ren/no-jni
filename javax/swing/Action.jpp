#ifndef javax_swing_Action_HPP
#define javax_swing_Action_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::Action : public jObject<::javax::swing::Action, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "Action";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCELERATOR_KEY"), //
		jField<::java::lang::String>("ACTION_COMMAND_KEY"), //
		jField<::java::lang::String>("DEFAULT"), //
		jField<::java::lang::String>("DISPLAYED_MNEMONIC_INDEX_KEY"), //
		jField<::java::lang::String>("LARGE_ICON_KEY"), //
		jField<::java::lang::String>("LONG_DESCRIPTION"), //
		jField<::java::lang::String>("MNEMONIC_KEY"), //
		jField<::java::lang::String>("NAME"), //
		jField<::java::lang::String>("SELECTED_KEY"), //
		jField<::java::lang::String>("SHORT_DESCRIPTION"), //
		jField<::java::lang::String>("SMALL_ICON"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCELERATOR_KEY() {
		static_assert(field_signatures[jField<F>("ACCELERATOR_KEY")] != -1);
		return sat<F>("ACCELERATOR_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto ACTION_COMMAND_KEY() {
		static_assert(field_signatures[jField<F>("ACTION_COMMAND_KEY")] != -1);
		return sat<F>("ACTION_COMMAND_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::java::lang::String>
	static auto DISPLAYED_MNEMONIC_INDEX_KEY() {
		static_assert(field_signatures[jField<F>("DISPLAYED_MNEMONIC_INDEX_KEY")] != -1);
		return sat<F>("DISPLAYED_MNEMONIC_INDEX_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto LARGE_ICON_KEY() {
		static_assert(field_signatures[jField<F>("LARGE_ICON_KEY")] != -1);
		return sat<F>("LARGE_ICON_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto LONG_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("LONG_DESCRIPTION")] != -1);
		return sat<F>("LONG_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto MNEMONIC_KEY() {
		static_assert(field_signatures[jField<F>("MNEMONIC_KEY")] != -1);
		return sat<F>("MNEMONIC_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto NAME() {
		static_assert(field_signatures[jField<F>("NAME")] != -1);
		return sat<F>("NAME");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTED_KEY() {
		static_assert(field_signatures[jField<F>("SELECTED_KEY")] != -1);
		return sat<F>("SELECTED_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto SHORT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("SHORT_DESCRIPTION")] != -1);
		return sat<F>("SHORT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto SMALL_ICON() {
		static_assert(field_signatures[jField<F>("SMALL_ICON")] != -1);
		return sat<F>("SMALL_ICON");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getValue"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("putValue"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putValue")] != -1);
		return call<R>("putValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

};

#endif
