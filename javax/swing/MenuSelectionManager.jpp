#ifndef javax_swing_MenuSelectionManager_HPP
#define javax_swing_MenuSelectionManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::MenuSelectionManager : public jObject<::javax::swing::MenuSelectionManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "MenuSelectionManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid()>("clearSelectedPath"), //
		jMethod<::java::awt::Component(::java::awt::Component, ::java::awt::Point)>("componentForPoint"), //
		jMethod<::javax::swing::MenuSelectionManager()>("defaultManager"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::javax::swing::MenuElement *()>("getSelectedPath"), //
		jMethod<::jboolean(::java::awt::Component)>("isComponentPartOfCurrentMenu"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("processMouseEvent"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::javax::swing::MenuElement *)>("setSelectedPath"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelectedPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelectedPath")] != -1);
		return call<R>("clearSelectedPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto componentForPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("componentForPoint")] != -1);
		return call<R>("componentForPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuSelectionManager, typename... Args>
	static auto defaultManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultManager")] != -1);
		return scall<R>("defaultManager", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSelectedPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedPath")] != -1);
		return call<R>("getSelectedPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComponentPartOfCurrentMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComponentPartOfCurrentMenu")] != -1);
		return call<R>("isComponentPartOfCurrentMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processMouseEvent")] != -1);
		return call<R>("processMouseEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedPath")] != -1);
		return call<R>("setSelectedPath", std::forward<Args>(args)...);
	}

};

#endif
