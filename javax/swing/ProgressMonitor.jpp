#ifndef javax_swing_ProgressMonitor_HPP
#define javax_swing_ProgressMonitor_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ProgressMonitor : public jObject<::javax::swing::ProgressMonitor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ProgressMonitor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Component, ::java::lang::Object, ::java::lang::String, ::jint, ::jint)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMillisToDecideToPopup"), //
		jMethod<::jint()>("getMillisToPopup"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::java::lang::String()>("getNote"), //
		jMethod<::jboolean()>("isCanceled"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMillisToDecideToPopup"), //
		jMethod<::jvoid(::jint)>("setMillisToPopup"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::java::lang::String)>("setNote"), //
		jMethod<::jvoid(::jint)>("setProgress"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMillisToDecideToPopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMillisToDecideToPopup")] != -1);
		return call<R>("getMillisToDecideToPopup", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMillisToPopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMillisToPopup")] != -1);
		return call<R>("getMillisToPopup", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNote(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNote")] != -1);
		return call<R>("getNote", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCanceled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCanceled")] != -1);
		return call<R>("isCanceled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMillisToDecideToPopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMillisToDecideToPopup")] != -1);
		return call<R>("setMillisToDecideToPopup", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMillisToPopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMillisToPopup")] != -1);
		return call<R>("setMillisToPopup", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNote(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNote")] != -1);
		return call<R>("setNote", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setProgress")] != -1);
		return call<R>("setProgress", forward<Args>(args)...);
	}

};

#endif
