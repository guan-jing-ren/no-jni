#ifndef javax_swing_Spring_HPP
#define javax_swing_Spring_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::Spring : public jObject<::javax::swing::Spring, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "Spring";

	constexpr static Enume field_signatures{
		jField<::jint>("UNSET"), //
	};

	template<typename F = ::jint>
	static auto UNSET() {
		static_assert(field_signatures[jField<F>("UNSET")] != -1);
		return sat<F>("UNSET");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::Spring(::jint)>("constant"), //
		jMethod<::javax::swing::Spring(::jint, ::jint, ::jint)>("constant"), //
		jMethod<::jint()>("getMaximumValue"), //
		jMethod<::jint()>("getMinimumValue"), //
		jMethod<::jint()>("getPreferredValue"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::javax::swing::Spring(::java::awt::Component)>("height"), //
		jMethod<::javax::swing::Spring(::javax::swing::Spring, ::javax::swing::Spring)>("max"), //
		jMethod<::javax::swing::Spring(::javax::swing::Spring)>("minus"), //
		jMethod<::javax::swing::Spring(::javax::swing::Spring, ::jfloat)>("scale"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::javax::swing::Spring(::javax::swing::Spring, ::javax::swing::Spring)>("sum"), //
		jMethod<::javax::swing::Spring(::java::awt::Component)>("width"), //
	};

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto constant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("constant")] != -1);
		return scall<R>("constant", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumValue")] != -1);
		return call<R>("getMaximumValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimumValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumValue")] != -1);
		return call<R>("getMinimumValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreferredValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredValue")] != -1);
		return call<R>("getPreferredValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto height(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("height")] != -1);
		return scall<R>("height", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto max(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("max")] != -1);
		return scall<R>("max", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto minus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minus")] != -1);
		return scall<R>("minus", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto scale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scale")] != -1);
		return scall<R>("scale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto sum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sum")] != -1);
		return scall<R>("sum", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	static auto width(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("width")] != -1);
		return scall<R>("width", forward<Args>(args)...);
	}

};

#endif
