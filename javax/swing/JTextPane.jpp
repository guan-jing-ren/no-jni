#ifndef javax_swing_JTextPane_HPP
#define javax_swing_JTextPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTextPane : public jObject<::javax::swing::JTextPane, ::javax::swing::JEditorPane> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTextPane";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::text::StyledDocument)>(), //
		jMethod<::javax::swing::text::Style(::java::lang::String, ::javax::swing::text::Style)>("addStyle"), //
		jMethod<::javax::swing::text::AttributeSet()>("getCharacterAttributes"), //
		jMethod<::javax::swing::text::MutableAttributeSet()>("getInputAttributes"), //
		jMethod<::javax::swing::text::Style()>("getLogicalStyle"), //
		jMethod<::javax::swing::text::AttributeSet()>("getParagraphAttributes"), //
		jMethod<::javax::swing::text::Style(::java::lang::String)>("getStyle"), //
		jMethod<::javax::swing::text::StyledDocument()>("getStyledDocument"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::java::awt::Component)>("insertComponent"), //
		jMethod<::jvoid(::javax::swing::Icon)>("insertIcon"), //
		jMethod<::jvoid(::java::lang::String)>("removeStyle"), //
		jMethod<::jvoid(::java::lang::String)>("replaceSelection"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet, ::jboolean)>("setCharacterAttributes"), //
		jMethod<::jvoid(::javax::swing::text::Document)>("setDocument"), //
		jMethod<::jvoid(::javax::swing::text::EditorKit)>("setEditorKit"), //
		jMethod<::jvoid(::javax::swing::text::Style)>("setLogicalStyle"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet, ::jboolean)>("setParagraphAttributes"), //
		jMethod<::jvoid(::javax::swing::text::StyledDocument)>("setStyledDocument"), //
	};

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto addStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addStyle")] != -1);
		return call<R>("addStyle", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getCharacterAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterAttributes")] != -1);
		return call<R>("getCharacterAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::MutableAttributeSet, typename... Args>
	auto getInputAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputAttributes")] != -1);
		return call<R>("getInputAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getLogicalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLogicalStyle")] != -1);
		return call<R>("getLogicalStyle", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getParagraphAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParagraphAttributes")] != -1);
		return call<R>("getParagraphAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::StyledDocument, typename... Args>
	auto getStyledDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyledDocument")] != -1);
		return call<R>("getStyledDocument", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertComponent")] != -1);
		return call<R>("insertComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertIcon")] != -1);
		return call<R>("insertIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeStyle")] != -1);
		return call<R>("removeStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replaceSelection")] != -1);
		return call<R>("replaceSelection", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharacterAttributes")] != -1);
		return call<R>("setCharacterAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDocument")] != -1);
		return call<R>("setDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditorKit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditorKit")] != -1);
		return call<R>("setEditorKit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLogicalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLogicalStyle")] != -1);
		return call<R>("setLogicalStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParagraphAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParagraphAttributes")] != -1);
		return call<R>("setParagraphAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyledDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStyledDocument")] != -1);
		return call<R>("setStyledDocument", forward<Args>(args)...);
	}

};

#endif
