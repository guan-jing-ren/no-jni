#ifndef javax_swing_MenuElement_HPP
#define javax_swing_MenuElement_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::MenuElement : public jObject<::javax::swing::MenuElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "MenuElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::javax::swing::MenuElement *()>("getSubElements"), //
		jMethod<::jvoid(::jboolean)>("menuSelectionChanged"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processMouseEvent"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSubElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubElements")] != -1);
		return call<R>("getSubElements", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("menuSelectionChanged")] != -1);
		return call<R>("menuSelectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processMouseEvent")] != -1);
		return call<R>("processMouseEvent", std::forward<Args>(args)...);
	}

};

#endif
