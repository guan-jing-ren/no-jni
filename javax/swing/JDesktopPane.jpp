#ifndef javax_swing_JDesktopPane_HPP
#define javax_swing_JDesktopPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JDesktopPane : public jObject<::javax::swing::JDesktopPane, ::javax::swing::JLayeredPane> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JDesktopPane";

	constexpr static Enume field_signatures{
		jField<::jint>("LIVE_DRAG_MODE"), //
		jField<::jint>("OUTLINE_DRAG_MODE"), //
	};

	template<typename F = ::jint>
	static auto LIVE_DRAG_MODE() {
		static_assert(field_signatures[jField<F>("LIVE_DRAG_MODE")] != -1);
		return sat<F>("LIVE_DRAG_MODE");
	}

	template<typename F = ::jint>
	static auto OUTLINE_DRAG_MODE() {
		static_assert(field_signatures[jField<F>("OUTLINE_DRAG_MODE")] != -1);
		return sat<F>("OUTLINE_DRAG_MODE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JInternalFrame *()>("getAllFrames"), //
		jMethod<::javax::swing::JInternalFrame *(::jint)>("getAllFramesInLayer"), //
		jMethod<::javax::swing::DesktopManager()>("getDesktopManager"), //
		jMethod<::jint()>("getDragMode"), //
		jMethod<::javax::swing::JInternalFrame()>("getSelectedFrame"), //
		jMethod<::javax::swing::plaf::DesktopPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::javax::swing::JInternalFrame(::jboolean)>("selectFrame"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("setComponentZOrder"), //
		jMethod<::jvoid(::javax::swing::DesktopManager)>("setDesktopManager"), //
		jMethod<::jvoid(::jint)>("setDragMode"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("setSelectedFrame"), //
		jMethod<::jvoid(::javax::swing::plaf::DesktopPaneUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame *, typename... Args>
	auto getAllFrames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllFrames")] != -1);
		return call<R>("getAllFrames", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame *, typename... Args>
	auto getAllFramesInLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllFramesInLayer")] != -1);
		return call<R>("getAllFramesInLayer", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DesktopManager, typename... Args>
	auto getDesktopManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDesktopManager")] != -1);
		return call<R>("getDesktopManager", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDragMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDragMode")] != -1);
		return call<R>("getDragMode", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto getSelectedFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSelectedFrame")] != -1);
		return call<R>("getSelectedFrame", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::DesktopPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto selectFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("selectFrame")] != -1);
		return call<R>("selectFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentZOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComponentZOrder")] != -1);
		return call<R>("setComponentZOrder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDesktopManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDesktopManager")] != -1);
		return call<R>("setDesktopManager", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDragMode")] != -1);
		return call<R>("setDragMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectedFrame")] != -1);
		return call<R>("setSelectedFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
