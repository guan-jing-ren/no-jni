#ifndef javax_swing_DebugGraphics_HPP
#define javax_swing_DebugGraphics_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DebugGraphics : public jObject<::javax::swing::DebugGraphics, ::java::awt::Graphics> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DebugGraphics";

	constexpr static Enume field_signatures{
		jField<::jint>("BUFFERED_OPTION"), //
		jField<::jint>("FLASH_OPTION"), //
		jField<::jint>("LOG_OPTION"), //
		jField<::jint>("NONE_OPTION"), //
	};

	template<typename F = ::jint>
	static auto BUFFERED_OPTION() {
		static_assert(field_signatures[jField<F>("BUFFERED_OPTION")] != -1);
		return sat<F>("BUFFERED_OPTION");
	}

	template<typename F = ::jint>
	static auto FLASH_OPTION() {
		static_assert(field_signatures[jField<F>("FLASH_OPTION")] != -1);
		return sat<F>("FLASH_OPTION");
	}

	template<typename F = ::jint>
	static auto LOG_OPTION() {
		static_assert(field_signatures[jField<F>("LOG_OPTION")] != -1);
		return sat<F>("LOG_OPTION");
	}

	template<typename F = ::jint>
	static auto NONE_OPTION() {
		static_assert(field_signatures[jField<F>("NONE_OPTION")] != -1);
		return sat<F>("NONE_OPTION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Graphics)>(), //
		jConstructor<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent)>(), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clearRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("clipRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("copyArea"), //
		jMethod<::java::awt::Graphics()>("create"), //
		jMethod<::java::awt::Graphics(::jint, ::jint, ::jint, ::jint)>("create"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("draw3DRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawArc"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint, ::jint, ::jint)>("drawBytes"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint, ::jint, ::jint)>("drawChars"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::Color, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::java::awt::image::ImageObserver)>("drawImage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawLine"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolygon"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("drawPolyline"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("drawRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawRoundRect"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::java::text::AttributedCharacterIterator, ::jint, ::jint)>("drawString"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jboolean)>("fill3DRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillArc"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillOval"), //
		jMethod<::jvoid(::jint *, ::jint *, ::jint)>("fillPolygon"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("fillRect"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("fillRoundRect"), //
		jMethod<::java::awt::Color()>("flashColor"), //
		jMethod<::jint()>("flashCount"), //
		jMethod<::jint()>("flashTime"), //
		jMethod<::java::awt::Shape()>("getClip"), //
		jMethod<::java::awt::Rectangle()>("getClipBounds"), //
		jMethod<::java::awt::Color()>("getColor"), //
		jMethod<::jint()>("getDebugOptions"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics()>("getFontMetrics"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::jboolean()>("isDrawingBuffer"), //
		jMethod<::java::io::PrintStream()>("logStream"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setClip"), //
		jMethod<::jvoid(::java::awt::Shape)>("setClip"), //
		jMethod<::jvoid(::java::awt::Color)>("setColor"), //
		jMethod<::jvoid(::jint)>("setDebugOptions"), //
		jMethod<::jvoid(::java::awt::Color)>("setFlashColor"), //
		jMethod<::jvoid(::jint)>("setFlashCount"), //
		jMethod<::jvoid(::jint)>("setFlashTime"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::io::PrintStream)>("setLogStream"), //
		jMethod<::jvoid()>("setPaintMode"), //
		jMethod<::jvoid(::java::awt::Color)>("setXORMode"), //
		jMethod<::jvoid(::jint, ::jint)>("translate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearRect")] != -1);
		return call<R>("clearRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clipRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clipRect")] != -1);
		return call<R>("clipRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("copyArea")] != -1);
		return call<R>("copyArea", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("create")] != -1);
		return call<R>("create", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto draw3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("draw3DRect")] != -1);
		return call<R>("draw3DRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawArc")] != -1);
		return call<R>("drawArc", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawBytes")] != -1);
		return call<R>("drawBytes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawChars")] != -1);
		return call<R>("drawChars", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto drawImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawImage")] != -1);
		return call<R>("drawImage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawLine")] != -1);
		return call<R>("drawLine", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawOval")] != -1);
		return call<R>("drawOval", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawPolygon")] != -1);
		return call<R>("drawPolygon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawPolyline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawPolyline")] != -1);
		return call<R>("drawPolyline", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawRect")] != -1);
		return call<R>("drawRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawRoundRect")] != -1);
		return call<R>("drawRoundRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drawString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("drawString")] != -1);
		return call<R>("drawString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fill3DRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fill3DRect")] != -1);
		return call<R>("fill3DRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillArc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fillArc")] != -1);
		return call<R>("fillArc", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillOval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fillOval")] != -1);
		return call<R>("fillOval", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillPolygon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fillPolygon")] != -1);
		return call<R>("fillPolygon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fillRect")] != -1);
		return call<R>("fillRect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fillRoundRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fillRoundRect")] != -1);
		return call<R>("fillRoundRect", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto flashColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flashColor")] != -1);
		return scall<R>("flashColor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto flashCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flashCount")] != -1);
		return scall<R>("flashCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto flashTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("flashTime")] != -1);
		return scall<R>("flashTime", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClip")] != -1);
		return call<R>("getClip", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getClipBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClipBounds")] != -1);
		return call<R>("getClipBounds", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDebugOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDebugOptions")] != -1);
		return call<R>("getDebugOptions", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDrawingBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDrawingBuffer")] != -1);
		return call<R>("isDrawingBuffer", forward<Args>(args)...);
	}

	template<typename R = ::java::io::PrintStream, typename... Args>
	static auto logStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("logStream")] != -1);
		return scall<R>("logStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setClip")] != -1);
		return call<R>("setClip", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColor")] != -1);
		return call<R>("setColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDebugOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDebugOptions")] != -1);
		return call<R>("setDebugOptions", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFlashColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFlashColor")] != -1);
		return scall<R>("setFlashColor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFlashCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFlashCount")] != -1);
		return scall<R>("setFlashCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFlashTime(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFlashTime")] != -1);
		return scall<R>("setFlashTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLogStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLogStream")] != -1);
		return scall<R>("setLogStream", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPaintMode")] != -1);
		return call<R>("setPaintMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXORMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setXORMode")] != -1);
		return call<R>("setXORMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto translate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("translate")] != -1);
		return call<R>("translate", forward<Args>(args)...);
	}

};

#endif
