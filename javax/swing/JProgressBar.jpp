#ifndef javax_swing_JProgressBar_HPP
#define javax_swing_JProgressBar_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JProgressBar : public jObject<::javax::swing::JProgressBar, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JProgressBar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::BoundedRangeModel)>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::javax::swing::BoundedRangeModel()>("getModel"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jdouble()>("getPercentComplete"), //
		jMethod<::java::lang::String()>("getString"), //
		jMethod<::javax::swing::plaf::ProgressBarUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("isBorderPainted"), //
		jMethod<::jboolean()>("isIndeterminate"), //
		jMethod<::jboolean()>("isStringPainted"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jboolean)>("setBorderPainted"), //
		jMethod<::jvoid(::jboolean)>("setIndeterminate"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::javax::swing::BoundedRangeModel)>("setModel"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::java::lang::String)>("setString"), //
		jMethod<::jvoid(::jboolean)>("setStringPainted"), //
		jMethod<::jvoid(::javax::swing::plaf::ProgressBarUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::BoundedRangeModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getPercentComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPercentComplete")] != -1);
		return call<R>("getPercentComplete", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ProgressBarUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBorderPainted")] != -1);
		return call<R>("isBorderPainted", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIndeterminate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isIndeterminate")] != -1);
		return call<R>("isIndeterminate", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStringPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStringPainted")] != -1);
		return call<R>("isStringPainted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorderPainted")] != -1);
		return call<R>("setBorderPainted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIndeterminate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIndeterminate")] != -1);
		return call<R>("setIndeterminate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setString")] != -1);
		return call<R>("setString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStringPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStringPainted")] != -1);
		return call<R>("setStringPainted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
