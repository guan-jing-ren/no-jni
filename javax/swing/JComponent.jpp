#ifndef javax_swing_JComponent_HPP
#define javax_swing_JComponent_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JComponent : public jObject<::javax::swing::JComponent, ::java::awt::Container> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JComponent";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("TOOL_TIP_TEXT_KEY"), //
		jField<::jint>("UNDEFINED_CONDITION"), //
		jField<::jint>("WHEN_ANCESTOR_OF_FOCUSED_COMPONENT"), //
		jField<::jint>("WHEN_FOCUSED"), //
		jField<::jint>("WHEN_IN_FOCUSED_WINDOW"), //
	};

	template<typename F = ::java::lang::String>
	static auto TOOL_TIP_TEXT_KEY() {
		static_assert(field_signatures[jField<F>("TOOL_TIP_TEXT_KEY")] != -1);
		return sat<F>("TOOL_TIP_TEXT_KEY");
	}

	template<typename F = ::jint>
	static auto UNDEFINED_CONDITION() {
		static_assert(field_signatures[jField<F>("UNDEFINED_CONDITION")] != -1);
		return sat<F>("UNDEFINED_CONDITION");
	}

	template<typename F = ::jint>
	static auto WHEN_ANCESTOR_OF_FOCUSED_COMPONENT() {
		static_assert(field_signatures[jField<F>("WHEN_ANCESTOR_OF_FOCUSED_COMPONENT")] != -1);
		return sat<F>("WHEN_ANCESTOR_OF_FOCUSED_COMPONENT");
	}

	template<typename F = ::jint>
	static auto WHEN_FOCUSED() {
		static_assert(field_signatures[jField<F>("WHEN_FOCUSED")] != -1);
		return sat<F>("WHEN_FOCUSED");
	}

	template<typename F = ::jint>
	static auto WHEN_IN_FOCUSED_WINDOW() {
		static_assert(field_signatures[jField<F>("WHEN_IN_FOCUSED_WINDOW")] != -1);
		return sat<F>("WHEN_IN_FOCUSED_WINDOW");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::AncestorListener)>("addAncestorListener"), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::jvoid(::java::beans::VetoableChangeListener)>("addVetoableChangeListener"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("computeVisibleRect"), //
		jMethod<::jboolean(::jint, ::jint)>("contains"), //
		jMethod<::javax::swing::JToolTip()>("createToolTip"), //
		jMethod<::jvoid(::java::lang::String, ::jchar, ::jchar)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jint)>("firePropertyChange"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("firePropertyChange"), //
		jMethod<::java::awt::event::ActionListener(::javax::swing::KeyStroke)>("getActionForKeyStroke"), //
		jMethod<::javax::swing::ActionMap()>("getActionMap"), //
		jMethod<::jfloat()>("getAlignmentX"), //
		jMethod<::jfloat()>("getAlignmentY"), //
		jMethod<::javax::swing::event::AncestorListener *()>("getAncestorListeners"), //
		jMethod<::jboolean()>("getAutoscrolls"), //
		jMethod<::jint(::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior()>("getBaselineResizeBehavior"), //
		jMethod<::javax::swing::border::Border()>("getBorder"), //
		jMethod<::java::awt::Rectangle(::java::awt::Rectangle)>("getBounds"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getClientProperty"), //
		jMethod<::javax::swing::JPopupMenu()>("getComponentPopupMenu"), //
		jMethod<::jint(::javax::swing::KeyStroke)>("getConditionForKeyStroke"), //
		jMethod<::jint()>("getDebugGraphicsOptions"), //
		jMethod<::java::util::Locale()>("getDefaultLocale"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jboolean()>("getInheritsPopupMenu"), //
		jMethod<::javax::swing::InputMap()>("getInputMap"), //
		jMethod<::javax::swing::InputMap(::jint)>("getInputMap"), //
		jMethod<::javax::swing::InputVerifier()>("getInputVerifier"), //
		jMethod<::java::awt::Insets()>("getInsets"), //
		jMethod<::java::awt::Insets(::java::awt::Insets)>("getInsets"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::awt::Point(::java::awt::Point)>("getLocation"), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Point(::java::awt::event::MouseEvent)>("getPopupLocation"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::javax::swing::KeyStroke *()>("getRegisteredKeyStrokes"), //
		jMethod<::javax::swing::JRootPane()>("getRootPane"), //
		jMethod<::java::awt::Dimension(::java::awt::Dimension)>("getSize"), //
		jMethod<::java::awt::Point(::java::awt::event::MouseEvent)>("getToolTipLocation"), //
		jMethod<::java::lang::String()>("getToolTipText"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::java::awt::Container()>("getTopLevelAncestor"), //
		jMethod<::javax::swing::TransferHandler()>("getTransferHandler"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("getVerifyInputWhenFocusTarget"), //
		jMethod<::java::beans::VetoableChangeListener *()>("getVetoableChangeListeners"), //
		jMethod<::java::awt::Rectangle()>("getVisibleRect"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jint()>("getX"), //
		jMethod<::jint()>("getY"), //
		jMethod<::jvoid()>("grabFocus"), //
		jMethod<::jboolean()>("isDoubleBuffered"), //
		jMethod<::jboolean(::java::awt::Component)>("isLightweightComponent"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jboolean()>("isOptimizedDrawingEnabled"), //
		jMethod<::jboolean()>("isPaintingForPrint"), //
		jMethod<::jboolean()>("isPaintingTile"), //
		jMethod<::jboolean()>("isRequestFocusEnabled"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("paintImmediately"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("paintImmediately"), //
		jMethod<::jvoid(::java::awt::Graphics)>("print"), //
		jMethod<::jvoid(::java::awt::Graphics)>("printAll"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("putClientProperty"), //
		jMethod<::jvoid(::java::awt::event::ActionListener, ::java::lang::String, ::javax::swing::KeyStroke, ::jint)>("registerKeyboardAction"), //
		jMethod<::jvoid(::java::awt::event::ActionListener, ::javax::swing::KeyStroke, ::jint)>("registerKeyboardAction"), //
		jMethod<::jvoid(::javax::swing::event::AncestorListener)>("removeAncestorListener"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::beans::VetoableChangeListener)>("removeVetoableChangeListener"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("repaint"), //
		jMethod<::jvoid()>("requestFocus"), //
		jMethod<::jboolean(::jboolean)>("requestFocus"), //
		jMethod<::jboolean()>("requestFocusInWindow"), //
		jMethod<::jvoid()>("resetKeyboardActions"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("scrollRectToVisible"), //
		jMethod<::jvoid(::javax::swing::ActionMap)>("setActionMap"), //
		jMethod<::jvoid(::jfloat)>("setAlignmentX"), //
		jMethod<::jvoid(::jfloat)>("setAlignmentY"), //
		jMethod<::jvoid(::jboolean)>("setAutoscrolls"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
		jMethod<::jvoid(::javax::swing::JPopupMenu)>("setComponentPopupMenu"), //
		jMethod<::jvoid(::jint)>("setDebugGraphicsOptions"), //
		jMethod<::jvoid(::java::util::Locale)>("setDefaultLocale"), //
		jMethod<::jvoid(::jboolean)>("setDoubleBuffered"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint, ::java::util::Set)>("setFocusTraversalKeys"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::jboolean)>("setInheritsPopupMenu"), //
		jMethod<::jvoid(::jint, ::javax::swing::InputMap)>("setInputMap"), //
		jMethod<::jvoid(::javax::swing::InputVerifier)>("setInputVerifier"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setMaximumSize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setMinimumSize"), //
		jMethod<::jvoid(::jboolean)>("setOpaque"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setPreferredSize"), //
		jMethod<::jvoid(::jboolean)>("setRequestFocusEnabled"), //
		jMethod<::jvoid(::java::lang::String)>("setToolTipText"), //
		jMethod<::jvoid(::javax::swing::TransferHandler)>("setTransferHandler"), //
		jMethod<::jvoid(::jboolean)>("setVerifyInputWhenFocusTarget"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::javax::swing::KeyStroke)>("unregisterKeyboardAction"), //
		jMethod<::jvoid(::java::awt::Graphics)>("update"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAncestorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAncestorListener")] != -1);
		return call<R>("addAncestorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addVetoableChangeListener")] != -1);
		return call<R>("addVetoableChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto computeVisibleRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeVisibleRect")] != -1);
		return call<R>("computeVisibleRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JToolTip, typename... Args>
	auto createToolTip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createToolTip")] != -1);
		return call<R>("createToolTip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener, typename... Args>
	auto getActionForKeyStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionForKeyStroke")] != -1);
		return call<R>("getActionForKeyStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ActionMap, typename... Args>
	auto getActionMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionMap")] != -1);
		return call<R>("getActionMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignmentX")] != -1);
		return call<R>("getAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignmentY")] != -1);
		return call<R>("getAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::AncestorListener *, typename... Args>
	auto getAncestorListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAncestorListeners")] != -1);
		return call<R>("getAncestorListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAutoscrolls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAutoscrolls")] != -1);
		return call<R>("getAutoscrolls", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getClientProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientProperty")] != -1);
		return call<R>("getClientProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPopupMenu, typename... Args>
	auto getComponentPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentPopupMenu")] != -1);
		return call<R>("getComponentPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConditionForKeyStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConditionForKeyStroke")] != -1);
		return call<R>("getConditionForKeyStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDebugGraphicsOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDebugGraphicsOptions")] != -1);
		return call<R>("getDebugGraphicsOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	static auto getDefaultLocale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultLocale")] != -1);
		return scall<R>("getDefaultLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInheritsPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInheritsPopupMenu")] != -1);
		return call<R>("getInheritsPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::InputMap, typename... Args>
	auto getInputMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMap")] != -1);
		return call<R>("getInputMap", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::InputVerifier, typename... Args>
	auto getInputVerifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputVerifier")] != -1);
		return call<R>("getInputVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getPopupLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPopupLocation")] != -1);
		return call<R>("getPopupLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::KeyStroke *, typename... Args>
	auto getRegisteredKeyStrokes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegisteredKeyStrokes")] != -1);
		return call<R>("getRegisteredKeyStrokes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	auto getRootPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPane")] != -1);
		return call<R>("getRootPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getToolTipLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipLocation")] != -1);
		return call<R>("getToolTipLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getTopLevelAncestor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLevelAncestor")] != -1);
		return call<R>("getTopLevelAncestor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::TransferHandler, typename... Args>
	auto getTransferHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferHandler")] != -1);
		return call<R>("getTransferHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getVerifyInputWhenFocusTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerifyInputWhenFocusTarget")] != -1);
		return call<R>("getVerifyInputWhenFocusTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::VetoableChangeListener *, typename... Args>
	auto getVetoableChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVetoableChangeListeners")] != -1);
		return call<R>("getVetoableChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getVisibleRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleRect")] != -1);
		return call<R>("getVisibleRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto grabFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("grabFocus")] != -1);
		return call<R>("grabFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDoubleBuffered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDoubleBuffered")] != -1);
		return call<R>("isDoubleBuffered", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLightweightComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLightweightComponent")] != -1);
		return scall<R>("isLightweightComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOptimizedDrawingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOptimizedDrawingEnabled")] != -1);
		return call<R>("isOptimizedDrawingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPaintingForPrint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPaintingForPrint")] != -1);
		return call<R>("isPaintingForPrint", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPaintingTile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPaintingTile")] != -1);
		return call<R>("isPaintingTile", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRequestFocusEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRequestFocusEnabled")] != -1);
		return call<R>("isRequestFocusEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintImmediately(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintImmediately")] != -1);
		return call<R>("paintImmediately", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printAll")] != -1);
		return call<R>("printAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putClientProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putClientProperty")] != -1);
		return call<R>("putClientProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerKeyboardAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerKeyboardAction")] != -1);
		return call<R>("registerKeyboardAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAncestorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAncestorListener")] != -1);
		return call<R>("removeAncestorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeVetoableChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeVetoableChangeListener")] != -1);
		return call<R>("removeVetoableChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto requestFocusInWindow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestFocusInWindow")] != -1);
		return call<R>("requestFocusInWindow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetKeyboardActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetKeyboardActions")] != -1);
		return call<R>("resetKeyboardActions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollRectToVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollRectToVisible")] != -1);
		return call<R>("scrollRectToVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActionMap")] != -1);
		return call<R>("setActionMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignmentX")] != -1);
		return call<R>("setAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlignmentY")] != -1);
		return call<R>("setAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoscrolls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoscrolls")] != -1);
		return call<R>("setAutoscrolls", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentPopupMenu")] != -1);
		return call<R>("setComponentPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDebugGraphicsOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDebugGraphicsOptions")] != -1);
		return call<R>("setDebugGraphicsOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultLocale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultLocale")] != -1);
		return scall<R>("setDefaultLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDoubleBuffered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDoubleBuffered")] != -1);
		return call<R>("setDoubleBuffered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusTraversalKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusTraversalKeys")] != -1);
		return call<R>("setFocusTraversalKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInheritsPopupMenu(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInheritsPopupMenu")] != -1);
		return call<R>("setInheritsPopupMenu", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputMap")] != -1);
		return call<R>("setInputMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputVerifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputVerifier")] != -1);
		return call<R>("setInputVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximumSize")] != -1);
		return call<R>("setMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimumSize")] != -1);
		return call<R>("setMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOpaque")] != -1);
		return call<R>("setOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPreferredSize")] != -1);
		return call<R>("setPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestFocusEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestFocusEnabled")] != -1);
		return call<R>("setRequestFocusEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipText")] != -1);
		return call<R>("setToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransferHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransferHandler")] != -1);
		return call<R>("setTransferHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerifyInputWhenFocusTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerifyInputWhenFocusTarget")] != -1);
		return call<R>("setVerifyInputWhenFocusTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterKeyboardAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterKeyboardAction")] != -1);
		return call<R>("unregisterKeyboardAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
