#ifndef javax_swing_JTabbedPane_HPP
#define javax_swing_JTabbedPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTabbedPane : public jObject<::javax::swing::JTabbedPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTabbedPane";

	constexpr static Enume field_signatures{
		jField<::jint>("BOTTOM"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("NEXT"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTH_EAST"), //
		jField<::jint>("NORTH_WEST"), //
		jField<::jint>("PREVIOUS"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SCROLL_TAB_LAYOUT"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTH_EAST"), //
		jField<::jint>("SOUTH_WEST"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
		jField<::jint>("WRAP_TAB_LAYOUT"), //
	};

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto NEXT() {
		static_assert(field_signatures[jField<F>("NEXT")] != -1);
		return sat<F>("NEXT");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTH_EAST() {
		static_assert(field_signatures[jField<F>("NORTH_EAST")] != -1);
		return sat<F>("NORTH_EAST");
	}

	template<typename F = ::jint>
	static auto NORTH_WEST() {
		static_assert(field_signatures[jField<F>("NORTH_WEST")] != -1);
		return sat<F>("NORTH_WEST");
	}

	template<typename F = ::jint>
	static auto PREVIOUS() {
		static_assert(field_signatures[jField<F>("PREVIOUS")] != -1);
		return sat<F>("PREVIOUS");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SCROLL_TAB_LAYOUT() {
		static_assert(field_signatures[jField<F>("SCROLL_TAB_LAYOUT")] != -1);
		return sat<F>("SCROLL_TAB_LAYOUT");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTH_EAST() {
		static_assert(field_signatures[jField<F>("SOUTH_EAST")] != -1);
		return sat<F>("SOUTH_EAST");
	}

	template<typename F = ::jint>
	static auto SOUTH_WEST() {
		static_assert(field_signatures[jField<F>("SOUTH_WEST")] != -1);
		return sat<F>("SOUTH_WEST");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	template<typename F = ::jint>
	static auto WRAP_TAB_LAYOUT() {
		static_assert(field_signatures[jField<F>("WRAP_TAB_LAYOUT")] != -1);
		return sat<F>("WRAP_TAB_LAYOUT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::java::awt::Component(::java::awt::Component)>("add"), //
		jMethod<::java::awt::Component(::java::awt::Component, ::jint)>("add"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("add"), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object, ::jint)>("add"), //
		jMethod<::java::awt::Component(::java::lang::String, ::java::awt::Component)>("add"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addTab"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::Icon, ::java::awt::Component)>("addTab"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::Icon, ::java::awt::Component, ::java::lang::String)>("addTab"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Color(::jint)>("getBackgroundAt"), //
		jMethod<::java::awt::Rectangle(::jint)>("getBoundsAt"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::java::awt::Component(::jint)>("getComponentAt"), //
		jMethod<::javax::swing::Icon(::jint)>("getDisabledIconAt"), //
		jMethod<::jint(::jint)>("getDisplayedMnemonicIndexAt"), //
		jMethod<::java::awt::Color(::jint)>("getForegroundAt"), //
		jMethod<::javax::swing::Icon(::jint)>("getIconAt"), //
		jMethod<::jint(::jint)>("getMnemonicAt"), //
		jMethod<::javax::swing::SingleSelectionModel()>("getModel"), //
		jMethod<::java::awt::Component()>("getSelectedComponent"), //
		jMethod<::jint()>("getSelectedIndex"), //
		jMethod<::java::awt::Component(::jint)>("getTabComponentAt"), //
		jMethod<::jint()>("getTabCount"), //
		jMethod<::jint()>("getTabLayoutPolicy"), //
		jMethod<::jint()>("getTabPlacement"), //
		jMethod<::jint()>("getTabRunCount"), //
		jMethod<::java::lang::String(::jint)>("getTitleAt"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::java::lang::String(::jint)>("getToolTipTextAt"), //
		jMethod<::javax::swing::plaf::TabbedPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint(::jint, ::jint)>("indexAtLocation"), //
		jMethod<::jint(::java::awt::Component)>("indexOfComponent"), //
		jMethod<::jint(::java::lang::String)>("indexOfTab"), //
		jMethod<::jint(::javax::swing::Icon)>("indexOfTab"), //
		jMethod<::jint(::java::awt::Component)>("indexOfTabComponent"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::Icon, ::java::awt::Component, ::java::lang::String, ::jint)>("insertTab"), //
		jMethod<::jboolean(::jint)>("isEnabledAt"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jint)>("removeTabAt"), //
		jMethod<::jvoid(::jint, ::java::awt::Color)>("setBackgroundAt"), //
		jMethod<::jvoid(::jint, ::java::awt::Component)>("setComponentAt"), //
		jMethod<::jvoid(::jint, ::javax::swing::Icon)>("setDisabledIconAt"), //
		jMethod<::jvoid(::jint, ::jint)>("setDisplayedMnemonicIndexAt"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setEnabledAt"), //
		jMethod<::jvoid(::jint, ::java::awt::Color)>("setForegroundAt"), //
		jMethod<::jvoid(::jint, ::javax::swing::Icon)>("setIconAt"), //
		jMethod<::jvoid(::jint, ::jint)>("setMnemonicAt"), //
		jMethod<::jvoid(::javax::swing::SingleSelectionModel)>("setModel"), //
		jMethod<::jvoid(::java::awt::Component)>("setSelectedComponent"), //
		jMethod<::jvoid(::jint)>("setSelectedIndex"), //
		jMethod<::jvoid(::jint, ::java::awt::Component)>("setTabComponentAt"), //
		jMethod<::jvoid(::jint)>("setTabLayoutPolicy"), //
		jMethod<::jvoid(::jint)>("setTabPlacement"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setTitleAt"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setToolTipTextAt"), //
		jMethod<::jvoid(::javax::swing::plaf::TabbedPaneUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTab(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTab")] != -1);
		return call<R>("addTab", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackgroundAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackgroundAt")] != -1);
		return call<R>("getBackgroundAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBoundsAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoundsAt")] != -1);
		return call<R>("getBoundsAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentAt")] != -1);
		return call<R>("getComponentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIconAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledIconAt")] != -1);
		return call<R>("getDisabledIconAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonicIndexAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayedMnemonicIndexAt")] != -1);
		return call<R>("getDisplayedMnemonicIndexAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForegroundAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForegroundAt")] != -1);
		return call<R>("getForegroundAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIconAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconAt")] != -1);
		return call<R>("getIconAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMnemonicAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMnemonicAt")] != -1);
		return call<R>("getMnemonicAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SingleSelectionModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getSelectedComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedComponent")] != -1);
		return call<R>("getSelectedComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIndex")] != -1);
		return call<R>("getSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTabComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabComponentAt")] != -1);
		return call<R>("getTabComponentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabCount")] != -1);
		return call<R>("getTabCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabLayoutPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabLayoutPolicy")] != -1);
		return call<R>("getTabLayoutPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabPlacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabPlacement")] != -1);
		return call<R>("getTabPlacement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabRunCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabRunCount")] != -1);
		return call<R>("getTabRunCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitleAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitleAt")] != -1);
		return call<R>("getTitleAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipTextAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipTextAt")] != -1);
		return call<R>("getToolTipTextAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::TabbedPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexAtLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexAtLocation")] != -1);
		return call<R>("indexAtLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOfComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOfComponent")] != -1);
		return call<R>("indexOfComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOfTab(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOfTab")] != -1);
		return call<R>("indexOfTab", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOfTabComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOfTabComponent")] != -1);
		return call<R>("indexOfTabComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertTab(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertTab")] != -1);
		return call<R>("insertTab", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabledAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabledAt")] != -1);
		return call<R>("isEnabledAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTabAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTabAt")] != -1);
		return call<R>("removeTabAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackgroundAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackgroundAt")] != -1);
		return call<R>("setBackgroundAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentAt")] != -1);
		return call<R>("setComponentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledIconAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabledIconAt")] != -1);
		return call<R>("setDisabledIconAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonicIndexAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayedMnemonicIndexAt")] != -1);
		return call<R>("setDisplayedMnemonicIndexAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabledAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabledAt")] != -1);
		return call<R>("setEnabledAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForegroundAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForegroundAt")] != -1);
		return call<R>("setForegroundAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconAt")] != -1);
		return call<R>("setIconAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMnemonicAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMnemonicAt")] != -1);
		return call<R>("setMnemonicAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedComponent")] != -1);
		return call<R>("setSelectedComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedIndex")] != -1);
		return call<R>("setSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabComponentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabComponentAt")] != -1);
		return call<R>("setTabComponentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabLayoutPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabLayoutPolicy")] != -1);
		return call<R>("setTabLayoutPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTabPlacement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTabPlacement")] != -1);
		return call<R>("setTabPlacement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitleAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitleAt")] != -1);
		return call<R>("setTitleAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToolTipTextAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToolTipTextAt")] != -1);
		return call<R>("setToolTipTextAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
