#ifndef javax_swing_Box_HPP
#define javax_swing_Box_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::Box : public jObject<::javax::swing::Box, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "Box";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::java::awt::Component()>("createGlue"), //
		jMethod<::javax::swing::Box()>("createHorizontalBox"), //
		jMethod<::java::awt::Component()>("createHorizontalGlue"), //
		jMethod<::java::awt::Component(::jint)>("createHorizontalStrut"), //
		jMethod<::java::awt::Component(::java::awt::Dimension)>("createRigidArea"), //
		jMethod<::javax::swing::Box()>("createVerticalBox"), //
		jMethod<::java::awt::Component()>("createVerticalGlue"), //
		jMethod<::java::awt::Component(::jint)>("createVerticalStrut"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
	};

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createGlue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createGlue")] != -1);
		return scall<R>("createGlue", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Box, typename... Args>
	static auto createHorizontalBox(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHorizontalBox")] != -1);
		return scall<R>("createHorizontalBox", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createHorizontalGlue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHorizontalGlue")] != -1);
		return scall<R>("createHorizontalGlue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createHorizontalStrut(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHorizontalStrut")] != -1);
		return scall<R>("createHorizontalStrut", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createRigidArea(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRigidArea")] != -1);
		return scall<R>("createRigidArea", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Box, typename... Args>
	static auto createVerticalBox(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVerticalBox")] != -1);
		return scall<R>("createVerticalBox", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createVerticalGlue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVerticalGlue")] != -1);
		return scall<R>("createVerticalGlue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto createVerticalStrut(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVerticalStrut")] != -1);
		return scall<R>("createVerticalStrut", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

};

#endif
