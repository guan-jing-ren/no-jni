#ifndef javax_swing_ScrollPaneLayout_HPP
#define javax_swing_ScrollPaneLayout_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ScrollPaneLayout : public jObject<::javax::swing::ScrollPaneLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ScrollPaneLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::javax::swing::JViewport()>("getColumnHeader"), //
		jMethod<::java::awt::Component(::java::lang::String)>("getCorner"), //
		jMethod<::javax::swing::JScrollBar()>("getHorizontalScrollBar"), //
		jMethod<::jint()>("getHorizontalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getRowHeader"), //
		jMethod<::javax::swing::JScrollBar()>("getVerticalScrollBar"), //
		jMethod<::jint()>("getVerticalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getViewport"), //
		jMethod<::java::awt::Rectangle(::javax::swing::JScrollPane)>("getViewportBorderBounds"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::jint)>("setHorizontalScrollBarPolicy"), //
		jMethod<::jvoid(::jint)>("setVerticalScrollBarPolicy"), //
		jMethod<::jvoid(::javax::swing::JScrollPane)>("syncWithScrollPane"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnHeader")] != -1);
		return call<R>("getColumnHeader", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getCorner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCorner")] != -1);
		return call<R>("getCorner", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getHorizontalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHorizontalScrollBar")] != -1);
		return call<R>("getHorizontalScrollBar", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHorizontalScrollBarPolicy")] != -1);
		return call<R>("getHorizontalScrollBarPolicy", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowHeader")] != -1);
		return call<R>("getRowHeader", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getVerticalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVerticalScrollBar")] != -1);
		return call<R>("getVerticalScrollBar", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVerticalScrollBarPolicy")] != -1);
		return call<R>("getVerticalScrollBarPolicy", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getViewport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewport")] != -1);
		return call<R>("getViewport", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getViewportBorderBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewportBorderBounds")] != -1);
		return call<R>("getViewportBorderBounds", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHorizontalScrollBarPolicy")] != -1);
		return call<R>("setHorizontalScrollBarPolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVerticalScrollBarPolicy")] != -1);
		return call<R>("setVerticalScrollBarPolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto syncWithScrollPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("syncWithScrollPane")] != -1);
		return call<R>("syncWithScrollPane", forward<Args>(args)...);
	}

};

#endif
