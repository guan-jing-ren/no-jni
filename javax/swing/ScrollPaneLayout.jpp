#ifndef javax_swing_ScrollPaneLayout_HPP
#define javax_swing_ScrollPaneLayout_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ScrollPaneLayout : public jObject<::javax::swing::ScrollPaneLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ScrollPaneLayout";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("COLUMN_HEADER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("LOWER_LEADING_CORNER"), //
		jField<::java::lang::String>("LOWER_LEFT_CORNER"), //
		jField<::java::lang::String>("LOWER_RIGHT_CORNER"), //
		jField<::java::lang::String>("LOWER_TRAILING_CORNER"), //
		jField<::java::lang::String>("ROW_HEADER"), //
		jField<::java::lang::String>("UPPER_LEADING_CORNER"), //
		jField<::java::lang::String>("UPPER_LEFT_CORNER"), //
		jField<::java::lang::String>("UPPER_RIGHT_CORNER"), //
		jField<::java::lang::String>("UPPER_TRAILING_CORNER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR"), //
		jField<::jint>("VERTICAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("VERTICAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("VERTICAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("VIEWPORT"), //
	};

	template<typename F = ::java::lang::String>
	static auto COLUMN_HEADER() {
		static_assert(field_signatures[jField<F>("COLUMN_HEADER")] != -1);
		return sat<F>("COLUMN_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEADING_CORNER")] != -1);
		return sat<F>("LOWER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEFT_CORNER")] != -1);
		return sat<F>("LOWER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_RIGHT_CORNER")] != -1);
		return sat<F>("LOWER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_TRAILING_CORNER")] != -1);
		return sat<F>("LOWER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto ROW_HEADER() {
		static_assert(field_signatures[jField<F>("ROW_HEADER")] != -1);
		return sat<F>("ROW_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEADING_CORNER")] != -1);
		return sat<F>("UPPER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEFT_CORNER")] != -1);
		return sat<F>("UPPER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_RIGHT_CORNER")] != -1);
		return sat<F>("UPPER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_TRAILING_CORNER")] != -1);
		return sat<F>("UPPER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto VIEWPORT() {
		static_assert(field_signatures[jField<F>("VIEWPORT")] != -1);
		return sat<F>("VIEWPORT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::javax::swing::JViewport()>("getColumnHeader"), //
		jMethod<::java::awt::Component(::java::lang::String)>("getCorner"), //
		jMethod<::javax::swing::JScrollBar()>("getHorizontalScrollBar"), //
		jMethod<::jint()>("getHorizontalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getRowHeader"), //
		jMethod<::javax::swing::JScrollBar()>("getVerticalScrollBar"), //
		jMethod<::jint()>("getVerticalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getViewport"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
		jMethod<::jvoid(::jint)>("setHorizontalScrollBarPolicy"), //
		jMethod<::jvoid(::jint)>("setVerticalScrollBarPolicy"), //
		jMethod<::jvoid(::javax::swing::JScrollPane)>("syncWithScrollPane"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnHeader")] != -1);
		return call<R>("getColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getCorner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCorner")] != -1);
		return call<R>("getCorner", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getHorizontalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalScrollBar")] != -1);
		return call<R>("getHorizontalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalScrollBarPolicy")] != -1);
		return call<R>("getHorizontalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeader")] != -1);
		return call<R>("getRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getVerticalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalScrollBar")] != -1);
		return call<R>("getVerticalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalScrollBarPolicy")] != -1);
		return call<R>("getVerticalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getViewport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewport")] != -1);
		return call<R>("getViewport", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalScrollBarPolicy")] != -1);
		return call<R>("setHorizontalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalScrollBarPolicy")] != -1);
		return call<R>("setVerticalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto syncWithScrollPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("syncWithScrollPane")] != -1);
		return call<R>("syncWithScrollPane", std::forward<Args>(args)...);
	}

};

#endif
