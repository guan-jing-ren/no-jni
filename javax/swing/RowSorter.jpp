#ifndef javax_swing_RowSorter_HPP
#define javax_swing_RowSorter_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RowSorter : public jObject<::javax::swing::RowSorter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RowSorter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::RowSorterListener)>("addRowSorterListener"), //
		jMethod<::jvoid()>("allRowsChanged"), //
		jMethod<::jint(::jint)>("convertRowIndexToModel"), //
		jMethod<::jint(::jint)>("convertRowIndexToView"), //
		jMethod<::java::lang::Object()>("getModel"), //
		jMethod<::jint()>("getModelRowCount"), //
		jMethod<::java::util::List()>("getSortKeys"), //
		jMethod<::jint()>("getViewRowCount"), //
		jMethod<::jvoid()>("modelStructureChanged"), //
		jMethod<::jvoid(::javax::swing::event::RowSorterListener)>("removeRowSorterListener"), //
		jMethod<::jvoid(::jint, ::jint)>("rowsDeleted"), //
		jMethod<::jvoid(::jint, ::jint)>("rowsInserted"), //
		jMethod<::jvoid(::jint, ::jint)>("rowsUpdated"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("rowsUpdated"), //
		jMethod<::jvoid(::java::util::List)>("setSortKeys"), //
		jMethod<::jvoid(::jint)>("toggleSortOrder"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRowSorterListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRowSorterListener")] != -1);
		return call<R>("addRowSorterListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto allRowsChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("allRowsChanged")] != -1);
		return call<R>("allRowsChanged", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertRowIndexToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertRowIndexToModel")] != -1);
		return call<R>("convertRowIndexToModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto convertRowIndexToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("convertRowIndexToView")] != -1);
		return call<R>("convertRowIndexToView", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModelRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModelRowCount")] != -1);
		return call<R>("getModelRowCount", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getSortKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSortKeys")] != -1);
		return call<R>("getSortKeys", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewRowCount")] != -1);
		return call<R>("getViewRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modelStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelStructureChanged")] != -1);
		return call<R>("modelStructureChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRowSorterListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeRowSorterListener")] != -1);
		return call<R>("removeRowSorterListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rowsDeleted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rowsDeleted")] != -1);
		return call<R>("rowsDeleted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rowsInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rowsInserted")] != -1);
		return call<R>("rowsInserted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rowsUpdated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rowsUpdated")] != -1);
		return call<R>("rowsUpdated", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSortKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSortKeys")] != -1);
		return call<R>("setSortKeys", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto toggleSortOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toggleSortOrder")] != -1);
		return call<R>("toggleSortOrder", forward<Args>(args)...);
	}

};

#endif
