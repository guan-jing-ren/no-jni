#ifndef javax_swing_OverlayLayout_HPP
#define javax_swing_OverlayLayout_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::OverlayLayout : public jObject<::javax::swing::OverlayLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "OverlayLayout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Container)>(), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("addLayoutComponent"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentX"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentY"), //
		jMethod<::java::awt::Container()>("getTarget"), //
		jMethod<::jvoid(::java::awt::Container)>("invalidateLayout"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("maximumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayoutAlignmentX")] != -1);
		return call<R>("getLayoutAlignmentX", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayoutAlignmentY")] != -1);
		return call<R>("getLayoutAlignmentY", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invalidateLayout")] != -1);
		return call<R>("invalidateLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto maximumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("maximumLayoutSize")] != -1);
		return call<R>("maximumLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", forward<Args>(args)...);
	}

};

#endif
