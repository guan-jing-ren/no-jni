#ifndef javax_swing_RowSorter$SortKey_HPP
#define javax_swing_RowSorter$SortKey_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RowSorter$SortKey : public jObject<::javax::swing::RowSorter$SortKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RowSorter$SortKey";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::javax::swing::SortOrder)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getColumn"), //
		jMethod<::javax::swing::SortOrder()>("getSortOrder"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SortOrder, typename... Args>
	auto getSortOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSortOrder")] != -1);
		return call<R>("getSortOrder", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

};

#endif
