#ifndef javax_swing_JComboBox_HPP
#define javax_swing_JComboBox_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JComboBox : public jObject<::javax::swing::JComboBox, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JComboBox";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Vector)>(), //
		jConstructor<::jvoid(::javax::swing::ComboBoxModel)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::java::lang::Object)>("addItem"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::jvoid(::javax::swing::event::PopupMenuListener)>("addPopupMenuListener"), //
		jMethod<::jvoid(::javax::swing::ComboBoxEditor, ::java::lang::Object)>("configureEditor"), //
		jMethod<::jvoid(::javax::swing::event::ListDataEvent)>("contentsChanged"), //
		jMethod<::jvoid()>("firePopupMenuCanceled"), //
		jMethod<::jvoid()>("firePopupMenuWillBecomeInvisible"), //
		jMethod<::jvoid()>("firePopupMenuWillBecomeVisible"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Action()>("getAction"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::javax::swing::ComboBoxEditor()>("getEditor"), //
		jMethod<::java::lang::Object(::jint)>("getItemAt"), //
		jMethod<::jint()>("getItemCount"), //
		jMethod<::java::awt::event::ItemListener *()>("getItemListeners"), //
		jMethod<::javax::swing::JComboBox$KeySelectionManager()>("getKeySelectionManager"), //
		jMethod<::jint()>("getMaximumRowCount"), //
		jMethod<::javax::swing::ComboBoxModel()>("getModel"), //
		jMethod<::javax::swing::event::PopupMenuListener *()>("getPopupMenuListeners"), //
		jMethod<::java::lang::Object()>("getPrototypeDisplayValue"), //
		jMethod<::javax::swing::ListCellRenderer()>("getRenderer"), //
		jMethod<::jint()>("getSelectedIndex"), //
		jMethod<::java::lang::Object()>("getSelectedItem"), //
		jMethod<::java::lang::Object *()>("getSelectedObjects"), //
		jMethod<::javax::swing::plaf::ComboBoxUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid()>("hidePopup"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("insertItemAt"), //
		jMethod<::jvoid(::javax::swing::event::ListDataEvent)>("intervalAdded"), //
		jMethod<::jvoid(::javax::swing::event::ListDataEvent)>("intervalRemoved"), //
		jMethod<::jboolean()>("isEditable"), //
		jMethod<::jboolean()>("isLightWeightPopupEnabled"), //
		jMethod<::jboolean()>("isPopupVisible"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid()>("removeAllItems"), //
		jMethod<::jvoid(::java::lang::Object)>("removeItem"), //
		jMethod<::jvoid(::jint)>("removeItemAt"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid(::javax::swing::event::PopupMenuListener)>("removePopupMenuListener"), //
		jMethod<::jboolean(::jchar)>("selectWithKeyChar"), //
		jMethod<::jvoid(::javax::swing::Action)>("setAction"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::javax::swing::ComboBoxEditor)>("setEditor"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::javax::swing::JComboBox$KeySelectionManager)>("setKeySelectionManager"), //
		jMethod<::jvoid(::jboolean)>("setLightWeightPopupEnabled"), //
		jMethod<::jvoid(::jint)>("setMaximumRowCount"), //
		jMethod<::jvoid(::javax::swing::ComboBoxModel)>("setModel"), //
		jMethod<::jvoid(::jboolean)>("setPopupVisible"), //
		jMethod<::jvoid(::java::lang::Object)>("setPrototypeDisplayValue"), //
		jMethod<::jvoid(::javax::swing::ListCellRenderer)>("setRenderer"), //
		jMethod<::jvoid(::jint)>("setSelectedIndex"), //
		jMethod<::jvoid(::java::lang::Object)>("setSelectedItem"), //
		jMethod<::jvoid(::javax::swing::plaf::ComboBoxUI)>("setUI"), //
		jMethod<::jvoid()>("showPopup"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItem")] != -1);
		return call<R>("addItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPopupMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPopupMenuListener")] != -1);
		return call<R>("addPopupMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto configureEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("configureEditor")] != -1);
		return call<R>("configureEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto contentsChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contentsChanged")] != -1);
		return call<R>("contentsChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePopupMenuCanceled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePopupMenuCanceled")] != -1);
		return call<R>("firePopupMenuCanceled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePopupMenuWillBecomeInvisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePopupMenuWillBecomeInvisible")] != -1);
		return call<R>("firePopupMenuWillBecomeInvisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePopupMenuWillBecomeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePopupMenuWillBecomeVisible")] != -1);
		return call<R>("firePopupMenuWillBecomeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ComboBoxEditor, typename... Args>
	auto getEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditor")] != -1);
		return call<R>("getEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getItemAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemAt")] != -1);
		return call<R>("getItemAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getItemCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemCount")] != -1);
		return call<R>("getItemCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ItemListener *, typename... Args>
	auto getItemListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemListeners")] != -1);
		return call<R>("getItemListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComboBox$KeySelectionManager, typename... Args>
	auto getKeySelectionManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeySelectionManager")] != -1);
		return call<R>("getKeySelectionManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumRowCount")] != -1);
		return call<R>("getMaximumRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ComboBoxModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::PopupMenuListener *, typename... Args>
	auto getPopupMenuListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPopupMenuListeners")] != -1);
		return call<R>("getPopupMenuListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPrototypeDisplayValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrototypeDisplayValue")] != -1);
		return call<R>("getPrototypeDisplayValue", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListCellRenderer, typename... Args>
	auto getRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenderer")] != -1);
		return call<R>("getRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIndex")] != -1);
		return call<R>("getSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSelectedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedItem")] != -1);
		return call<R>("getSelectedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedObjects")] != -1);
		return call<R>("getSelectedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComboBoxUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hidePopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hidePopup")] != -1);
		return call<R>("hidePopup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertItemAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertItemAt")] != -1);
		return call<R>("insertItemAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intervalAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intervalAdded")] != -1);
		return call<R>("intervalAdded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto intervalRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intervalRemoved")] != -1);
		return call<R>("intervalRemoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditable")] != -1);
		return call<R>("isEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLightWeightPopupEnabled")] != -1);
		return call<R>("isLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPopupVisible")] != -1);
		return call<R>("isPopupVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllItems(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllItems")] != -1);
		return call<R>("removeAllItems", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItem")] != -1);
		return call<R>("removeItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemAt")] != -1);
		return call<R>("removeItemAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePopupMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePopupMenuListener")] != -1);
		return call<R>("removePopupMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto selectWithKeyChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectWithKeyChar")] != -1);
		return call<R>("selectWithKeyChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAction")] != -1);
		return call<R>("setAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditor")] != -1);
		return call<R>("setEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeySelectionManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeySelectionManager")] != -1);
		return call<R>("setKeySelectionManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLightWeightPopupEnabled")] != -1);
		return call<R>("setLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximumRowCount")] != -1);
		return call<R>("setMaximumRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPopupVisible")] != -1);
		return call<R>("setPopupVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrototypeDisplayValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrototypeDisplayValue")] != -1);
		return call<R>("setPrototypeDisplayValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRenderer")] != -1);
		return call<R>("setRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedIndex")] != -1);
		return call<R>("setSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedItem(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedItem")] != -1);
		return call<R>("setSelectedItem", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showPopup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showPopup")] != -1);
		return call<R>("showPopup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
