#ifndef javax_swing_border_TitledBorder_HPP
#define javax_swing_border_TitledBorder_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::border::TitledBorder : public jObject<::javax::swing::border::TitledBorder, ::javax::swing::border::AbstractBorder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_border / "TitledBorder";

	constexpr static Enume field_signatures{
		jField<::jint>("ABOVE_BOTTOM"), //
		jField<::jint>("ABOVE_TOP"), //
		jField<::jint>("BELOW_BOTTOM"), //
		jField<::jint>("BELOW_TOP"), //
		jField<::jint>("BOTTOM"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("DEFAULT_JUSTIFICATION"), //
		jField<::jint>("DEFAULT_POSITION"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
	};

	template<typename F = ::jint>
	static auto ABOVE_BOTTOM() {
		static_assert(field_signatures[jField<F>("ABOVE_BOTTOM")] != -1);
		return sat<F>("ABOVE_BOTTOM");
	}

	template<typename F = ::jint>
	static auto ABOVE_TOP() {
		static_assert(field_signatures[jField<F>("ABOVE_TOP")] != -1);
		return sat<F>("ABOVE_TOP");
	}

	template<typename F = ::jint>
	static auto BELOW_BOTTOM() {
		static_assert(field_signatures[jField<F>("BELOW_BOTTOM")] != -1);
		return sat<F>("BELOW_BOTTOM");
	}

	template<typename F = ::jint>
	static auto BELOW_TOP() {
		static_assert(field_signatures[jField<F>("BELOW_TOP")] != -1);
		return sat<F>("BELOW_TOP");
	}

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto DEFAULT_JUSTIFICATION() {
		static_assert(field_signatures[jField<F>("DEFAULT_JUSTIFICATION")] != -1);
		return sat<F>("DEFAULT_JUSTIFICATION");
	}

	template<typename F = ::jint>
	static auto DEFAULT_POSITION() {
		static_assert(field_signatures[jField<F>("DEFAULT_POSITION")] != -1);
		return sat<F>("DEFAULT_POSITION");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::javax::swing::border::Border)>(), //
		jConstructor<::jvoid(::javax::swing::border::Border, ::java::lang::String)>(), //
		jConstructor<::jvoid(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint, ::java::awt::Font)>(), //
		jConstructor<::jvoid(::javax::swing::border::Border, ::java::lang::String, ::jint, ::jint, ::java::awt::Font, ::java::awt::Color)>(), //
		jMethod<::jint(::java::awt::Component, ::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior(::java::awt::Component)>("getBaselineResizeBehavior"), //
		jMethod<::javax::swing::border::Border()>("getBorder"), //
		jMethod<::java::awt::Insets(::java::awt::Component, ::java::awt::Insets)>("getBorderInsets"), //
		jMethod<::java::awt::Dimension(::java::awt::Component)>("getMinimumSize"), //
		jMethod<::java::lang::String()>("getTitle"), //
		jMethod<::java::awt::Color()>("getTitleColor"), //
		jMethod<::java::awt::Font()>("getTitleFont"), //
		jMethod<::jint()>("getTitleJustification"), //
		jMethod<::jint()>("getTitlePosition"), //
		jMethod<::jboolean()>("isBorderOpaque"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
		jMethod<::jvoid(::java::lang::String)>("setTitle"), //
		jMethod<::jvoid(::java::awt::Color)>("setTitleColor"), //
		jMethod<::jvoid(::java::awt::Font)>("setTitleFont"), //
		jMethod<::jvoid(::jint)>("setTitleJustification"), //
		jMethod<::jvoid(::jint)>("setTitlePosition"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getBorderInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderInsets")] != -1);
		return call<R>("getBorderInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitle")] != -1);
		return call<R>("getTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getTitleColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitleColor")] != -1);
		return call<R>("getTitleColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getTitleFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitleFont")] != -1);
		return call<R>("getTitleFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTitleJustification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitleJustification")] != -1);
		return call<R>("getTitleJustification", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTitlePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTitlePosition")] != -1);
		return call<R>("getTitlePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderOpaque")] != -1);
		return call<R>("isBorderOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitle")] != -1);
		return call<R>("setTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitleColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitleColor")] != -1);
		return call<R>("setTitleColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitleFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitleFont")] != -1);
		return call<R>("setTitleFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitleJustification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitleJustification")] != -1);
		return call<R>("setTitleJustification", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTitlePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTitlePosition")] != -1);
		return call<R>("setTitlePosition", std::forward<Args>(args)...);
	}

};

#endif
