#ifndef javax_swing_border_AbstractBorder_HPP
#define javax_swing_border_AbstractBorder_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::border::AbstractBorder : public jObject<::javax::swing::border::AbstractBorder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_border / "AbstractBorder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::java::awt::Component, ::jint, ::jint)>("getBaseline"), //
		jMethod<::java::awt::Component$BaselineResizeBehavior(::java::awt::Component)>("getBaselineResizeBehavior"), //
		jMethod<::java::awt::Insets(::java::awt::Component)>("getBorderInsets"), //
		jMethod<::java::awt::Insets(::java::awt::Component, ::java::awt::Insets)>("getBorderInsets"), //
		jMethod<::java::awt::Rectangle(::java::awt::Component, ::jint, ::jint, ::jint, ::jint)>("getInteriorRectangle"), //
		jMethod<::java::awt::Rectangle(::java::awt::Component, ::javax::swing::border::Border, ::jint, ::jint, ::jint, ::jint)>("getInteriorRectangle"), //
		jMethod<::jboolean()>("isBorderOpaque"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component$BaselineResizeBehavior, typename... Args>
	auto getBaselineResizeBehavior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaselineResizeBehavior")] != -1);
		return call<R>("getBaselineResizeBehavior", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getBorderInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderInsets")] != -1);
		return call<R>("getBorderInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getInteriorRectangle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInteriorRectangle")] != -1);
		return call<R>("getInteriorRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderOpaque")] != -1);
		return call<R>("isBorderOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

};

#endif
