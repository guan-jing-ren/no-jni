#ifndef javax_swing_SwingUtilities_HPP
#define javax_swing_SwingUtilities_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SwingUtilities : public jObject<::javax::swing::SwingUtilities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SwingUtilities";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Rectangle(::javax::swing::JComponent, ::java::awt::Rectangle)>("calculateInnerArea"), //
		jMethod<::java::awt::Rectangle *(::java::awt::Rectangle, ::java::awt::Rectangle)>("computeDifference"), //
		jMethod<::java::awt::Rectangle(::jint, ::jint, ::jint, ::jint, ::java::awt::Rectangle)>("computeIntersection"), //
		jMethod<::jint(::java::awt::FontMetrics, ::java::lang::String)>("computeStringWidth"), //
		jMethod<::java::awt::Rectangle(::jint, ::jint, ::jint, ::jint, ::java::awt::Rectangle)>("computeUnion"), //
		jMethod<::java::awt::event::MouseEvent(::java::awt::Component, ::java::awt::event::MouseEvent, ::java::awt::Component)>("convertMouseEvent"), //
		jMethod<::java::awt::Point(::java::awt::Component, ::jint, ::jint, ::java::awt::Component)>("convertPoint"), //
		jMethod<::java::awt::Point(::java::awt::Component, ::java::awt::Point, ::java::awt::Component)>("convertPoint"), //
		jMethod<::jvoid(::java::awt::Point, ::java::awt::Component)>("convertPointFromScreen"), //
		jMethod<::jvoid(::java::awt::Point, ::java::awt::Component)>("convertPointToScreen"), //
		jMethod<::java::awt::Rectangle(::java::awt::Component, ::java::awt::Rectangle, ::java::awt::Component)>("convertRectangle"), //
		jMethod<::java::awt::Component(::java::awt::Component)>("findFocusOwner"), //
		jMethod<::javax::accessibility::Accessible(::java::awt::Component, ::java::awt::Point)>("getAccessibleAt"), //
		jMethod<::javax::accessibility::Accessible(::java::awt::Component, ::jint)>("getAccessibleChild"), //
		jMethod<::jint(::java::awt::Component)>("getAccessibleChildrenCount"), //
		jMethod<::jint(::java::awt::Component)>("getAccessibleIndexInParent"), //
		jMethod<::javax::accessibility::AccessibleStateSet(::java::awt::Component)>("getAccessibleStateSet"), //
		jMethod<::java::awt::Container(::java::lang::String, ::java::awt::Component)>("getAncestorNamed"), //
		jMethod<::java::awt::Container(::java::lang::Class, ::java::awt::Component)>("getAncestorOfClass"), //
		jMethod<::java::awt::Component(::java::awt::Component, ::jint, ::jint)>("getDeepestComponentAt"), //
		jMethod<::java::awt::Rectangle(::java::awt::Component)>("getLocalBounds"), //
		jMethod<::java::awt::Component(::java::awt::Component)>("getRoot"), //
		jMethod<::javax::swing::JRootPane(::java::awt::Component)>("getRootPane"), //
		jMethod<::javax::swing::ActionMap(::javax::swing::JComponent)>("getUIActionMap"), //
		jMethod<::javax::swing::InputMap(::javax::swing::JComponent, ::jint)>("getUIInputMap"), //
		jMethod<::java::awt::Container(::java::awt::Component)>("getUnwrappedParent"), //
		jMethod<::java::awt::Component(::javax::swing::JViewport)>("getUnwrappedView"), //
		jMethod<::java::awt::Window(::java::awt::Component)>("getWindowAncestor"), //
		jMethod<::jvoid(::java::lang::Runnable)>("invokeAndWait"), //
		jMethod<::jvoid(::java::lang::Runnable)>("invokeLater"), //
		jMethod<::jboolean(::java::awt::Component, ::java::awt::Component)>("isDescendingFrom"), //
		jMethod<::jboolean()>("isEventDispatchThread"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent)>("isLeftMouseButton"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent)>("isMiddleMouseButton"), //
		jMethod<::jboolean(::java::awt::Rectangle, ::java::awt::Rectangle)>("isRectangleContainingRectangle"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent)>("isRightMouseButton"), //
		jMethod<::java::lang::String(::java::awt::FontMetrics, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::jint)>("layoutCompoundLabel"), //
		jMethod<::java::lang::String(::javax::swing::JComponent, ::java::awt::FontMetrics, ::java::lang::String, ::javax::swing::Icon, ::jint, ::jint, ::jint, ::jint, ::java::awt::Rectangle, ::java::awt::Rectangle, ::java::awt::Rectangle, ::jint)>("layoutCompoundLabel"), //
		jMethod<::jboolean(::javax::swing::Action, ::javax::swing::KeyStroke, ::java::awt::event::KeyEvent, ::java::lang::Object, ::jint)>("notifyAction"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Component, ::java::awt::Container, ::jint, ::jint, ::jint, ::jint)>("paintComponent"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Component, ::java::awt::Container, ::java::awt::Rectangle)>("paintComponent"), //
		jMethod<::jboolean(::java::awt::event::KeyEvent)>("processKeyBindings"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::javax::swing::ActionMap)>("replaceUIActionMap"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint, ::javax::swing::InputMap)>("replaceUIInputMap"), //
		jMethod<::jvoid(::java::awt::Component)>("updateComponentTreeUI"), //
		jMethod<::java::awt::Window(::java::awt::Component)>("windowForComponent"), //
	};

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto calculateInnerArea(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("calculateInnerArea")] != -1);
		return scall<R>("calculateInnerArea", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle *, typename... Args>
	static auto computeDifference(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeDifference")] != -1);
		return scall<R>("computeDifference", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto computeIntersection(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIntersection")] != -1);
		return scall<R>("computeIntersection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto computeStringWidth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeStringWidth")] != -1);
		return scall<R>("computeStringWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto computeUnion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeUnion")] != -1);
		return scall<R>("computeUnion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::MouseEvent, typename... Args>
	static auto convertMouseEvent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertMouseEvent")] != -1);
		return scall<R>("convertMouseEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	static auto convertPoint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertPoint")] != -1);
		return scall<R>("convertPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto convertPointFromScreen(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertPointFromScreen")] != -1);
		return scall<R>("convertPointFromScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto convertPointToScreen(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertPointToScreen")] != -1);
		return scall<R>("convertPointToScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto convertRectangle(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertRectangle")] != -1);
		return scall<R>("convertRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto findFocusOwner(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findFocusOwner")] != -1);
		return scall<R>("findFocusOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	static auto getAccessibleAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleAt")] != -1);
		return scall<R>("getAccessibleAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	static auto getAccessibleChild(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChild")] != -1);
		return scall<R>("getAccessibleChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getAccessibleChildrenCount(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return scall<R>("getAccessibleChildrenCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getAccessibleIndexInParent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIndexInParent")] != -1);
		return scall<R>("getAccessibleIndexInParent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleStateSet, typename... Args>
	static auto getAccessibleStateSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleStateSet")] != -1);
		return scall<R>("getAccessibleStateSet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	static auto getAncestorNamed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAncestorNamed")] != -1);
		return scall<R>("getAncestorNamed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	static auto getAncestorOfClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAncestorOfClass")] != -1);
		return scall<R>("getAncestorOfClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto getDeepestComponentAt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeepestComponentAt")] != -1);
		return scall<R>("getDeepestComponentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	static auto getLocalBounds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalBounds")] != -1);
		return scall<R>("getLocalBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto getRoot(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return scall<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	static auto getRootPane(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPane")] != -1);
		return scall<R>("getRootPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ActionMap, typename... Args>
	static auto getUIActionMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIActionMap")] != -1);
		return scall<R>("getUIActionMap", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::InputMap, typename... Args>
	static auto getUIInputMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIInputMap")] != -1);
		return scall<R>("getUIInputMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	static auto getUnwrappedParent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnwrappedParent")] != -1);
		return scall<R>("getUnwrappedParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto getUnwrappedView(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnwrappedView")] != -1);
		return scall<R>("getUnwrappedView", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	static auto getWindowAncestor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWindowAncestor")] != -1);
		return scall<R>("getWindowAncestor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto invokeAndWait(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeAndWait")] != -1);
		return scall<R>("invokeAndWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto invokeLater(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeLater")] != -1);
		return scall<R>("invokeLater", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDescendingFrom(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDescendingFrom")] != -1);
		return scall<R>("isDescendingFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isEventDispatchThread(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEventDispatchThread")] != -1);
		return scall<R>("isEventDispatchThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLeftMouseButton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeftMouseButton")] != -1);
		return scall<R>("isLeftMouseButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isMiddleMouseButton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMiddleMouseButton")] != -1);
		return scall<R>("isMiddleMouseButton", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isRectangleContainingRectangle(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRectangleContainingRectangle")] != -1);
		return scall<R>("isRectangleContainingRectangle", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isRightMouseButton(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRightMouseButton")] != -1);
		return scall<R>("isRightMouseButton", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto layoutCompoundLabel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutCompoundLabel")] != -1);
		return scall<R>("layoutCompoundLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto notifyAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notifyAction")] != -1);
		return scall<R>("notifyAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto paintComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintComponent")] != -1);
		return scall<R>("paintComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto processKeyBindings(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyBindings")] != -1);
		return scall<R>("processKeyBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto replaceUIActionMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceUIActionMap")] != -1);
		return scall<R>("replaceUIActionMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto replaceUIInputMap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceUIInputMap")] != -1);
		return scall<R>("replaceUIInputMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto updateComponentTreeUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateComponentTreeUI")] != -1);
		return scall<R>("updateComponentTreeUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Window, typename... Args>
	static auto windowForComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("windowForComponent")] != -1);
		return scall<R>("windowForComponent", std::forward<Args>(args)...);
	}

};

#endif
