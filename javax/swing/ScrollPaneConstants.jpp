#ifndef javax_swing_ScrollPaneConstants_HPP
#define javax_swing_ScrollPaneConstants_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ScrollPaneConstants : public jObject<::javax::swing::ScrollPaneConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ScrollPaneConstants";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("COLUMN_HEADER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("LOWER_LEADING_CORNER"), //
		jField<::java::lang::String>("LOWER_LEFT_CORNER"), //
		jField<::java::lang::String>("LOWER_RIGHT_CORNER"), //
		jField<::java::lang::String>("LOWER_TRAILING_CORNER"), //
		jField<::java::lang::String>("ROW_HEADER"), //
		jField<::java::lang::String>("UPPER_LEADING_CORNER"), //
		jField<::java::lang::String>("UPPER_LEFT_CORNER"), //
		jField<::java::lang::String>("UPPER_RIGHT_CORNER"), //
		jField<::java::lang::String>("UPPER_TRAILING_CORNER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR"), //
		jField<::jint>("VERTICAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("VERTICAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("VERTICAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("VIEWPORT"), //
	};

	template<typename F = ::java::lang::String>
	static auto COLUMN_HEADER() {
		static_assert(field_signatures[jField<F>("COLUMN_HEADER")] != -1);
		return sat<F>("COLUMN_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEADING_CORNER")] != -1);
		return sat<F>("LOWER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEFT_CORNER")] != -1);
		return sat<F>("LOWER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_RIGHT_CORNER")] != -1);
		return sat<F>("LOWER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_TRAILING_CORNER")] != -1);
		return sat<F>("LOWER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto ROW_HEADER() {
		static_assert(field_signatures[jField<F>("ROW_HEADER")] != -1);
		return sat<F>("ROW_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEADING_CORNER")] != -1);
		return sat<F>("UPPER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEFT_CORNER")] != -1);
		return sat<F>("UPPER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_RIGHT_CORNER")] != -1);
		return sat<F>("UPPER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_TRAILING_CORNER")] != -1);
		return sat<F>("UPPER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto VIEWPORT() {
		static_assert(field_signatures[jField<F>("VIEWPORT")] != -1);
		return sat<F>("VIEWPORT");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
