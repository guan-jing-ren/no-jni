#ifndef javax_swing_JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink_HPP
#define javax_swing_JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink : public jObject<::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink, ::javax::accessibility::AccessibleHyperlink> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JEditorPane$JEditorPaneAccessibleHypertextSupport$HTMLLink";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JEditorPane$JEditorPaneAccessibleHypertextSupport, ::javax::swing::text::Element)>(), //
		jMethod<::jboolean(::jint)>("doAccessibleAction"), //
		jMethod<::java::lang::Object(::jint)>("getAccessibleActionAnchor"), //
		jMethod<::jint()>("getAccessibleActionCount"), //
		jMethod<::java::lang::String(::jint)>("getAccessibleActionDescription"), //
		jMethod<::java::lang::Object(::jint)>("getAccessibleActionObject"), //
		jMethod<::jint()>("getEndIndex"), //
		jMethod<::jint()>("getStartIndex"), //
		jMethod<::jboolean()>("isValid"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto doAccessibleAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doAccessibleAction")] != -1);
		return call<R>("doAccessibleAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAccessibleActionAnchor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionAnchor")] != -1);
		return call<R>("getAccessibleActionAnchor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleActionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionCount")] != -1);
		return call<R>("getAccessibleActionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleActionDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionDescription")] != -1);
		return call<R>("getAccessibleActionDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAccessibleActionObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionObject")] != -1);
		return call<R>("getAccessibleActionObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartIndex")] != -1);
		return call<R>("getStartIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

};

#endif
