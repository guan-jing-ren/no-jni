#ifndef javax_swing_DefaultButtonModel_HPP
#define javax_swing_DefaultButtonModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultButtonModel : public jObject<::javax::swing::DefaultButtonModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultButtonModel";

	constexpr static Enume field_signatures{
		jField<::jint>("ARMED"), //
		jField<::jint>("ENABLED"), //
		jField<::jint>("PRESSED"), //
		jField<::jint>("ROLLOVER"), //
		jField<::jint>("SELECTED"), //
	};

	template<typename F = ::jint>
	static auto ARMED() {
		static_assert(field_signatures[jField<F>("ARMED")] != -1);
		return sat<F>("ARMED");
	}

	template<typename F = ::jint>
	static auto ENABLED() {
		static_assert(field_signatures[jField<F>("ENABLED")] != -1);
		return sat<F>("ENABLED");
	}

	template<typename F = ::jint>
	static auto PRESSED() {
		static_assert(field_signatures[jField<F>("PRESSED")] != -1);
		return sat<F>("PRESSED");
	}

	template<typename F = ::jint>
	static auto ROLLOVER() {
		static_assert(field_signatures[jField<F>("ROLLOVER")] != -1);
		return sat<F>("ROLLOVER");
	}

	template<typename F = ::jint>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("addItemListener"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::javax::swing::ButtonGroup()>("getGroup"), //
		jMethod<::java::awt::event::ItemListener *()>("getItemListeners"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jint()>("getMnemonic"), //
		jMethod<::java::lang::Object *()>("getSelectedObjects"), //
		jMethod<::jboolean()>("isArmed"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isPressed"), //
		jMethod<::jboolean()>("isRollover"), //
		jMethod<::jboolean()>("isSelected"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::java::awt::event::ItemListener)>("removeItemListener"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jboolean)>("setArmed"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::javax::swing::ButtonGroup)>("setGroup"), //
		jMethod<::jvoid(::jint)>("setMnemonic"), //
		jMethod<::jvoid(::jboolean)>("setPressed"), //
		jMethod<::jvoid(::jboolean)>("setRollover"), //
		jMethod<::jvoid(::jboolean)>("setSelected"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addItemListener")] != -1);
		return call<R>("addItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ButtonGroup, typename... Args>
	auto getGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGroup")] != -1);
		return call<R>("getGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ItemListener *, typename... Args>
	auto getItemListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getItemListeners")] != -1);
		return call<R>("getItemListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMnemonic")] != -1);
		return call<R>("getMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getSelectedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedObjects")] != -1);
		return call<R>("getSelectedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isArmed")] != -1);
		return call<R>("isArmed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPressed")] != -1);
		return call<R>("isPressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRollover(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRollover")] != -1);
		return call<R>("isRollover", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelected")] != -1);
		return call<R>("isSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeItemListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeItemListener")] != -1);
		return call<R>("removeItemListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArmed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArmed")] != -1);
		return call<R>("setArmed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGroup")] != -1);
		return call<R>("setGroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMnemonic")] != -1);
		return call<R>("setMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPressed")] != -1);
		return call<R>("setPressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRollover(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRollover")] != -1);
		return call<R>("setRollover", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

};

#endif
