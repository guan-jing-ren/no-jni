#ifndef javax_swing_ActionMap_HPP
#define javax_swing_ActionMap_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ActionMap : public jObject<::javax::swing::ActionMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ActionMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object *()>("allKeys"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::javax::swing::Action(::java::lang::Object)>("get"), //
		jMethod<::javax::swing::ActionMap()>("getParent"), //
		jMethod<::java::lang::Object *()>("keys"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::swing::Action)>("put"), //
		jMethod<::jvoid(::java::lang::Object)>("remove"), //
		jMethod<::jvoid(::javax::swing::ActionMap)>("setParent"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::java::lang::Object *, typename... Args>
	auto allKeys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allKeys")] != -1);
		return call<R>("allKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ActionMap, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto keys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keys")] != -1);
		return call<R>("keys", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

};

#endif
