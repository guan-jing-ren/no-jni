#ifndef javax_swing_JLayer_HPP
#define javax_swing_JLayer_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JLayer : public jObject<::javax::swing::JLayer, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JLayer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Component)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::javax::swing::plaf::LayerUI)>(), //
		jMethod<::jvoid()>("addNotify"), //
		jMethod<::javax::swing::JPanel()>("createGlassPane"), //
		jMethod<::jvoid()>("doLayout"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JPanel()>("getGlassPane"), //
		jMethod<::jlong()>("getLayerEventMask"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableBlockIncrement"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::javax::swing::plaf::LayerUI()>("getUI"), //
		jMethod<::java::awt::Component()>("getView"), //
		jMethod<::jboolean()>("isOptimizedDrawingEnabled"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("paintImmediately"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::awt::Component)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setBorder"), //
		jMethod<::jvoid(::javax::swing::JPanel)>("setGlassPane"), //
		jMethod<::jvoid(::jlong)>("setLayerEventMask"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::javax::swing::plaf::LayerUI)>("setUI"), //
		jMethod<::jvoid(::java::awt::Component)>("setView"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotify")] != -1);
		return call<R>("addNotify", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto createGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createGlassPane")] != -1);
		return call<R>("createGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doLayout")] != -1);
		return call<R>("doLayout", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JPanel, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLayerEventMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayerEventMask")] != -1);
		return call<R>("getLayerEventMask", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableBlockIncrement")] != -1);
		return call<R>("getScrollableBlockIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::LayerUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOptimizedDrawingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOptimizedDrawingEnabled")] != -1);
		return call<R>("isOptimizedDrawingEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintImmediately(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintImmediately")] != -1);
		return call<R>("paintImmediately", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBorder")] != -1);
		return call<R>("setBorder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayerEventMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayerEventMask")] != -1);
		return call<R>("setLayerEventMask", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setView")] != -1);
		return call<R>("setView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
