#ifndef javax_swing_undo_StateEdit_HPP
#define javax_swing_undo_StateEdit_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::undo::StateEdit : public jObject<::javax::swing::undo::StateEdit, ::javax::swing::undo::AbstractUndoableEdit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_undo / "StateEdit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::undo::StateEditable)>(), //
		jConstructor<::jvoid(::javax::swing::undo::StateEditable, ::java::lang::String)>(), //
		jMethod<::jvoid()>("end"), //
		jMethod<::java::lang::String()>("getPresentationName"), //
		jMethod<::jvoid()>("redo"), //
		jMethod<::jvoid()>("undo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("end")] != -1);
		return call<R>("end", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPresentationName")] != -1);
		return call<R>("getPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redo")] != -1);
		return call<R>("redo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto undo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("undo")] != -1);
		return call<R>("undo", std::forward<Args>(args)...);
	}

};

#endif
