#ifndef javax_swing_undo_UndoableEdit_HPP
#define javax_swing_undo_UndoableEdit_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::undo::UndoableEdit : public jObject<::javax::swing::undo::UndoableEdit, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_undo / "UndoableEdit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::javax::swing::undo::UndoableEdit)>("addEdit"), //
		jMethod<::jboolean()>("canRedo"), //
		jMethod<::jboolean()>("canUndo"), //
		jMethod<::jvoid()>("die"), //
		jMethod<::java::lang::String()>("getPresentationName"), //
		jMethod<::java::lang::String()>("getRedoPresentationName"), //
		jMethod<::java::lang::String()>("getUndoPresentationName"), //
		jMethod<::jboolean()>("isSignificant"), //
		jMethod<::jvoid()>("redo"), //
		jMethod<::jboolean(::javax::swing::undo::UndoableEdit)>("replaceEdit"), //
		jMethod<::jvoid()>("undo"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto addEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addEdit")] != -1);
		return call<R>("addEdit", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canRedo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canRedo")] != -1);
		return call<R>("canRedo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canUndo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canUndo")] != -1);
		return call<R>("canUndo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto die(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("die")] != -1);
		return call<R>("die", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPresentationName")] != -1);
		return call<R>("getPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRedoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRedoPresentationName")] != -1);
		return call<R>("getRedoPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUndoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUndoPresentationName")] != -1);
		return call<R>("getUndoPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSignificant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSignificant")] != -1);
		return call<R>("isSignificant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redo")] != -1);
		return call<R>("redo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto replaceEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceEdit")] != -1);
		return call<R>("replaceEdit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto undo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("undo")] != -1);
		return call<R>("undo", std::forward<Args>(args)...);
	}

};

#endif
