#ifndef javax_swing_undo_CompoundEdit_HPP
#define javax_swing_undo_CompoundEdit_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::undo::CompoundEdit : public jObject<::javax::swing::undo::CompoundEdit, ::javax::swing::undo::AbstractUndoableEdit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_undo / "CompoundEdit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::javax::swing::undo::UndoableEdit)>("addEdit"), //
		jMethod<::jboolean()>("canRedo"), //
		jMethod<::jboolean()>("canUndo"), //
		jMethod<::jvoid()>("die"), //
		jMethod<::jvoid()>("end"), //
		jMethod<::java::lang::String()>("getPresentationName"), //
		jMethod<::java::lang::String()>("getRedoPresentationName"), //
		jMethod<::java::lang::String()>("getUndoPresentationName"), //
		jMethod<::jboolean()>("isInProgress"), //
		jMethod<::jboolean()>("isSignificant"), //
		jMethod<::jvoid()>("redo"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("undo"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto addEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addEdit")] != -1);
		return call<R>("addEdit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canRedo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canRedo")] != -1);
		return call<R>("canRedo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canUndo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("canUndo")] != -1);
		return call<R>("canUndo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto die(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("die")] != -1);
		return call<R>("die", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto end(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("end")] != -1);
		return call<R>("end", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPresentationName")] != -1);
		return call<R>("getPresentationName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRedoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRedoPresentationName")] != -1);
		return call<R>("getRedoPresentationName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUndoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUndoPresentationName")] != -1);
		return call<R>("getUndoPresentationName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInProgress")] != -1);
		return call<R>("isInProgress", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSignificant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSignificant")] != -1);
		return call<R>("isSignificant", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("redo")] != -1);
		return call<R>("redo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto undo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("undo")] != -1);
		return call<R>("undo", forward<Args>(args)...);
	}

};

#endif
