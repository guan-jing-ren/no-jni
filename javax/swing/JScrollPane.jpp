#ifndef javax_swing_JScrollPane_HPP
#define javax_swing_JScrollPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JScrollPane : public jObject<::javax::swing::JScrollPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JScrollPane";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("COLUMN_HEADER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("HORIZONTAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("HORIZONTAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("LOWER_LEADING_CORNER"), //
		jField<::java::lang::String>("LOWER_LEFT_CORNER"), //
		jField<::java::lang::String>("LOWER_RIGHT_CORNER"), //
		jField<::java::lang::String>("LOWER_TRAILING_CORNER"), //
		jField<::java::lang::String>("ROW_HEADER"), //
		jField<::java::lang::String>("UPPER_LEADING_CORNER"), //
		jField<::java::lang::String>("UPPER_LEFT_CORNER"), //
		jField<::java::lang::String>("UPPER_RIGHT_CORNER"), //
		jField<::java::lang::String>("UPPER_TRAILING_CORNER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR"), //
		jField<::jint>("VERTICAL_SCROLLBAR_ALWAYS"), //
		jField<::jint>("VERTICAL_SCROLLBAR_AS_NEEDED"), //
		jField<::jint>("VERTICAL_SCROLLBAR_NEVER"), //
		jField<::java::lang::String>("VERTICAL_SCROLLBAR_POLICY"), //
		jField<::java::lang::String>("VIEWPORT"), //
	};

	template<typename F = ::java::lang::String>
	static auto COLUMN_HEADER() {
		static_assert(field_signatures[jField<F>("COLUMN_HEADER")] != -1);
		return sat<F>("COLUMN_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("HORIZONTAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEADING_CORNER")] != -1);
		return sat<F>("LOWER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_LEFT_CORNER")] != -1);
		return sat<F>("LOWER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_RIGHT_CORNER")] != -1);
		return sat<F>("LOWER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto LOWER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("LOWER_TRAILING_CORNER")] != -1);
		return sat<F>("LOWER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto ROW_HEADER() {
		static_assert(field_signatures[jField<F>("ROW_HEADER")] != -1);
		return sat<F>("ROW_HEADER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEADING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEADING_CORNER")] != -1);
		return sat<F>("UPPER_LEADING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_LEFT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_LEFT_CORNER")] != -1);
		return sat<F>("UPPER_LEFT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_RIGHT_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_RIGHT_CORNER")] != -1);
		return sat<F>("UPPER_RIGHT_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto UPPER_TRAILING_CORNER() {
		static_assert(field_signatures[jField<F>("UPPER_TRAILING_CORNER")] != -1);
		return sat<F>("UPPER_TRAILING_CORNER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_ALWAYS() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_ALWAYS")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_ALWAYS");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_AS_NEEDED() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_AS_NEEDED")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_AS_NEEDED");
	}

	template<typename F = ::jint>
	static auto VERTICAL_SCROLLBAR_NEVER() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_NEVER")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_NEVER");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_SCROLLBAR_POLICY() {
		static_assert(field_signatures[jField<F>("VERTICAL_SCROLLBAR_POLICY")] != -1);
		return sat<F>("VERTICAL_SCROLLBAR_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto VIEWPORT() {
		static_assert(field_signatures[jField<F>("VIEWPORT")] != -1);
		return sat<F>("VIEWPORT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::awt::Component)>(), //
		jConstructor<::jvoid(::java::awt::Component, ::jint, ::jint)>(), //
		jMethod<::javax::swing::JScrollBar()>("createHorizontalScrollBar"), //
		jMethod<::javax::swing::JScrollBar()>("createVerticalScrollBar"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JViewport()>("getColumnHeader"), //
		jMethod<::java::awt::Component(::java::lang::String)>("getCorner"), //
		jMethod<::javax::swing::JScrollBar()>("getHorizontalScrollBar"), //
		jMethod<::jint()>("getHorizontalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getRowHeader"), //
		jMethod<::javax::swing::plaf::ScrollPaneUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::javax::swing::JScrollBar()>("getVerticalScrollBar"), //
		jMethod<::jint()>("getVerticalScrollBarPolicy"), //
		jMethod<::javax::swing::JViewport()>("getViewport"), //
		jMethod<::javax::swing::border::Border()>("getViewportBorder"), //
		jMethod<::java::awt::Rectangle()>("getViewportBorderBounds"), //
		jMethod<::jboolean()>("isValidateRoot"), //
		jMethod<::jboolean()>("isWheelScrollingEnabled"), //
		jMethod<::jvoid(::javax::swing::JViewport)>("setColumnHeader"), //
		jMethod<::jvoid(::java::awt::Component)>("setColumnHeaderView"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("setComponentOrientation"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("setCorner"), //
		jMethod<::jvoid(::javax::swing::JScrollBar)>("setHorizontalScrollBar"), //
		jMethod<::jvoid(::jint)>("setHorizontalScrollBarPolicy"), //
		jMethod<::jvoid(::java::awt::LayoutManager)>("setLayout"), //
		jMethod<::jvoid(::javax::swing::JViewport)>("setRowHeader"), //
		jMethod<::jvoid(::java::awt::Component)>("setRowHeaderView"), //
		jMethod<::jvoid(::javax::swing::plaf::ScrollPaneUI)>("setUI"), //
		jMethod<::jvoid(::javax::swing::JScrollBar)>("setVerticalScrollBar"), //
		jMethod<::jvoid(::jint)>("setVerticalScrollBarPolicy"), //
		jMethod<::jvoid(::javax::swing::JViewport)>("setViewport"), //
		jMethod<::jvoid(::javax::swing::border::Border)>("setViewportBorder"), //
		jMethod<::jvoid(::java::awt::Component)>("setViewportView"), //
		jMethod<::jvoid(::jboolean)>("setWheelScrollingEnabled"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto createHorizontalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHorizontalScrollBar")] != -1);
		return call<R>("createHorizontalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto createVerticalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createVerticalScrollBar")] != -1);
		return call<R>("createVerticalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnHeader")] != -1);
		return call<R>("getColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getCorner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCorner")] != -1);
		return call<R>("getCorner", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getHorizontalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalScrollBar")] != -1);
		return call<R>("getHorizontalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalScrollBarPolicy")] != -1);
		return call<R>("getHorizontalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeader")] != -1);
		return call<R>("getRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ScrollPaneUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JScrollBar, typename... Args>
	auto getVerticalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalScrollBar")] != -1);
		return call<R>("getVerticalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalScrollBarPolicy")] != -1);
		return call<R>("getVerticalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JViewport, typename... Args>
	auto getViewport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewport")] != -1);
		return call<R>("getViewport", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getViewportBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewportBorder")] != -1);
		return call<R>("getViewportBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getViewportBorderBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewportBorderBounds")] != -1);
		return call<R>("getViewportBorderBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidateRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidateRoot")] != -1);
		return call<R>("isValidateRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWheelScrollingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWheelScrollingEnabled")] != -1);
		return call<R>("isWheelScrollingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnHeader")] != -1);
		return call<R>("setColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnHeaderView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnHeaderView")] != -1);
		return call<R>("setColumnHeaderView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentOrientation")] != -1);
		return call<R>("setComponentOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCorner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCorner")] != -1);
		return call<R>("setCorner", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalScrollBar")] != -1);
		return call<R>("setHorizontalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalScrollBarPolicy")] != -1);
		return call<R>("setHorizontalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayout")] != -1);
		return call<R>("setLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowHeader")] != -1);
		return call<R>("setRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeaderView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowHeaderView")] != -1);
		return call<R>("setRowHeaderView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalScrollBar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalScrollBar")] != -1);
		return call<R>("setVerticalScrollBar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalScrollBarPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalScrollBarPolicy")] != -1);
		return call<R>("setVerticalScrollBarPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setViewport")] != -1);
		return call<R>("setViewport", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewportBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setViewportBorder")] != -1);
		return call<R>("setViewportBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setViewportView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setViewportView")] != -1);
		return call<R>("setViewportView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWheelScrollingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWheelScrollingEnabled")] != -1);
		return call<R>("setWheelScrollingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
