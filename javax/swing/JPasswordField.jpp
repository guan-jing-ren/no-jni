#ifndef javax_swing_JPasswordField_HPP
#define javax_swing_JPasswordField_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JPasswordField : public jObject<::javax::swing::JPasswordField, ::javax::swing::JTextField> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JPasswordField";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::text::Document, ::java::lang::String, ::jint)>(), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::jboolean()>("echoCharIsSet"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jchar()>("getEchoChar"), //
		jMethod<::jchar *()>("getPassword"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::jchar)>("setEchoChar"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto echoCharIsSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("echoCharIsSet")] != -1);
		return call<R>("echoCharIsSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEchoChar")] != -1);
		return call<R>("getEchoChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassword")] != -1);
		return call<R>("getPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEchoChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEchoChar")] != -1);
		return call<R>("setEchoChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
