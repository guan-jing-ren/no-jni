#ifndef javax_swing_SwingWorker_HPP
#define javax_swing_SwingWorker_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SwingWorker : public jObject<::javax::swing::SwingWorker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SwingWorker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jboolean(::jboolean)>("cancel"), //
		jMethod<::jvoid()>("execute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::lang::Object)>("firePropertyChange"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object(::jlong, ::java::util::concurrent::TimeUnit)>("get"), //
		jMethod<::jint()>("getProgress"), //
		jMethod<::java::beans::PropertyChangeSupport()>("getPropertyChangeSupport"), //
		jMethod<::javax::swing::SwingWorker$StateValue()>("getState"), //
		jMethod<::jboolean()>("isCancelled"), //
		jMethod<::jboolean()>("isDone"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid()>("run"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto cancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("cancel")] != -1);
		return call<R>("cancel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto execute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("execute")] != -1);
		return call<R>("execute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProgress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProgress")] != -1);
		return call<R>("getProgress", forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeSupport, typename... Args>
	auto getPropertyChangeSupport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPropertyChangeSupport")] != -1);
		return call<R>("getPropertyChangeSupport", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SwingWorker$StateValue, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCancelled")] != -1);
		return call<R>("isCancelled", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDone")] != -1);
		return call<R>("isDone", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("run")] != -1);
		return call<R>("run", forward<Args>(args)...);
	}

};

#endif
