#ifndef javax_swing_JFileChooser_HPP
#define javax_swing_JFileChooser_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JFileChooser : public jObject<::javax::swing::JFileChooser, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JFileChooser";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("ACCESSORY_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("APPROVE_BUTTON_TEXT_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY"), //
		jField<::jint>("APPROVE_OPTION"), //
		jField<::java::lang::String>("APPROVE_SELECTION"), //
		jField<::jint>("CANCEL_OPTION"), //
		jField<::java::lang::String>("CANCEL_SELECTION"), //
		jField<::java::lang::String>("CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY"), //
		jField<::jint>("CUSTOM_DIALOG"), //
		jField<::java::lang::String>("DIALOG_TITLE_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("DIALOG_TYPE_CHANGED_PROPERTY"), //
		jField<::jint>("DIRECTORIES_ONLY"), //
		jField<::java::lang::String>("DIRECTORY_CHANGED_PROPERTY"), //
		jField<::jint>("ERROR_OPTION"), //
		jField<::jint>("FILES_AND_DIRECTORIES"), //
		jField<::jint>("FILES_ONLY"), //
		jField<::java::lang::String>("FILE_FILTER_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("FILE_HIDING_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("FILE_SELECTION_MODE_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("FILE_SYSTEM_VIEW_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("FILE_VIEW_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("MULTI_SELECTION_ENABLED_CHANGED_PROPERTY"), //
		jField<::jint>("OPEN_DIALOG"), //
		jField<::jint>("SAVE_DIALOG"), //
		jField<::java::lang::String>("SELECTED_FILES_CHANGED_PROPERTY"), //
		jField<::java::lang::String>("SELECTED_FILE_CHANGED_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY")] != -1);
		return sat<F>("ACCEPT_ALL_FILE_FILTER_USED_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSORY_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSORY_CHANGED_PROPERTY")] != -1);
		return sat<F>("ACCESSORY_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY")] != -1);
		return sat<F>("APPROVE_BUTTON_MNEMONIC_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto APPROVE_BUTTON_TEXT_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("APPROVE_BUTTON_TEXT_CHANGED_PROPERTY")] != -1);
		return sat<F>("APPROVE_BUTTON_TEXT_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY")] != -1);
		return sat<F>("APPROVE_BUTTON_TOOL_TIP_TEXT_CHANGED_PROPERTY");
	}

	template<typename F = ::jint>
	static auto APPROVE_OPTION() {
		static_assert(field_signatures[jField<F>("APPROVE_OPTION")] != -1);
		return sat<F>("APPROVE_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto APPROVE_SELECTION() {
		static_assert(field_signatures[jField<F>("APPROVE_SELECTION")] != -1);
		return sat<F>("APPROVE_SELECTION");
	}

	template<typename F = ::jint>
	static auto CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("CANCEL_OPTION")] != -1);
		return sat<F>("CANCEL_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CANCEL_SELECTION() {
		static_assert(field_signatures[jField<F>("CANCEL_SELECTION")] != -1);
		return sat<F>("CANCEL_SELECTION");
	}

	template<typename F = ::java::lang::String>
	static auto CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY")] != -1);
		return sat<F>("CHOOSABLE_FILE_FILTER_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY")] != -1);
		return sat<F>("CONTROL_BUTTONS_ARE_SHOWN_CHANGED_PROPERTY");
	}

	template<typename F = ::jint>
	static auto CUSTOM_DIALOG() {
		static_assert(field_signatures[jField<F>("CUSTOM_DIALOG")] != -1);
		return sat<F>("CUSTOM_DIALOG");
	}

	template<typename F = ::java::lang::String>
	static auto DIALOG_TITLE_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("DIALOG_TITLE_CHANGED_PROPERTY")] != -1);
		return sat<F>("DIALOG_TITLE_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DIALOG_TYPE_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("DIALOG_TYPE_CHANGED_PROPERTY")] != -1);
		return sat<F>("DIALOG_TYPE_CHANGED_PROPERTY");
	}

	template<typename F = ::jint>
	static auto DIRECTORIES_ONLY() {
		static_assert(field_signatures[jField<F>("DIRECTORIES_ONLY")] != -1);
		return sat<F>("DIRECTORIES_ONLY");
	}

	template<typename F = ::java::lang::String>
	static auto DIRECTORY_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("DIRECTORY_CHANGED_PROPERTY")] != -1);
		return sat<F>("DIRECTORY_CHANGED_PROPERTY");
	}

	template<typename F = ::jint>
	static auto ERROR_OPTION() {
		static_assert(field_signatures[jField<F>("ERROR_OPTION")] != -1);
		return sat<F>("ERROR_OPTION");
	}

	template<typename F = ::jint>
	static auto FILES_AND_DIRECTORIES() {
		static_assert(field_signatures[jField<F>("FILES_AND_DIRECTORIES")] != -1);
		return sat<F>("FILES_AND_DIRECTORIES");
	}

	template<typename F = ::jint>
	static auto FILES_ONLY() {
		static_assert(field_signatures[jField<F>("FILES_ONLY")] != -1);
		return sat<F>("FILES_ONLY");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_FILTER_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FILE_FILTER_CHANGED_PROPERTY")] != -1);
		return sat<F>("FILE_FILTER_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_HIDING_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FILE_HIDING_CHANGED_PROPERTY")] != -1);
		return sat<F>("FILE_HIDING_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_SELECTION_MODE_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FILE_SELECTION_MODE_CHANGED_PROPERTY")] != -1);
		return sat<F>("FILE_SELECTION_MODE_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_SYSTEM_VIEW_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FILE_SYSTEM_VIEW_CHANGED_PROPERTY")] != -1);
		return sat<F>("FILE_SYSTEM_VIEW_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FILE_VIEW_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("FILE_VIEW_CHANGED_PROPERTY")] != -1);
		return sat<F>("FILE_VIEW_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MULTI_SELECTION_ENABLED_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("MULTI_SELECTION_ENABLED_CHANGED_PROPERTY")] != -1);
		return sat<F>("MULTI_SELECTION_ENABLED_CHANGED_PROPERTY");
	}

	template<typename F = ::jint>
	static auto OPEN_DIALOG() {
		static_assert(field_signatures[jField<F>("OPEN_DIALOG")] != -1);
		return sat<F>("OPEN_DIALOG");
	}

	template<typename F = ::jint>
	static auto SAVE_DIALOG() {
		static_assert(field_signatures[jField<F>("SAVE_DIALOG")] != -1);
		return sat<F>("SAVE_DIALOG");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTED_FILES_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTED_FILES_CHANGED_PROPERTY")] != -1);
		return sat<F>("SELECTED_FILES_CHANGED_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTED_FILE_CHANGED_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTED_FILE_CHANGED_PROPERTY")] != -1);
		return sat<F>("SELECTED_FILE_CHANGED_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::File, ::javax::swing::filechooser::FileSystemView)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::swing::filechooser::FileSystemView)>(), //
		jConstructor<::jvoid(::javax::swing::filechooser::FileSystemView)>(), //
		jMethod<::jboolean(::java::io::File)>("accept"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::jvoid(::javax::swing::filechooser::FileFilter)>("addChoosableFileFilter"), //
		jMethod<::jvoid()>("approveSelection"), //
		jMethod<::jvoid()>("cancelSelection"), //
		jMethod<::jvoid()>("changeToParentDirectory"), //
		jMethod<::jvoid(::java::io::File)>("ensureFileIsVisible"), //
		jMethod<::javax::swing::filechooser::FileFilter()>("getAcceptAllFileFilter"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::JComponent()>("getAccessory"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::jint()>("getApproveButtonMnemonic"), //
		jMethod<::java::lang::String()>("getApproveButtonText"), //
		jMethod<::java::lang::String()>("getApproveButtonToolTipText"), //
		jMethod<::javax::swing::filechooser::FileFilter *()>("getChoosableFileFilters"), //
		jMethod<::jboolean()>("getControlButtonsAreShown"), //
		jMethod<::java::io::File()>("getCurrentDirectory"), //
		jMethod<::java::lang::String(::java::io::File)>("getDescription"), //
		jMethod<::java::lang::String()>("getDialogTitle"), //
		jMethod<::jint()>("getDialogType"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::filechooser::FileFilter()>("getFileFilter"), //
		jMethod<::jint()>("getFileSelectionMode"), //
		jMethod<::javax::swing::filechooser::FileSystemView()>("getFileSystemView"), //
		jMethod<::javax::swing::filechooser::FileView()>("getFileView"), //
		jMethod<::javax::swing::Icon(::java::io::File)>("getIcon"), //
		jMethod<::java::lang::String(::java::io::File)>("getName"), //
		jMethod<::java::io::File()>("getSelectedFile"), //
		jMethod<::java::io::File *()>("getSelectedFiles"), //
		jMethod<::java::lang::String(::java::io::File)>("getTypeDescription"), //
		jMethod<::javax::swing::plaf::FileChooserUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("isAcceptAllFileFilterUsed"), //
		jMethod<::jboolean()>("isDirectorySelectionEnabled"), //
		jMethod<::jboolean()>("isFileHidingEnabled"), //
		jMethod<::jboolean()>("isFileSelectionEnabled"), //
		jMethod<::jboolean()>("isMultiSelectionEnabled"), //
		jMethod<::jboolean(::java::io::File)>("isTraversable"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jboolean(::javax::swing::filechooser::FileFilter)>("removeChoosableFileFilter"), //
		jMethod<::jvoid()>("rescanCurrentDirectory"), //
		jMethod<::jvoid()>("resetChoosableFileFilters"), //
		jMethod<::jvoid(::jboolean)>("setAcceptAllFileFilterUsed"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("setAccessory"), //
		jMethod<::jvoid(::jchar)>("setApproveButtonMnemonic"), //
		jMethod<::jvoid(::jint)>("setApproveButtonMnemonic"), //
		jMethod<::jvoid(::java::lang::String)>("setApproveButtonText"), //
		jMethod<::jvoid(::java::lang::String)>("setApproveButtonToolTipText"), //
		jMethod<::jvoid(::jboolean)>("setControlButtonsAreShown"), //
		jMethod<::jvoid(::java::io::File)>("setCurrentDirectory"), //
		jMethod<::jvoid(::java::lang::String)>("setDialogTitle"), //
		jMethod<::jvoid(::jint)>("setDialogType"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::filechooser::FileFilter)>("setFileFilter"), //
		jMethod<::jvoid(::jboolean)>("setFileHidingEnabled"), //
		jMethod<::jvoid(::jint)>("setFileSelectionMode"), //
		jMethod<::jvoid(::javax::swing::filechooser::FileSystemView)>("setFileSystemView"), //
		jMethod<::jvoid(::javax::swing::filechooser::FileView)>("setFileView"), //
		jMethod<::jvoid(::jboolean)>("setMultiSelectionEnabled"), //
		jMethod<::jvoid(::java::io::File)>("setSelectedFile"), //
		jMethod<::jvoid(::java::io::File *)>("setSelectedFiles"), //
		jMethod<::jint(::java::awt::Component, ::java::lang::String)>("showDialog"), //
		jMethod<::jint(::java::awt::Component)>("showOpenDialog"), //
		jMethod<::jint(::java::awt::Component)>("showSaveDialog"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChoosableFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChoosableFileFilter")] != -1);
		return call<R>("addChoosableFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto approveSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("approveSelection")] != -1);
		return call<R>("approveSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cancelSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelSelection")] != -1);
		return call<R>("cancelSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changeToParentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changeToParentDirectory")] != -1);
		return call<R>("changeToParentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureFileIsVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ensureFileIsVisible")] != -1);
		return call<R>("ensureFileIsVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileFilter, typename... Args>
	auto getAcceptAllFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptAllFileFilter")] != -1);
		return call<R>("getAcceptAllFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JComponent, typename... Args>
	auto getAccessory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessory")] != -1);
		return call<R>("getAccessory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getApproveButtonMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApproveButtonMnemonic")] != -1);
		return call<R>("getApproveButtonMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getApproveButtonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApproveButtonText")] != -1);
		return call<R>("getApproveButtonText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getApproveButtonToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApproveButtonToolTipText")] != -1);
		return call<R>("getApproveButtonToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileFilter *, typename... Args>
	auto getChoosableFileFilters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChoosableFileFilters")] != -1);
		return call<R>("getChoosableFileFilters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getControlButtonsAreShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlButtonsAreShown")] != -1);
		return call<R>("getControlButtonsAreShown", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentDirectory")] != -1);
		return call<R>("getCurrentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDialogTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDialogTitle")] != -1);
		return call<R>("getDialogTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDialogType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDialogType")] != -1);
		return call<R>("getDialogType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileFilter, typename... Args>
	auto getFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileFilter")] != -1);
		return call<R>("getFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFileSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSelectionMode")] != -1);
		return call<R>("getFileSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileSystemView, typename... Args>
	auto getFileSystemView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileSystemView")] != -1);
		return call<R>("getFileSystemView", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::filechooser::FileView, typename... Args>
	auto getFileView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileView")] != -1);
		return call<R>("getFileView", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getSelectedFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedFile")] != -1);
		return call<R>("getSelectedFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File *, typename... Args>
	auto getSelectedFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedFiles")] != -1);
		return call<R>("getSelectedFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTypeDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeDescription")] != -1);
		return call<R>("getTypeDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::FileChooserUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAcceptAllFileFilterUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAcceptAllFileFilterUsed")] != -1);
		return call<R>("isAcceptAllFileFilterUsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirectorySelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirectorySelectionEnabled")] != -1);
		return call<R>("isDirectorySelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileHidingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileHidingEnabled")] != -1);
		return call<R>("isFileHidingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileSelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileSelectionEnabled")] != -1);
		return call<R>("isFileSelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMultiSelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMultiSelectionEnabled")] != -1);
		return call<R>("isMultiSelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTraversable")] != -1);
		return call<R>("isTraversable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeChoosableFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChoosableFileFilter")] != -1);
		return call<R>("removeChoosableFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rescanCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rescanCurrentDirectory")] != -1);
		return call<R>("rescanCurrentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetChoosableFileFilters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetChoosableFileFilters")] != -1);
		return call<R>("resetChoosableFileFilters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAcceptAllFileFilterUsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAcceptAllFileFilterUsed")] != -1);
		return call<R>("setAcceptAllFileFilterUsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessory")] != -1);
		return call<R>("setAccessory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setApproveButtonMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setApproveButtonMnemonic")] != -1);
		return call<R>("setApproveButtonMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setApproveButtonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setApproveButtonText")] != -1);
		return call<R>("setApproveButtonText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setApproveButtonToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setApproveButtonToolTipText")] != -1);
		return call<R>("setApproveButtonToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setControlButtonsAreShown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setControlButtonsAreShown")] != -1);
		return call<R>("setControlButtonsAreShown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrentDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentDirectory")] != -1);
		return call<R>("setCurrentDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDialogTitle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDialogTitle")] != -1);
		return call<R>("setDialogTitle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDialogType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDialogType")] != -1);
		return call<R>("setDialogType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileFilter")] != -1);
		return call<R>("setFileFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileHidingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileHidingEnabled")] != -1);
		return call<R>("setFileHidingEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileSelectionMode")] != -1);
		return call<R>("setFileSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileSystemView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileSystemView")] != -1);
		return call<R>("setFileSystemView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFileView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFileView")] != -1);
		return call<R>("setFileView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMultiSelectionEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMultiSelectionEnabled")] != -1);
		return call<R>("setMultiSelectionEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedFile")] != -1);
		return call<R>("setSelectedFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedFiles")] != -1);
		return call<R>("setSelectedFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto showDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showDialog")] != -1);
		return call<R>("showDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto showOpenDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showOpenDialog")] != -1);
		return call<R>("showOpenDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto showSaveDialog(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showSaveDialog")] != -1);
		return call<R>("showSaveDialog", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
