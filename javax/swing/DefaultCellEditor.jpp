#ifndef javax_swing_DefaultCellEditor_HPP
#define javax_swing_DefaultCellEditor_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultCellEditor : public jObject<::javax::swing::DefaultCellEditor, ::javax::swing::AbstractCellEditor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultCellEditor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JCheckBox)>(), //
		jConstructor<::jvoid(::javax::swing::JComboBox)>(), //
		jConstructor<::jvoid(::javax::swing::JTextField)>(), //
		jMethod<::jvoid()>("cancelCellEditing"), //
		jMethod<::java::lang::Object()>("getCellEditorValue"), //
		jMethod<::jint()>("getClickCountToStart"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::java::awt::Component(::javax::swing::JTable, ::java::lang::Object, ::jboolean, ::jint, ::jint)>("getTableCellEditorComponent"), //
		jMethod<::java::awt::Component(::javax::swing::JTree, ::java::lang::Object, ::jboolean, ::jboolean, ::jboolean, ::jint)>("getTreeCellEditorComponent"), //
		jMethod<::jboolean(::java::util::EventObject)>("isCellEditable"), //
		jMethod<::jvoid(::jint)>("setClickCountToStart"), //
		jMethod<::jboolean(::java::util::EventObject)>("shouldSelectCell"), //
		jMethod<::jboolean()>("stopCellEditing"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancelCellEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("cancelCellEditing")] != -1);
		return call<R>("cancelCellEditing", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getCellEditorValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCellEditorValue")] != -1);
		return call<R>("getCellEditorValue", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getClickCountToStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClickCountToStart")] != -1);
		return call<R>("getClickCountToStart", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTableCellEditorComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTableCellEditorComponent")] != -1);
		return call<R>("getTableCellEditorComponent", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTreeCellEditorComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTreeCellEditorComponent")] != -1);
		return call<R>("getTreeCellEditorComponent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCellEditable")] != -1);
		return call<R>("isCellEditable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClickCountToStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setClickCountToStart")] != -1);
		return call<R>("setClickCountToStart", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldSelectCell(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("shouldSelectCell")] != -1);
		return call<R>("shouldSelectCell", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stopCellEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stopCellEditing")] != -1);
		return call<R>("stopCellEditing", forward<Args>(args)...);
	}

};

#endif
