#ifndef javax_swing_JLayeredPane_HPP
#define javax_swing_JLayeredPane_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JLayeredPane : public jObject<::javax::swing::JLayeredPane, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JLayeredPane";

	constexpr static Enume field_signatures{
		jField<::java::lang::Integer>("DEFAULT_LAYER"), //
		jField<::java::lang::Integer>("DRAG_LAYER"), //
		jField<::java::lang::Integer>("FRAME_CONTENT_LAYER"), //
		jField<::java::lang::String>("LAYER_PROPERTY"), //
		jField<::java::lang::Integer>("MODAL_LAYER"), //
		jField<::java::lang::Integer>("PALETTE_LAYER"), //
		jField<::java::lang::Integer>("POPUP_LAYER"), //
	};

	template<typename F = ::java::lang::Integer>
	static auto DEFAULT_LAYER() {
		static_assert(field_signatures[jField<F>("DEFAULT_LAYER")] != -1);
		return sat<F>("DEFAULT_LAYER");
	}

	template<typename F = ::java::lang::Integer>
	static auto DRAG_LAYER() {
		static_assert(field_signatures[jField<F>("DRAG_LAYER")] != -1);
		return sat<F>("DRAG_LAYER");
	}

	template<typename F = ::java::lang::Integer>
	static auto FRAME_CONTENT_LAYER() {
		static_assert(field_signatures[jField<F>("FRAME_CONTENT_LAYER")] != -1);
		return sat<F>("FRAME_CONTENT_LAYER");
	}

	template<typename F = ::java::lang::String>
	static auto LAYER_PROPERTY() {
		static_assert(field_signatures[jField<F>("LAYER_PROPERTY")] != -1);
		return sat<F>("LAYER_PROPERTY");
	}

	template<typename F = ::java::lang::Integer>
	static auto MODAL_LAYER() {
		static_assert(field_signatures[jField<F>("MODAL_LAYER")] != -1);
		return sat<F>("MODAL_LAYER");
	}

	template<typename F = ::java::lang::Integer>
	static auto PALETTE_LAYER() {
		static_assert(field_signatures[jField<F>("PALETTE_LAYER")] != -1);
		return sat<F>("PALETTE_LAYER");
	}

	template<typename F = ::java::lang::Integer>
	static auto POPUP_LAYER() {
		static_assert(field_signatures[jField<F>("POPUP_LAYER")] != -1);
		return sat<F>("POPUP_LAYER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::jint(::jint)>("getComponentCountInLayer"), //
		jMethod<::java::awt::Component *(::jint)>("getComponentsInLayer"), //
		jMethod<::jint(::java::awt::Component)>("getIndexOf"), //
		jMethod<::jint(::java::awt::Component)>("getLayer"), //
		jMethod<::jint(::javax::swing::JComponent)>("getLayer"), //
		jMethod<::javax::swing::JLayeredPane(::java::awt::Component)>("getLayeredPaneAbove"), //
		jMethod<::jint(::java::awt::Component)>("getPosition"), //
		jMethod<::jint()>("highestLayer"), //
		jMethod<::jboolean()>("isOptimizedDrawingEnabled"), //
		jMethod<::jint()>("lowestLayer"), //
		jMethod<::jvoid(::java::awt::Component)>("moveToBack"), //
		jMethod<::jvoid(::java::awt::Component)>("moveToFront"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint)>("putLayer"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("setLayer"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint)>("setLayer"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("setPosition"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentCountInLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentCountInLayer")] != -1);
		return call<R>("getComponentCountInLayer", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component *, typename... Args>
	auto getComponentsInLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponentsInLayer")] != -1);
		return call<R>("getComponentsInLayer", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndexOf")] != -1);
		return call<R>("getIndexOf", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayer")] != -1);
		return call<R>("getLayer", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	static auto getLayeredPaneAbove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLayeredPaneAbove")] != -1);
		return scall<R>("getLayeredPaneAbove", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto highestLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("highestLayer")] != -1);
		return call<R>("highestLayer", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOptimizedDrawingEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOptimizedDrawingEnabled")] != -1);
		return call<R>("isOptimizedDrawingEnabled", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lowestLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lowestLayer")] != -1);
		return call<R>("lowestLayer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToBack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveToBack")] != -1);
		return call<R>("moveToBack", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToFront(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveToFront")] != -1);
		return call<R>("moveToFront", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto putLayer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putLayer")] != -1);
		return scall<R>("putLayer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLayer")] != -1);
		return call<R>("setLayer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPosition")] != -1);
		return call<R>("setPosition", forward<Args>(args)...);
	}

};

#endif
