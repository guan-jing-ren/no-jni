#ifndef javax_swing_JFormattedTextField$AbstractFormatterFactory_HPP
#define javax_swing_JFormattedTextField$AbstractFormatterFactory_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JFormattedTextField$AbstractFormatterFactory : public jObject<::javax::swing::JFormattedTextField$AbstractFormatterFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JFormattedTextField$AbstractFormatterFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter(::javax::swing::JFormattedTextField)>("getFormatter"), //
	};

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormatter")] != -1);
		return call<R>("getFormatter", std::forward<Args>(args)...);
	}

};

#endif
