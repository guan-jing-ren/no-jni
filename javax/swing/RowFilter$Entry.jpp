#ifndef javax_swing_RowFilter$Entry_HPP
#define javax_swing_RowFilter$Entry_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RowFilter$Entry : public jObject<::javax::swing::RowFilter$Entry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RowFilter$Entry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("getIdentifier"), //
		jMethod<::java::lang::Object()>("getModel"), //
		jMethod<::java::lang::String(::jint)>("getStringValue"), //
		jMethod<::java::lang::Object(::jint)>("getValue"), //
		jMethod<::jint()>("getValueCount"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringValue")] != -1);
		return call<R>("getStringValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValueCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueCount")] != -1);
		return call<R>("getValueCount", std::forward<Args>(args)...);
	}

};

#endif
