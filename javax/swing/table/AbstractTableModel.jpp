#ifndef javax_swing_table_AbstractTableModel_HPP
#define javax_swing_table_AbstractTableModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::AbstractTableModel : public jObject<::javax::swing::table::AbstractTableModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "AbstractTableModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::TableModelListener)>("addTableModelListener"), //
		jMethod<::jint(::java::lang::String)>("findColumn"), //
		jMethod<::jvoid(::jint, ::jint)>("fireTableCellUpdated"), //
		jMethod<::jvoid(::javax::swing::event::TableModelEvent)>("fireTableChanged"), //
		jMethod<::jvoid()>("fireTableDataChanged"), //
		jMethod<::jvoid(::jint, ::jint)>("fireTableRowsDeleted"), //
		jMethod<::jvoid(::jint, ::jint)>("fireTableRowsInserted"), //
		jMethod<::jvoid(::jint, ::jint)>("fireTableRowsUpdated"), //
		jMethod<::jvoid()>("fireTableStructureChanged"), //
		jMethod<::java::lang::Class(::jint)>("getColumnClass"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::javax::swing::event::TableModelListener *()>("getTableModelListeners"), //
		jMethod<::jboolean(::jint, ::jint)>("isCellEditable"), //
		jMethod<::jvoid(::javax::swing::event::TableModelListener)>("removeTableModelListener"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("setValueAt"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTableModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTableModelListener")] != -1);
		return call<R>("addTableModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto findColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findColumn")] != -1);
		return call<R>("findColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableCellUpdated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableCellUpdated")] != -1);
		return call<R>("fireTableCellUpdated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableChanged")] != -1);
		return call<R>("fireTableChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableDataChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableDataChanged")] != -1);
		return call<R>("fireTableDataChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableRowsDeleted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableRowsDeleted")] != -1);
		return call<R>("fireTableRowsDeleted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableRowsInserted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableRowsInserted")] != -1);
		return call<R>("fireTableRowsInserted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableRowsUpdated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableRowsUpdated")] != -1);
		return call<R>("fireTableRowsUpdated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTableStructureChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTableStructureChanged")] != -1);
		return call<R>("fireTableStructureChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getColumnClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnClass")] != -1);
		return call<R>("getColumnClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::TableModelListener *, typename... Args>
	auto getTableModelListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableModelListeners")] != -1);
		return call<R>("getTableModelListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCellEditable")] != -1);
		return call<R>("isCellEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTableModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTableModelListener")] != -1);
		return call<R>("removeTableModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueAt")] != -1);
		return call<R>("setValueAt", std::forward<Args>(args)...);
	}

};

#endif
