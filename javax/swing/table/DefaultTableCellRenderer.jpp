#ifndef javax_swing_table_DefaultTableCellRenderer_HPP
#define javax_swing_table_DefaultTableCellRenderer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::DefaultTableCellRenderer : public jObject<::javax::swing::table::DefaultTableCellRenderer, ::javax::swing::JLabel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "DefaultTableCellRenderer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::jboolean, ::jboolean)>("firePropertyChange"), //
		jMethod<::java::awt::Component(::javax::swing::JTable, ::java::lang::Object, ::jboolean, ::jboolean, ::jint, ::jint)>("getTableCellRendererComponent"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isOpaque"), //
		jMethod<::jvoid()>("repaint"), //
		jMethod<::jvoid(::jlong, ::jint, ::jint, ::jint, ::jint)>("repaint"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("repaint"), //
		jMethod<::jvoid()>("revalidate"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid()>("updateUI"), //
		jMethod<::jvoid()>("validate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getTableCellRendererComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableCellRendererComponent")] != -1);
		return call<R>("getTableCellRendererComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpaque(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpaque")] != -1);
		return call<R>("isOpaque", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto repaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("repaint")] != -1);
		return call<R>("repaint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto revalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("revalidate")] != -1);
		return call<R>("revalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", std::forward<Args>(args)...);
	}

};

#endif
