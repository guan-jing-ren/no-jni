#ifndef javax_swing_table_TableColumnModel_HPP
#define javax_swing_table_TableColumnModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::TableColumnModel : public jObject<::javax::swing::table::TableColumnModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "TableColumnModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("addColumn"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelListener)>("addColumnModelListener"), //
		jMethod<::javax::swing::table::TableColumn(::jint)>("getColumn"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint(::java::lang::Object)>("getColumnIndex"), //
		jMethod<::jint(::jint)>("getColumnIndexAtX"), //
		jMethod<::jint()>("getColumnMargin"), //
		jMethod<::jboolean()>("getColumnSelectionAllowed"), //
		jMethod<::java::util::Enumeration()>("getColumns"), //
		jMethod<::jint()>("getSelectedColumnCount"), //
		jMethod<::jint *()>("getSelectedColumns"), //
		jMethod<::javax::swing::ListSelectionModel()>("getSelectionModel"), //
		jMethod<::jint()>("getTotalColumnWidth"), //
		jMethod<::jvoid(::jint, ::jint)>("moveColumn"), //
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("removeColumn"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelListener)>("removeColumnModelListener"), //
		jMethod<::jvoid(::jint)>("setColumnMargin"), //
		jMethod<::jvoid(::jboolean)>("setColumnSelectionAllowed"), //
		jMethod<::jvoid(::javax::swing::ListSelectionModel)>("setSelectionModel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addColumn")] != -1);
		return call<R>("addColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addColumnModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addColumnModelListener")] != -1);
		return call<R>("addColumnModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumn, typename... Args>
	auto getColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumn")] != -1);
		return call<R>("getColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnIndex")] != -1);
		return call<R>("getColumnIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnIndexAtX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnIndexAtX")] != -1);
		return call<R>("getColumnIndexAtX", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnMargin")] != -1);
		return call<R>("getColumnMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getColumnSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnSelectionAllowed")] != -1);
		return call<R>("getColumnSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumns")] != -1);
		return call<R>("getColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumnCount")] != -1);
		return call<R>("getSelectedColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedColumns")] != -1);
		return call<R>("getSelectedColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ListSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTotalColumnWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalColumnWidth")] != -1);
		return call<R>("getTotalColumnWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveColumn")] != -1);
		return call<R>("moveColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeColumn")] != -1);
		return call<R>("removeColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeColumnModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeColumnModelListener")] != -1);
		return call<R>("removeColumnModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnMargin")] != -1);
		return call<R>("setColumnMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnSelectionAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnSelectionAllowed")] != -1);
		return call<R>("setColumnSelectionAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

};

#endif
