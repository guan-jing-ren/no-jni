#ifndef javax_swing_table_TableColumn_HPP
#define javax_swing_table_TableColumn_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::TableColumn : public jObject<::javax::swing::table::TableColumn, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "TableColumn";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CELL_RENDERER_PROPERTY"), //
		jField<::java::lang::String>("COLUMN_WIDTH_PROPERTY"), //
		jField<::java::lang::String>("HEADER_RENDERER_PROPERTY"), //
		jField<::java::lang::String>("HEADER_VALUE_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto CELL_RENDERER_PROPERTY() {
		static_assert(field_signatures[jField<F>("CELL_RENDERER_PROPERTY")] != -1);
		return sat<F>("CELL_RENDERER_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto COLUMN_WIDTH_PROPERTY() {
		static_assert(field_signatures[jField<F>("COLUMN_WIDTH_PROPERTY")] != -1);
		return sat<F>("COLUMN_WIDTH_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto HEADER_RENDERER_PROPERTY() {
		static_assert(field_signatures[jField<F>("HEADER_RENDERER_PROPERTY")] != -1);
		return sat<F>("HEADER_RENDERER_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto HEADER_VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("HEADER_VALUE_PROPERTY")] != -1);
		return sat<F>("HEADER_VALUE_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::javax::swing::table::TableCellRenderer, ::javax::swing::table::TableCellEditor)>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid()>("disableResizedPosting"), //
		jMethod<::jvoid()>("enableResizedPosting"), //
		jMethod<::javax::swing::table::TableCellEditor()>("getCellEditor"), //
		jMethod<::javax::swing::table::TableCellRenderer()>("getCellRenderer"), //
		jMethod<::javax::swing::table::TableCellRenderer()>("getHeaderRenderer"), //
		jMethod<::java::lang::Object()>("getHeaderValue"), //
		jMethod<::java::lang::Object()>("getIdentifier"), //
		jMethod<::jint()>("getMaxWidth"), //
		jMethod<::jint()>("getMinWidth"), //
		jMethod<::jint()>("getModelIndex"), //
		jMethod<::jint()>("getPreferredWidth"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::jboolean()>("getResizable"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::javax::swing::table::TableCellEditor)>("setCellEditor"), //
		jMethod<::jvoid(::javax::swing::table::TableCellRenderer)>("setCellRenderer"), //
		jMethod<::jvoid(::javax::swing::table::TableCellRenderer)>("setHeaderRenderer"), //
		jMethod<::jvoid(::java::lang::Object)>("setHeaderValue"), //
		jMethod<::jvoid(::java::lang::Object)>("setIdentifier"), //
		jMethod<::jvoid(::jint)>("setMaxWidth"), //
		jMethod<::jvoid(::jint)>("setMinWidth"), //
		jMethod<::jvoid(::jint)>("setModelIndex"), //
		jMethod<::jvoid(::jint)>("setPreferredWidth"), //
		jMethod<::jvoid(::jboolean)>("setResizable"), //
		jMethod<::jvoid(::jint)>("setWidth"), //
		jMethod<::jvoid()>("sizeWidthToFit"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disableResizedPosting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableResizedPosting")] != -1);
		return call<R>("disableResizedPosting", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enableResizedPosting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableResizedPosting")] != -1);
		return call<R>("enableResizedPosting", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellEditor, typename... Args>
	auto getCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellEditor")] != -1);
		return call<R>("getCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellRenderer, typename... Args>
	auto getCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellRenderer")] != -1);
		return call<R>("getCellRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellRenderer, typename... Args>
	auto getHeaderRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderRenderer")] != -1);
		return call<R>("getHeaderRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getHeaderValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderValue")] != -1);
		return call<R>("getHeaderValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxWidth")] != -1);
		return call<R>("getMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinWidth")] != -1);
		return call<R>("getMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getModelIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModelIndex")] != -1);
		return call<R>("getModelIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPreferredWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredWidth")] != -1);
		return call<R>("getPreferredWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResizable")] != -1);
		return call<R>("getResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellEditor")] != -1);
		return call<R>("setCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellRenderer")] != -1);
		return call<R>("setCellRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaderRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaderRenderer")] != -1);
		return call<R>("setHeaderRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaderValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaderValue")] != -1);
		return call<R>("setHeaderValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdentifier")] != -1);
		return call<R>("setIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxWidth")] != -1);
		return call<R>("setMaxWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinWidth")] != -1);
		return call<R>("setMinWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModelIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModelIndex")] != -1);
		return call<R>("setModelIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreferredWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPreferredWidth")] != -1);
		return call<R>("setPreferredWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResizable")] != -1);
		return call<R>("setResizable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWidth")] != -1);
		return call<R>("setWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sizeWidthToFit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sizeWidthToFit")] != -1);
		return call<R>("sizeWidthToFit", std::forward<Args>(args)...);
	}

};

#endif
