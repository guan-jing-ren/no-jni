#ifndef javax_swing_table_TableModel_HPP
#define javax_swing_table_TableModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::TableModel : public jObject<::javax::swing::table::TableModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "TableModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::TableModelListener)>("addTableModelListener"), //
		jMethod<::java::lang::Class(::jint)>("getColumnClass"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::java::lang::Object(::jint, ::jint)>("getValueAt"), //
		jMethod<::jboolean(::jint, ::jint)>("isCellEditable"), //
		jMethod<::jvoid(::javax::swing::event::TableModelListener)>("removeTableModelListener"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("setValueAt"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addTableModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTableModelListener")] != -1);
		return call<R>("addTableModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getColumnClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnClass")] != -1);
		return call<R>("getColumnClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueAt")] != -1);
		return call<R>("getValueAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCellEditable")] != -1);
		return call<R>("isCellEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTableModelListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTableModelListener")] != -1);
		return call<R>("removeTableModelListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueAt")] != -1);
		return call<R>("setValueAt", std::forward<Args>(args)...);
	}

};

#endif
