#ifndef javax_swing_table_JTableHeader_HPP
#define javax_swing_table_JTableHeader_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::JTableHeader : public jObject<::javax::swing::table::JTableHeader, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "JTableHeader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::table::TableColumnModel)>(), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnAdded"), //
		jMethod<::jint(::java::awt::Point)>("columnAtPoint"), //
		jMethod<::jvoid(::javax::swing::event::ChangeEvent)>("columnMarginChanged"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnMoved"), //
		jMethod<::jvoid(::javax::swing::event::TableColumnModelEvent)>("columnRemoved"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionEvent)>("columnSelectionChanged"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::table::TableColumnModel()>("getColumnModel"), //
		jMethod<::javax::swing::table::TableCellRenderer()>("getDefaultRenderer"), //
		jMethod<::javax::swing::table::TableColumn()>("getDraggedColumn"), //
		jMethod<::jint()>("getDraggedDistance"), //
		jMethod<::java::awt::Rectangle(::jint)>("getHeaderRect"), //
		jMethod<::jboolean()>("getReorderingAllowed"), //
		jMethod<::jboolean()>("getResizingAllowed"), //
		jMethod<::javax::swing::table::TableColumn()>("getResizingColumn"), //
		jMethod<::javax::swing::JTable()>("getTable"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::javax::swing::plaf::TableHeaderUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jboolean()>("getUpdateTableInRealTime"), //
		jMethod<::jvoid()>("resizeAndRepaint"), //
		jMethod<::jvoid(::javax::swing::table::TableColumnModel)>("setColumnModel"), //
		jMethod<::jvoid(::javax::swing::table::TableCellRenderer)>("setDefaultRenderer"), //
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("setDraggedColumn"), //
		jMethod<::jvoid(::jint)>("setDraggedDistance"), //
		jMethod<::jvoid(::jboolean)>("setReorderingAllowed"), //
		jMethod<::jvoid(::jboolean)>("setResizingAllowed"), //
		jMethod<::jvoid(::javax::swing::table::TableColumn)>("setResizingColumn"), //
		jMethod<::jvoid(::javax::swing::JTable)>("setTable"), //
		jMethod<::jvoid(::javax::swing::plaf::TableHeaderUI)>("setUI"), //
		jMethod<::jvoid(::jboolean)>("setUpdateTableInRealTime"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto columnAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnAdded")] != -1);
		return call<R>("columnAdded", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto columnAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnAtPoint")] != -1);
		return call<R>("columnAtPoint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnMarginChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnMarginChanged")] != -1);
		return call<R>("columnMarginChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnMoved")] != -1);
		return call<R>("columnMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnRemoved")] != -1);
		return call<R>("columnRemoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto columnSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("columnSelectionChanged")] != -1);
		return call<R>("columnSelectionChanged", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumnModel, typename... Args>
	auto getColumnModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnModel")] != -1);
		return call<R>("getColumnModel", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableCellRenderer, typename... Args>
	auto getDefaultRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultRenderer")] != -1);
		return call<R>("getDefaultRenderer", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumn, typename... Args>
	auto getDraggedColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDraggedColumn")] != -1);
		return call<R>("getDraggedColumn", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDraggedDistance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDraggedDistance")] != -1);
		return call<R>("getDraggedDistance", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getHeaderRect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeaderRect")] != -1);
		return call<R>("getHeaderRect", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReorderingAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReorderingAllowed")] != -1);
		return call<R>("getReorderingAllowed", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getResizingAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResizingAllowed")] != -1);
		return call<R>("getResizingAllowed", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableColumn, typename... Args>
	auto getResizingColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResizingColumn")] != -1);
		return call<R>("getResizingColumn", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JTable, typename... Args>
	auto getTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTable")] != -1);
		return call<R>("getTable", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::TableHeaderUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUpdateTableInRealTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUpdateTableInRealTime")] != -1);
		return call<R>("getUpdateTableInRealTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resizeAndRepaint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resizeAndRepaint")] != -1);
		return call<R>("resizeAndRepaint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnModel")] != -1);
		return call<R>("setColumnModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultRenderer")] != -1);
		return call<R>("setDefaultRenderer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDraggedColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDraggedColumn")] != -1);
		return call<R>("setDraggedColumn", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDraggedDistance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDraggedDistance")] != -1);
		return call<R>("setDraggedDistance", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReorderingAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReorderingAllowed")] != -1);
		return call<R>("setReorderingAllowed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizingAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResizingAllowed")] != -1);
		return call<R>("setResizingAllowed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResizingColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResizingColumn")] != -1);
		return call<R>("setResizingColumn", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTable")] != -1);
		return call<R>("setTable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUpdateTableInRealTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUpdateTableInRealTime")] != -1);
		return call<R>("setUpdateTableInRealTime", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
