#ifndef javax_swing_table_TableRowSorter_HPP
#define javax_swing_table_TableRowSorter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::TableRowSorter : public jObject<::javax::swing::table::TableRowSorter, ::javax::swing::DefaultRowSorter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "TableRowSorter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::table::TableModel)>(), //
		jMethod<::java::util::Comparator(::jint)>("getComparator"), //
		jMethod<::javax::swing::table::TableStringConverter()>("getStringConverter"), //
		jMethod<::jvoid(::javax::swing::table::TableModel)>("setModel"), //
		jMethod<::jvoid(::javax::swing::table::TableStringConverter)>("setStringConverter"), //
	};

	template<typename R = ::java::util::Comparator, typename... Args>
	auto getComparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComparator")] != -1);
		return call<R>("getComparator", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::table::TableStringConverter, typename... Args>
	auto getStringConverter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringConverter")] != -1);
		return call<R>("getStringConverter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStringConverter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStringConverter")] != -1);
		return call<R>("setStringConverter", std::forward<Args>(args)...);
	}

};

#endif
