#ifndef javax_swing_table_DefaultTableModel_HPP
#define javax_swing_table_DefaultTableModel_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::table::DefaultTableModel : public jObject<::javax::swing::table::DefaultTableModel, ::javax::swing::table::AbstractTableModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_table / "DefaultTableModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::util::Vector, ::jint)>(), //
		jConstructor<::jvoid(::java::util::Vector, ::java::util::Vector)>(), //
		jConstructor<::jvoid(::java::lang::Object *, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::Object **, ::java::lang::Object *)>(), //
		jMethod<::jvoid(::java::lang::Object)>("addColumn"), //
		jMethod<::jvoid(::java::lang::Object, ::java::util::Vector)>("addColumn"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object *)>("addColumn"), //
		jMethod<::jvoid(::java::util::Vector)>("addRow"), //
		jMethod<::jvoid(::java::lang::Object *)>("addRow"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::java::util::Vector()>("getDataVector"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::java::lang::Object(::jint, ::jint)>("getValueAt"), //
		jMethod<::jvoid(::jint, ::java::util::Vector)>("insertRow"), //
		jMethod<::jvoid(::jint, ::java::lang::Object *)>("insertRow"), //
		jMethod<::jboolean(::jint, ::jint)>("isCellEditable"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("moveRow"), //
		jMethod<::jvoid(::javax::swing::event::TableModelEvent)>("newDataAvailable"), //
		jMethod<::jvoid(::javax::swing::event::TableModelEvent)>("newRowsAdded"), //
		jMethod<::jvoid(::jint)>("removeRow"), //
		jMethod<::jvoid(::javax::swing::event::TableModelEvent)>("rowsRemoved"), //
		jMethod<::jvoid(::jint)>("setColumnCount"), //
		jMethod<::jvoid(::java::util::Vector)>("setColumnIdentifiers"), //
		jMethod<::jvoid(::java::lang::Object *)>("setColumnIdentifiers"), //
		jMethod<::jvoid(::java::util::Vector, ::java::util::Vector)>("setDataVector"), //
		jMethod<::jvoid(::java::lang::Object **, ::java::lang::Object *)>("setDataVector"), //
		jMethod<::jvoid(::jint)>("setNumRows"), //
		jMethod<::jvoid(::jint)>("setRowCount"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("setValueAt"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addColumn")] != -1);
		return call<R>("addColumn", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRow")] != -1);
		return call<R>("addRow", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getDataVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataVector")] != -1);
		return call<R>("getDataVector", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueAt")] != -1);
		return call<R>("getValueAt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertRow")] != -1);
		return call<R>("insertRow", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCellEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCellEditable")] != -1);
		return call<R>("isCellEditable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveRow")] != -1);
		return call<R>("moveRow", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto newDataAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newDataAvailable")] != -1);
		return call<R>("newDataAvailable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto newRowsAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newRowsAdded")] != -1);
		return call<R>("newRowsAdded", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeRow")] != -1);
		return call<R>("removeRow", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rowsRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("rowsRemoved")] != -1);
		return call<R>("rowsRemoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnCount")] != -1);
		return call<R>("setColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnIdentifiers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnIdentifiers")] != -1);
		return call<R>("setColumnIdentifiers", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataVector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDataVector")] != -1);
		return call<R>("setDataVector", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNumRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNumRows")] != -1);
		return call<R>("setNumRows", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRowCount")] != -1);
		return call<R>("setRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueAt")] != -1);
		return call<R>("setValueAt", forward<Args>(args)...);
	}

};

#endif
