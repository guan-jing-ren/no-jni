#ifndef javax_swing_text_AbstractWriter_HPP
#define javax_swing_text_AbstractWriter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractWriter : public jObject<::javax::swing::text::AbstractWriter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::java::lang::String()>("getLineSeparator"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::jvoid(::java::lang::String)>("setLineSeparator"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLineSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineSeparator")] != -1);
		return call<R>("getLineSeparator", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLineSeparator")] != -1);
		return call<R>("setLineSeparator", forward<Args>(args)...);
	}

};

#endif
