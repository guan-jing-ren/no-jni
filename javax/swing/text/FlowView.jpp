#ifndef javax_swing_text_FlowView_HPP
#define javax_swing_text_FlowView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::FlowView : public jObject<::javax::swing::text::FlowView, ::javax::swing::text::BoxView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "FlowView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element, ::jint)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::jint()>("getFlowAxis"), //
		jMethod<::jint(::jint)>("getFlowSpan"), //
		jMethod<::jint(::jint)>("getFlowStart"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFlowAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFlowAxis")] != -1);
		return call<R>("getFlowAxis", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFlowSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFlowSpan")] != -1);
		return call<R>("getFlowSpan", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFlowStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFlowStart")] != -1);
		return call<R>("getFlowStart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", forward<Args>(args)...);
	}

};

#endif
