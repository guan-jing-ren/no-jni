#ifndef javax_swing_text_Highlighter$Highlight_HPP
#define javax_swing_text_Highlighter$Highlight_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Highlighter$Highlight : public jObject<::javax::swing::text::Highlighter$Highlight, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Highlighter$Highlight";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::javax::swing::text::Highlighter$HighlightPainter()>("getPainter"), //
		jMethod<::jint()>("getStartOffset"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Highlighter$HighlightPainter, typename... Args>
	auto getPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPainter")] != -1);
		return call<R>("getPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

};

#endif
