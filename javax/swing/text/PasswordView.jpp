#ifndef javax_swing_text_PasswordView_HPP
#define javax_swing_text_PasswordView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::PasswordView : public jObject<::javax::swing::text::PasswordView, ::javax::swing::text::FieldView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "PasswordView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", forward<Args>(args)...);
	}

};

#endif
