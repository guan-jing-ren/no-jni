#ifndef javax_swing_text_Caret_HPP
#define javax_swing_text_Caret_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Caret : public jObject<::javax::swing::text::Caret, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Caret";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("deinstall"), //
		jMethod<::jint()>("getBlinkRate"), //
		jMethod<::jint()>("getDot"), //
		jMethod<::java::awt::Point()>("getMagicCaretPosition"), //
		jMethod<::jint()>("getMark"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("install"), //
		jMethod<::jboolean()>("isSelectionVisible"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::jint)>("moveDot"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jint)>("setBlinkRate"), //
		jMethod<::jvoid(::jint)>("setDot"), //
		jMethod<::jvoid(::java::awt::Point)>("setMagicCaretPosition"), //
		jMethod<::jvoid(::jboolean)>("setSelectionVisible"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deinstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deinstall")] != -1);
		return call<R>("deinstall", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlinkRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlinkRate")] != -1);
		return call<R>("getBlinkRate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDot")] != -1);
		return call<R>("getDot", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getMagicCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMagicCaretPosition")] != -1);
		return call<R>("getMagicCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMark")] != -1);
		return call<R>("getMark", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSelectionVisible")] != -1);
		return call<R>("isSelectionVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveDot")] != -1);
		return call<R>("moveDot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlinkRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBlinkRate")] != -1);
		return call<R>("setBlinkRate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDot")] != -1);
		return call<R>("setDot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMagicCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMagicCaretPosition")] != -1);
		return call<R>("setMagicCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionVisible")] != -1);
		return call<R>("setSelectionVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", forward<Args>(args)...);
	}

};

#endif
