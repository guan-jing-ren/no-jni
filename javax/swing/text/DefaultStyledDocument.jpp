#ifndef javax_swing_text_DefaultStyledDocument_HPP
#define javax_swing_text_DefaultStyledDocument_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultStyledDocument : public jObject<::javax::swing::text::DefaultStyledDocument, ::javax::swing::text::AbstractDocument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultStyledDocument";

	constexpr static Enume field_signatures{
		jField<::jint>("BUFFER_SIZE_DEFAULT"), //
	};

	template<typename F = ::jint>
	static auto BUFFER_SIZE_DEFAULT() {
		static_assert(field_signatures[jField<F>("BUFFER_SIZE_DEFAULT")] != -1);
		return sat<F>("BUFFER_SIZE_DEFAULT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument$Content, ::javax::swing::text::StyleContext)>(), //
		jConstructor<::jvoid(::javax::swing::text::StyleContext)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("addDocumentListener"), //
		jMethod<::javax::swing::text::Style(::java::lang::String, ::javax::swing::text::Style)>("addStyle"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getBackground"), //
		jMethod<::javax::swing::text::Element(::jint)>("getCharacterElement"), //
		jMethod<::javax::swing::text::Element()>("getDefaultRootElement"), //
		jMethod<::java::awt::Font(::javax::swing::text::AttributeSet)>("getFont"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getForeground"), //
		jMethod<::javax::swing::text::Style(::jint)>("getLogicalStyle"), //
		jMethod<::javax::swing::text::Element(::jint)>("getParagraphElement"), //
		jMethod<::javax::swing::text::Style(::java::lang::String)>("getStyle"), //
		jMethod<::java::util::Enumeration()>("getStyleNames"), //
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("removeDocumentListener"), //
		jMethod<::jvoid(::javax::swing::text::Element)>("removeElement"), //
		jMethod<::jvoid(::java::lang::String)>("removeStyle"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AttributeSet, ::jboolean)>("setCharacterAttributes"), //
		jMethod<::jvoid(::jint, ::javax::swing::text::Style)>("setLogicalStyle"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AttributeSet, ::jboolean)>("setParagraphAttributes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDocumentListener")] != -1);
		return call<R>("addDocumentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto addStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addStyle")] != -1);
		return call<R>("addStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getCharacterElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterElement")] != -1);
		return call<R>("getCharacterElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getDefaultRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRootElement")] != -1);
		return call<R>("getDefaultRootElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getLogicalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLogicalStyle")] != -1);
		return call<R>("getLogicalStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getParagraphElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParagraphElement")] != -1);
		return call<R>("getParagraphElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getStyleNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStyleNames")] != -1);
		return call<R>("getStyleNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDocumentListener")] != -1);
		return call<R>("removeDocumentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeElement")] != -1);
		return call<R>("removeElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeStyle")] != -1);
		return call<R>("removeStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterAttributes")] != -1);
		return call<R>("setCharacterAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLogicalStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLogicalStyle")] != -1);
		return call<R>("setLogicalStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParagraphAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParagraphAttributes")] != -1);
		return call<R>("setParagraphAttributes", std::forward<Args>(args)...);
	}

};

#endif
