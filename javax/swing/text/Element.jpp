#ifndef javax_swing_text_Element_HPP
#define javax_swing_text_Element_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Element : public jObject<::javax::swing::text::Element, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Element";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::javax::swing::text::Element(::jint)>("getElement"), //
		jMethod<::jint()>("getElementCount"), //
		jMethod<::jint(::jint)>("getElementIndex"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::text::Element()>("getParentElement"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::jboolean()>("isLeaf"), //
	};

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementCount")] != -1);
		return call<R>("getElementCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementIndex")] != -1);
		return call<R>("getElementIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getParentElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentElement")] != -1);
		return call<R>("getParentElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", std::forward<Args>(args)...);
	}

};

#endif
