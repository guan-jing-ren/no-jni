#ifndef javax_swing_text_AttributeSet_HPP
#define javax_swing_text_AttributeSet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AttributeSet : public jObject<::javax::swing::text::AttributeSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AttributeSet";

	constexpr static Enume field_signatures{
		jField<::java::lang::Object>("NameAttribute"), //
		jField<::java::lang::Object>("ResolveAttribute"), //
	};

	template<typename F = ::java::lang::Object>
	static auto NameAttribute() {
		static_assert(field_signatures[jField<F>("NameAttribute")] != -1);
		return sat<F>("NameAttribute");
	}

	template<typename F = ::java::lang::Object>
	static auto ResolveAttribute() {
		static_assert(field_signatures[jField<F>("ResolveAttribute")] != -1);
		return sat<F>("ResolveAttribute");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("containsAttribute"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("containsAttributes"), //
		jMethod<::javax::swing::text::AttributeSet()>("copyAttributes"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getAttribute"), //
		jMethod<::jint()>("getAttributeCount"), //
		jMethod<::java::util::Enumeration()>("getAttributeNames"), //
		jMethod<::javax::swing::text::AttributeSet()>("getResolveParent"), //
		jMethod<::jboolean(::java::lang::Object)>("isDefined"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isEqual"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto containsAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAttribute")] != -1);
		return call<R>("containsAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAttributes")] != -1);
		return call<R>("containsAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto copyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("copyAttributes")] != -1);
		return call<R>("copyAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeCount")] != -1);
		return call<R>("getAttributeCount", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResolveParent")] != -1);
		return call<R>("getResolveParent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefined")] != -1);
		return call<R>("isDefined", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", forward<Args>(args)...);
	}

};

#endif
