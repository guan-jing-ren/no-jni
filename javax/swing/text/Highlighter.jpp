#ifndef javax_swing_text_Highlighter_HPP
#define javax_swing_text_Highlighter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Highlighter : public jObject<::javax::swing::text::Highlighter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Highlighter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::jint, ::jint, ::javax::swing::text::Highlighter$HighlightPainter)>("addHighlight"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("changeHighlight"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("deinstall"), //
		jMethod<::javax::swing::text::Highlighter$Highlight *()>("getHighlights"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("install"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid()>("removeAllHighlights"), //
		jMethod<::jvoid(::java::lang::Object)>("removeHighlight"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto addHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addHighlight")] != -1);
		return call<R>("addHighlight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changeHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changeHighlight")] != -1);
		return call<R>("changeHighlight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deinstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deinstall")] != -1);
		return call<R>("deinstall", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Highlighter$Highlight *, typename... Args>
	auto getHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHighlights")] != -1);
		return call<R>("getHighlights", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllHighlights")] != -1);
		return call<R>("removeAllHighlights", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeHighlight")] != -1);
		return call<R>("removeHighlight", forward<Args>(args)...);
	}

};

#endif
