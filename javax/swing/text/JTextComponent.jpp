#ifndef javax_swing_text_JTextComponent_HPP
#define javax_swing_text_JTextComponent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::JTextComponent : public jObject<::javax::swing::text::JTextComponent, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "JTextComponent";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_KEYMAP"), //
		jField<::java::lang::String>("FOCUS_ACCELERATOR_KEY"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_KEYMAP() {
		static_assert(field_signatures[jField<F>("DEFAULT_KEYMAP")] != -1);
		return sat<F>("DEFAULT_KEYMAP");
	}

	template<typename F = ::java::lang::String>
	static auto FOCUS_ACCELERATOR_KEY() {
		static_assert(field_signatures[jField<F>("FOCUS_ACCELERATOR_KEY")] != -1);
		return sat<F>("FOCUS_ACCELERATOR_KEY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::CaretListener)>("addCaretListener"), //
		jMethod<::jvoid(::java::awt::event::InputMethodListener)>("addInputMethodListener"), //
		jMethod<::javax::swing::text::Keymap(::java::lang::String, ::javax::swing::text::Keymap)>("addKeymap"), //
		jMethod<::jvoid()>("copy"), //
		jMethod<::jvoid()>("cut"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::javax::swing::text::Caret()>("getCaret"), //
		jMethod<::java::awt::Color()>("getCaretColor"), //
		jMethod<::javax::swing::event::CaretListener *()>("getCaretListeners"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::java::awt::Color()>("getDisabledTextColor"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::text::JTextComponent$DropLocation()>("getDropLocation"), //
		jMethod<::javax::swing::DropMode()>("getDropMode"), //
		jMethod<::jchar()>("getFocusAccelerator"), //
		jMethod<::javax::swing::text::Highlighter()>("getHighlighter"), //
		jMethod<::java::awt::im::InputMethodRequests()>("getInputMethodRequests"), //
		jMethod<::javax::swing::text::Keymap()>("getKeymap"), //
		jMethod<::javax::swing::text::Keymap(::java::lang::String)>("getKeymap"), //
		jMethod<::java::awt::Insets()>("getMargin"), //
		jMethod<::javax::swing::text::NavigationFilter()>("getNavigationFilter"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::java::awt::print::Printable(::java::text::MessageFormat, ::java::text::MessageFormat)>("getPrintable"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableBlockIncrement"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::java::lang::String()>("getSelectedText"), //
		jMethod<::java::awt::Color()>("getSelectedTextColor"), //
		jMethod<::java::awt::Color()>("getSelectionColor"), //
		jMethod<::jint()>("getSelectionEnd"), //
		jMethod<::jint()>("getSelectionStart"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getText"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::javax::swing::plaf::TextUI()>("getUI"), //
		jMethod<::jboolean()>("isEditable"), //
		jMethod<::jvoid(::javax::swing::text::Keymap, ::javax::swing::text::JTextComponent$KeyBinding *, ::javax::swing::Action *)>("loadKeymap"), //
		jMethod<::java::awt::Rectangle(::jint)>("modelToView"), //
		jMethod<::jvoid(::jint)>("moveCaretPosition"), //
		jMethod<::jvoid()>("paste"), //
		jMethod<::jboolean()>("print"), //
		jMethod<::jboolean(::java::text::MessageFormat, ::java::text::MessageFormat)>("print"), //
		jMethod<::jboolean(::java::text::MessageFormat, ::java::text::MessageFormat, ::jboolean, ::javax::print::PrintService, ::javax::print::attribute::PrintRequestAttributeSet, ::jboolean)>("print"), //
		jMethod<::jvoid(::java::io::Reader, ::java::lang::Object)>("read"), //
		jMethod<::jvoid(::javax::swing::event::CaretListener)>("removeCaretListener"), //
		jMethod<::javax::swing::text::Keymap(::java::lang::String)>("removeKeymap"), //
		jMethod<::jvoid()>("removeNotify"), //
		jMethod<::jvoid(::java::lang::String)>("replaceSelection"), //
		jMethod<::jvoid(::jint, ::jint)>("select"), //
		jMethod<::jvoid()>("selectAll"), //
		jMethod<::jvoid(::javax::swing::text::Caret)>("setCaret"), //
		jMethod<::jvoid(::java::awt::Color)>("setCaretColor"), //
		jMethod<::jvoid(::jint)>("setCaretPosition"), //
		jMethod<::jvoid(::java::awt::ComponentOrientation)>("setComponentOrientation"), //
		jMethod<::jvoid(::java::awt::Color)>("setDisabledTextColor"), //
		jMethod<::jvoid(::javax::swing::text::Document)>("setDocument"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::DropMode)>("setDropMode"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::jchar)>("setFocusAccelerator"), //
		jMethod<::jvoid(::javax::swing::text::Highlighter)>("setHighlighter"), //
		jMethod<::jvoid(::javax::swing::text::Keymap)>("setKeymap"), //
		jMethod<::jvoid(::java::awt::Insets)>("setMargin"), //
		jMethod<::jvoid(::javax::swing::text::NavigationFilter)>("setNavigationFilter"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectedTextColor"), //
		jMethod<::jvoid(::java::awt::Color)>("setSelectionColor"), //
		jMethod<::jvoid(::jint)>("setSelectionEnd"), //
		jMethod<::jvoid(::jint)>("setSelectionStart"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::javax::swing::plaf::TextUI)>("setUI"), //
		jMethod<::jvoid()>("updateUI"), //
		jMethod<::jint(::java::awt::Point)>("viewToModel"), //
		jMethod<::jvoid(::java::io::Writer)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addCaretListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCaretListener")] != -1);
		return call<R>("addCaretListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addInputMethodListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInputMethodListener")] != -1);
		return call<R>("addInputMethodListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Keymap, typename... Args>
	static auto addKeymap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addKeymap")] != -1);
		return scall<R>("addKeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Caret, typename... Args>
	auto getCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaret")] != -1);
		return call<R>("getCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getCaretColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretColor")] != -1);
		return call<R>("getCaretColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::CaretListener *, typename... Args>
	auto getCaretListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretListeners")] != -1);
		return call<R>("getCaretListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getDisabledTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledTextColor")] != -1);
		return call<R>("getDisabledTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::JTextComponent$DropLocation, typename... Args>
	auto getDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropLocation")] != -1);
		return call<R>("getDropLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DropMode, typename... Args>
	auto getDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropMode")] != -1);
		return call<R>("getDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getFocusAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusAccelerator")] != -1);
		return call<R>("getFocusAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Highlighter, typename... Args>
	auto getHighlighter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighlighter")] != -1);
		return call<R>("getHighlighter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::im::InputMethodRequests, typename... Args>
	auto getInputMethodRequests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputMethodRequests")] != -1);
		return call<R>("getInputMethodRequests", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Keymap, typename... Args>
	auto getKeymap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeymap")] != -1);
		return call<R>("getKeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMargin")] != -1);
		return call<R>("getMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::NavigationFilter, typename... Args>
	auto getNavigationFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNavigationFilter")] != -1);
		return call<R>("getNavigationFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::print::Printable, typename... Args>
	auto getPrintable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintable")] != -1);
		return call<R>("getPrintable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableBlockIncrement")] != -1);
		return call<R>("getScrollableBlockIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedText")] != -1);
		return call<R>("getSelectedText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectedTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedTextColor")] != -1);
		return call<R>("getSelectedTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionColor")] != -1);
		return call<R>("getSelectionColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionEnd")] != -1);
		return call<R>("getSelectionEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionStart")] != -1);
		return call<R>("getSelectionStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::TextUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditable")] != -1);
		return call<R>("isEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto loadKeymap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadKeymap")] != -1);
		return scall<R>("loadKeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveCaretPosition")] != -1);
		return call<R>("moveCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto print(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("print")] != -1);
		return call<R>("print", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeCaretListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeCaretListener")] != -1);
		return call<R>("removeCaretListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Keymap, typename... Args>
	static auto removeKeymap(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeymap")] != -1);
		return scall<R>("removeKeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotify")] != -1);
		return call<R>("removeNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceSelection")] != -1);
		return call<R>("replaceSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto select(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("select")] != -1);
		return call<R>("select", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAll")] != -1);
		return call<R>("selectAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaret")] != -1);
		return call<R>("setCaret", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaretColor")] != -1);
		return call<R>("setCaretColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaretPosition")] != -1);
		return call<R>("setCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setComponentOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setComponentOrientation")] != -1);
		return call<R>("setComponentOrientation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabledTextColor")] != -1);
		return call<R>("setDisabledTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocument")] != -1);
		return call<R>("setDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropMode")] != -1);
		return call<R>("setDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFocusAccelerator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFocusAccelerator")] != -1);
		return call<R>("setFocusAccelerator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHighlighter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHighlighter")] != -1);
		return call<R>("setHighlighter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeymap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeymap")] != -1);
		return call<R>("setKeymap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMargin")] != -1);
		return call<R>("setMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNavigationFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNavigationFilter")] != -1);
		return call<R>("setNavigationFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedTextColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedTextColor")] != -1);
		return call<R>("setSelectedTextColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionColor")] != -1);
		return call<R>("setSelectionColor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionEnd")] != -1);
		return call<R>("setSelectionEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionStart")] != -1);
		return call<R>("setSelectionStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
