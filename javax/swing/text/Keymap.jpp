#ifndef javax_swing_text_Keymap_HPP
#define javax_swing_text_Keymap_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Keymap : public jObject<::javax::swing::text::Keymap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Keymap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::KeyStroke, ::javax::swing::Action)>("addActionForKeyStroke"), //
		jMethod<::javax::swing::Action(::javax::swing::KeyStroke)>("getAction"), //
		jMethod<::javax::swing::Action *()>("getBoundActions"), //
		jMethod<::javax::swing::KeyStroke *()>("getBoundKeyStrokes"), //
		jMethod<::javax::swing::Action()>("getDefaultAction"), //
		jMethod<::javax::swing::KeyStroke *(::javax::swing::Action)>("getKeyStrokesForAction"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::text::Keymap()>("getResolveParent"), //
		jMethod<::jboolean(::javax::swing::KeyStroke)>("isLocallyDefined"), //
		jMethod<::jvoid()>("removeBindings"), //
		jMethod<::jvoid(::javax::swing::KeyStroke)>("removeKeyStrokeBinding"), //
		jMethod<::jvoid(::javax::swing::Action)>("setDefaultAction"), //
		jMethod<::jvoid(::javax::swing::text::Keymap)>("setResolveParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionForKeyStroke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addActionForKeyStroke")] != -1);
		return call<R>("addActionForKeyStroke", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAction")] != -1);
		return call<R>("getAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getBoundActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoundActions")] != -1);
		return call<R>("getBoundActions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::KeyStroke *, typename... Args>
	auto getBoundKeyStrokes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoundKeyStrokes")] != -1);
		return call<R>("getBoundKeyStrokes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action, typename... Args>
	auto getDefaultAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultAction")] != -1);
		return call<R>("getDefaultAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::KeyStroke *, typename... Args>
	auto getKeyStrokesForAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyStrokesForAction")] != -1);
		return call<R>("getKeyStrokesForAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Keymap, typename... Args>
	auto getResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolveParent")] != -1);
		return call<R>("getResolveParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocallyDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocallyDefined")] != -1);
		return call<R>("isLocallyDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeBindings")] != -1);
		return call<R>("removeBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeKeyStrokeBinding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeKeyStrokeBinding")] != -1);
		return call<R>("removeKeyStrokeBinding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultAction")] != -1);
		return call<R>("setDefaultAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResolveParent")] != -1);
		return call<R>("setResolveParent", std::forward<Args>(args)...);
	}

};

#endif
