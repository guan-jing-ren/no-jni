#ifndef javax_swing_text_StyleConstants_HPP
#define javax_swing_text_StyleConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::StyleConstants : public jObject<::javax::swing::text::StyleConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "StyleConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("ALIGN_CENTER"), //
		jField<::jint>("ALIGN_JUSTIFIED"), //
		jField<::jint>("ALIGN_LEFT"), //
		jField<::jint>("ALIGN_RIGHT"), //
		jField<::java::lang::Object>("Alignment"), //
		jField<::java::lang::Object>("Background"), //
		jField<::java::lang::Object>("BidiLevel"), //
		jField<::java::lang::Object>("Bold"), //
		jField<::java::lang::Object>("ComponentAttribute"), //
		jField<::java::lang::String>("ComponentElementName"), //
		jField<::java::lang::Object>("ComposedTextAttribute"), //
		jField<::java::lang::Object>("Family"), //
		jField<::java::lang::Object>("FirstLineIndent"), //
		jField<::java::lang::Object>("FontFamily"), //
		jField<::java::lang::Object>("FontSize"), //
		jField<::java::lang::Object>("Foreground"), //
		jField<::java::lang::Object>("IconAttribute"), //
		jField<::java::lang::String>("IconElementName"), //
		jField<::java::lang::Object>("Italic"), //
		jField<::java::lang::Object>("LeftIndent"), //
		jField<::java::lang::Object>("LineSpacing"), //
		jField<::java::lang::Object>("ModelAttribute"), //
		jField<::java::lang::Object>("NameAttribute"), //
		jField<::java::lang::Object>("Orientation"), //
		jField<::java::lang::Object>("ResolveAttribute"), //
		jField<::java::lang::Object>("RightIndent"), //
		jField<::java::lang::Object>("Size"), //
		jField<::java::lang::Object>("SpaceAbove"), //
		jField<::java::lang::Object>("SpaceBelow"), //
		jField<::java::lang::Object>("StrikeThrough"), //
		jField<::java::lang::Object>("Subscript"), //
		jField<::java::lang::Object>("Superscript"), //
		jField<::java::lang::Object>("TabSet"), //
		jField<::java::lang::Object>("Underline"), //
	};

	template<typename F = ::jint>
	static auto ALIGN_CENTER() {
		static_assert(field_signatures[jField<F>("ALIGN_CENTER")] != -1);
		return sat<F>("ALIGN_CENTER");
	}

	template<typename F = ::jint>
	static auto ALIGN_JUSTIFIED() {
		static_assert(field_signatures[jField<F>("ALIGN_JUSTIFIED")] != -1);
		return sat<F>("ALIGN_JUSTIFIED");
	}

	template<typename F = ::jint>
	static auto ALIGN_LEFT() {
		static_assert(field_signatures[jField<F>("ALIGN_LEFT")] != -1);
		return sat<F>("ALIGN_LEFT");
	}

	template<typename F = ::jint>
	static auto ALIGN_RIGHT() {
		static_assert(field_signatures[jField<F>("ALIGN_RIGHT")] != -1);
		return sat<F>("ALIGN_RIGHT");
	}

	template<typename F = ::java::lang::Object>
	static auto Alignment() {
		static_assert(field_signatures[jField<F>("Alignment")] != -1);
		return sat<F>("Alignment");
	}

	template<typename F = ::java::lang::Object>
	static auto Background() {
		static_assert(field_signatures[jField<F>("Background")] != -1);
		return sat<F>("Background");
	}

	template<typename F = ::java::lang::Object>
	static auto BidiLevel() {
		static_assert(field_signatures[jField<F>("BidiLevel")] != -1);
		return sat<F>("BidiLevel");
	}

	template<typename F = ::java::lang::Object>
	static auto Bold() {
		static_assert(field_signatures[jField<F>("Bold")] != -1);
		return sat<F>("Bold");
	}

	template<typename F = ::java::lang::Object>
	static auto ComponentAttribute() {
		static_assert(field_signatures[jField<F>("ComponentAttribute")] != -1);
		return sat<F>("ComponentAttribute");
	}

	template<typename F = ::java::lang::String>
	static auto ComponentElementName() {
		static_assert(field_signatures[jField<F>("ComponentElementName")] != -1);
		return sat<F>("ComponentElementName");
	}

	template<typename F = ::java::lang::Object>
	static auto ComposedTextAttribute() {
		static_assert(field_signatures[jField<F>("ComposedTextAttribute")] != -1);
		return sat<F>("ComposedTextAttribute");
	}

	template<typename F = ::java::lang::Object>
	static auto Family() {
		static_assert(field_signatures[jField<F>("Family")] != -1);
		return sat<F>("Family");
	}

	template<typename F = ::java::lang::Object>
	static auto FirstLineIndent() {
		static_assert(field_signatures[jField<F>("FirstLineIndent")] != -1);
		return sat<F>("FirstLineIndent");
	}

	template<typename F = ::java::lang::Object>
	static auto FontFamily() {
		static_assert(field_signatures[jField<F>("FontFamily")] != -1);
		return sat<F>("FontFamily");
	}

	template<typename F = ::java::lang::Object>
	static auto FontSize() {
		static_assert(field_signatures[jField<F>("FontSize")] != -1);
		return sat<F>("FontSize");
	}

	template<typename F = ::java::lang::Object>
	static auto Foreground() {
		static_assert(field_signatures[jField<F>("Foreground")] != -1);
		return sat<F>("Foreground");
	}

	template<typename F = ::java::lang::Object>
	static auto IconAttribute() {
		static_assert(field_signatures[jField<F>("IconAttribute")] != -1);
		return sat<F>("IconAttribute");
	}

	template<typename F = ::java::lang::String>
	static auto IconElementName() {
		static_assert(field_signatures[jField<F>("IconElementName")] != -1);
		return sat<F>("IconElementName");
	}

	template<typename F = ::java::lang::Object>
	static auto Italic() {
		static_assert(field_signatures[jField<F>("Italic")] != -1);
		return sat<F>("Italic");
	}

	template<typename F = ::java::lang::Object>
	static auto LeftIndent() {
		static_assert(field_signatures[jField<F>("LeftIndent")] != -1);
		return sat<F>("LeftIndent");
	}

	template<typename F = ::java::lang::Object>
	static auto LineSpacing() {
		static_assert(field_signatures[jField<F>("LineSpacing")] != -1);
		return sat<F>("LineSpacing");
	}

	template<typename F = ::java::lang::Object>
	static auto ModelAttribute() {
		static_assert(field_signatures[jField<F>("ModelAttribute")] != -1);
		return sat<F>("ModelAttribute");
	}

	template<typename F = ::java::lang::Object>
	static auto NameAttribute() {
		static_assert(field_signatures[jField<F>("NameAttribute")] != -1);
		return sat<F>("NameAttribute");
	}

	template<typename F = ::java::lang::Object>
	static auto Orientation() {
		static_assert(field_signatures[jField<F>("Orientation")] != -1);
		return sat<F>("Orientation");
	}

	template<typename F = ::java::lang::Object>
	static auto ResolveAttribute() {
		static_assert(field_signatures[jField<F>("ResolveAttribute")] != -1);
		return sat<F>("ResolveAttribute");
	}

	template<typename F = ::java::lang::Object>
	static auto RightIndent() {
		static_assert(field_signatures[jField<F>("RightIndent")] != -1);
		return sat<F>("RightIndent");
	}

	template<typename F = ::java::lang::Object>
	static auto Size() {
		static_assert(field_signatures[jField<F>("Size")] != -1);
		return sat<F>("Size");
	}

	template<typename F = ::java::lang::Object>
	static auto SpaceAbove() {
		static_assert(field_signatures[jField<F>("SpaceAbove")] != -1);
		return sat<F>("SpaceAbove");
	}

	template<typename F = ::java::lang::Object>
	static auto SpaceBelow() {
		static_assert(field_signatures[jField<F>("SpaceBelow")] != -1);
		return sat<F>("SpaceBelow");
	}

	template<typename F = ::java::lang::Object>
	static auto StrikeThrough() {
		static_assert(field_signatures[jField<F>("StrikeThrough")] != -1);
		return sat<F>("StrikeThrough");
	}

	template<typename F = ::java::lang::Object>
	static auto Subscript() {
		static_assert(field_signatures[jField<F>("Subscript")] != -1);
		return sat<F>("Subscript");
	}

	template<typename F = ::java::lang::Object>
	static auto Superscript() {
		static_assert(field_signatures[jField<F>("Superscript")] != -1);
		return sat<F>("Superscript");
	}

	template<typename F = ::java::lang::Object>
	static auto TabSet() {
		static_assert(field_signatures[jField<F>("TabSet")] != -1);
		return sat<F>("TabSet");
	}

	template<typename F = ::java::lang::Object>
	static auto Underline() {
		static_assert(field_signatures[jField<F>("Underline")] != -1);
		return sat<F>("Underline");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint(::javax::swing::text::AttributeSet)>("getAlignment"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getBackground"), //
		jMethod<::jint(::javax::swing::text::AttributeSet)>("getBidiLevel"), //
		jMethod<::java::awt::Component(::javax::swing::text::AttributeSet)>("getComponent"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getFirstLineIndent"), //
		jMethod<::java::lang::String(::javax::swing::text::AttributeSet)>("getFontFamily"), //
		jMethod<::jint(::javax::swing::text::AttributeSet)>("getFontSize"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getForeground"), //
		jMethod<::javax::swing::Icon(::javax::swing::text::AttributeSet)>("getIcon"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getLeftIndent"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getLineSpacing"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getRightIndent"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getSpaceAbove"), //
		jMethod<::jfloat(::javax::swing::text::AttributeSet)>("getSpaceBelow"), //
		jMethod<::javax::swing::text::TabSet(::javax::swing::text::AttributeSet)>("getTabSet"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isBold"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isItalic"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isStrikeThrough"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isSubscript"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isSuperscript"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isUnderline"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jint)>("setAlignment"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jint)>("setBidiLevel"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setBold"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::java::awt::Component)>("setComponent"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setFirstLineIndent"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::java::lang::String)>("setFontFamily"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jint)>("setFontSize"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::javax::swing::Icon)>("setIcon"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setItalic"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setLeftIndent"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setLineSpacing"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setRightIndent"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setSpaceAbove"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jfloat)>("setSpaceBelow"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setStrikeThrough"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setSubscript"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setSuperscript"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::javax::swing::text::TabSet)>("setTabSet"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::jboolean)>("setUnderline"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto getAlignment(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignment")] != -1);
		return scall<R>("getAlignment", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return scall<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getBidiLevel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBidiLevel")] != -1);
		return scall<R>("getBidiLevel", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	static auto getComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getComponent")] != -1);
		return scall<R>("getComponent", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getFirstLineIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFirstLineIndent")] != -1);
		return scall<R>("getFirstLineIndent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getFontFamily(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontFamily")] != -1);
		return scall<R>("getFontFamily", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getFontSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontSize")] != -1);
		return scall<R>("getFontSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForeground")] != -1);
		return scall<R>("getForeground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIcon")] != -1);
		return scall<R>("getIcon", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getLeftIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeftIndent")] != -1);
		return scall<R>("getLeftIndent", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getLineSpacing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineSpacing")] != -1);
		return scall<R>("getLineSpacing", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getRightIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRightIndent")] != -1);
		return scall<R>("getRightIndent", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getSpaceAbove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpaceAbove")] != -1);
		return scall<R>("getSpaceAbove", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	static auto getSpaceBelow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpaceBelow")] != -1);
		return scall<R>("getSpaceBelow", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::TabSet, typename... Args>
	static auto getTabSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTabSet")] != -1);
		return scall<R>("getTabSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isBold(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBold")] != -1);
		return scall<R>("isBold", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isItalic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isItalic")] != -1);
		return scall<R>("isItalic", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isStrikeThrough(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStrikeThrough")] != -1);
		return scall<R>("isStrikeThrough", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSubscript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSubscript")] != -1);
		return scall<R>("isSubscript", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSuperscript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSuperscript")] != -1);
		return scall<R>("isSuperscript", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isUnderline(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isUnderline")] != -1);
		return scall<R>("isUnderline", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setAlignment(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAlignment")] != -1);
		return scall<R>("setAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setBackground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBackground")] != -1);
		return scall<R>("setBackground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setBidiLevel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBidiLevel")] != -1);
		return scall<R>("setBidiLevel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setBold(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBold")] != -1);
		return scall<R>("setBold", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setComponent")] != -1);
		return scall<R>("setComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFirstLineIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFirstLineIndent")] != -1);
		return scall<R>("setFirstLineIndent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFontFamily(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFontFamily")] != -1);
		return scall<R>("setFontFamily", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setFontSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFontSize")] != -1);
		return scall<R>("setFontSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setForeground(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setForeground")] != -1);
		return scall<R>("setForeground", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIcon")] != -1);
		return scall<R>("setIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setItalic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setItalic")] != -1);
		return scall<R>("setItalic", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLeftIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLeftIndent")] != -1);
		return scall<R>("setLeftIndent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLineSpacing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLineSpacing")] != -1);
		return scall<R>("setLineSpacing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setRightIndent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRightIndent")] != -1);
		return scall<R>("setRightIndent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSpaceAbove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSpaceAbove")] != -1);
		return scall<R>("setSpaceAbove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSpaceBelow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSpaceBelow")] != -1);
		return scall<R>("setSpaceBelow", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setStrikeThrough(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStrikeThrough")] != -1);
		return scall<R>("setStrikeThrough", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSubscript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSubscript")] != -1);
		return scall<R>("setSubscript", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setSuperscript(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSuperscript")] != -1);
		return scall<R>("setSuperscript", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setTabSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTabSet")] != -1);
		return scall<R>("setTabSet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setUnderline(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUnderline")] != -1);
		return scall<R>("setUnderline", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
