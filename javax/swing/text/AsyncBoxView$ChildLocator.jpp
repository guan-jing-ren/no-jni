#ifndef javax_swing_text_AsyncBoxView$ChildLocator_HPP
#define javax_swing_text_AsyncBoxView$ChildLocator_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AsyncBoxView$ChildLocator : public jObject<::javax::swing::text::AsyncBoxView$ChildLocator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AsyncBoxView$ChildLocator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AsyncBoxView)>(), //
		jMethod<::jvoid(::javax::swing::text::AsyncBoxView$ChildState)>("childChanged"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("getChildAllocation"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape)>("getViewIndexAtPoint"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintChildren"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto childChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("childChanged")] != -1);
		return call<R>("childChanged", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getChildAllocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildAllocation")] != -1);
		return call<R>("getChildAllocation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewIndexAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewIndexAtPoint")] != -1);
		return call<R>("getViewIndexAtPoint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paintChildren")] != -1);
		return call<R>("paintChildren", forward<Args>(args)...);
	}

};

#endif
