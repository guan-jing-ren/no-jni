#ifndef javax_swing_text_LabelView_HPP
#define javax_swing_text_LabelView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::LabelView : public jObject<::javax::swing::text::LabelView, ::javax::swing::text::GlyphView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "LabelView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::Color()>("getForeground"), //
		jMethod<::jboolean()>("isStrikeThrough"), //
		jMethod<::jboolean()>("isSubscript"), //
		jMethod<::jboolean()>("isSuperscript"), //
		jMethod<::jboolean()>("isUnderline"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStrikeThrough(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStrikeThrough")] != -1);
		return call<R>("isStrikeThrough", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSubscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSubscript")] != -1);
		return call<R>("isSubscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSuperscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSuperscript")] != -1);
		return call<R>("isSuperscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnderline")] != -1);
		return call<R>("isUnderline", std::forward<Args>(args)...);
	}

};

#endif
