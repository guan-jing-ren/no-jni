#ifndef javax_swing_text_DefaultFormatterFactory_HPP
#define javax_swing_text_DefaultFormatterFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultFormatterFactory : public jObject<::javax::swing::text::DefaultFormatterFactory, ::javax::swing::JFormattedTextField$AbstractFormatterFactory> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultFormatterFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter)>(), //
		jConstructor<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter)>(), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter()>("getDefaultFormatter"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter()>("getDisplayFormatter"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter()>("getEditFormatter"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter(::javax::swing::JFormattedTextField)>("getFormatter"), //
		jMethod<::javax::swing::JFormattedTextField$AbstractFormatter()>("getNullFormatter"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>("setDefaultFormatter"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>("setDisplayFormatter"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>("setEditFormatter"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField$AbstractFormatter)>("setNullFormatter"), //
	};

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getDefaultFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultFormatter")] != -1);
		return call<R>("getDefaultFormatter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getDisplayFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayFormatter")] != -1);
		return call<R>("getDisplayFormatter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getEditFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEditFormatter")] != -1);
		return call<R>("getEditFormatter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFormatter")] != -1);
		return call<R>("getFormatter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JFormattedTextField$AbstractFormatter, typename... Args>
	auto getNullFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNullFormatter")] != -1);
		return call<R>("getNullFormatter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultFormatter")] != -1);
		return call<R>("setDefaultFormatter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisplayFormatter")] != -1);
		return call<R>("setDisplayFormatter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEditFormatter")] != -1);
		return call<R>("setEditFormatter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNullFormatter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNullFormatter")] != -1);
		return call<R>("setNullFormatter", forward<Args>(args)...);
	}

};

#endif
