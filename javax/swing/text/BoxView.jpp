#ifndef javax_swing_text_BoxView_HPP
#define javax_swing_text_BoxView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::BoxView : public jObject<::javax::swing::text::BoxView, ::javax::swing::text::CompositeView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "BoxView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element, ::jint)>(), //
		jMethod<::jfloat(::jint)>("getAlignment"), //
		jMethod<::jint()>("getAxis"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("getChildAllocation"), //
		jMethod<::jint()>("getHeight"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jint(::jint)>("getResizeWeight"), //
		jMethod<::jint()>("getWidth"), //
		jMethod<::jvoid(::jint)>("layoutChanged"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::text::View, ::jboolean, ::jboolean)>("preferenceChanged"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::View *)>("replace"), //
		jMethod<::jvoid(::jint)>("setAxis"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setSize"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAxis")] != -1);
		return call<R>("getAxis", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getChildAllocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildAllocation")] != -1);
		return call<R>("getChildAllocation", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResizeWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResizeWeight")] != -1);
		return call<R>("getResizeWeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layoutChanged")] != -1);
		return call<R>("layoutChanged", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferenceChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferenceChanged")] != -1);
		return call<R>("preferenceChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAxis")] != -1);
		return call<R>("setAxis", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", forward<Args>(args)...);
	}

};

#endif
