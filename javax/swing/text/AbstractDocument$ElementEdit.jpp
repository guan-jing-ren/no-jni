#ifndef javax_swing_text_AbstractDocument$ElementEdit_HPP
#define javax_swing_text_AbstractDocument$ElementEdit_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractDocument$ElementEdit : public jObject<::javax::swing::text::AbstractDocument$ElementEdit, ::javax::swing::undo::AbstractUndoableEdit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractDocument$ElementEdit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element, ::jint, ::javax::swing::text::Element *, ::javax::swing::text::Element *)>(), //
		jMethod<::javax::swing::text::Element *()>("getChildrenAdded"), //
		jMethod<::javax::swing::text::Element *()>("getChildrenRemoved"), //
		jMethod<::javax::swing::text::Element()>("getElement"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::jvoid()>("redo"), //
		jMethod<::jvoid()>("undo"), //
	};

	template<typename R = ::javax::swing::text::Element *, typename... Args>
	auto getChildrenAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildrenAdded")] != -1);
		return call<R>("getChildrenAdded", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element *, typename... Args>
	auto getChildrenRemoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChildrenRemoved")] != -1);
		return call<R>("getChildrenRemoved", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("redo")] != -1);
		return call<R>("redo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto undo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("undo")] != -1);
		return call<R>("undo", forward<Args>(args)...);
	}

};

#endif
