#ifndef javax_swing_text_TabSet_HPP
#define javax_swing_text_TabSet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::TabSet : public jObject<::javax::swing::text::TabSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "TabSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::TabStop *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::javax::swing::text::TabStop(::jint)>("getTab"), //
		jMethod<::javax::swing::text::TabStop(::jfloat)>("getTabAfter"), //
		jMethod<::jint()>("getTabCount"), //
		jMethod<::jint(::javax::swing::text::TabStop)>("getTabIndex"), //
		jMethod<::jint(::jfloat)>("getTabIndexAfter"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::TabStop, typename... Args>
	auto getTab(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTab")] != -1);
		return call<R>("getTab", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::TabStop, typename... Args>
	auto getTabAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabAfter")] != -1);
		return call<R>("getTabAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabCount")] != -1);
		return call<R>("getTabCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabIndex")] != -1);
		return call<R>("getTabIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTabIndexAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabIndexAfter")] != -1);
		return call<R>("getTabIndexAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
