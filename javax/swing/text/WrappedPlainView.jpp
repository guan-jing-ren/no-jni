#ifndef javax_swing_text_WrappedPlainView_HPP
#define javax_swing_text_WrappedPlainView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::WrappedPlainView : public jObject<::javax::swing::text::WrappedPlainView, ::javax::swing::text::BoxView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "WrappedPlainView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jConstructor<::jvoid(::javax::swing::text::Element, ::jboolean)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jfloat(::jfloat, ::jint)>("nextTabStop"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setSize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto nextTabStop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTabStop")] != -1);
		return call<R>("nextTabStop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

};

#endif
