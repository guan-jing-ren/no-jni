#ifndef javax_swing_text_JTextComponent$AccessibleJTextComponent_HPP
#define javax_swing_text_JTextComponent$AccessibleJTextComponent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::JTextComponent$AccessibleJTextComponent : public jObject<::javax::swing::text::JTextComponent$AccessibleJTextComponent, ::javax::swing::JComponent$AccessibleJComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "JTextComponent$AccessibleJTextComponent";

	constexpr static Enume field_signatures{
		jField<::jint>("ATTRIBUTE_RUN"), //
		jField<::jint>("CHARACTER"), //
		jField<::java::lang::String>("CLICK"), //
		jField<::java::lang::String>("DECREMENT"), //
		jField<::java::lang::String>("INCREMENT"), //
		jField<::jint>("LINE"), //
		jField<::jint>("SENTENCE"), //
		jField<::java::lang::String>("TOGGLE_EXPAND"), //
		jField<::java::lang::String>("TOGGLE_POPUP"), //
		jField<::jint>("WORD"), //
	};

	template<typename F = ::jint>
	static auto ATTRIBUTE_RUN() {
		static_assert(field_signatures[jField<F>("ATTRIBUTE_RUN")] != -1);
		return sat<F>("ATTRIBUTE_RUN");
	}

	template<typename F = ::jint>
	static auto CHARACTER() {
		static_assert(field_signatures[jField<F>("CHARACTER")] != -1);
		return sat<F>("CHARACTER");
	}

	template<typename F = ::java::lang::String>
	static auto CLICK() {
		static_assert(field_signatures[jField<F>("CLICK")] != -1);
		return sat<F>("CLICK");
	}

	template<typename F = ::java::lang::String>
	static auto DECREMENT() {
		static_assert(field_signatures[jField<F>("DECREMENT")] != -1);
		return sat<F>("DECREMENT");
	}

	template<typename F = ::java::lang::String>
	static auto INCREMENT() {
		static_assert(field_signatures[jField<F>("INCREMENT")] != -1);
		return sat<F>("INCREMENT");
	}

	template<typename F = ::jint>
	static auto LINE() {
		static_assert(field_signatures[jField<F>("LINE")] != -1);
		return sat<F>("LINE");
	}

	template<typename F = ::jint>
	static auto SENTENCE() {
		static_assert(field_signatures[jField<F>("SENTENCE")] != -1);
		return sat<F>("SENTENCE");
	}

	template<typename F = ::java::lang::String>
	static auto TOGGLE_EXPAND() {
		static_assert(field_signatures[jField<F>("TOGGLE_EXPAND")] != -1);
		return sat<F>("TOGGLE_EXPAND");
	}

	template<typename F = ::java::lang::String>
	static auto TOGGLE_POPUP() {
		static_assert(field_signatures[jField<F>("TOGGLE_POPUP")] != -1);
		return sat<F>("TOGGLE_POPUP");
	}

	template<typename F = ::jint>
	static auto WORD() {
		static_assert(field_signatures[jField<F>("WORD")] != -1);
		return sat<F>("WORD");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::JTextComponent)>(), //
		jMethod<::jvoid(::javax::swing::event::CaretEvent)>("caretUpdate"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent)>("changedUpdate"), //
		jMethod<::jvoid(::jint, ::jint)>("cut"), //
		jMethod<::jvoid(::jint, ::jint)>("delete"), //
		jMethod<::jboolean(::jint)>("doAccessibleAction"), //
		jMethod<::javax::accessibility::AccessibleAction()>("getAccessibleAction"), //
		jMethod<::jint()>("getAccessibleActionCount"), //
		jMethod<::java::lang::String(::jint)>("getAccessibleActionDescription"), //
		jMethod<::javax::accessibility::AccessibleEditableText()>("getAccessibleEditableText"), //
		jMethod<::javax::accessibility::AccessibleRole()>("getAccessibleRole"), //
		jMethod<::javax::accessibility::AccessibleStateSet()>("getAccessibleStateSet"), //
		jMethod<::javax::accessibility::AccessibleText()>("getAccessibleText"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getAfterIndex"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getAtIndex"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getBeforeIndex"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::jint()>("getCharCount"), //
		jMethod<::javax::swing::text::AttributeSet(::jint)>("getCharacterAttribute"), //
		jMethod<::java::awt::Rectangle(::jint)>("getCharacterBounds"), //
		jMethod<::jint(::java::awt::Point)>("getIndexAtPoint"), //
		jMethod<::java::lang::String()>("getSelectedText"), //
		jMethod<::jint()>("getSelectionEnd"), //
		jMethod<::jint()>("getSelectionStart"), //
		jMethod<::java::awt::Rectangle(::jint, ::jint)>("getTextBounds"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getTextRange"), //
		jMethod<::javax::accessibility::AccessibleTextSequence(::jint, ::jint)>("getTextSequenceAfter"), //
		jMethod<::javax::accessibility::AccessibleTextSequence(::jint, ::jint)>("getTextSequenceAt"), //
		jMethod<::javax::accessibility::AccessibleTextSequence(::jint, ::jint)>("getTextSequenceBefore"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("insertTextAtIndex"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent)>("insertUpdate"), //
		jMethod<::jvoid(::jint)>("paste"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent)>("removeUpdate"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("replaceText"), //
		jMethod<::jvoid(::jint, ::jint)>("selectText"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AttributeSet)>("setAttributes"), //
		jMethod<::jvoid(::java::lang::String)>("setTextContents"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto caretUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("caretUpdate")] != -1);
		return call<R>("caretUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cut")] != -1);
		return call<R>("cut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto doAccessibleAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doAccessibleAction")] != -1);
		return call<R>("doAccessibleAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleAction, typename... Args>
	auto getAccessibleAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleAction")] != -1);
		return call<R>("getAccessibleAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleActionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionCount")] != -1);
		return call<R>("getAccessibleActionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleActionDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionDescription")] != -1);
		return call<R>("getAccessibleActionDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleEditableText, typename... Args>
	auto getAccessibleEditableText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleEditableText")] != -1);
		return call<R>("getAccessibleEditableText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleRole, typename... Args>
	auto getAccessibleRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRole")] != -1);
		return call<R>("getAccessibleRole", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleStateSet, typename... Args>
	auto getAccessibleStateSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleStateSet")] != -1);
		return call<R>("getAccessibleStateSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleText, typename... Args>
	auto getAccessibleText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleText")] != -1);
		return call<R>("getAccessibleText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAfterIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAfterIndex")] != -1);
		return call<R>("getAfterIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAtIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAtIndex")] != -1);
		return call<R>("getAtIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBeforeIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeforeIndex")] != -1);
		return call<R>("getBeforeIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return call<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getCharacterAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterAttribute")] != -1);
		return call<R>("getCharacterAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getCharacterBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterBounds")] != -1);
		return call<R>("getCharacterBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndexAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndexAtPoint")] != -1);
		return call<R>("getIndexAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedText")] != -1);
		return call<R>("getSelectedText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionEnd")] != -1);
		return call<R>("getSelectionEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionStart")] != -1);
		return call<R>("getSelectionStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getTextBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextBounds")] != -1);
		return call<R>("getTextBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTextRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextRange")] != -1);
		return call<R>("getTextRange", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTextSequence, typename... Args>
	auto getTextSequenceAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextSequenceAfter")] != -1);
		return call<R>("getTextSequenceAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTextSequence, typename... Args>
	auto getTextSequenceAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextSequenceAt")] != -1);
		return call<R>("getTextSequenceAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTextSequence, typename... Args>
	auto getTextSequenceBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextSequenceBefore")] != -1);
		return call<R>("getTextSequenceBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertTextAtIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertTextAtIndex")] != -1);
		return call<R>("insertTextAtIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paste(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paste")] != -1);
		return call<R>("paste", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceText")] != -1);
		return call<R>("replaceText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectText")] != -1);
		return call<R>("selectText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTextContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTextContents")] != -1);
		return call<R>("setTextContents", std::forward<Args>(args)...);
	}

};

#endif
