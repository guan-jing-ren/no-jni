#ifndef javax_swing_text_Position$Bias_HPP
#define javax_swing_text_Position$Bias_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Position$Bias : public jObject<::javax::swing::text::Position$Bias, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Position$Bias";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::Position$Bias>("Backward"), //
		jField<::javax::swing::text::Position$Bias>("Forward"), //
	};

	template<typename F = ::javax::swing::text::Position$Bias>
	static auto Backward() {
		static_assert(field_signatures[jField<F>("Backward")] != -1);
		return sat<F>("Backward");
	}

	template<typename F = ::javax::swing::text::Position$Bias>
	static auto Forward() {
		static_assert(field_signatures[jField<F>("Forward")] != -1);
		return sat<F>("Forward");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
