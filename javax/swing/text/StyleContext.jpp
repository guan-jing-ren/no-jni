#ifndef javax_swing_text_StyleContext_HPP
#define javax_swing_text_StyleContext_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::StyleContext : public jObject<::javax::swing::text::StyleContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "StyleContext";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_STYLE"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_STYLE() {
		static_assert(field_signatures[jField<F>("DEFAULT_STYLE")] != -1);
		return sat<F>("DEFAULT_STYLE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::lang::Object, ::java::lang::Object)>("addAttribute"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::javax::swing::text::AttributeSet)>("addAttributes"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::javax::swing::text::Style(::java::lang::String, ::javax::swing::text::Style)>("addStyle"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getBackground"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::javax::swing::text::StyleContext()>("getDefaultStyleContext"), //
		jMethod<::javax::swing::text::AttributeSet()>("getEmptySet"), //
		jMethod<::java::awt::Font(::java::lang::String, ::jint, ::jint)>("getFont"), //
		jMethod<::java::awt::Font(::javax::swing::text::AttributeSet)>("getFont"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getForeground"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getStaticAttribute"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getStaticAttributeKey"), //
		jMethod<::javax::swing::text::Style(::java::lang::String)>("getStyle"), //
		jMethod<::java::util::Enumeration()>("getStyleNames"), //
		jMethod<::jvoid(::java::io::ObjectInputStream, ::javax::swing::text::MutableAttributeSet)>("readAttributeSet"), //
		jMethod<::jvoid(::java::io::ObjectInputStream, ::javax::swing::text::MutableAttributeSet)>("readAttributes"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("reclaim"), //
		jMethod<::jvoid(::java::lang::Object)>("registerStaticAttributeKey"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::lang::Object)>("removeAttribute"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::util::Enumeration)>("removeAttributes"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::javax::swing::text::AttributeSet)>("removeAttributes"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::java::lang::String)>("removeStyle"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::ObjectOutputStream, ::javax::swing::text::AttributeSet)>("writeAttributeSet"), //
		jMethod<::jvoid(::java::io::ObjectOutputStream, ::javax::swing::text::AttributeSet)>("writeAttributes"), //
	};

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto addAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttributes")] != -1);
		return call<R>("addAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto addStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addStyle")] != -1);
		return call<R>("addStyle", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::StyleContext, typename... Args>
	static auto getDefaultStyleContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultStyleContext")] != -1);
		return scall<R>("getDefaultStyleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getEmptySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEmptySet")] != -1);
		return call<R>("getEmptySet", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto getStaticAttribute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStaticAttribute")] != -1);
		return scall<R>("getStaticAttribute", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto getStaticAttributeKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStaticAttributeKey")] != -1);
		return scall<R>("getStaticAttributeKey", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyle")] != -1);
		return call<R>("getStyle", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getStyleNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyleNames")] != -1);
		return call<R>("getStyleNames", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto readAttributeSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readAttributeSet")] != -1);
		return scall<R>("readAttributeSet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("readAttributes")] != -1);
		return call<R>("readAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reclaim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reclaim")] != -1);
		return call<R>("reclaim", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto registerStaticAttributeKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerStaticAttributeKey")] != -1);
		return scall<R>("registerStaticAttributeKey", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto removeAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributes")] != -1);
		return call<R>("removeAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeStyle")] != -1);
		return call<R>("removeStyle", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeAttributeSet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeAttributeSet")] != -1);
		return scall<R>("writeAttributeSet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("writeAttributes")] != -1);
		return call<R>("writeAttributes", forward<Args>(args)...);
	}

};

#endif
