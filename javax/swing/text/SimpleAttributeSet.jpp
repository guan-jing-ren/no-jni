#ifndef javax_swing_text_SimpleAttributeSet_HPP
#define javax_swing_text_SimpleAttributeSet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::SimpleAttributeSet : public jObject<::javax::swing::text::SimpleAttributeSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "SimpleAttributeSet";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::AttributeSet>("EMPTY"), //
	};

	template<typename F = ::javax::swing::text::AttributeSet>
	static auto EMPTY() {
		static_assert(field_signatures[jField<F>("EMPTY")] != -1);
		return sat<F>("EMPTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::text::AttributeSet)>(), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("addAttribute"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("addAttributes"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("containsAttribute"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("containsAttributes"), //
		jMethod<::javax::swing::text::AttributeSet()>("copyAttributes"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getAttribute"), //
		jMethod<::jint()>("getAttributeCount"), //
		jMethod<::java::util::Enumeration()>("getAttributeNames"), //
		jMethod<::javax::swing::text::AttributeSet()>("getResolveParent"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Object)>("isDefined"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isEqual"), //
		jMethod<::jvoid(::java::lang::Object)>("removeAttribute"), //
		jMethod<::jvoid(::java::util::Enumeration)>("removeAttributes"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("removeAttributes"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("setResolveParent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttributes")] != -1);
		return call<R>("addAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAttribute")] != -1);
		return call<R>("containsAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsAttributes")] != -1);
		return call<R>("containsAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto copyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("copyAttributes")] != -1);
		return call<R>("copyAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeCount")] != -1);
		return call<R>("getAttributeCount", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResolveParent")] != -1);
		return call<R>("getResolveParent", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefined")] != -1);
		return call<R>("isDefined", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributes")] != -1);
		return call<R>("removeAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResolveParent")] != -1);
		return call<R>("setResolveParent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
