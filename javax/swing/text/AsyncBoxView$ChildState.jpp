#ifndef javax_swing_text_AsyncBoxView$ChildState_HPP
#define javax_swing_text_AsyncBoxView$ChildState_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AsyncBoxView$ChildState : public jObject<::javax::swing::text::AsyncBoxView$ChildState, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AsyncBoxView$ChildState";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AsyncBoxView, ::javax::swing::text::View)>(), //
		jMethod<::javax::swing::text::View()>("getChildView"), //
		jMethod<::jfloat()>("getMajorOffset"), //
		jMethod<::jfloat()>("getMajorSpan"), //
		jMethod<::jfloat()>("getMinorOffset"), //
		jMethod<::jfloat()>("getMinorSpan"), //
		jMethod<::jboolean()>("isLayoutValid"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("preferenceChanged"), //
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid(::jfloat)>("setMajorOffset"), //
	};

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getChildView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildView")] != -1);
		return call<R>("getChildView", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMajorOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajorOffset")] != -1);
		return call<R>("getMajorOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMajorSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajorSpan")] != -1);
		return call<R>("getMajorSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinorOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinorOffset")] != -1);
		return call<R>("getMinorOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinorSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinorSpan")] != -1);
		return call<R>("getMinorSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLayoutValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLayoutValid")] != -1);
		return call<R>("isLayoutValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferenceChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferenceChanged")] != -1);
		return call<R>("preferenceChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMajorOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMajorOffset")] != -1);
		return call<R>("setMajorOffset", std::forward<Args>(args)...);
	}

};

#endif
