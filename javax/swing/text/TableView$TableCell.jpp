#ifndef javax_swing_text_TableView$TableCell_HPP
#define javax_swing_text_TableView$TableCell_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::TableView$TableCell : public jObject<::javax::swing::text::TableView$TableCell, ::javax::swing::text::BoxView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "TableView$TableCell";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::TableView, ::javax::swing::text::Element)>(), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint()>("getGridColumn"), //
		jMethod<::jint()>("getGridRow"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::jvoid(::jint, ::jint)>("setGridLocation"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGridColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGridColumn")] != -1);
		return call<R>("getGridColumn", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGridRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getGridRow")] != -1);
		return call<R>("getGridRow", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGridLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setGridLocation")] != -1);
		return call<R>("setGridLocation", forward<Args>(args)...);
	}

};

#endif
