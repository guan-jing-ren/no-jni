#ifndef javax_swing_text_AbstractDocument_HPP
#define javax_swing_text_AbstractDocument_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractDocument : public jObject<::javax::swing::text::AbstractDocument, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractDocument";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BidiElementName"), //
		jField<::java::lang::String>("ContentElementName"), //
		jField<::java::lang::String>("ElementNameAttribute"), //
		jField<::java::lang::String>("ParagraphElementName"), //
		jField<::java::lang::String>("SectionElementName"), //
	};

	template<typename F = ::java::lang::String>
	static auto BidiElementName() {
		static_assert(field_signatures[jField<F>("BidiElementName")] != -1);
		return sat<F>("BidiElementName");
	}

	template<typename F = ::java::lang::String>
	static auto ContentElementName() {
		static_assert(field_signatures[jField<F>("ContentElementName")] != -1);
		return sat<F>("ContentElementName");
	}

	template<typename F = ::java::lang::String>
	static auto ElementNameAttribute() {
		static_assert(field_signatures[jField<F>("ElementNameAttribute")] != -1);
		return sat<F>("ElementNameAttribute");
	}

	template<typename F = ::java::lang::String>
	static auto ParagraphElementName() {
		static_assert(field_signatures[jField<F>("ParagraphElementName")] != -1);
		return sat<F>("ParagraphElementName");
	}

	template<typename F = ::java::lang::String>
	static auto SectionElementName() {
		static_assert(field_signatures[jField<F>("SectionElementName")] != -1);
		return sat<F>("SectionElementName");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("addDocumentListener"), //
		jMethod<::jvoid(::javax::swing::event::UndoableEditListener)>("addUndoableEditListener"), //
		jMethod<::javax::swing::text::Position(::jint)>("createPosition"), //
		jMethod<::jvoid(::java::io::PrintStream)>("dump"), //
		jMethod<::jint()>("getAsynchronousLoadPriority"), //
		jMethod<::javax::swing::text::Element()>("getBidiRootElement"), //
		jMethod<::javax::swing::text::Element()>("getDefaultRootElement"), //
		jMethod<::javax::swing::text::DocumentFilter()>("getDocumentFilter"), //
		jMethod<::javax::swing::event::DocumentListener *()>("getDocumentListeners"), //
		jMethod<::java::util::Dictionary()>("getDocumentProperties"), //
		jMethod<::javax::swing::text::Position()>("getEndPosition"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::javax::swing::text::Element(::jint)>("getParagraphElement"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getProperty"), //
		jMethod<::javax::swing::text::Element *()>("getRootElements"), //
		jMethod<::javax::swing::text::Position()>("getStartPosition"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getText"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::Segment)>("getText"), //
		jMethod<::javax::swing::event::UndoableEditListener *()>("getUndoableEditListeners"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("insertString"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("putProperty"), //
		jMethod<::jvoid()>("readLock"), //
		jMethod<::jvoid()>("readUnlock"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("removeDocumentListener"), //
		jMethod<::jvoid(::javax::swing::event::UndoableEditListener)>("removeUndoableEditListener"), //
		jMethod<::jvoid(::java::lang::Runnable)>("render"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("replace"), //
		jMethod<::jvoid(::jint)>("setAsynchronousLoadPriority"), //
		jMethod<::jvoid(::javax::swing::text::DocumentFilter)>("setDocumentFilter"), //
		jMethod<::jvoid(::java::util::Dictionary)>("setDocumentProperties"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addDocumentListener")] != -1);
		return call<R>("addDocumentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addUndoableEditListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addUndoableEditListener")] != -1);
		return call<R>("addUndoableEditListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto createPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPosition")] != -1);
		return call<R>("createPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dump(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dump")] != -1);
		return call<R>("dump", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAsynchronousLoadPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsynchronousLoadPriority")] != -1);
		return call<R>("getAsynchronousLoadPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getBidiRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBidiRootElement")] != -1);
		return call<R>("getBidiRootElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getDefaultRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultRootElement")] != -1);
		return call<R>("getDefaultRootElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::DocumentFilter, typename... Args>
	auto getDocumentFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentFilter")] != -1);
		return call<R>("getDocumentFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::DocumentListener *, typename... Args>
	auto getDocumentListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentListeners")] != -1);
		return call<R>("getDocumentListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Dictionary, typename... Args>
	auto getDocumentProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentProperties")] != -1);
		return call<R>("getDocumentProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto getEndPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndPosition")] != -1);
		return call<R>("getEndPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getParagraphElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParagraphElement")] != -1);
		return call<R>("getParagraphElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element *, typename... Args>
	auto getRootElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootElements")] != -1);
		return call<R>("getRootElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto getStartPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartPosition")] != -1);
		return call<R>("getStartPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::UndoableEditListener *, typename... Args>
	auto getUndoableEditListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUndoableEditListeners")] != -1);
		return call<R>("getUndoableEditListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertString")] != -1);
		return call<R>("insertString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putProperty")] != -1);
		return call<R>("putProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLock")] != -1);
		return call<R>("readLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readUnlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnlock")] != -1);
		return call<R>("readUnlock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeDocumentListener")] != -1);
		return call<R>("removeDocumentListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUndoableEditListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUndoableEditListener")] != -1);
		return call<R>("removeUndoableEditListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto render(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("render")] != -1);
		return call<R>("render", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAsynchronousLoadPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAsynchronousLoadPriority")] != -1);
		return call<R>("setAsynchronousLoadPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentFilter")] != -1);
		return call<R>("setDocumentFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentProperties")] != -1);
		return call<R>("setDocumentProperties", std::forward<Args>(args)...);
	}

};

#endif
