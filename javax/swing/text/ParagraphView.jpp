#ifndef javax_swing_text_ParagraphView_HPP
#define javax_swing_text_ParagraphView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::ParagraphView : public jObject<::javax::swing::text::ParagraphView, ::javax::swing::text::FlowView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "ParagraphView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::javax::swing::text::View(::jint, ::jfloat, ::java::awt::Shape)>("breakView"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::jfloat(::jint)>("getAlignment"), //
		jMethod<::jint(::jint, ::jfloat)>("getBreakWeight"), //
		jMethod<::jint(::jint)>("getFlowSpan"), //
		jMethod<::jint(::jint)>("getFlowStart"), //
		jMethod<::jfloat(::jfloat, ::jint)>("nextTabStop"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
	};

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto breakView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("breakView")] != -1);
		return call<R>("breakView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBreakWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakWeight")] != -1);
		return call<R>("getBreakWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFlowSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlowSpan")] != -1);
		return call<R>("getFlowSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFlowStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlowStart")] != -1);
		return call<R>("getFlowStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto nextTabStop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTabStop")] != -1);
		return call<R>("nextTabStop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

};

#endif
