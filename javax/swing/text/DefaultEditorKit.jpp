#ifndef javax_swing_text_DefaultEditorKit_HPP
#define javax_swing_text_DefaultEditorKit_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultEditorKit : public jObject<::javax::swing::text::DefaultEditorKit, ::javax::swing::text::EditorKit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultEditorKit";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("EndOfLineStringProperty"), //
		jField<::java::lang::String>("backwardAction"), //
		jField<::java::lang::String>("beepAction"), //
		jField<::java::lang::String>("beginAction"), //
		jField<::java::lang::String>("beginLineAction"), //
		jField<::java::lang::String>("beginParagraphAction"), //
		jField<::java::lang::String>("beginWordAction"), //
		jField<::java::lang::String>("copyAction"), //
		jField<::java::lang::String>("cutAction"), //
		jField<::java::lang::String>("defaultKeyTypedAction"), //
		jField<::java::lang::String>("deleteNextCharAction"), //
		jField<::java::lang::String>("deleteNextWordAction"), //
		jField<::java::lang::String>("deletePrevCharAction"), //
		jField<::java::lang::String>("deletePrevWordAction"), //
		jField<::java::lang::String>("downAction"), //
		jField<::java::lang::String>("endAction"), //
		jField<::java::lang::String>("endLineAction"), //
		jField<::java::lang::String>("endParagraphAction"), //
		jField<::java::lang::String>("endWordAction"), //
		jField<::java::lang::String>("forwardAction"), //
		jField<::java::lang::String>("insertBreakAction"), //
		jField<::java::lang::String>("insertContentAction"), //
		jField<::java::lang::String>("insertTabAction"), //
		jField<::java::lang::String>("nextWordAction"), //
		jField<::java::lang::String>("pageDownAction"), //
		jField<::java::lang::String>("pageUpAction"), //
		jField<::java::lang::String>("pasteAction"), //
		jField<::java::lang::String>("previousWordAction"), //
		jField<::java::lang::String>("readOnlyAction"), //
		jField<::java::lang::String>("selectAllAction"), //
		jField<::java::lang::String>("selectLineAction"), //
		jField<::java::lang::String>("selectParagraphAction"), //
		jField<::java::lang::String>("selectWordAction"), //
		jField<::java::lang::String>("selectionBackwardAction"), //
		jField<::java::lang::String>("selectionBeginAction"), //
		jField<::java::lang::String>("selectionBeginLineAction"), //
		jField<::java::lang::String>("selectionBeginParagraphAction"), //
		jField<::java::lang::String>("selectionBeginWordAction"), //
		jField<::java::lang::String>("selectionDownAction"), //
		jField<::java::lang::String>("selectionEndAction"), //
		jField<::java::lang::String>("selectionEndLineAction"), //
		jField<::java::lang::String>("selectionEndParagraphAction"), //
		jField<::java::lang::String>("selectionEndWordAction"), //
		jField<::java::lang::String>("selectionForwardAction"), //
		jField<::java::lang::String>("selectionNextWordAction"), //
		jField<::java::lang::String>("selectionPreviousWordAction"), //
		jField<::java::lang::String>("selectionUpAction"), //
		jField<::java::lang::String>("upAction"), //
		jField<::java::lang::String>("writableAction"), //
	};

	template<typename F = ::java::lang::String>
	static auto EndOfLineStringProperty() {
		static_assert(field_signatures[jField<F>("EndOfLineStringProperty")] != -1);
		return sat<F>("EndOfLineStringProperty");
	}

	template<typename F = ::java::lang::String>
	static auto backwardAction() {
		static_assert(field_signatures[jField<F>("backwardAction")] != -1);
		return sat<F>("backwardAction");
	}

	template<typename F = ::java::lang::String>
	static auto beepAction() {
		static_assert(field_signatures[jField<F>("beepAction")] != -1);
		return sat<F>("beepAction");
	}

	template<typename F = ::java::lang::String>
	static auto beginAction() {
		static_assert(field_signatures[jField<F>("beginAction")] != -1);
		return sat<F>("beginAction");
	}

	template<typename F = ::java::lang::String>
	static auto beginLineAction() {
		static_assert(field_signatures[jField<F>("beginLineAction")] != -1);
		return sat<F>("beginLineAction");
	}

	template<typename F = ::java::lang::String>
	static auto beginParagraphAction() {
		static_assert(field_signatures[jField<F>("beginParagraphAction")] != -1);
		return sat<F>("beginParagraphAction");
	}

	template<typename F = ::java::lang::String>
	static auto beginWordAction() {
		static_assert(field_signatures[jField<F>("beginWordAction")] != -1);
		return sat<F>("beginWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto copyAction() {
		static_assert(field_signatures[jField<F>("copyAction")] != -1);
		return sat<F>("copyAction");
	}

	template<typename F = ::java::lang::String>
	static auto cutAction() {
		static_assert(field_signatures[jField<F>("cutAction")] != -1);
		return sat<F>("cutAction");
	}

	template<typename F = ::java::lang::String>
	static auto defaultKeyTypedAction() {
		static_assert(field_signatures[jField<F>("defaultKeyTypedAction")] != -1);
		return sat<F>("defaultKeyTypedAction");
	}

	template<typename F = ::java::lang::String>
	static auto deleteNextCharAction() {
		static_assert(field_signatures[jField<F>("deleteNextCharAction")] != -1);
		return sat<F>("deleteNextCharAction");
	}

	template<typename F = ::java::lang::String>
	static auto deleteNextWordAction() {
		static_assert(field_signatures[jField<F>("deleteNextWordAction")] != -1);
		return sat<F>("deleteNextWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto deletePrevCharAction() {
		static_assert(field_signatures[jField<F>("deletePrevCharAction")] != -1);
		return sat<F>("deletePrevCharAction");
	}

	template<typename F = ::java::lang::String>
	static auto deletePrevWordAction() {
		static_assert(field_signatures[jField<F>("deletePrevWordAction")] != -1);
		return sat<F>("deletePrevWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto downAction() {
		static_assert(field_signatures[jField<F>("downAction")] != -1);
		return sat<F>("downAction");
	}

	template<typename F = ::java::lang::String>
	static auto endAction() {
		static_assert(field_signatures[jField<F>("endAction")] != -1);
		return sat<F>("endAction");
	}

	template<typename F = ::java::lang::String>
	static auto endLineAction() {
		static_assert(field_signatures[jField<F>("endLineAction")] != -1);
		return sat<F>("endLineAction");
	}

	template<typename F = ::java::lang::String>
	static auto endParagraphAction() {
		static_assert(field_signatures[jField<F>("endParagraphAction")] != -1);
		return sat<F>("endParagraphAction");
	}

	template<typename F = ::java::lang::String>
	static auto endWordAction() {
		static_assert(field_signatures[jField<F>("endWordAction")] != -1);
		return sat<F>("endWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto forwardAction() {
		static_assert(field_signatures[jField<F>("forwardAction")] != -1);
		return sat<F>("forwardAction");
	}

	template<typename F = ::java::lang::String>
	static auto insertBreakAction() {
		static_assert(field_signatures[jField<F>("insertBreakAction")] != -1);
		return sat<F>("insertBreakAction");
	}

	template<typename F = ::java::lang::String>
	static auto insertContentAction() {
		static_assert(field_signatures[jField<F>("insertContentAction")] != -1);
		return sat<F>("insertContentAction");
	}

	template<typename F = ::java::lang::String>
	static auto insertTabAction() {
		static_assert(field_signatures[jField<F>("insertTabAction")] != -1);
		return sat<F>("insertTabAction");
	}

	template<typename F = ::java::lang::String>
	static auto nextWordAction() {
		static_assert(field_signatures[jField<F>("nextWordAction")] != -1);
		return sat<F>("nextWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto pageDownAction() {
		static_assert(field_signatures[jField<F>("pageDownAction")] != -1);
		return sat<F>("pageDownAction");
	}

	template<typename F = ::java::lang::String>
	static auto pageUpAction() {
		static_assert(field_signatures[jField<F>("pageUpAction")] != -1);
		return sat<F>("pageUpAction");
	}

	template<typename F = ::java::lang::String>
	static auto pasteAction() {
		static_assert(field_signatures[jField<F>("pasteAction")] != -1);
		return sat<F>("pasteAction");
	}

	template<typename F = ::java::lang::String>
	static auto previousWordAction() {
		static_assert(field_signatures[jField<F>("previousWordAction")] != -1);
		return sat<F>("previousWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto readOnlyAction() {
		static_assert(field_signatures[jField<F>("readOnlyAction")] != -1);
		return sat<F>("readOnlyAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectAllAction() {
		static_assert(field_signatures[jField<F>("selectAllAction")] != -1);
		return sat<F>("selectAllAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectLineAction() {
		static_assert(field_signatures[jField<F>("selectLineAction")] != -1);
		return sat<F>("selectLineAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectParagraphAction() {
		static_assert(field_signatures[jField<F>("selectParagraphAction")] != -1);
		return sat<F>("selectParagraphAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectWordAction() {
		static_assert(field_signatures[jField<F>("selectWordAction")] != -1);
		return sat<F>("selectWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionBackwardAction() {
		static_assert(field_signatures[jField<F>("selectionBackwardAction")] != -1);
		return sat<F>("selectionBackwardAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionBeginAction() {
		static_assert(field_signatures[jField<F>("selectionBeginAction")] != -1);
		return sat<F>("selectionBeginAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionBeginLineAction() {
		static_assert(field_signatures[jField<F>("selectionBeginLineAction")] != -1);
		return sat<F>("selectionBeginLineAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionBeginParagraphAction() {
		static_assert(field_signatures[jField<F>("selectionBeginParagraphAction")] != -1);
		return sat<F>("selectionBeginParagraphAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionBeginWordAction() {
		static_assert(field_signatures[jField<F>("selectionBeginWordAction")] != -1);
		return sat<F>("selectionBeginWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionDownAction() {
		static_assert(field_signatures[jField<F>("selectionDownAction")] != -1);
		return sat<F>("selectionDownAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionEndAction() {
		static_assert(field_signatures[jField<F>("selectionEndAction")] != -1);
		return sat<F>("selectionEndAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionEndLineAction() {
		static_assert(field_signatures[jField<F>("selectionEndLineAction")] != -1);
		return sat<F>("selectionEndLineAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionEndParagraphAction() {
		static_assert(field_signatures[jField<F>("selectionEndParagraphAction")] != -1);
		return sat<F>("selectionEndParagraphAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionEndWordAction() {
		static_assert(field_signatures[jField<F>("selectionEndWordAction")] != -1);
		return sat<F>("selectionEndWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionForwardAction() {
		static_assert(field_signatures[jField<F>("selectionForwardAction")] != -1);
		return sat<F>("selectionForwardAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionNextWordAction() {
		static_assert(field_signatures[jField<F>("selectionNextWordAction")] != -1);
		return sat<F>("selectionNextWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionPreviousWordAction() {
		static_assert(field_signatures[jField<F>("selectionPreviousWordAction")] != -1);
		return sat<F>("selectionPreviousWordAction");
	}

	template<typename F = ::java::lang::String>
	static auto selectionUpAction() {
		static_assert(field_signatures[jField<F>("selectionUpAction")] != -1);
		return sat<F>("selectionUpAction");
	}

	template<typename F = ::java::lang::String>
	static auto upAction() {
		static_assert(field_signatures[jField<F>("upAction")] != -1);
		return sat<F>("upAction");
	}

	template<typename F = ::java::lang::String>
	static auto writableAction() {
		static_assert(field_signatures[jField<F>("writableAction")] != -1);
		return sat<F>("writableAction");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::Caret()>("createCaret"), //
		jMethod<::javax::swing::text::Document()>("createDefaultDocument"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::javax::swing::text::ViewFactory()>("getViewFactory"), //
		jMethod<::jvoid(::java::io::InputStream, ::javax::swing::text::Document, ::jint)>("read"), //
		jMethod<::jvoid(::java::io::Reader, ::javax::swing::text::Document, ::jint)>("read"), //
		jMethod<::jvoid(::java::io::OutputStream, ::javax::swing::text::Document, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::java::io::Writer, ::javax::swing::text::Document, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::javax::swing::text::Caret, typename... Args>
	auto createCaret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createCaret")] != -1);
		return call<R>("createCaret", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto createDefaultDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDefaultDocument")] != -1);
		return call<R>("createDefaultDocument", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::ViewFactory, typename... Args>
	auto getViewFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewFactory")] != -1);
		return call<R>("getViewFactory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
