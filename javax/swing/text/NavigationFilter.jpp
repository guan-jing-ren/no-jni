#ifndef javax_swing_text_NavigationFilter_HPP
#define javax_swing_text_NavigationFilter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::NavigationFilter : public jObject<::javax::swing::text::NavigationFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "NavigationFilter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint, ::javax::swing::text::Position$Bias, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::jvoid(::javax::swing::text::NavigationFilter$FilterBypass, ::jint, ::javax::swing::text::Position$Bias)>("moveDot"), //
		jMethod<::jvoid(::javax::swing::text::NavigationFilter$FilterBypass, ::jint, ::javax::swing::text::Position$Bias)>("setDot"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveDot")] != -1);
		return call<R>("moveDot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDot")] != -1);
		return call<R>("setDot", forward<Args>(args)...);
	}

};

#endif
