#ifndef javax_swing_text_TabStop_HPP
#define javax_swing_text_TabStop_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::TabStop : public jObject<::javax::swing::text::TabStop, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "TabStop";

	constexpr static Enume field_signatures{
		jField<::jint>("ALIGN_BAR"), //
		jField<::jint>("ALIGN_CENTER"), //
		jField<::jint>("ALIGN_DECIMAL"), //
		jField<::jint>("ALIGN_LEFT"), //
		jField<::jint>("ALIGN_RIGHT"), //
		jField<::jint>("LEAD_DOTS"), //
		jField<::jint>("LEAD_EQUALS"), //
		jField<::jint>("LEAD_HYPHENS"), //
		jField<::jint>("LEAD_NONE"), //
		jField<::jint>("LEAD_THICKLINE"), //
		jField<::jint>("LEAD_UNDERLINE"), //
	};

	template<typename F = ::jint>
	static auto ALIGN_BAR() {
		static_assert(field_signatures[jField<F>("ALIGN_BAR")] != -1);
		return sat<F>("ALIGN_BAR");
	}

	template<typename F = ::jint>
	static auto ALIGN_CENTER() {
		static_assert(field_signatures[jField<F>("ALIGN_CENTER")] != -1);
		return sat<F>("ALIGN_CENTER");
	}

	template<typename F = ::jint>
	static auto ALIGN_DECIMAL() {
		static_assert(field_signatures[jField<F>("ALIGN_DECIMAL")] != -1);
		return sat<F>("ALIGN_DECIMAL");
	}

	template<typename F = ::jint>
	static auto ALIGN_LEFT() {
		static_assert(field_signatures[jField<F>("ALIGN_LEFT")] != -1);
		return sat<F>("ALIGN_LEFT");
	}

	template<typename F = ::jint>
	static auto ALIGN_RIGHT() {
		static_assert(field_signatures[jField<F>("ALIGN_RIGHT")] != -1);
		return sat<F>("ALIGN_RIGHT");
	}

	template<typename F = ::jint>
	static auto LEAD_DOTS() {
		static_assert(field_signatures[jField<F>("LEAD_DOTS")] != -1);
		return sat<F>("LEAD_DOTS");
	}

	template<typename F = ::jint>
	static auto LEAD_EQUALS() {
		static_assert(field_signatures[jField<F>("LEAD_EQUALS")] != -1);
		return sat<F>("LEAD_EQUALS");
	}

	template<typename F = ::jint>
	static auto LEAD_HYPHENS() {
		static_assert(field_signatures[jField<F>("LEAD_HYPHENS")] != -1);
		return sat<F>("LEAD_HYPHENS");
	}

	template<typename F = ::jint>
	static auto LEAD_NONE() {
		static_assert(field_signatures[jField<F>("LEAD_NONE")] != -1);
		return sat<F>("LEAD_NONE");
	}

	template<typename F = ::jint>
	static auto LEAD_THICKLINE() {
		static_assert(field_signatures[jField<F>("LEAD_THICKLINE")] != -1);
		return sat<F>("LEAD_THICKLINE");
	}

	template<typename F = ::jint>
	static auto LEAD_UNDERLINE() {
		static_assert(field_signatures[jField<F>("LEAD_UNDERLINE")] != -1);
		return sat<F>("LEAD_UNDERLINE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat)>(), //
		jConstructor<::jvoid(::jfloat, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getAlignment"), //
		jMethod<::jint()>("getLeader"), //
		jMethod<::jfloat()>("getPosition"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLeader")] != -1);
		return call<R>("getLeader", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
