#ifndef javax_swing_text_View_HPP
#define javax_swing_text_View_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::View : public jObject<::javax::swing::text::View, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "View";

	constexpr static Enume field_signatures{
		jField<::jint>("BOTTOM"), //
		jField<::jint>("BadBreakWeight"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("ExcellentBreakWeight"), //
		jField<::jint>("ForcedBreakWeight"), //
		jField<::jint>("GoodBreakWeight"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("NEXT"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTH_EAST"), //
		jField<::jint>("NORTH_WEST"), //
		jField<::jint>("PREVIOUS"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTH_EAST"), //
		jField<::jint>("SOUTH_WEST"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
		jField<::jint>("X_AXIS"), //
		jField<::jint>("Y_AXIS"), //
	};

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto BadBreakWeight() {
		static_assert(field_signatures[jField<F>("BadBreakWeight")] != -1);
		return sat<F>("BadBreakWeight");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto ExcellentBreakWeight() {
		static_assert(field_signatures[jField<F>("ExcellentBreakWeight")] != -1);
		return sat<F>("ExcellentBreakWeight");
	}

	template<typename F = ::jint>
	static auto ForcedBreakWeight() {
		static_assert(field_signatures[jField<F>("ForcedBreakWeight")] != -1);
		return sat<F>("ForcedBreakWeight");
	}

	template<typename F = ::jint>
	static auto GoodBreakWeight() {
		static_assert(field_signatures[jField<F>("GoodBreakWeight")] != -1);
		return sat<F>("GoodBreakWeight");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto NEXT() {
		static_assert(field_signatures[jField<F>("NEXT")] != -1);
		return sat<F>("NEXT");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTH_EAST() {
		static_assert(field_signatures[jField<F>("NORTH_EAST")] != -1);
		return sat<F>("NORTH_EAST");
	}

	template<typename F = ::jint>
	static auto NORTH_WEST() {
		static_assert(field_signatures[jField<F>("NORTH_WEST")] != -1);
		return sat<F>("NORTH_WEST");
	}

	template<typename F = ::jint>
	static auto PREVIOUS() {
		static_assert(field_signatures[jField<F>("PREVIOUS")] != -1);
		return sat<F>("PREVIOUS");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTH_EAST() {
		static_assert(field_signatures[jField<F>("SOUTH_EAST")] != -1);
		return sat<F>("SOUTH_EAST");
	}

	template<typename F = ::jint>
	static auto SOUTH_WEST() {
		static_assert(field_signatures[jField<F>("SOUTH_WEST")] != -1);
		return sat<F>("SOUTH_WEST");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	template<typename F = ::jint>
	static auto X_AXIS() {
		static_assert(field_signatures[jField<F>("X_AXIS")] != -1);
		return sat<F>("X_AXIS");
	}

	template<typename F = ::jint>
	static auto Y_AXIS() {
		static_assert(field_signatures[jField<F>("Y_AXIS")] != -1);
		return sat<F>("Y_AXIS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::jvoid(::javax::swing::text::View)>("append"), //
		jMethod<::javax::swing::text::View(::jint, ::jint, ::jfloat, ::jfloat)>("breakView"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::javax::swing::text::View(::jint, ::jint)>("createFragment"), //
		jMethod<::jfloat(::jint)>("getAlignment"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jint(::jint, ::jfloat, ::jfloat)>("getBreakWeight"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("getChildAllocation"), //
		jMethod<::java::awt::Container()>("getContainer"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::javax::swing::text::Element()>("getElement"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::java::awt::Graphics()>("getGraphics"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::javax::swing::text::View()>("getParent"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jint(::jint)>("getResizeWeight"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::java::lang::String(::jfloat, ::jfloat, ::java::awt::Shape)>("getToolTipText"), //
		jMethod<::javax::swing::text::View(::jint)>("getView"), //
		jMethod<::jint()>("getViewCount"), //
		jMethod<::javax::swing::text::ViewFactory()>("getViewFactory"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape)>("getViewIndex"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias)>("getViewIndex"), //
		jMethod<::jvoid(::jint, ::javax::swing::text::View)>("insert"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("modelToView"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::java::awt::Shape(::jint, ::javax::swing::text::Position$Bias, ::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::text::View, ::jboolean, ::jboolean)>("preferenceChanged"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid()>("removeAll"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::View *)>("replace"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setSize"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape)>("viewToModel"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto breakView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("breakView")] != -1);
		return call<R>("breakView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto createFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFragment")] != -1);
		return call<R>("createFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBreakWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakWeight")] != -1);
		return call<R>("getBreakWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getChildAllocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildAllocation")] != -1);
		return call<R>("getChildAllocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContainer")] != -1);
		return call<R>("getContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Graphics, typename... Args>
	auto getGraphics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGraphics")] != -1);
		return call<R>("getGraphics", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResizeWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResizeWeight")] != -1);
		return call<R>("getResizeWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewCount")] != -1);
		return call<R>("getViewCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::ViewFactory, typename... Args>
	auto getViewFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewFactory")] != -1);
		return call<R>("getViewFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewIndex")] != -1);
		return call<R>("getViewIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferenceChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferenceChanged")] != -1);
		return call<R>("preferenceChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAll")] != -1);
		return call<R>("removeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

};

#endif
