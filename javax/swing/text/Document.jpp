#ifndef javax_swing_text_Document_HPP
#define javax_swing_text_Document_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Document : public jObject<::javax::swing::text::Document, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Document";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("StreamDescriptionProperty"), //
		jField<::java::lang::String>("TitleProperty"), //
	};

	template<typename F = ::java::lang::String>
	static auto StreamDescriptionProperty() {
		static_assert(field_signatures[jField<F>("StreamDescriptionProperty")] != -1);
		return sat<F>("StreamDescriptionProperty");
	}

	template<typename F = ::java::lang::String>
	static auto TitleProperty() {
		static_assert(field_signatures[jField<F>("TitleProperty")] != -1);
		return sat<F>("TitleProperty");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("addDocumentListener"), //
		jMethod<::jvoid(::javax::swing::event::UndoableEditListener)>("addUndoableEditListener"), //
		jMethod<::javax::swing::text::Position(::jint)>("createPosition"), //
		jMethod<::javax::swing::text::Element()>("getDefaultRootElement"), //
		jMethod<::javax::swing::text::Position()>("getEndPosition"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getProperty"), //
		jMethod<::javax::swing::text::Element *()>("getRootElements"), //
		jMethod<::javax::swing::text::Position()>("getStartPosition"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getText"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::Segment)>("getText"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("insertString"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("putProperty"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::javax::swing::event::DocumentListener)>("removeDocumentListener"), //
		jMethod<::jvoid(::javax::swing::event::UndoableEditListener)>("removeUndoableEditListener"), //
		jMethod<::jvoid(::java::lang::Runnable)>("render"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addDocumentListener")] != -1);
		return call<R>("addDocumentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addUndoableEditListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addUndoableEditListener")] != -1);
		return call<R>("addUndoableEditListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto createPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createPosition")] != -1);
		return call<R>("createPosition", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getDefaultRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultRootElement")] != -1);
		return call<R>("getDefaultRootElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto getEndPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEndPosition")] != -1);
		return call<R>("getEndPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element *, typename... Args>
	auto getRootElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRootElements")] != -1);
		return call<R>("getRootElements", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position, typename... Args>
	auto getStartPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStartPosition")] != -1);
		return call<R>("getStartPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertString")] != -1);
		return call<R>("insertString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putProperty")] != -1);
		return call<R>("putProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeDocumentListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeDocumentListener")] != -1);
		return call<R>("removeDocumentListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUndoableEditListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeUndoableEditListener")] != -1);
		return call<R>("removeUndoableEditListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto render(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("render")] != -1);
		return call<R>("render", forward<Args>(args)...);
	}

};

#endif
