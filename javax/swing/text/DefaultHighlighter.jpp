#ifndef javax_swing_text_DefaultHighlighter_HPP
#define javax_swing_text_DefaultHighlighter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultHighlighter : public jObject<::javax::swing::text::DefaultHighlighter, ::javax::swing::text::LayeredHighlighter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultHighlighter";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::LayeredHighlighter$LayerPainter>("DefaultPainter"), //
	};

	template<typename F = ::javax::swing::text::LayeredHighlighter$LayerPainter>
	static auto DefaultPainter() {
		static_assert(field_signatures[jField<F>("DefaultPainter")] != -1);
		return sat<F>("DefaultPainter");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::jint, ::jint, ::javax::swing::text::Highlighter$HighlightPainter)>("addHighlight"), //
		jMethod<::jvoid(::java::lang::Object, ::jint, ::jint)>("changeHighlight"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("deinstall"), //
		jMethod<::jboolean()>("getDrawsLayeredHighlights"), //
		jMethod<::javax::swing::text::Highlighter$Highlight *()>("getHighlights"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("install"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::java::awt::Shape, ::javax::swing::text::JTextComponent, ::javax::swing::text::View)>("paintLayeredHighlights"), //
		jMethod<::jvoid()>("removeAllHighlights"), //
		jMethod<::jvoid(::java::lang::Object)>("removeHighlight"), //
		jMethod<::jvoid(::jboolean)>("setDrawsLayeredHighlights"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto addHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHighlight")] != -1);
		return call<R>("addHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changeHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changeHighlight")] != -1);
		return call<R>("changeHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deinstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deinstall")] != -1);
		return call<R>("deinstall", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDrawsLayeredHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDrawsLayeredHighlights")] != -1);
		return call<R>("getDrawsLayeredHighlights", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Highlighter$Highlight *, typename... Args>
	auto getHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighlights")] != -1);
		return call<R>("getHighlights", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintLayeredHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintLayeredHighlights")] != -1);
		return call<R>("paintLayeredHighlights", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllHighlights")] != -1);
		return call<R>("removeAllHighlights", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHighlight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeHighlight")] != -1);
		return call<R>("removeHighlight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDrawsLayeredHighlights(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDrawsLayeredHighlights")] != -1);
		return call<R>("setDrawsLayeredHighlights", std::forward<Args>(args)...);
	}

};

#endif
