#ifndef javax_swing_text_GlyphView$GlyphPainter_HPP
#define javax_swing_text_GlyphView$GlyphPainter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::GlyphView$GlyphPainter : public jObject<::javax::swing::text::GlyphView$GlyphPainter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "GlyphView$GlyphPainter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jfloat(::javax::swing::text::GlyphView)>("getAscent"), //
		jMethod<::jint(::javax::swing::text::GlyphView, ::jint, ::jfloat, ::jfloat)>("getBoundedPosition"), //
		jMethod<::jfloat(::javax::swing::text::GlyphView)>("getDescent"), //
		jMethod<::jfloat(::javax::swing::text::GlyphView)>("getHeight"), //
		jMethod<::jint(::javax::swing::text::GlyphView, ::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::javax::swing::text::GlyphView$GlyphPainter(::javax::swing::text::GlyphView, ::jint, ::jint)>("getPainter"), //
		jMethod<::jfloat(::javax::swing::text::GlyphView, ::jint, ::jint, ::javax::swing::text::TabExpander, ::jfloat)>("getSpan"), //
		jMethod<::java::awt::Shape(::javax::swing::text::GlyphView, ::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape)>("modelToView"), //
		jMethod<::jvoid(::javax::swing::text::GlyphView, ::java::awt::Graphics, ::java::awt::Shape, ::jint, ::jint)>("paint"), //
		jMethod<::jint(::javax::swing::text::GlyphView, ::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getAscent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAscent")] != -1);
		return call<R>("getAscent", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBoundedPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoundedPosition")] != -1);
		return call<R>("getBoundedPosition", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getDescent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescent")] != -1);
		return call<R>("getDescent", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::GlyphView$GlyphPainter, typename... Args>
	auto getPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPainter")] != -1);
		return call<R>("getPainter", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpan")] != -1);
		return call<R>("getSpan", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", forward<Args>(args)...);
	}

};

#endif
