#ifndef javax_swing_text_Segment_HPP
#define javax_swing_text_Segment_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Segment : public jObject<::javax::swing::text::Segment, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Segment";

	constexpr static Enume field_signatures{
		jField<::jchar>("DONE"), //
		jField<::jchar *>("array"), //
		jField<::jint>("count"), //
		jField<::jint>("offset"), //
	};

	template<typename F = ::jchar>
	static auto DONE() {
		static_assert(field_signatures[jField<F>("DONE")] != -1);
		return sat<F>("DONE");
	}

	template<typename F = ::jchar *>
	auto array() const {
		static_assert(field_signatures[jField<F>("array")] != -1);
		return at<F>("array");
	}

	template<typename F = ::jint>
	auto count() const {
		static_assert(field_signatures[jField<F>("count")] != -1);
		return at<F>("count");
	}

	template<typename F = ::jint>
	auto offset() const {
		static_assert(field_signatures[jField<F>("offset")] != -1);
		return at<F>("offset");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jchar *, ::jint, ::jint)>(), //
		jMethod<::jchar(::jint)>("charAt"), //
		jMethod<::java::util::stream::IntStream()>("chars"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::util::stream::IntStream()>("codePoints"), //
		jMethod<::jchar()>("current"), //
		jMethod<::jchar()>("first"), //
		jMethod<::jint()>("getBeginIndex"), //
		jMethod<::jint()>("getEndIndex"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::jboolean()>("isPartialReturn"), //
		jMethod<::jchar()>("last"), //
		jMethod<::jint()>("length"), //
		jMethod<::jchar()>("next"), //
		jMethod<::jchar()>("previous"), //
		jMethod<::jchar(::jint)>("setIndex"), //
		jMethod<::jvoid(::jboolean)>("setPartialReturn"), //
		jMethod<::java::lang::CharSequence(::jint, ::jint)>("subSequence"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jchar, typename... Args>
	auto charAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charAt")] != -1);
		return call<R>("charAt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto chars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chars")] != -1);
		return call<R>("chars", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::stream::IntStream, typename... Args>
	auto codePoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codePoints")] != -1);
		return call<R>("codePoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto current(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("current")] != -1);
		return call<R>("current", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBeginIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeginIndex")] != -1);
		return call<R>("getBeginIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPartialReturn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPartialReturn")] != -1);
		return call<R>("isPartialReturn", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto last(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("last")] != -1);
		return call<R>("last", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("length")] != -1);
		return call<R>("length", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto previous(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("previous")] != -1);
		return call<R>("previous", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto setIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIndex")] != -1);
		return call<R>("setIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPartialReturn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPartialReturn")] != -1);
		return call<R>("setPartialReturn", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::CharSequence, typename... Args>
	auto subSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subSequence")] != -1);
		return call<R>("subSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
