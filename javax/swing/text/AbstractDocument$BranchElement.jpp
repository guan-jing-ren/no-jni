#ifndef javax_swing_text_AbstractDocument$BranchElement_HPP
#define javax_swing_text_AbstractDocument$BranchElement_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractDocument$BranchElement : public jObject<::javax::swing::text::AbstractDocument$BranchElement, ::javax::swing::text::AbstractDocument$AbstractElement> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractDocument$BranchElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument, ::javax::swing::text::Element, ::javax::swing::text::AttributeSet)>(), //
		jMethod<::java::util::Enumeration()>("children"), //
		jMethod<::jboolean()>("getAllowsChildren"), //
		jMethod<::javax::swing::text::Element(::jint)>("getElement"), //
		jMethod<::jint()>("getElementCount"), //
		jMethod<::jint(::jint)>("getElementIndex"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::jboolean()>("isLeaf"), //
		jMethod<::javax::swing::text::Element(::jint)>("positionToElement"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::Element *)>("replace"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("children")] != -1);
		return call<R>("children", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllowsChildren")] != -1);
		return call<R>("getAllowsChildren", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementCount")] != -1);
		return call<R>("getElementCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementIndex")] != -1);
		return call<R>("getElementIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto positionToElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("positionToElement")] != -1);
		return call<R>("positionToElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
