#ifndef javax_swing_text_Utilities_HPP
#define javax_swing_text_Utilities_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::Utilities : public jObject<::javax::swing::text::Utilities, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "Utilities";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::javax::swing::text::Segment, ::jint, ::jint, ::java::awt::Graphics, ::javax::swing::text::TabExpander, ::jint)>("drawTabbedText"), //
		jMethod<::jint(::javax::swing::text::Segment, ::java::awt::FontMetrics, ::jint, ::jint, ::javax::swing::text::TabExpander, ::jint)>("getBreakLocation"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getNextWord"), //
		jMethod<::javax::swing::text::Element(::javax::swing::text::JTextComponent, ::jint)>("getParagraphElement"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint, ::jint)>("getPositionAbove"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint, ::jint)>("getPositionBelow"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getPreviousWord"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getRowEnd"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getRowStart"), //
		jMethod<::jint(::javax::swing::text::Segment, ::java::awt::FontMetrics, ::jint, ::jint, ::javax::swing::text::TabExpander, ::jint)>("getTabbedTextOffset"), //
		jMethod<::jint(::javax::swing::text::Segment, ::java::awt::FontMetrics, ::jint, ::jint, ::javax::swing::text::TabExpander, ::jint, ::jboolean)>("getTabbedTextOffset"), //
		jMethod<::jint(::javax::swing::text::Segment, ::java::awt::FontMetrics, ::jint, ::javax::swing::text::TabExpander, ::jint)>("getTabbedTextWidth"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getWordEnd"), //
		jMethod<::jint(::javax::swing::text::JTextComponent, ::jint)>("getWordStart"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto drawTabbedText(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawTabbedText")] != -1);
		return scall<R>("drawTabbedText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getBreakLocation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakLocation")] != -1);
		return scall<R>("getBreakLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getNextWord(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextWord")] != -1);
		return scall<R>("getNextWord", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	static auto getParagraphElement(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParagraphElement")] != -1);
		return scall<R>("getParagraphElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getPositionAbove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositionAbove")] != -1);
		return scall<R>("getPositionAbove", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getPositionBelow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositionBelow")] != -1);
		return scall<R>("getPositionBelow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getPreviousWord(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousWord")] != -1);
		return scall<R>("getPreviousWord", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getRowEnd(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowEnd")] != -1);
		return scall<R>("getRowEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getRowStart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowStart")] != -1);
		return scall<R>("getRowStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getTabbedTextOffset(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabbedTextOffset")] != -1);
		return scall<R>("getTabbedTextOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getTabbedTextWidth(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabbedTextWidth")] != -1);
		return scall<R>("getTabbedTextWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getWordEnd(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordEnd")] != -1);
		return scall<R>("getWordEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getWordStart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWordStart")] != -1);
		return scall<R>("getWordStart", std::forward<Args>(args)...);
	}

};

#endif
