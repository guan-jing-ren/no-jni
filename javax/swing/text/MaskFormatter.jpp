#ifndef javax_swing_text_MaskFormatter_HPP
#define javax_swing_text_MaskFormatter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::MaskFormatter : public jObject<::javax::swing::text::MaskFormatter, ::javax::swing::text::DefaultFormatter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "MaskFormatter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getInvalidCharacters"), //
		jMethod<::java::lang::String()>("getMask"), //
		jMethod<::java::lang::String()>("getPlaceholder"), //
		jMethod<::jchar()>("getPlaceholderCharacter"), //
		jMethod<::java::lang::String()>("getValidCharacters"), //
		jMethod<::jboolean()>("getValueContainsLiteralCharacters"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField)>("install"), //
		jMethod<::jvoid(::java::lang::String)>("setInvalidCharacters"), //
		jMethod<::jvoid(::java::lang::String)>("setMask"), //
		jMethod<::jvoid(::java::lang::String)>("setPlaceholder"), //
		jMethod<::jvoid(::jchar)>("setPlaceholderCharacter"), //
		jMethod<::jvoid(::java::lang::String)>("setValidCharacters"), //
		jMethod<::jvoid(::jboolean)>("setValueContainsLiteralCharacters"), //
		jMethod<::java::lang::Object(::java::lang::String)>("stringToValue"), //
		jMethod<::java::lang::String(::java::lang::Object)>("valueToString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getInvalidCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInvalidCharacters")] != -1);
		return call<R>("getInvalidCharacters", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMask")] != -1);
		return call<R>("getMask", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPlaceholder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPlaceholder")] != -1);
		return call<R>("getPlaceholder", forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getPlaceholderCharacter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPlaceholderCharacter")] != -1);
		return call<R>("getPlaceholderCharacter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValidCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValidCharacters")] != -1);
		return call<R>("getValidCharacters", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueContainsLiteralCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueContainsLiteralCharacters")] != -1);
		return call<R>("getValueContainsLiteralCharacters", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInvalidCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInvalidCharacters")] != -1);
		return call<R>("setInvalidCharacters", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMask")] != -1);
		return call<R>("setMask", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPlaceholder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPlaceholder")] != -1);
		return call<R>("setPlaceholder", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPlaceholderCharacter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPlaceholderCharacter")] != -1);
		return call<R>("setPlaceholderCharacter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValidCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValidCharacters")] != -1);
		return call<R>("setValidCharacters", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueContainsLiteralCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueContainsLiteralCharacters")] != -1);
		return call<R>("setValueContainsLiteralCharacters", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto stringToValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stringToValue")] != -1);
		return call<R>("stringToValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto valueToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueToString")] != -1);
		return call<R>("valueToString", forward<Args>(args)...);
	}

};

#endif
