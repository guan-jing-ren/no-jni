#ifndef javax_swing_text_DocumentFilter$FilterBypass_HPP
#define javax_swing_text_DocumentFilter$FilterBypass_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DocumentFilter$FilterBypass : public jObject<::javax::swing::text::DocumentFilter$FilterBypass, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DocumentFilter$FilterBypass";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("insertString"), //
		jMethod<::jvoid(::jint, ::jint)>("remove"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("replace"), //
	};

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertString")] != -1);
		return call<R>("insertString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

};

#endif
