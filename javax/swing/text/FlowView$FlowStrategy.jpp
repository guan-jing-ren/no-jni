#ifndef javax_swing_text_FlowView$FlowStrategy_HPP
#define javax_swing_text_FlowView$FlowStrategy_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::FlowView$FlowStrategy : public jObject<::javax::swing::text::FlowView$FlowStrategy, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "FlowView$FlowStrategy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::text::FlowView, ::javax::swing::event::DocumentEvent, ::java::awt::Rectangle)>("changedUpdate"), //
		jMethod<::jvoid(::javax::swing::text::FlowView, ::javax::swing::event::DocumentEvent, ::java::awt::Rectangle)>("insertUpdate"), //
		jMethod<::jvoid(::javax::swing::text::FlowView)>("layout"), //
		jMethod<::jvoid(::javax::swing::text::FlowView, ::javax::swing::event::DocumentEvent, ::java::awt::Rectangle)>("removeUpdate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", forward<Args>(args)...);
	}

};

#endif
