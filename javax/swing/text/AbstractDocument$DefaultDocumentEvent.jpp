#ifndef javax_swing_text_AbstractDocument$DefaultDocumentEvent_HPP
#define javax_swing_text_AbstractDocument$DefaultDocumentEvent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractDocument$DefaultDocumentEvent : public jObject<::javax::swing::text::AbstractDocument$DefaultDocumentEvent, ::javax::swing::undo::CompoundEdit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractDocument$DefaultDocumentEvent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument, ::jint, ::jint, ::javax::swing::event::DocumentEvent$EventType)>(), //
		jMethod<::jboolean(::javax::swing::undo::UndoableEdit)>("addEdit"), //
		jMethod<::javax::swing::event::DocumentEvent$ElementChange(::javax::swing::text::Element)>("getChange"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::java::lang::String()>("getPresentationName"), //
		jMethod<::java::lang::String()>("getRedoPresentationName"), //
		jMethod<::javax::swing::event::DocumentEvent$EventType()>("getType"), //
		jMethod<::java::lang::String()>("getUndoPresentationName"), //
		jMethod<::jboolean()>("isSignificant"), //
		jMethod<::jvoid()>("redo"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("undo"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto addEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addEdit")] != -1);
		return call<R>("addEdit", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::DocumentEvent$ElementChange, typename... Args>
	auto getChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChange")] != -1);
		return call<R>("getChange", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPresentationName")] != -1);
		return call<R>("getPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRedoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRedoPresentationName")] != -1);
		return call<R>("getRedoPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::DocumentEvent$EventType, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUndoPresentationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUndoPresentationName")] != -1);
		return call<R>("getUndoPresentationName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSignificant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSignificant")] != -1);
		return call<R>("isSignificant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto redo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("redo")] != -1);
		return call<R>("redo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto undo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("undo")] != -1);
		return call<R>("undo", std::forward<Args>(args)...);
	}

};

#endif
