#ifndef javax_swing_text_ZoneView_HPP
#define javax_swing_text_ZoneView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::ZoneView : public jObject<::javax::swing::text::ZoneView, ::javax::swing::text::BoxView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "ZoneView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element, ::jint)>(), //
		jMethod<::jint()>("getMaxZonesLoaded"), //
		jMethod<::jint()>("getMaximumZoneSize"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
		jMethod<::jvoid(::jint)>("setMaxZonesLoaded"), //
		jMethod<::jvoid(::jint)>("setMaximumZoneSize"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getMaxZonesLoaded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxZonesLoaded")] != -1);
		return call<R>("getMaxZonesLoaded", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximumZoneSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumZoneSize")] != -1);
		return call<R>("getMaximumZoneSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxZonesLoaded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxZonesLoaded")] != -1);
		return call<R>("setMaxZonesLoaded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximumZoneSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximumZoneSize")] != -1);
		return call<R>("setMaximumZoneSize", std::forward<Args>(args)...);
	}

};

#endif
