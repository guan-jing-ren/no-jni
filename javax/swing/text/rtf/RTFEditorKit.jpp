#ifndef javax_swing_text_rtf_RTFEditorKit_HPP
#define javax_swing_text_rtf_RTFEditorKit_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::rtf::RTFEditorKit : public jObject<::javax::swing::text::rtf::RTFEditorKit, ::javax::swing::text::StyledEditorKit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_rtf / "RTFEditorKit";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::jvoid(::java::io::InputStream, ::javax::swing::text::Document, ::jint)>("read"), //
		jMethod<::jvoid(::java::io::Reader, ::javax::swing::text::Document, ::jint)>("read"), //
		jMethod<::jvoid(::java::io::OutputStream, ::javax::swing::text::Document, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::java::io::Writer, ::javax::swing::text::Document, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
