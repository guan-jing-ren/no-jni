#ifndef javax_swing_text_CompositeView_HPP
#define javax_swing_text_CompositeView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::CompositeView : public jObject<::javax::swing::text::CompositeView, ::javax::swing::text::View> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "CompositeView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("getChildAllocation"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::javax::swing::text::View(::jint)>("getView"), //
		jMethod<::jint()>("getViewCount"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias)>("getViewIndex"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::java::awt::Shape(::jint, ::javax::swing::text::Position$Bias, ::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape)>("modelToView"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::View *)>("replace"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getChildAllocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildAllocation")] != -1);
		return call<R>("getChildAllocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewCount")] != -1);
		return call<R>("getViewCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewIndex")] != -1);
		return call<R>("getViewIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

};

#endif
