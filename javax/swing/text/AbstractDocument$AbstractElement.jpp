#ifndef javax_swing_text_AbstractDocument$AbstractElement_HPP
#define javax_swing_text_AbstractDocument$AbstractElement_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AbstractDocument$AbstractElement : public jObject<::javax::swing::text::AbstractDocument$AbstractElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AbstractDocument$AbstractElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument, ::javax::swing::text::Element, ::javax::swing::text::AttributeSet)>(), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("addAttribute"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("addAttributes"), //
		jMethod<::java::util::Enumeration()>("children"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("containsAttribute"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("containsAttributes"), //
		jMethod<::javax::swing::text::AttributeSet()>("copyAttributes"), //
		jMethod<::jvoid(::java::io::PrintStream, ::jint)>("dump"), //
		jMethod<::jboolean()>("getAllowsChildren"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getAttribute"), //
		jMethod<::jint()>("getAttributeCount"), //
		jMethod<::java::util::Enumeration()>("getAttributeNames"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::javax::swing::tree::TreeNode(::jint)>("getChildAt"), //
		jMethod<::jint()>("getChildCount"), //
		jMethod<::javax::swing::text::Document()>("getDocument"), //
		jMethod<::javax::swing::text::Element(::jint)>("getElement"), //
		jMethod<::jint()>("getElementCount"), //
		jMethod<::jint(::jint)>("getElementIndex"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::jint(::javax::swing::tree::TreeNode)>("getIndex"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::tree::TreeNode()>("getParent"), //
		jMethod<::javax::swing::text::Element()>("getParentElement"), //
		jMethod<::javax::swing::text::AttributeSet()>("getResolveParent"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::jboolean(::java::lang::Object)>("isDefined"), //
		jMethod<::jboolean(::javax::swing::text::AttributeSet)>("isEqual"), //
		jMethod<::jboolean()>("isLeaf"), //
		jMethod<::jvoid(::java::lang::Object)>("removeAttribute"), //
		jMethod<::jvoid(::java::util::Enumeration)>("removeAttributes"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("removeAttributes"), //
		jMethod<::jvoid(::javax::swing::text::AttributeSet)>("setResolveParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttributes")] != -1);
		return call<R>("addAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto children(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("children")] != -1);
		return call<R>("children", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsAttribute")] != -1);
		return call<R>("containsAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsAttributes")] != -1);
		return call<R>("containsAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto copyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyAttributes")] != -1);
		return call<R>("copyAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dump(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dump")] != -1);
		return call<R>("dump", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowsChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllowsChildren")] != -1);
		return call<R>("getAllowsChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeCount")] != -1);
		return call<R>("getAttributeCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getChildAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildAt")] != -1);
		return call<R>("getChildAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChildCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildCount")] != -1);
		return call<R>("getChildCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto getDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocument")] != -1);
		return call<R>("getDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementCount")] != -1);
		return call<R>("getElementCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getElementIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementIndex")] != -1);
		return call<R>("getElementIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeNode, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getParentElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentElement")] != -1);
		return call<R>("getParentElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolveParent")] != -1);
		return call<R>("getResolveParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDefined")] != -1);
		return call<R>("isDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEqual(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEqual")] != -1);
		return call<R>("isEqual", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeaf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeaf")] != -1);
		return call<R>("isLeaf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttributes")] != -1);
		return call<R>("removeAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResolveParent")] != -1);
		return call<R>("setResolveParent", std::forward<Args>(args)...);
	}

};

#endif
