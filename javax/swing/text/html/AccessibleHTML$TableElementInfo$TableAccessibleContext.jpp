#ifndef javax_swing_text_html_AccessibleHTML$TableElementInfo$TableAccessibleContext_HPP
#define javax_swing_text_html_AccessibleHTML$TableElementInfo$TableAccessibleContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableAccessibleContext : public jObject<::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableAccessibleContext, ::javax::swing::text::html::AccessibleHTML$HTMLAccessibleContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "AccessibleHTML$TableElementInfo$TableAccessibleContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::AccessibleHTML$TableElementInfo, ::javax::swing::text::html::AccessibleHTML$ElementInfo)>(), //
		jMethod<::jvoid(::java::awt::event::FocusListener)>("addFocusListener"), //
		jMethod<::jvoid(::javax::swing::text::html::AccessibleHTML$TableElementInfo$TableCellElementInfo, ::jint)>("addRowHeader"), //
		jMethod<::jboolean(::java::awt::Point)>("contains"), //
		jMethod<::javax::accessibility::Accessible(::jint, ::jint)>("getAccessibleAt"), //
		jMethod<::javax::accessibility::Accessible(::java::awt::Point)>("getAccessibleAt"), //
		jMethod<::javax::accessibility::Accessible()>("getAccessibleCaption"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleChild"), //
		jMethod<::jint()>("getAccessibleChildrenCount"), //
		jMethod<::jint(::jint)>("getAccessibleColumn"), //
		jMethod<::jint()>("getAccessibleColumnCount"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleColumnDescription"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleColumnExtentAt"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleColumnHeader"), //
		jMethod<::java::lang::String(::jint)>("getAccessibleColumnHeader"), //
		jMethod<::javax::accessibility::AccessibleComponent()>("getAccessibleComponent"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::lang::String()>("getAccessibleDescription"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleIndex"), //
		jMethod<::jint()>("getAccessibleIndexInParent"), //
		jMethod<::java::lang::String()>("getAccessibleName"), //
		jMethod<::javax::accessibility::AccessibleRole()>("getAccessibleRole"), //
		jMethod<::jint(::jint)>("getAccessibleRow"), //
		jMethod<::jint()>("getAccessibleRowCount"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleRowDescription"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleRowExtentAt"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleRowHeader"), //
		jMethod<::java::lang::String(::jint)>("getAccessibleRowHeader"), //
		jMethod<::javax::accessibility::AccessibleStateSet()>("getAccessibleStateSet"), //
		jMethod<::javax::accessibility::Accessible()>("getAccessibleSummary"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleTable"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::java::awt::Rectangle()>("getBounds"), //
		jMethod<::java::awt::Cursor()>("getCursor"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::FontMetrics(::java::awt::Font)>("getFontMetrics"), //
		jMethod<::java::awt::Color()>("getForeground"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::java::awt::Point()>("getLocation"), //
		jMethod<::java::awt::Point()>("getLocationOnScreen"), //
		jMethod<::jint *()>("getSelectedAccessibleColumns"), //
		jMethod<::jint *()>("getSelectedAccessibleRows"), //
		jMethod<::java::awt::Dimension()>("getSize"), //
		jMethod<::jboolean(::jint)>("isAccessibleColumnSelected"), //
		jMethod<::jboolean(::jint)>("isAccessibleRowSelected"), //
		jMethod<::jboolean(::jint, ::jint)>("isAccessibleSelected"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jboolean()>("isShowing"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::java::awt::event::FocusListener)>("removeFocusListener"), //
		jMethod<::jvoid()>("requestFocus"), //
		jMethod<::jvoid(::javax::accessibility::Accessible)>("setAccessibleCaption"), //
		jMethod<::jvoid(::jint, ::javax::accessibility::Accessible)>("setAccessibleColumnDescription"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleTable)>("setAccessibleColumnHeader"), //
		jMethod<::jvoid(::jint, ::javax::accessibility::Accessible)>("setAccessibleRowDescription"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleTable)>("setAccessibleRowHeader"), //
		jMethod<::jvoid(::javax::accessibility::Accessible)>("setAccessibleSummary"), //
		jMethod<::jvoid(::java::awt::Color)>("setBackground"), //
		jMethod<::jvoid(::java::awt::Rectangle)>("setBounds"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setCursor"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::java::awt::Color)>("setForeground"), //
		jMethod<::jvoid(::java::awt::Point)>("setLocation"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setSize"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addFocusListener")] != -1);
		return call<R>("addFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRowHeader")] != -1);
		return call<R>("addRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleAt")] != -1);
		return call<R>("getAccessibleAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleCaption")] != -1);
		return call<R>("getAccessibleCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChild")] != -1);
		return call<R>("getAccessibleChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleChildrenCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return call<R>("getAccessibleChildrenCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumn")] != -1);
		return call<R>("getAccessibleColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnCount")] != -1);
		return call<R>("getAccessibleColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleColumnDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnDescription")] != -1);
		return call<R>("getAccessibleColumnDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumnExtentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnExtentAt")] != -1);
		return call<R>("getAccessibleColumnExtentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnHeader")] != -1);
		return call<R>("getAccessibleColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleComponent, typename... Args>
	auto getAccessibleComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleComponent")] != -1);
		return call<R>("getAccessibleComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleDescription")] != -1);
		return call<R>("getAccessibleDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIndex")] != -1);
		return call<R>("getAccessibleIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleIndexInParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIndexInParent")] != -1);
		return call<R>("getAccessibleIndexInParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleName")] != -1);
		return call<R>("getAccessibleName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleRole, typename... Args>
	auto getAccessibleRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRole")] != -1);
		return call<R>("getAccessibleRole", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRow")] != -1);
		return call<R>("getAccessibleRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowCount")] != -1);
		return call<R>("getAccessibleRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleRowDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowDescription")] != -1);
		return call<R>("getAccessibleRowDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRowExtentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowExtentAt")] != -1);
		return call<R>("getAccessibleRowExtentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowHeader")] != -1);
		return call<R>("getAccessibleRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleStateSet, typename... Args>
	auto getAccessibleStateSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleStateSet")] != -1);
		return call<R>("getAccessibleStateSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleSummary")] != -1);
		return call<R>("getAccessibleSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleTable")] != -1);
		return call<R>("getAccessibleTable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBounds")] != -1);
		return call<R>("getBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCursor")] != -1);
		return call<R>("getCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::FontMetrics, typename... Args>
	auto getFontMetrics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFontMetrics")] != -1);
		return call<R>("getFontMetrics", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getLocationOnScreen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationOnScreen")] != -1);
		return call<R>("getLocationOnScreen", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedAccessibleColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedAccessibleColumns")] != -1);
		return call<R>("getSelectedAccessibleColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedAccessibleRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedAccessibleRows")] != -1);
		return call<R>("getSelectedAccessibleRows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleColumnSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleColumnSelected")] != -1);
		return call<R>("isAccessibleColumnSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleRowSelected")] != -1);
		return call<R>("isAccessibleRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleSelected")] != -1);
		return call<R>("isAccessibleSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShowing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isShowing")] != -1);
		return call<R>("isShowing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeFocusListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFocusListener")] != -1);
		return call<R>("removeFocusListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestFocus")] != -1);
		return call<R>("requestFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleCaption")] != -1);
		return call<R>("setAccessibleCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleColumnDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleColumnDescription")] != -1);
		return call<R>("setAccessibleColumnDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleColumnHeader")] != -1);
		return call<R>("setAccessibleColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleRowDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleRowDescription")] != -1);
		return call<R>("setAccessibleRowDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleRowHeader")] != -1);
		return call<R>("setAccessibleRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleSummary")] != -1);
		return call<R>("setAccessibleSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBackground")] != -1);
		return call<R>("setBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBounds")] != -1);
		return call<R>("setBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCursor")] != -1);
		return call<R>("setCursor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setForeground")] != -1);
		return call<R>("setForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

};

#endif
