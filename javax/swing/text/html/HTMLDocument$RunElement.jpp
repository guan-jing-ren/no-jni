#ifndef javax_swing_text_html_HTMLDocument$RunElement_HPP
#define javax_swing_text_html_HTMLDocument$RunElement_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLDocument$RunElement : public jObject<::javax::swing::text::html::HTMLDocument$RunElement, ::javax::swing::text::AbstractDocument$LeafElement> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLDocument$RunElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::HTMLDocument, ::javax::swing::text::Element, ::javax::swing::text::AttributeSet, ::jint, ::jint)>(), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::text::AttributeSet()>("getResolveParent"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getResolveParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolveParent")] != -1);
		return call<R>("getResolveParent", std::forward<Args>(args)...);
	}

};

#endif
