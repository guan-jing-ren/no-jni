#ifndef javax_swing_text_html_FormSubmitEvent$MethodType_HPP
#define javax_swing_text_html_FormSubmitEvent$MethodType_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::FormSubmitEvent$MethodType : public jObject<::javax::swing::text::html::FormSubmitEvent$MethodType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "FormSubmitEvent$MethodType";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::html::FormSubmitEvent$MethodType>("GET"), //
		jField<::javax::swing::text::html::FormSubmitEvent$MethodType>("POST"), //
	};

	template<typename F = ::javax::swing::text::html::FormSubmitEvent$MethodType>
	static auto GET() {
		static_assert(field_signatures[jField<F>("GET")] != -1);
		return sat<F>("GET");
	}

	template<typename F = ::javax::swing::text::html::FormSubmitEvent$MethodType>
	static auto POST() {
		static_assert(field_signatures[jField<F>("POST")] != -1);
		return sat<F>("POST");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::text::html::FormSubmitEvent$MethodType(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::text::html::FormSubmitEvent$MethodType *()>("values"), //
	};

	template<typename R = ::javax::swing::text::html::FormSubmitEvent$MethodType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::FormSubmitEvent$MethodType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
