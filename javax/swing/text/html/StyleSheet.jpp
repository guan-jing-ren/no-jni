#ifndef javax_swing_text_html_StyleSheet_HPP
#define javax_swing_text_html_StyleSheet_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::StyleSheet : public jObject<::javax::swing::text::html::StyleSheet, ::javax::swing::text::StyleContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "StyleSheet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::lang::Object, ::java::lang::Object)>("addAttribute"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::javax::swing::text::AttributeSet)>("addAttributes"), //
		jMethod<::jvoid(::javax::swing::text::MutableAttributeSet, ::javax::swing::text::html::CSS$Attribute, ::java::lang::String)>("addCSSAttribute"), //
		jMethod<::jboolean(::javax::swing::text::MutableAttributeSet, ::javax::swing::text::html::CSS$Attribute, ::java::lang::String)>("addCSSAttributeFromHTML"), //
		jMethod<::jvoid(::java::lang::String)>("addRule"), //
		jMethod<::jvoid(::javax::swing::text::html::StyleSheet)>("addStyleSheet"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getBackground"), //
		jMethod<::java::net::URL()>("getBase"), //
		jMethod<::javax::swing::text::html::StyleSheet$BoxPainter(::javax::swing::text::AttributeSet)>("getBoxPainter"), //
		jMethod<::javax::swing::text::AttributeSet(::java::lang::String)>("getDeclaration"), //
		jMethod<::java::awt::Font(::javax::swing::text::AttributeSet)>("getFont"), //
		jMethod<::java::awt::Color(::javax::swing::text::AttributeSet)>("getForeground"), //
		jMethod<::jint(::jfloat)>("getIndexOfSize"), //
		jMethod<::javax::swing::text::html::StyleSheet$ListPainter(::javax::swing::text::AttributeSet)>("getListPainter"), //
		jMethod<::jfloat(::jint)>("getPointSize"), //
		jMethod<::jfloat(::java::lang::String)>("getPointSize"), //
		jMethod<::javax::swing::text::Style(::java::lang::String)>("getRule"), //
		jMethod<::javax::swing::text::Style(::javax::swing::text::html::HTML$Tag, ::javax::swing::text::Element)>("getRule"), //
		jMethod<::javax::swing::text::html::StyleSheet *()>("getStyleSheets"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::View)>("getViewAttributes"), //
		jMethod<::jvoid(::java::net::URL)>("importStyleSheet"), //
		jMethod<::jvoid(::java::io::Reader, ::java::net::URL)>("loadRules"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::lang::Object)>("removeAttribute"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::java::util::Enumeration)>("removeAttributes"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet, ::javax::swing::text::AttributeSet)>("removeAttributes"), //
		jMethod<::jvoid(::java::lang::String)>("removeStyle"), //
		jMethod<::jvoid(::javax::swing::text::html::StyleSheet)>("removeStyleSheet"), //
		jMethod<::jvoid(::java::net::URL)>("setBase"), //
		jMethod<::jvoid(::jint)>("setBaseFontSize"), //
		jMethod<::jvoid(::java::lang::String)>("setBaseFontSize"), //
		jMethod<::java::awt::Color(::java::lang::String)>("stringToColor"), //
		jMethod<::javax::swing::text::AttributeSet(::javax::swing::text::AttributeSet)>("translateHTMLToCSS"), //
	};

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto addAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttributes")] != -1);
		return call<R>("addAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addCSSAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addCSSAttribute")] != -1);
		return call<R>("addCSSAttribute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addCSSAttributeFromHTML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addCSSAttributeFromHTML")] != -1);
		return call<R>("addCSSAttributeFromHTML", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRule")] != -1);
		return call<R>("addRule", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addStyleSheet")] != -1);
		return call<R>("addStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBase")] != -1);
		return call<R>("getBase", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::StyleSheet$BoxPainter, typename... Args>
	auto getBoxPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBoxPainter")] != -1);
		return call<R>("getBoxPainter", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDeclaration")] != -1);
		return call<R>("getDeclaration", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getIndexOfSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndexOfSize")] != -1);
		return scall<R>("getIndexOfSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::StyleSheet$ListPainter, typename... Args>
	auto getListPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListPainter")] != -1);
		return call<R>("getListPainter", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPointSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPointSize")] != -1);
		return call<R>("getPointSize", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Style, typename... Args>
	auto getRule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRule")] != -1);
		return call<R>("getRule", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::StyleSheet *, typename... Args>
	auto getStyleSheets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyleSheets")] != -1);
		return call<R>("getStyleSheets", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getViewAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewAttributes")] != -1);
		return call<R>("getViewAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto importStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("importStyleSheet")] != -1);
		return call<R>("importStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto loadRules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("loadRules")] != -1);
		return call<R>("loadRules", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto removeAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributes")] != -1);
		return call<R>("removeAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeStyle")] != -1);
		return call<R>("removeStyle", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeStyleSheet")] != -1);
		return call<R>("removeStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBase")] != -1);
		return call<R>("setBase", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBaseFontSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBaseFontSize")] != -1);
		return call<R>("setBaseFontSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto stringToColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stringToColor")] != -1);
		return call<R>("stringToColor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto translateHTMLToCSS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("translateHTMLToCSS")] != -1);
		return call<R>("translateHTMLToCSS", forward<Args>(args)...);
	}

};

#endif
