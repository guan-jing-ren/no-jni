#ifndef javax_swing_text_html_HTML$Tag_HPP
#define javax_swing_text_html_HTML$Tag_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTML$Tag : public jObject<::javax::swing::text::html::HTML$Tag, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTML$Tag";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::html::HTML$Tag>("A"), //
		jField<::javax::swing::text::html::HTML$Tag>("ADDRESS"), //
		jField<::javax::swing::text::html::HTML$Tag>("APPLET"), //
		jField<::javax::swing::text::html::HTML$Tag>("AREA"), //
		jField<::javax::swing::text::html::HTML$Tag>("B"), //
		jField<::javax::swing::text::html::HTML$Tag>("BASE"), //
		jField<::javax::swing::text::html::HTML$Tag>("BASEFONT"), //
		jField<::javax::swing::text::html::HTML$Tag>("BIG"), //
		jField<::javax::swing::text::html::HTML$Tag>("BLOCKQUOTE"), //
		jField<::javax::swing::text::html::HTML$Tag>("BODY"), //
		jField<::javax::swing::text::html::HTML$Tag>("BR"), //
		jField<::javax::swing::text::html::HTML$Tag>("CAPTION"), //
		jField<::javax::swing::text::html::HTML$Tag>("CENTER"), //
		jField<::javax::swing::text::html::HTML$Tag>("CITE"), //
		jField<::javax::swing::text::html::HTML$Tag>("CODE"), //
		jField<::javax::swing::text::html::HTML$Tag>("COMMENT"), //
		jField<::javax::swing::text::html::HTML$Tag>("CONTENT"), //
		jField<::javax::swing::text::html::HTML$Tag>("DD"), //
		jField<::javax::swing::text::html::HTML$Tag>("DFN"), //
		jField<::javax::swing::text::html::HTML$Tag>("DIR"), //
		jField<::javax::swing::text::html::HTML$Tag>("DIV"), //
		jField<::javax::swing::text::html::HTML$Tag>("DL"), //
		jField<::javax::swing::text::html::HTML$Tag>("DT"), //
		jField<::javax::swing::text::html::HTML$Tag>("EM"), //
		jField<::javax::swing::text::html::HTML$Tag>("FONT"), //
		jField<::javax::swing::text::html::HTML$Tag>("FORM"), //
		jField<::javax::swing::text::html::HTML$Tag>("FRAME"), //
		jField<::javax::swing::text::html::HTML$Tag>("FRAMESET"), //
		jField<::javax::swing::text::html::HTML$Tag>("H1"), //
		jField<::javax::swing::text::html::HTML$Tag>("H2"), //
		jField<::javax::swing::text::html::HTML$Tag>("H3"), //
		jField<::javax::swing::text::html::HTML$Tag>("H4"), //
		jField<::javax::swing::text::html::HTML$Tag>("H5"), //
		jField<::javax::swing::text::html::HTML$Tag>("H6"), //
		jField<::javax::swing::text::html::HTML$Tag>("HEAD"), //
		jField<::javax::swing::text::html::HTML$Tag>("HR"), //
		jField<::javax::swing::text::html::HTML$Tag>("HTML"), //
		jField<::javax::swing::text::html::HTML$Tag>("I"), //
		jField<::javax::swing::text::html::HTML$Tag>("IMG"), //
		jField<::javax::swing::text::html::HTML$Tag>("IMPLIED"), //
		jField<::javax::swing::text::html::HTML$Tag>("INPUT"), //
		jField<::javax::swing::text::html::HTML$Tag>("ISINDEX"), //
		jField<::javax::swing::text::html::HTML$Tag>("KBD"), //
		jField<::javax::swing::text::html::HTML$Tag>("LI"), //
		jField<::javax::swing::text::html::HTML$Tag>("LINK"), //
		jField<::javax::swing::text::html::HTML$Tag>("MAP"), //
		jField<::javax::swing::text::html::HTML$Tag>("MENU"), //
		jField<::javax::swing::text::html::HTML$Tag>("META"), //
		jField<::javax::swing::text::html::HTML$Tag>("NOFRAMES"), //
		jField<::javax::swing::text::html::HTML$Tag>("OBJECT"), //
		jField<::javax::swing::text::html::HTML$Tag>("OL"), //
		jField<::javax::swing::text::html::HTML$Tag>("OPTION"), //
		jField<::javax::swing::text::html::HTML$Tag>("P"), //
		jField<::javax::swing::text::html::HTML$Tag>("PARAM"), //
		jField<::javax::swing::text::html::HTML$Tag>("PRE"), //
		jField<::javax::swing::text::html::HTML$Tag>("S"), //
		jField<::javax::swing::text::html::HTML$Tag>("SAMP"), //
		jField<::javax::swing::text::html::HTML$Tag>("SCRIPT"), //
		jField<::javax::swing::text::html::HTML$Tag>("SELECT"), //
		jField<::javax::swing::text::html::HTML$Tag>("SMALL"), //
		jField<::javax::swing::text::html::HTML$Tag>("SPAN"), //
		jField<::javax::swing::text::html::HTML$Tag>("STRIKE"), //
		jField<::javax::swing::text::html::HTML$Tag>("STRONG"), //
		jField<::javax::swing::text::html::HTML$Tag>("STYLE"), //
		jField<::javax::swing::text::html::HTML$Tag>("SUB"), //
		jField<::javax::swing::text::html::HTML$Tag>("SUP"), //
		jField<::javax::swing::text::html::HTML$Tag>("TABLE"), //
		jField<::javax::swing::text::html::HTML$Tag>("TD"), //
		jField<::javax::swing::text::html::HTML$Tag>("TEXTAREA"), //
		jField<::javax::swing::text::html::HTML$Tag>("TH"), //
		jField<::javax::swing::text::html::HTML$Tag>("TITLE"), //
		jField<::javax::swing::text::html::HTML$Tag>("TR"), //
		jField<::javax::swing::text::html::HTML$Tag>("TT"), //
		jField<::javax::swing::text::html::HTML$Tag>("U"), //
		jField<::javax::swing::text::html::HTML$Tag>("UL"), //
		jField<::javax::swing::text::html::HTML$Tag>("VAR"), //
	};

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto A() {
		static_assert(field_signatures[jField<F>("A")] != -1);
		return sat<F>("A");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto ADDRESS() {
		static_assert(field_signatures[jField<F>("ADDRESS")] != -1);
		return sat<F>("ADDRESS");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto APPLET() {
		static_assert(field_signatures[jField<F>("APPLET")] != -1);
		return sat<F>("APPLET");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto AREA() {
		static_assert(field_signatures[jField<F>("AREA")] != -1);
		return sat<F>("AREA");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto B() {
		static_assert(field_signatures[jField<F>("B")] != -1);
		return sat<F>("B");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BASE() {
		static_assert(field_signatures[jField<F>("BASE")] != -1);
		return sat<F>("BASE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BASEFONT() {
		static_assert(field_signatures[jField<F>("BASEFONT")] != -1);
		return sat<F>("BASEFONT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BIG() {
		static_assert(field_signatures[jField<F>("BIG")] != -1);
		return sat<F>("BIG");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BLOCKQUOTE() {
		static_assert(field_signatures[jField<F>("BLOCKQUOTE")] != -1);
		return sat<F>("BLOCKQUOTE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BODY() {
		static_assert(field_signatures[jField<F>("BODY")] != -1);
		return sat<F>("BODY");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto BR() {
		static_assert(field_signatures[jField<F>("BR")] != -1);
		return sat<F>("BR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto CAPTION() {
		static_assert(field_signatures[jField<F>("CAPTION")] != -1);
		return sat<F>("CAPTION");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto CITE() {
		static_assert(field_signatures[jField<F>("CITE")] != -1);
		return sat<F>("CITE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto CODE() {
		static_assert(field_signatures[jField<F>("CODE")] != -1);
		return sat<F>("CODE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto COMMENT() {
		static_assert(field_signatures[jField<F>("COMMENT")] != -1);
		return sat<F>("COMMENT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto CONTENT() {
		static_assert(field_signatures[jField<F>("CONTENT")] != -1);
		return sat<F>("CONTENT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DD() {
		static_assert(field_signatures[jField<F>("DD")] != -1);
		return sat<F>("DD");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DFN() {
		static_assert(field_signatures[jField<F>("DFN")] != -1);
		return sat<F>("DFN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DIR() {
		static_assert(field_signatures[jField<F>("DIR")] != -1);
		return sat<F>("DIR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DIV() {
		static_assert(field_signatures[jField<F>("DIV")] != -1);
		return sat<F>("DIV");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DL() {
		static_assert(field_signatures[jField<F>("DL")] != -1);
		return sat<F>("DL");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto DT() {
		static_assert(field_signatures[jField<F>("DT")] != -1);
		return sat<F>("DT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto EM() {
		static_assert(field_signatures[jField<F>("EM")] != -1);
		return sat<F>("EM");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto FONT() {
		static_assert(field_signatures[jField<F>("FONT")] != -1);
		return sat<F>("FONT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto FORM() {
		static_assert(field_signatures[jField<F>("FORM")] != -1);
		return sat<F>("FORM");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto FRAME() {
		static_assert(field_signatures[jField<F>("FRAME")] != -1);
		return sat<F>("FRAME");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto FRAMESET() {
		static_assert(field_signatures[jField<F>("FRAMESET")] != -1);
		return sat<F>("FRAMESET");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H1() {
		static_assert(field_signatures[jField<F>("H1")] != -1);
		return sat<F>("H1");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H2() {
		static_assert(field_signatures[jField<F>("H2")] != -1);
		return sat<F>("H2");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H3() {
		static_assert(field_signatures[jField<F>("H3")] != -1);
		return sat<F>("H3");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H4() {
		static_assert(field_signatures[jField<F>("H4")] != -1);
		return sat<F>("H4");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H5() {
		static_assert(field_signatures[jField<F>("H5")] != -1);
		return sat<F>("H5");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto H6() {
		static_assert(field_signatures[jField<F>("H6")] != -1);
		return sat<F>("H6");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto HEAD() {
		static_assert(field_signatures[jField<F>("HEAD")] != -1);
		return sat<F>("HEAD");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto HR() {
		static_assert(field_signatures[jField<F>("HR")] != -1);
		return sat<F>("HR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto HTML() {
		static_assert(field_signatures[jField<F>("HTML")] != -1);
		return sat<F>("HTML");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto I() {
		static_assert(field_signatures[jField<F>("I")] != -1);
		return sat<F>("I");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto IMG() {
		static_assert(field_signatures[jField<F>("IMG")] != -1);
		return sat<F>("IMG");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto IMPLIED() {
		static_assert(field_signatures[jField<F>("IMPLIED")] != -1);
		return sat<F>("IMPLIED");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto INPUT() {
		static_assert(field_signatures[jField<F>("INPUT")] != -1);
		return sat<F>("INPUT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto ISINDEX() {
		static_assert(field_signatures[jField<F>("ISINDEX")] != -1);
		return sat<F>("ISINDEX");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto KBD() {
		static_assert(field_signatures[jField<F>("KBD")] != -1);
		return sat<F>("KBD");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto LI() {
		static_assert(field_signatures[jField<F>("LI")] != -1);
		return sat<F>("LI");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto LINK() {
		static_assert(field_signatures[jField<F>("LINK")] != -1);
		return sat<F>("LINK");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto MAP() {
		static_assert(field_signatures[jField<F>("MAP")] != -1);
		return sat<F>("MAP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto META() {
		static_assert(field_signatures[jField<F>("META")] != -1);
		return sat<F>("META");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto NOFRAMES() {
		static_assert(field_signatures[jField<F>("NOFRAMES")] != -1);
		return sat<F>("NOFRAMES");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto OBJECT() {
		static_assert(field_signatures[jField<F>("OBJECT")] != -1);
		return sat<F>("OBJECT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto OL() {
		static_assert(field_signatures[jField<F>("OL")] != -1);
		return sat<F>("OL");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto OPTION() {
		static_assert(field_signatures[jField<F>("OPTION")] != -1);
		return sat<F>("OPTION");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto P() {
		static_assert(field_signatures[jField<F>("P")] != -1);
		return sat<F>("P");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto PARAM() {
		static_assert(field_signatures[jField<F>("PARAM")] != -1);
		return sat<F>("PARAM");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto PRE() {
		static_assert(field_signatures[jField<F>("PRE")] != -1);
		return sat<F>("PRE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto S() {
		static_assert(field_signatures[jField<F>("S")] != -1);
		return sat<F>("S");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SAMP() {
		static_assert(field_signatures[jField<F>("SAMP")] != -1);
		return sat<F>("SAMP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SCRIPT() {
		static_assert(field_signatures[jField<F>("SCRIPT")] != -1);
		return sat<F>("SCRIPT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SELECT() {
		static_assert(field_signatures[jField<F>("SELECT")] != -1);
		return sat<F>("SELECT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SMALL() {
		static_assert(field_signatures[jField<F>("SMALL")] != -1);
		return sat<F>("SMALL");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SPAN() {
		static_assert(field_signatures[jField<F>("SPAN")] != -1);
		return sat<F>("SPAN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto STRIKE() {
		static_assert(field_signatures[jField<F>("STRIKE")] != -1);
		return sat<F>("STRIKE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto STRONG() {
		static_assert(field_signatures[jField<F>("STRONG")] != -1);
		return sat<F>("STRONG");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto STYLE() {
		static_assert(field_signatures[jField<F>("STYLE")] != -1);
		return sat<F>("STYLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SUB() {
		static_assert(field_signatures[jField<F>("SUB")] != -1);
		return sat<F>("SUB");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto SUP() {
		static_assert(field_signatures[jField<F>("SUP")] != -1);
		return sat<F>("SUP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TABLE() {
		static_assert(field_signatures[jField<F>("TABLE")] != -1);
		return sat<F>("TABLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TD() {
		static_assert(field_signatures[jField<F>("TD")] != -1);
		return sat<F>("TD");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TEXTAREA() {
		static_assert(field_signatures[jField<F>("TEXTAREA")] != -1);
		return sat<F>("TEXTAREA");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TH() {
		static_assert(field_signatures[jField<F>("TH")] != -1);
		return sat<F>("TH");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TITLE() {
		static_assert(field_signatures[jField<F>("TITLE")] != -1);
		return sat<F>("TITLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TR() {
		static_assert(field_signatures[jField<F>("TR")] != -1);
		return sat<F>("TR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto TT() {
		static_assert(field_signatures[jField<F>("TT")] != -1);
		return sat<F>("TT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto U() {
		static_assert(field_signatures[jField<F>("U")] != -1);
		return sat<F>("U");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto UL() {
		static_assert(field_signatures[jField<F>("UL")] != -1);
		return sat<F>("UL");
	}

	template<typename F = ::javax::swing::text::html::HTML$Tag>
	static auto VAR() {
		static_assert(field_signatures[jField<F>("VAR")] != -1);
		return sat<F>("VAR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("breaksFlow"), //
		jMethod<::jboolean()>("isBlock"), //
		jMethod<::jboolean()>("isPreformatted"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto breaksFlow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("breaksFlow")] != -1);
		return call<R>("breaksFlow", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBlock")] != -1);
		return call<R>("isBlock", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPreformatted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPreformatted")] != -1);
		return call<R>("isPreformatted", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
