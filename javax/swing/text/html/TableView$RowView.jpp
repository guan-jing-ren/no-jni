#ifndef javax_swing_text_html_TableView$RowView_HPP
#define javax_swing_text_html_TableView$RowView_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::TableView$RowView : public jObject<::javax::swing::text::html::TableView$RowView, ::javax::swing::text::BoxView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "TableView$RowView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::TableView, ::javax::swing::text::Element)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jint(::jint)>("getResizeWeight"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::text::View, ::jboolean, ::jboolean)>("preferenceChanged"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::View *)>("replace"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResizeWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResizeWeight")] != -1);
		return call<R>("getResizeWeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferenceChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preferenceChanged")] != -1);
		return call<R>("preferenceChanged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", forward<Args>(args)...);
	}

};

#endif
