#ifndef javax_swing_text_html_HTMLEditorKit_HPP
#define javax_swing_text_html_HTMLEditorKit_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLEditorKit : public jObject<::javax::swing::text::html::HTMLEditorKit, ::javax::swing::text::StyledEditorKit> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLEditorKit";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BOLD_ACTION"), //
		jField<::java::lang::String>("COLOR_ACTION"), //
		jField<::java::lang::String>("DEFAULT_CSS"), //
		jField<::java::lang::String>("FONT_CHANGE_BIGGER"), //
		jField<::java::lang::String>("FONT_CHANGE_SMALLER"), //
		jField<::java::lang::String>("IMG_ALIGN_BOTTOM"), //
		jField<::java::lang::String>("IMG_ALIGN_MIDDLE"), //
		jField<::java::lang::String>("IMG_ALIGN_TOP"), //
		jField<::java::lang::String>("IMG_BORDER"), //
		jField<::java::lang::String>("ITALIC_ACTION"), //
		jField<::java::lang::String>("LOGICAL_STYLE_ACTION"), //
		jField<::java::lang::String>("PARA_INDENT_LEFT"), //
		jField<::java::lang::String>("PARA_INDENT_RIGHT"), //
	};

	template<typename F = ::java::lang::String>
	static auto BOLD_ACTION() {
		static_assert(field_signatures[jField<F>("BOLD_ACTION")] != -1);
		return sat<F>("BOLD_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto COLOR_ACTION() {
		static_assert(field_signatures[jField<F>("COLOR_ACTION")] != -1);
		return sat<F>("COLOR_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_CSS() {
		static_assert(field_signatures[jField<F>("DEFAULT_CSS")] != -1);
		return sat<F>("DEFAULT_CSS");
	}

	template<typename F = ::java::lang::String>
	static auto FONT_CHANGE_BIGGER() {
		static_assert(field_signatures[jField<F>("FONT_CHANGE_BIGGER")] != -1);
		return sat<F>("FONT_CHANGE_BIGGER");
	}

	template<typename F = ::java::lang::String>
	static auto FONT_CHANGE_SMALLER() {
		static_assert(field_signatures[jField<F>("FONT_CHANGE_SMALLER")] != -1);
		return sat<F>("FONT_CHANGE_SMALLER");
	}

	template<typename F = ::java::lang::String>
	static auto IMG_ALIGN_BOTTOM() {
		static_assert(field_signatures[jField<F>("IMG_ALIGN_BOTTOM")] != -1);
		return sat<F>("IMG_ALIGN_BOTTOM");
	}

	template<typename F = ::java::lang::String>
	static auto IMG_ALIGN_MIDDLE() {
		static_assert(field_signatures[jField<F>("IMG_ALIGN_MIDDLE")] != -1);
		return sat<F>("IMG_ALIGN_MIDDLE");
	}

	template<typename F = ::java::lang::String>
	static auto IMG_ALIGN_TOP() {
		static_assert(field_signatures[jField<F>("IMG_ALIGN_TOP")] != -1);
		return sat<F>("IMG_ALIGN_TOP");
	}

	template<typename F = ::java::lang::String>
	static auto IMG_BORDER() {
		static_assert(field_signatures[jField<F>("IMG_BORDER")] != -1);
		return sat<F>("IMG_BORDER");
	}

	template<typename F = ::java::lang::String>
	static auto ITALIC_ACTION() {
		static_assert(field_signatures[jField<F>("ITALIC_ACTION")] != -1);
		return sat<F>("ITALIC_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto LOGICAL_STYLE_ACTION() {
		static_assert(field_signatures[jField<F>("LOGICAL_STYLE_ACTION")] != -1);
		return sat<F>("LOGICAL_STYLE_ACTION");
	}

	template<typename F = ::java::lang::String>
	static auto PARA_INDENT_LEFT() {
		static_assert(field_signatures[jField<F>("PARA_INDENT_LEFT")] != -1);
		return sat<F>("PARA_INDENT_LEFT");
	}

	template<typename F = ::java::lang::String>
	static auto PARA_INDENT_RIGHT() {
		static_assert(field_signatures[jField<F>("PARA_INDENT_RIGHT")] != -1);
		return sat<F>("PARA_INDENT_RIGHT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::javax::swing::text::Document()>("createDefaultDocument"), //
		jMethod<::jvoid(::javax::swing::JEditorPane)>("deinstall"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Action *()>("getActions"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::java::awt::Cursor()>("getDefaultCursor"), //
		jMethod<::javax::swing::text::MutableAttributeSet()>("getInputAttributes"), //
		jMethod<::java::awt::Cursor()>("getLinkCursor"), //
		jMethod<::javax::swing::text::html::StyleSheet()>("getStyleSheet"), //
		jMethod<::javax::swing::text::ViewFactory()>("getViewFactory"), //
		jMethod<::jvoid(::javax::swing::text::html::HTMLDocument, ::jint, ::java::lang::String, ::jint, ::jint, ::javax::swing::text::html::HTML$Tag)>("insertHTML"), //
		jMethod<::jvoid(::javax::swing::JEditorPane)>("install"), //
		jMethod<::jboolean()>("isAutoFormSubmission"), //
		jMethod<::jvoid(::java::io::Reader, ::javax::swing::text::Document, ::jint)>("read"), //
		jMethod<::jvoid(::jboolean)>("setAutoFormSubmission"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setDefaultCursor"), //
		jMethod<::jvoid(::java::awt::Cursor)>("setLinkCursor"), //
		jMethod<::jvoid(::javax::swing::text::html::StyleSheet)>("setStyleSheet"), //
		jMethod<::jvoid(::java::io::Writer, ::javax::swing::text::Document, ::jint, ::jint)>("write"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Document, typename... Args>
	auto createDefaultDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createDefaultDocument")] != -1);
		return call<R>("createDefaultDocument", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deinstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deinstall")] != -1);
		return call<R>("deinstall", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Action *, typename... Args>
	auto getActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActions")] != -1);
		return call<R>("getActions", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getDefaultCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultCursor")] != -1);
		return call<R>("getDefaultCursor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::MutableAttributeSet, typename... Args>
	auto getInputAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputAttributes")] != -1);
		return call<R>("getInputAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Cursor, typename... Args>
	auto getLinkCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkCursor")] != -1);
		return call<R>("getLinkCursor", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::StyleSheet, typename... Args>
	auto getStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyleSheet")] != -1);
		return call<R>("getStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::ViewFactory, typename... Args>
	auto getViewFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getViewFactory")] != -1);
		return call<R>("getViewFactory", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertHTML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertHTML")] != -1);
		return call<R>("insertHTML", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoFormSubmission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAutoFormSubmission")] != -1);
		return call<R>("isAutoFormSubmission", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoFormSubmission(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAutoFormSubmission")] != -1);
		return call<R>("setAutoFormSubmission", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefaultCursor")] != -1);
		return call<R>("setDefaultCursor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkCursor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkCursor")] != -1);
		return call<R>("setLinkCursor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setStyleSheet")] != -1);
		return call<R>("setStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("write")] != -1);
		return call<R>("write", forward<Args>(args)...);
	}

};

#endif
