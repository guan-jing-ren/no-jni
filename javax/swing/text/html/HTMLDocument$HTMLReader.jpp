#ifndef javax_swing_text_html_HTMLDocument$HTMLReader_HPP
#define javax_swing_text_html_HTMLDocument$HTMLReader_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLDocument$HTMLReader : public jObject<::javax::swing::text::html::HTMLDocument$HTMLReader, ::javax::swing::text::html::HTMLEditorKit$ParserCallback> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLDocument$HTMLReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::HTMLDocument, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::text::html::HTMLDocument, ::jint, ::jint, ::jint, ::javax::swing::text::html::HTML$Tag)>(), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jvoid(::jchar *, ::jint)>("handleComment"), //
		jMethod<::jvoid(::java::lang::String)>("handleEndOfLineString"), //
		jMethod<::jvoid(::javax::swing::text::html::HTML$Tag, ::jint)>("handleEndTag"), //
		jMethod<::jvoid(::javax::swing::text::html::HTML$Tag, ::javax::swing::text::MutableAttributeSet, ::jint)>("handleSimpleTag"), //
		jMethod<::jvoid(::javax::swing::text::html::HTML$Tag, ::javax::swing::text::MutableAttributeSet, ::jint)>("handleStartTag"), //
		jMethod<::jvoid(::jchar *, ::jint)>("handleText"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleComment")] != -1);
		return call<R>("handleComment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEndOfLineString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEndOfLineString")] != -1);
		return call<R>("handleEndOfLineString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEndTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEndTag")] != -1);
		return call<R>("handleEndTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleSimpleTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleSimpleTag")] != -1);
		return call<R>("handleSimpleTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleStartTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleStartTag")] != -1);
		return call<R>("handleStartTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleText")] != -1);
		return call<R>("handleText", std::forward<Args>(args)...);
	}

};

#endif
