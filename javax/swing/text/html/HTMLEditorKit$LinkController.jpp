#ifndef javax_swing_text_html_HTMLEditorKit$LinkController_HPP
#define javax_swing_text_html_HTMLEditorKit$LinkController_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLEditorKit$LinkController : public jObject<::javax::swing::text::html::HTMLEditorKit$LinkController, ::java::awt::event::MouseAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLEditorKit$LinkController";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseClicked"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto mouseClicked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseClicked")] != -1);
		return call<R>("mouseClicked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", forward<Args>(args)...);
	}

};

#endif
