#ifndef javax_swing_text_html_ImageView_HPP
#define javax_swing_text_html_ImageView_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::ImageView : public jObject<::javax::swing::text::html::ImageView, ::javax::swing::text::View> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "ImageView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::jfloat(::jint)>("getAlignment"), //
		jMethod<::java::lang::String()>("getAltText"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::java::awt::Image()>("getImage"), //
		jMethod<::java::net::URL()>("getImageURL"), //
		jMethod<::javax::swing::Icon()>("getLoadingImageIcon"), //
		jMethod<::jboolean()>("getLoadsSynchronously"), //
		jMethod<::javax::swing::Icon()>("getNoImageIcon"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::java::lang::String(::jfloat, ::jfloat, ::java::awt::Shape)>("getToolTipText"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::jboolean)>("setLoadsSynchronously"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setSize"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAltText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAltText")] != -1);
		return call<R>("getAltText", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Image, typename... Args>
	auto getImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImage")] != -1);
		return call<R>("getImage", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getImageURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImageURL")] != -1);
		return call<R>("getImageURL", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getLoadingImageIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLoadingImageIcon")] != -1);
		return call<R>("getLoadingImageIcon", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getLoadsSynchronously(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLoadsSynchronously")] != -1);
		return call<R>("getLoadsSynchronously", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getNoImageIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNoImageIcon")] != -1);
		return call<R>("getNoImageIcon", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoadsSynchronously(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLoadsSynchronously")] != -1);
		return call<R>("setLoadsSynchronously", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", forward<Args>(args)...);
	}

};

#endif
