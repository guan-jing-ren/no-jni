#ifndef javax_swing_text_html_CSS$Attribute_HPP
#define javax_swing_text_html_CSS$Attribute_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::CSS$Attribute : public jObject<::javax::swing::text::html::CSS$Attribute, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "CSS$Attribute";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND_ATTACHMENT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND_IMAGE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND_POSITION"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BACKGROUND_REPEAT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_BOTTOM"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_BOTTOM_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_BOTTOM_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_BOTTOM_WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_LEFT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_LEFT_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_LEFT_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_LEFT_WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_RIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_RIGHT_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_RIGHT_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_RIGHT_WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_TOP"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_TOP_COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_TOP_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_TOP_WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("BORDER_WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("CLEAR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("COLOR"), //
		jField<::javax::swing::text::html::CSS$Attribute>("DISPLAY"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FLOAT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT_FAMILY"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT_SIZE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT_VARIANT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("FONT_WEIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("HEIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LETTER_SPACING"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LINE_HEIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LIST_STYLE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LIST_STYLE_IMAGE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LIST_STYLE_POSITION"), //
		jField<::javax::swing::text::html::CSS$Attribute>("LIST_STYLE_TYPE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("MARGIN"), //
		jField<::javax::swing::text::html::CSS$Attribute>("MARGIN_BOTTOM"), //
		jField<::javax::swing::text::html::CSS$Attribute>("MARGIN_LEFT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("MARGIN_RIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("MARGIN_TOP"), //
		jField<::javax::swing::text::html::CSS$Attribute>("PADDING"), //
		jField<::javax::swing::text::html::CSS$Attribute>("PADDING_BOTTOM"), //
		jField<::javax::swing::text::html::CSS$Attribute>("PADDING_LEFT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("PADDING_RIGHT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("PADDING_TOP"), //
		jField<::javax::swing::text::html::CSS$Attribute>("TEXT_ALIGN"), //
		jField<::javax::swing::text::html::CSS$Attribute>("TEXT_DECORATION"), //
		jField<::javax::swing::text::html::CSS$Attribute>("TEXT_INDENT"), //
		jField<::javax::swing::text::html::CSS$Attribute>("TEXT_TRANSFORM"), //
		jField<::javax::swing::text::html::CSS$Attribute>("VERTICAL_ALIGN"), //
		jField<::javax::swing::text::html::CSS$Attribute>("WHITE_SPACE"), //
		jField<::javax::swing::text::html::CSS$Attribute>("WIDTH"), //
		jField<::javax::swing::text::html::CSS$Attribute>("WORD_SPACING"), //
	};

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND() {
		static_assert(field_signatures[jField<F>("BACKGROUND")] != -1);
		return sat<F>("BACKGROUND");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND_ATTACHMENT() {
		static_assert(field_signatures[jField<F>("BACKGROUND_ATTACHMENT")] != -1);
		return sat<F>("BACKGROUND_ATTACHMENT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND_COLOR() {
		static_assert(field_signatures[jField<F>("BACKGROUND_COLOR")] != -1);
		return sat<F>("BACKGROUND_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND_IMAGE() {
		static_assert(field_signatures[jField<F>("BACKGROUND_IMAGE")] != -1);
		return sat<F>("BACKGROUND_IMAGE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND_POSITION() {
		static_assert(field_signatures[jField<F>("BACKGROUND_POSITION")] != -1);
		return sat<F>("BACKGROUND_POSITION");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BACKGROUND_REPEAT() {
		static_assert(field_signatures[jField<F>("BACKGROUND_REPEAT")] != -1);
		return sat<F>("BACKGROUND_REPEAT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER() {
		static_assert(field_signatures[jField<F>("BORDER")] != -1);
		return sat<F>("BORDER");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_BOTTOM() {
		static_assert(field_signatures[jField<F>("BORDER_BOTTOM")] != -1);
		return sat<F>("BORDER_BOTTOM");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_BOTTOM_COLOR() {
		static_assert(field_signatures[jField<F>("BORDER_BOTTOM_COLOR")] != -1);
		return sat<F>("BORDER_BOTTOM_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_BOTTOM_STYLE() {
		static_assert(field_signatures[jField<F>("BORDER_BOTTOM_STYLE")] != -1);
		return sat<F>("BORDER_BOTTOM_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_BOTTOM_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_BOTTOM_WIDTH")] != -1);
		return sat<F>("BORDER_BOTTOM_WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_COLOR() {
		static_assert(field_signatures[jField<F>("BORDER_COLOR")] != -1);
		return sat<F>("BORDER_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_LEFT() {
		static_assert(field_signatures[jField<F>("BORDER_LEFT")] != -1);
		return sat<F>("BORDER_LEFT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_LEFT_COLOR() {
		static_assert(field_signatures[jField<F>("BORDER_LEFT_COLOR")] != -1);
		return sat<F>("BORDER_LEFT_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_LEFT_STYLE() {
		static_assert(field_signatures[jField<F>("BORDER_LEFT_STYLE")] != -1);
		return sat<F>("BORDER_LEFT_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_LEFT_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_LEFT_WIDTH")] != -1);
		return sat<F>("BORDER_LEFT_WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_RIGHT() {
		static_assert(field_signatures[jField<F>("BORDER_RIGHT")] != -1);
		return sat<F>("BORDER_RIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_RIGHT_COLOR() {
		static_assert(field_signatures[jField<F>("BORDER_RIGHT_COLOR")] != -1);
		return sat<F>("BORDER_RIGHT_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_RIGHT_STYLE() {
		static_assert(field_signatures[jField<F>("BORDER_RIGHT_STYLE")] != -1);
		return sat<F>("BORDER_RIGHT_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_RIGHT_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_RIGHT_WIDTH")] != -1);
		return sat<F>("BORDER_RIGHT_WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_STYLE() {
		static_assert(field_signatures[jField<F>("BORDER_STYLE")] != -1);
		return sat<F>("BORDER_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_TOP() {
		static_assert(field_signatures[jField<F>("BORDER_TOP")] != -1);
		return sat<F>("BORDER_TOP");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_TOP_COLOR() {
		static_assert(field_signatures[jField<F>("BORDER_TOP_COLOR")] != -1);
		return sat<F>("BORDER_TOP_COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_TOP_STYLE() {
		static_assert(field_signatures[jField<F>("BORDER_TOP_STYLE")] != -1);
		return sat<F>("BORDER_TOP_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_TOP_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_TOP_WIDTH")] != -1);
		return sat<F>("BORDER_TOP_WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto BORDER_WIDTH() {
		static_assert(field_signatures[jField<F>("BORDER_WIDTH")] != -1);
		return sat<F>("BORDER_WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto CLEAR() {
		static_assert(field_signatures[jField<F>("CLEAR")] != -1);
		return sat<F>("CLEAR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto COLOR() {
		static_assert(field_signatures[jField<F>("COLOR")] != -1);
		return sat<F>("COLOR");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto DISPLAY() {
		static_assert(field_signatures[jField<F>("DISPLAY")] != -1);
		return sat<F>("DISPLAY");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FLOAT() {
		static_assert(field_signatures[jField<F>("FLOAT")] != -1);
		return sat<F>("FLOAT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT() {
		static_assert(field_signatures[jField<F>("FONT")] != -1);
		return sat<F>("FONT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT_FAMILY() {
		static_assert(field_signatures[jField<F>("FONT_FAMILY")] != -1);
		return sat<F>("FONT_FAMILY");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT_SIZE() {
		static_assert(field_signatures[jField<F>("FONT_SIZE")] != -1);
		return sat<F>("FONT_SIZE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT_STYLE() {
		static_assert(field_signatures[jField<F>("FONT_STYLE")] != -1);
		return sat<F>("FONT_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT_VARIANT() {
		static_assert(field_signatures[jField<F>("FONT_VARIANT")] != -1);
		return sat<F>("FONT_VARIANT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto FONT_WEIGHT() {
		static_assert(field_signatures[jField<F>("FONT_WEIGHT")] != -1);
		return sat<F>("FONT_WEIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto HEIGHT() {
		static_assert(field_signatures[jField<F>("HEIGHT")] != -1);
		return sat<F>("HEIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LETTER_SPACING() {
		static_assert(field_signatures[jField<F>("LETTER_SPACING")] != -1);
		return sat<F>("LETTER_SPACING");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LINE_HEIGHT() {
		static_assert(field_signatures[jField<F>("LINE_HEIGHT")] != -1);
		return sat<F>("LINE_HEIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LIST_STYLE() {
		static_assert(field_signatures[jField<F>("LIST_STYLE")] != -1);
		return sat<F>("LIST_STYLE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LIST_STYLE_IMAGE() {
		static_assert(field_signatures[jField<F>("LIST_STYLE_IMAGE")] != -1);
		return sat<F>("LIST_STYLE_IMAGE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LIST_STYLE_POSITION() {
		static_assert(field_signatures[jField<F>("LIST_STYLE_POSITION")] != -1);
		return sat<F>("LIST_STYLE_POSITION");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto LIST_STYLE_TYPE() {
		static_assert(field_signatures[jField<F>("LIST_STYLE_TYPE")] != -1);
		return sat<F>("LIST_STYLE_TYPE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto MARGIN() {
		static_assert(field_signatures[jField<F>("MARGIN")] != -1);
		return sat<F>("MARGIN");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto MARGIN_BOTTOM() {
		static_assert(field_signatures[jField<F>("MARGIN_BOTTOM")] != -1);
		return sat<F>("MARGIN_BOTTOM");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto MARGIN_LEFT() {
		static_assert(field_signatures[jField<F>("MARGIN_LEFT")] != -1);
		return sat<F>("MARGIN_LEFT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto MARGIN_RIGHT() {
		static_assert(field_signatures[jField<F>("MARGIN_RIGHT")] != -1);
		return sat<F>("MARGIN_RIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto MARGIN_TOP() {
		static_assert(field_signatures[jField<F>("MARGIN_TOP")] != -1);
		return sat<F>("MARGIN_TOP");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto PADDING() {
		static_assert(field_signatures[jField<F>("PADDING")] != -1);
		return sat<F>("PADDING");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto PADDING_BOTTOM() {
		static_assert(field_signatures[jField<F>("PADDING_BOTTOM")] != -1);
		return sat<F>("PADDING_BOTTOM");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto PADDING_LEFT() {
		static_assert(field_signatures[jField<F>("PADDING_LEFT")] != -1);
		return sat<F>("PADDING_LEFT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto PADDING_RIGHT() {
		static_assert(field_signatures[jField<F>("PADDING_RIGHT")] != -1);
		return sat<F>("PADDING_RIGHT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto PADDING_TOP() {
		static_assert(field_signatures[jField<F>("PADDING_TOP")] != -1);
		return sat<F>("PADDING_TOP");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto TEXT_ALIGN() {
		static_assert(field_signatures[jField<F>("TEXT_ALIGN")] != -1);
		return sat<F>("TEXT_ALIGN");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto TEXT_DECORATION() {
		static_assert(field_signatures[jField<F>("TEXT_DECORATION")] != -1);
		return sat<F>("TEXT_DECORATION");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto TEXT_INDENT() {
		static_assert(field_signatures[jField<F>("TEXT_INDENT")] != -1);
		return sat<F>("TEXT_INDENT");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto TEXT_TRANSFORM() {
		static_assert(field_signatures[jField<F>("TEXT_TRANSFORM")] != -1);
		return sat<F>("TEXT_TRANSFORM");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto VERTICAL_ALIGN() {
		static_assert(field_signatures[jField<F>("VERTICAL_ALIGN")] != -1);
		return sat<F>("VERTICAL_ALIGN");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto WHITE_SPACE() {
		static_assert(field_signatures[jField<F>("WHITE_SPACE")] != -1);
		return sat<F>("WHITE_SPACE");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto WIDTH() {
		static_assert(field_signatures[jField<F>("WIDTH")] != -1);
		return sat<F>("WIDTH");
	}

	template<typename F = ::javax::swing::text::html::CSS$Attribute>
	static auto WORD_SPACING() {
		static_assert(field_signatures[jField<F>("WORD_SPACING")] != -1);
		return sat<F>("WORD_SPACING");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDefaultValue"), //
		jMethod<::jboolean()>("isInherited"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInherited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isInherited")] != -1);
		return call<R>("isInherited", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
