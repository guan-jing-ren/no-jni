#ifndef javax_swing_text_html_HTMLDocument_HPP
#define javax_swing_text_html_HTMLDocument_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLDocument : public jObject<::javax::swing::text::html::HTMLDocument, ::javax::swing::text::DefaultStyledDocument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLDocument";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("AdditionalComments"), //
	};

	template<typename F = ::java::lang::String>
	static auto AdditionalComments() {
		static_assert(field_signatures[jField<F>("AdditionalComments")] != -1);
		return sat<F>("AdditionalComments");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument$Content, ::javax::swing::text::html::StyleSheet)>(), //
		jConstructor<::jvoid(::javax::swing::text::html::StyleSheet)>(), //
		jMethod<::java::net::URL()>("getBase"), //
		jMethod<::javax::swing::text::Element(::java::lang::String)>("getElement"), //
		jMethod<::javax::swing::text::Element(::javax::swing::text::Element, ::java::lang::Object, ::java::lang::Object)>("getElement"), //
		jMethod<::javax::swing::text::html::HTMLDocument$Iterator(::javax::swing::text::html::HTML$Tag)>("getIterator"), //
		jMethod<::javax::swing::text::html::HTMLEditorKit$Parser()>("getParser"), //
		jMethod<::jboolean()>("getPreservesUnknownTags"), //
		jMethod<::javax::swing::text::html::HTMLEditorKit$ParserCallback(::jint)>("getReader"), //
		jMethod<::javax::swing::text::html::HTMLEditorKit$ParserCallback(::jint, ::jint, ::jint, ::javax::swing::text::html::HTML$Tag)>("getReader"), //
		jMethod<::javax::swing::text::html::StyleSheet()>("getStyleSheet"), //
		jMethod<::jint()>("getTokenThreshold"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("insertAfterEnd"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("insertAfterStart"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("insertBeforeEnd"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("insertBeforeStart"), //
		jMethod<::jvoid(::javax::swing::text::html::HTMLFrameHyperlinkEvent)>("processHTMLFrameHyperlinkEvent"), //
		jMethod<::jvoid(::java::net::URL)>("setBase"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("setInnerHTML"), //
		jMethod<::jvoid(::javax::swing::text::Element, ::java::lang::String)>("setOuterHTML"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AttributeSet, ::jboolean)>("setParagraphAttributes"), //
		jMethod<::jvoid(::javax::swing::text::html::HTMLEditorKit$Parser)>("setParser"), //
		jMethod<::jvoid(::jboolean)>("setPreservesUnknownTags"), //
		jMethod<::jvoid(::jint)>("setTokenThreshold"), //
	};

	template<typename R = ::java::net::URL, typename... Args>
	auto getBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBase")] != -1);
		return call<R>("getBase", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::HTMLDocument$Iterator, typename... Args>
	auto getIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIterator")] != -1);
		return call<R>("getIterator", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::HTMLEditorKit$Parser, typename... Args>
	auto getParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParser")] != -1);
		return call<R>("getParser", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPreservesUnknownTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreservesUnknownTags")] != -1);
		return call<R>("getPreservesUnknownTags", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::HTMLEditorKit$ParserCallback, typename... Args>
	auto getReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReader")] != -1);
		return call<R>("getReader", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::StyleSheet, typename... Args>
	auto getStyleSheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStyleSheet")] != -1);
		return call<R>("getStyleSheet", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTokenThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTokenThreshold")] != -1);
		return call<R>("getTokenThreshold", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertAfterEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertAfterEnd")] != -1);
		return call<R>("insertAfterEnd", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertAfterStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertAfterStart")] != -1);
		return call<R>("insertAfterStart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertBeforeEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertBeforeEnd")] != -1);
		return call<R>("insertBeforeEnd", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertBeforeStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertBeforeStart")] != -1);
		return call<R>("insertBeforeStart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processHTMLFrameHyperlinkEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("processHTMLFrameHyperlinkEvent")] != -1);
		return call<R>("processHTMLFrameHyperlinkEvent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBase")] != -1);
		return call<R>("setBase", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInnerHTML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInnerHTML")] != -1);
		return call<R>("setInnerHTML", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOuterHTML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOuterHTML")] != -1);
		return call<R>("setOuterHTML", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParagraphAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParagraphAttributes")] != -1);
		return call<R>("setParagraphAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParser")] != -1);
		return call<R>("setParser", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPreservesUnknownTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPreservesUnknownTags")] != -1);
		return call<R>("setPreservesUnknownTags", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTokenThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTokenThreshold")] != -1);
		return call<R>("setTokenThreshold", forward<Args>(args)...);
	}

};

#endif
