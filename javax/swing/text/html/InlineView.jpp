#ifndef javax_swing_text_html_InlineView_HPP
#define javax_swing_text_html_InlineView_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::InlineView : public jObject<::javax::swing::text::html::InlineView, ::javax::swing::text::LabelView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "InlineView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::javax::swing::text::View(::jint, ::jint, ::jfloat, ::jfloat)>("breakView"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jint(::jint, ::jfloat, ::jfloat)>("getBreakWeight"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
	};

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto breakView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("breakView")] != -1);
		return call<R>("breakView", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBreakWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBreakWeight")] != -1);
		return call<R>("getBreakWeight", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", forward<Args>(args)...);
	}

};

#endif
