#ifndef javax_swing_text_html_StyleSheet$BoxPainter_HPP
#define javax_swing_text_html_StyleSheet$BoxPainter_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::StyleSheet$BoxPainter : public jObject<::javax::swing::text::html::StyleSheet$BoxPainter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "StyleSheet$BoxPainter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jfloat(::jint, ::javax::swing::text::View)>("getInset"), //
		jMethod<::jvoid(::java::awt::Graphics, ::jfloat, ::jfloat, ::jfloat, ::jfloat, ::javax::swing::text::View)>("paint"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInset")] != -1);
		return call<R>("getInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

};

#endif
