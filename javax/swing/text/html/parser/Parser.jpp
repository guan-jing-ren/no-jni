#ifndef javax_swing_text_html_parser_Parser_HPP
#define javax_swing_text_html_parser_Parser_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::Parser : public jObject<::javax::swing::text::html::parser::Parser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "Parser";

	constexpr static Enume field_signatures{
		jField<::jint>("ANY"), //
		jField<::jint>("CDATA"), //
		jField<::jint>("CONREF"), //
		jField<::jint>("CURRENT"), //
		jField<::jint>("DEFAULT"), //
		jField<::jint>("EMPTY"), //
		jField<::jint>("ENDTAG"), //
		jField<::jint>("ENTITIES"), //
		jField<::jint>("ENTITY"), //
		jField<::jint>("FIXED"), //
		jField<::jint>("GENERAL"), //
		jField<::jint>("ID"), //
		jField<::jint>("IDREF"), //
		jField<::jint>("IDREFS"), //
		jField<::jint>("IMPLIED"), //
		jField<::jint>("MD"), //
		jField<::jint>("MODEL"), //
		jField<::jint>("MS"), //
		jField<::jint>("NAME"), //
		jField<::jint>("NAMES"), //
		jField<::jint>("NMTOKEN"), //
		jField<::jint>("NMTOKENS"), //
		jField<::jint>("NOTATION"), //
		jField<::jint>("NUMBER"), //
		jField<::jint>("NUMBERS"), //
		jField<::jint>("NUTOKEN"), //
		jField<::jint>("NUTOKENS"), //
		jField<::jint>("PARAMETER"), //
		jField<::jint>("PI"), //
		jField<::jint>("PUBLIC"), //
		jField<::jint>("RCDATA"), //
		jField<::jint>("REQUIRED"), //
		jField<::jint>("SDATA"), //
		jField<::jint>("STARTTAG"), //
		jField<::jint>("SYSTEM"), //
	};

	template<typename F = ::jint>
	static auto ANY() {
		static_assert(field_signatures[jField<F>("ANY")] != -1);
		return sat<F>("ANY");
	}

	template<typename F = ::jint>
	static auto CDATA() {
		static_assert(field_signatures[jField<F>("CDATA")] != -1);
		return sat<F>("CDATA");
	}

	template<typename F = ::jint>
	static auto CONREF() {
		static_assert(field_signatures[jField<F>("CONREF")] != -1);
		return sat<F>("CONREF");
	}

	template<typename F = ::jint>
	static auto CURRENT() {
		static_assert(field_signatures[jField<F>("CURRENT")] != -1);
		return sat<F>("CURRENT");
	}

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::jint>
	static auto EMPTY() {
		static_assert(field_signatures[jField<F>("EMPTY")] != -1);
		return sat<F>("EMPTY");
	}

	template<typename F = ::jint>
	static auto ENDTAG() {
		static_assert(field_signatures[jField<F>("ENDTAG")] != -1);
		return sat<F>("ENDTAG");
	}

	template<typename F = ::jint>
	static auto ENTITIES() {
		static_assert(field_signatures[jField<F>("ENTITIES")] != -1);
		return sat<F>("ENTITIES");
	}

	template<typename F = ::jint>
	static auto ENTITY() {
		static_assert(field_signatures[jField<F>("ENTITY")] != -1);
		return sat<F>("ENTITY");
	}

	template<typename F = ::jint>
	static auto FIXED() {
		static_assert(field_signatures[jField<F>("FIXED")] != -1);
		return sat<F>("FIXED");
	}

	template<typename F = ::jint>
	static auto GENERAL() {
		static_assert(field_signatures[jField<F>("GENERAL")] != -1);
		return sat<F>("GENERAL");
	}

	template<typename F = ::jint>
	static auto ID() {
		static_assert(field_signatures[jField<F>("ID")] != -1);
		return sat<F>("ID");
	}

	template<typename F = ::jint>
	static auto IDREF() {
		static_assert(field_signatures[jField<F>("IDREF")] != -1);
		return sat<F>("IDREF");
	}

	template<typename F = ::jint>
	static auto IDREFS() {
		static_assert(field_signatures[jField<F>("IDREFS")] != -1);
		return sat<F>("IDREFS");
	}

	template<typename F = ::jint>
	static auto IMPLIED() {
		static_assert(field_signatures[jField<F>("IMPLIED")] != -1);
		return sat<F>("IMPLIED");
	}

	template<typename F = ::jint>
	static auto MD() {
		static_assert(field_signatures[jField<F>("MD")] != -1);
		return sat<F>("MD");
	}

	template<typename F = ::jint>
	static auto MODEL() {
		static_assert(field_signatures[jField<F>("MODEL")] != -1);
		return sat<F>("MODEL");
	}

	template<typename F = ::jint>
	static auto MS() {
		static_assert(field_signatures[jField<F>("MS")] != -1);
		return sat<F>("MS");
	}

	template<typename F = ::jint>
	static auto NAME() {
		static_assert(field_signatures[jField<F>("NAME")] != -1);
		return sat<F>("NAME");
	}

	template<typename F = ::jint>
	static auto NAMES() {
		static_assert(field_signatures[jField<F>("NAMES")] != -1);
		return sat<F>("NAMES");
	}

	template<typename F = ::jint>
	static auto NMTOKEN() {
		static_assert(field_signatures[jField<F>("NMTOKEN")] != -1);
		return sat<F>("NMTOKEN");
	}

	template<typename F = ::jint>
	static auto NMTOKENS() {
		static_assert(field_signatures[jField<F>("NMTOKENS")] != -1);
		return sat<F>("NMTOKENS");
	}

	template<typename F = ::jint>
	static auto NOTATION() {
		static_assert(field_signatures[jField<F>("NOTATION")] != -1);
		return sat<F>("NOTATION");
	}

	template<typename F = ::jint>
	static auto NUMBER() {
		static_assert(field_signatures[jField<F>("NUMBER")] != -1);
		return sat<F>("NUMBER");
	}

	template<typename F = ::jint>
	static auto NUMBERS() {
		static_assert(field_signatures[jField<F>("NUMBERS")] != -1);
		return sat<F>("NUMBERS");
	}

	template<typename F = ::jint>
	static auto NUTOKEN() {
		static_assert(field_signatures[jField<F>("NUTOKEN")] != -1);
		return sat<F>("NUTOKEN");
	}

	template<typename F = ::jint>
	static auto NUTOKENS() {
		static_assert(field_signatures[jField<F>("NUTOKENS")] != -1);
		return sat<F>("NUTOKENS");
	}

	template<typename F = ::jint>
	static auto PARAMETER() {
		static_assert(field_signatures[jField<F>("PARAMETER")] != -1);
		return sat<F>("PARAMETER");
	}

	template<typename F = ::jint>
	static auto PI() {
		static_assert(field_signatures[jField<F>("PI")] != -1);
		return sat<F>("PI");
	}

	template<typename F = ::jint>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	template<typename F = ::jint>
	static auto RCDATA() {
		static_assert(field_signatures[jField<F>("RCDATA")] != -1);
		return sat<F>("RCDATA");
	}

	template<typename F = ::jint>
	static auto REQUIRED() {
		static_assert(field_signatures[jField<F>("REQUIRED")] != -1);
		return sat<F>("REQUIRED");
	}

	template<typename F = ::jint>
	static auto SDATA() {
		static_assert(field_signatures[jField<F>("SDATA")] != -1);
		return sat<F>("SDATA");
	}

	template<typename F = ::jint>
	static auto STARTTAG() {
		static_assert(field_signatures[jField<F>("STARTTAG")] != -1);
		return sat<F>("STARTTAG");
	}

	template<typename F = ::jint>
	static auto SYSTEM() {
		static_assert(field_signatures[jField<F>("SYSTEM")] != -1);
		return sat<F>("SYSTEM");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::parser::DTD)>(), //
		jMethod<::jvoid(::java::io::Reader)>("parse"), //
		jMethod<::java::lang::String()>("parseDTDMarkup"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto parseDTDMarkup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDTDMarkup")] != -1);
		return call<R>("parseDTDMarkup", std::forward<Args>(args)...);
	}

};

#endif
