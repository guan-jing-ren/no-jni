#ifndef javax_swing_text_html_parser_Parser_HPP
#define javax_swing_text_html_parser_Parser_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::Parser : public jObject<::javax::swing::text::html::parser::Parser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "Parser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::parser::DTD)>(), //
		jMethod<::jvoid(::java::io::Reader)>("parse"), //
		jMethod<::java::lang::String()>("parseDTDMarkup"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto parseDTDMarkup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDTDMarkup")] != -1);
		return call<R>("parseDTDMarkup", std::forward<Args>(args)...);
	}

};

#endif
