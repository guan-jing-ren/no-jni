#ifndef javax_swing_text_html_parser_AttributeList_HPP
#define javax_swing_text_html_parser_AttributeList_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::AttributeList : public jObject<::javax::swing::text::html::parser::AttributeList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "AttributeList";

	constexpr static Enume field_signatures{
		jField<::jint>("modifier"), //
		jField<::java::lang::String>("name"), //
		jField<::javax::swing::text::html::parser::AttributeList>("next"), //
		jField<::jint>("type"), //
		jField<::java::lang::String>("value"), //
		jField<::java::util::Vector>("values"), //
	};

	template<typename F = ::jint>
	auto modifier() const {
		static_assert(field_signatures[jField<F>("modifier")] != -1);
		return at<F>("modifier");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::javax::swing::text::html::parser::AttributeList>
	auto next() const {
		static_assert(field_signatures[jField<F>("next")] != -1);
		return at<F>("next");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	template<typename F = ::java::lang::String>
	auto value() const {
		static_assert(field_signatures[jField<F>("value")] != -1);
		return at<F>("value");
	}

	template<typename F = ::java::util::Vector>
	auto values() const {
		static_assert(field_signatures[jField<F>("values")] != -1);
		return at<F>("values");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::java::lang::String, ::java::util::Vector, ::javax::swing::text::html::parser::AttributeList)>(), //
		jMethod<::jint()>("getModifier"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::swing::text::html::parser::AttributeList()>("getNext"), //
		jMethod<::jint()>("getType"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::java::util::Enumeration()>("getValues"), //
		jMethod<::jint(::java::lang::String)>("name2type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint)>("type2name"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getModifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModifier")] != -1);
		return call<R>("getModifier", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::AttributeList, typename... Args>
	auto getNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNext")] != -1);
		return call<R>("getNext", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValues")] != -1);
		return call<R>("getValues", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto name2type(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("name2type")] != -1);
		return scall<R>("name2type", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto type2name(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("type2name")] != -1);
		return scall<R>("type2name", forward<Args>(args)...);
	}

};

#endif
