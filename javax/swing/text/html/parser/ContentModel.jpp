#ifndef javax_swing_text_html_parser_ContentModel_HPP
#define javax_swing_text_html_parser_ContentModel_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::ContentModel : public jObject<::javax::swing::text::html::parser::ContentModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "ContentModel";

	constexpr static Enume field_signatures{
		jField<::java::lang::Object>("content"), //
		jField<::javax::swing::text::html::parser::ContentModel>("next"), //
		jField<::jint>("type"), //
	};

	template<typename F = ::java::lang::Object>
	auto content() const {
		static_assert(field_signatures[jField<F>("content")] != -1);
		return at<F>("content");
	}

	template<typename F = ::javax::swing::text::html::parser::ContentModel>
	auto next() const {
		static_assert(field_signatures[jField<F>("next")] != -1);
		return at<F>("next");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::java::lang::Object, ::javax::swing::text::html::parser::ContentModel)>(), //
		jConstructor<::jvoid(::jint, ::javax::swing::text::html::parser::ContentModel)>(), //
		jConstructor<::jvoid(::javax::swing::text::html::parser::Element)>(), //
		jMethod<::jboolean()>("empty"), //
		jMethod<::javax::swing::text::html::parser::Element()>("first"), //
		jMethod<::jboolean(::java::lang::Object)>("first"), //
		jMethod<::jvoid(::java::util::Vector)>("getElements"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto empty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("empty")] != -1);
		return call<R>("empty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Element, typename... Args>
	auto first(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("first")] != -1);
		return call<R>("first", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElements")] != -1);
		return call<R>("getElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
