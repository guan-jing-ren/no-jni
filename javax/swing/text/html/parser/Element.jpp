#ifndef javax_swing_text_html_parser_Element_HPP
#define javax_swing_text_html_parser_Element_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::Element : public jObject<::javax::swing::text::html::parser::Element, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "Element";

	constexpr static Enume field_signatures{
		jField<::jint>("ANY"), //
		jField<::jint>("CDATA"), //
		jField<::jint>("CONREF"), //
		jField<::jint>("CURRENT"), //
		jField<::jint>("DEFAULT"), //
		jField<::jint>("EMPTY"), //
		jField<::jint>("ENDTAG"), //
		jField<::jint>("ENTITIES"), //
		jField<::jint>("ENTITY"), //
		jField<::jint>("FIXED"), //
		jField<::jint>("GENERAL"), //
		jField<::jint>("ID"), //
		jField<::jint>("IDREF"), //
		jField<::jint>("IDREFS"), //
		jField<::jint>("IMPLIED"), //
		jField<::jint>("MD"), //
		jField<::jint>("MODEL"), //
		jField<::jint>("MS"), //
		jField<::jint>("NAME"), //
		jField<::jint>("NAMES"), //
		jField<::jint>("NMTOKEN"), //
		jField<::jint>("NMTOKENS"), //
		jField<::jint>("NOTATION"), //
		jField<::jint>("NUMBER"), //
		jField<::jint>("NUMBERS"), //
		jField<::jint>("NUTOKEN"), //
		jField<::jint>("NUTOKENS"), //
		jField<::jint>("PARAMETER"), //
		jField<::jint>("PI"), //
		jField<::jint>("PUBLIC"), //
		jField<::jint>("RCDATA"), //
		jField<::jint>("REQUIRED"), //
		jField<::jint>("SDATA"), //
		jField<::jint>("STARTTAG"), //
		jField<::jint>("SYSTEM"), //
		jField<::javax::swing::text::html::parser::AttributeList>("atts"), //
		jField<::javax::swing::text::html::parser::ContentModel>("content"), //
		jField<::java::lang::Object>("data"), //
		jField<::java::util::BitSet>("exclusions"), //
		jField<::java::util::BitSet>("inclusions"), //
		jField<::jint>("index"), //
		jField<::java::lang::String>("name"), //
		jField<::jboolean>("oEnd"), //
		jField<::jboolean>("oStart"), //
		jField<::jint>("type"), //
	};

	template<typename F = ::jint>
	static auto ANY() {
		static_assert(field_signatures[jField<F>("ANY")] != -1);
		return sat<F>("ANY");
	}

	template<typename F = ::jint>
	static auto CDATA() {
		static_assert(field_signatures[jField<F>("CDATA")] != -1);
		return sat<F>("CDATA");
	}

	template<typename F = ::jint>
	static auto CONREF() {
		static_assert(field_signatures[jField<F>("CONREF")] != -1);
		return sat<F>("CONREF");
	}

	template<typename F = ::jint>
	static auto CURRENT() {
		static_assert(field_signatures[jField<F>("CURRENT")] != -1);
		return sat<F>("CURRENT");
	}

	template<typename F = ::jint>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::jint>
	static auto EMPTY() {
		static_assert(field_signatures[jField<F>("EMPTY")] != -1);
		return sat<F>("EMPTY");
	}

	template<typename F = ::jint>
	static auto ENDTAG() {
		static_assert(field_signatures[jField<F>("ENDTAG")] != -1);
		return sat<F>("ENDTAG");
	}

	template<typename F = ::jint>
	static auto ENTITIES() {
		static_assert(field_signatures[jField<F>("ENTITIES")] != -1);
		return sat<F>("ENTITIES");
	}

	template<typename F = ::jint>
	static auto ENTITY() {
		static_assert(field_signatures[jField<F>("ENTITY")] != -1);
		return sat<F>("ENTITY");
	}

	template<typename F = ::jint>
	static auto FIXED() {
		static_assert(field_signatures[jField<F>("FIXED")] != -1);
		return sat<F>("FIXED");
	}

	template<typename F = ::jint>
	static auto GENERAL() {
		static_assert(field_signatures[jField<F>("GENERAL")] != -1);
		return sat<F>("GENERAL");
	}

	template<typename F = ::jint>
	static auto ID() {
		static_assert(field_signatures[jField<F>("ID")] != -1);
		return sat<F>("ID");
	}

	template<typename F = ::jint>
	static auto IDREF() {
		static_assert(field_signatures[jField<F>("IDREF")] != -1);
		return sat<F>("IDREF");
	}

	template<typename F = ::jint>
	static auto IDREFS() {
		static_assert(field_signatures[jField<F>("IDREFS")] != -1);
		return sat<F>("IDREFS");
	}

	template<typename F = ::jint>
	static auto IMPLIED() {
		static_assert(field_signatures[jField<F>("IMPLIED")] != -1);
		return sat<F>("IMPLIED");
	}

	template<typename F = ::jint>
	static auto MD() {
		static_assert(field_signatures[jField<F>("MD")] != -1);
		return sat<F>("MD");
	}

	template<typename F = ::jint>
	static auto MODEL() {
		static_assert(field_signatures[jField<F>("MODEL")] != -1);
		return sat<F>("MODEL");
	}

	template<typename F = ::jint>
	static auto MS() {
		static_assert(field_signatures[jField<F>("MS")] != -1);
		return sat<F>("MS");
	}

	template<typename F = ::jint>
	static auto NAME() {
		static_assert(field_signatures[jField<F>("NAME")] != -1);
		return sat<F>("NAME");
	}

	template<typename F = ::jint>
	static auto NAMES() {
		static_assert(field_signatures[jField<F>("NAMES")] != -1);
		return sat<F>("NAMES");
	}

	template<typename F = ::jint>
	static auto NMTOKEN() {
		static_assert(field_signatures[jField<F>("NMTOKEN")] != -1);
		return sat<F>("NMTOKEN");
	}

	template<typename F = ::jint>
	static auto NMTOKENS() {
		static_assert(field_signatures[jField<F>("NMTOKENS")] != -1);
		return sat<F>("NMTOKENS");
	}

	template<typename F = ::jint>
	static auto NOTATION() {
		static_assert(field_signatures[jField<F>("NOTATION")] != -1);
		return sat<F>("NOTATION");
	}

	template<typename F = ::jint>
	static auto NUMBER() {
		static_assert(field_signatures[jField<F>("NUMBER")] != -1);
		return sat<F>("NUMBER");
	}

	template<typename F = ::jint>
	static auto NUMBERS() {
		static_assert(field_signatures[jField<F>("NUMBERS")] != -1);
		return sat<F>("NUMBERS");
	}

	template<typename F = ::jint>
	static auto NUTOKEN() {
		static_assert(field_signatures[jField<F>("NUTOKEN")] != -1);
		return sat<F>("NUTOKEN");
	}

	template<typename F = ::jint>
	static auto NUTOKENS() {
		static_assert(field_signatures[jField<F>("NUTOKENS")] != -1);
		return sat<F>("NUTOKENS");
	}

	template<typename F = ::jint>
	static auto PARAMETER() {
		static_assert(field_signatures[jField<F>("PARAMETER")] != -1);
		return sat<F>("PARAMETER");
	}

	template<typename F = ::jint>
	static auto PI() {
		static_assert(field_signatures[jField<F>("PI")] != -1);
		return sat<F>("PI");
	}

	template<typename F = ::jint>
	static auto PUBLIC() {
		static_assert(field_signatures[jField<F>("PUBLIC")] != -1);
		return sat<F>("PUBLIC");
	}

	template<typename F = ::jint>
	static auto RCDATA() {
		static_assert(field_signatures[jField<F>("RCDATA")] != -1);
		return sat<F>("RCDATA");
	}

	template<typename F = ::jint>
	static auto REQUIRED() {
		static_assert(field_signatures[jField<F>("REQUIRED")] != -1);
		return sat<F>("REQUIRED");
	}

	template<typename F = ::jint>
	static auto SDATA() {
		static_assert(field_signatures[jField<F>("SDATA")] != -1);
		return sat<F>("SDATA");
	}

	template<typename F = ::jint>
	static auto STARTTAG() {
		static_assert(field_signatures[jField<F>("STARTTAG")] != -1);
		return sat<F>("STARTTAG");
	}

	template<typename F = ::jint>
	static auto SYSTEM() {
		static_assert(field_signatures[jField<F>("SYSTEM")] != -1);
		return sat<F>("SYSTEM");
	}

	template<typename F = ::javax::swing::text::html::parser::AttributeList>
	auto atts() const {
		static_assert(field_signatures[jField<F>("atts")] != -1);
		return at<F>("atts");
	}

	template<typename F = ::javax::swing::text::html::parser::ContentModel>
	auto content() const {
		static_assert(field_signatures[jField<F>("content")] != -1);
		return at<F>("content");
	}

	template<typename F = ::java::lang::Object>
	auto data() const {
		static_assert(field_signatures[jField<F>("data")] != -1);
		return at<F>("data");
	}

	template<typename F = ::java::util::BitSet>
	auto exclusions() const {
		static_assert(field_signatures[jField<F>("exclusions")] != -1);
		return at<F>("exclusions");
	}

	template<typename F = ::java::util::BitSet>
	auto inclusions() const {
		static_assert(field_signatures[jField<F>("inclusions")] != -1);
		return at<F>("inclusions");
	}

	template<typename F = ::jint>
	auto index() const {
		static_assert(field_signatures[jField<F>("index")] != -1);
		return at<F>("index");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::jboolean>
	auto oEnd() const {
		static_assert(field_signatures[jField<F>("oEnd")] != -1);
		return at<F>("oEnd");
	}

	template<typename F = ::jboolean>
	auto oStart() const {
		static_assert(field_signatures[jField<F>("oStart")] != -1);
		return at<F>("oStart");
	}

	template<typename F = ::jint>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::text::html::parser::AttributeList(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::swing::text::html::parser::AttributeList(::java::lang::String)>("getAttributeByValue"), //
		jMethod<::javax::swing::text::html::parser::AttributeList()>("getAttributes"), //
		jMethod<::javax::swing::text::html::parser::ContentModel()>("getContent"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jint(::java::lang::String)>("name2type"), //
		jMethod<::jboolean()>("omitEnd"), //
		jMethod<::jboolean()>("omitStart"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::swing::text::html::parser::AttributeList, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::AttributeList, typename... Args>
	auto getAttributeByValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeByValue")] != -1);
		return call<R>("getAttributeByValue", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::ContentModel, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto name2type(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name2type")] != -1);
		return scall<R>("name2type", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto omitEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("omitEnd")] != -1);
		return call<R>("omitEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto omitStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("omitStart")] != -1);
		return call<R>("omitStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
