#ifndef javax_swing_text_html_parser_TagElement_HPP
#define javax_swing_text_html_parser_TagElement_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::TagElement : public jObject<::javax::swing::text::html::parser::TagElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "TagElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::html::parser::Element)>(), //
		jConstructor<::jvoid(::javax::swing::text::html::parser::Element, ::jboolean)>(), //
		jMethod<::jboolean()>("breaksFlow"), //
		jMethod<::jboolean()>("fictional"), //
		jMethod<::javax::swing::text::html::parser::Element()>("getElement"), //
		jMethod<::javax::swing::text::html::HTML$Tag()>("getHTMLTag"), //
		jMethod<::jboolean()>("isPreformatted"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto breaksFlow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("breaksFlow")] != -1);
		return call<R>("breaksFlow", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto fictional(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("fictional")] != -1);
		return call<R>("fictional", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::HTML$Tag, typename... Args>
	auto getHTMLTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHTMLTag")] != -1);
		return call<R>("getHTMLTag", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPreformatted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPreformatted")] != -1);
		return call<R>("isPreformatted", forward<Args>(args)...);
	}

};

#endif
