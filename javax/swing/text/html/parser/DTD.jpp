#ifndef javax_swing_text_html_parser_DTD_HPP
#define javax_swing_text_html_parser_DTD_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::parser::DTD : public jObject<::javax::swing::text::html::parser::DTD, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html_parser / "DTD";

	constexpr static Enume field_signatures{
		jField<::jint>("FILE_VERSION"), //
		jField<::javax::swing::text::html::parser::Element>("applet"), //
		jField<::javax::swing::text::html::parser::Element>("base"), //
		jField<::javax::swing::text::html::parser::Element>("body"), //
		jField<::java::util::Hashtable>("elementHash"), //
		jField<::java::util::Vector>("elements"), //
		jField<::java::util::Hashtable>("entityHash"), //
		jField<::javax::swing::text::html::parser::Element>("head"), //
		jField<::javax::swing::text::html::parser::Element>("html"), //
		jField<::javax::swing::text::html::parser::Element>("isindex"), //
		jField<::javax::swing::text::html::parser::Element>("meta"), //
		jField<::java::lang::String>("name"), //
		jField<::javax::swing::text::html::parser::Element>("p"), //
		jField<::javax::swing::text::html::parser::Element>("param"), //
		jField<::javax::swing::text::html::parser::Element>("pcdata"), //
		jField<::javax::swing::text::html::parser::Element>("title"), //
	};

	template<typename F = ::jint>
	static auto FILE_VERSION() {
		static_assert(field_signatures[jField<F>("FILE_VERSION")] != -1);
		return sat<F>("FILE_VERSION");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto applet() const {
		static_assert(field_signatures[jField<F>("applet")] != -1);
		return at<F>("applet");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto base() const {
		static_assert(field_signatures[jField<F>("base")] != -1);
		return at<F>("base");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto body() const {
		static_assert(field_signatures[jField<F>("body")] != -1);
		return at<F>("body");
	}

	template<typename F = ::java::util::Hashtable>
	auto elementHash() const {
		static_assert(field_signatures[jField<F>("elementHash")] != -1);
		return at<F>("elementHash");
	}

	template<typename F = ::java::util::Vector>
	auto elements() const {
		static_assert(field_signatures[jField<F>("elements")] != -1);
		return at<F>("elements");
	}

	template<typename F = ::java::util::Hashtable>
	auto entityHash() const {
		static_assert(field_signatures[jField<F>("entityHash")] != -1);
		return at<F>("entityHash");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto head() const {
		static_assert(field_signatures[jField<F>("head")] != -1);
		return at<F>("head");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto html() const {
		static_assert(field_signatures[jField<F>("html")] != -1);
		return at<F>("html");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto isindex() const {
		static_assert(field_signatures[jField<F>("isindex")] != -1);
		return at<F>("isindex");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto meta() const {
		static_assert(field_signatures[jField<F>("meta")] != -1);
		return at<F>("meta");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto p() const {
		static_assert(field_signatures[jField<F>("p")] != -1);
		return at<F>("p");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto param() const {
		static_assert(field_signatures[jField<F>("param")] != -1);
		return at<F>("param");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto pcdata() const {
		static_assert(field_signatures[jField<F>("pcdata")] != -1);
		return at<F>("pcdata");
	}

	template<typename F = ::javax::swing::text::html::parser::Element>
	auto title() const {
		static_assert(field_signatures[jField<F>("title")] != -1);
		return at<F>("title");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::text::html::parser::Entity(::java::lang::String, ::jint, ::jint)>("defEntity"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::text::html::parser::AttributeList)>("defineAttributes"), //
		jMethod<::javax::swing::text::html::parser::Element(::java::lang::String, ::jint, ::jboolean, ::jboolean, ::javax::swing::text::html::parser::ContentModel, ::java::util::BitSet, ::java::util::BitSet, ::javax::swing::text::html::parser::AttributeList)>("defineElement"), //
		jMethod<::javax::swing::text::html::parser::Entity(::java::lang::String, ::jint, ::jchar *)>("defineEntity"), //
		jMethod<::javax::swing::text::html::parser::DTD(::java::lang::String)>("getDTD"), //
		jMethod<::javax::swing::text::html::parser::Element(::jint)>("getElement"), //
		jMethod<::javax::swing::text::html::parser::Element(::java::lang::String)>("getElement"), //
		jMethod<::javax::swing::text::html::parser::Entity(::jint)>("getEntity"), //
		jMethod<::javax::swing::text::html::parser::Entity(::java::lang::String)>("getEntity"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid(::java::lang::String, ::javax::swing::text::html::parser::DTD)>("putDTDHash"), //
		jMethod<::jvoid(::java::io::DataInputStream)>("read"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::swing::text::html::parser::Entity, typename... Args>
	auto defEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("defEntity")] != -1);
		return call<R>("defEntity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto defineAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("defineAttributes")] != -1);
		return call<R>("defineAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Element, typename... Args>
	auto defineElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("defineElement")] != -1);
		return call<R>("defineElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Entity, typename... Args>
	auto defineEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("defineEntity")] != -1);
		return call<R>("defineEntity", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::DTD, typename... Args>
	static auto getDTD(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDTD")] != -1);
		return scall<R>("getDTD", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Element, typename... Args>
	auto getElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElement")] != -1);
		return call<R>("getElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::parser::Entity, typename... Args>
	auto getEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEntity")] != -1);
		return call<R>("getEntity", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto putDTDHash(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("putDTDHash")] != -1);
		return scall<R>("putDTDHash", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
