#ifndef javax_swing_text_html_CSS_HPP
#define javax_swing_text_html_CSS_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::CSS : public jObject<::javax::swing::text::html::CSS, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "CSS";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::html::CSS$Attribute *()>("getAllAttributeKeys"), //
		jMethod<::javax::swing::text::html::CSS$Attribute(::java::lang::String)>("getAttribute"), //
	};

	template<typename R = ::javax::swing::text::html::CSS$Attribute *, typename... Args>
	static auto getAllAttributeKeys(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllAttributeKeys")] != -1);
		return scall<R>("getAllAttributeKeys", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::CSS$Attribute, typename... Args>
	static auto getAttribute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return scall<R>("getAttribute", std::forward<Args>(args)...);
	}

};

#endif
