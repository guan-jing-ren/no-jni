#ifndef javax_swing_text_html_HTML$Attribute_HPP
#define javax_swing_text_html_HTML$Attribute_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTML$Attribute : public jObject<::javax::swing::text::html::HTML$Attribute, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTML$Attribute";

	constexpr static Enume field_signatures{
		jField<::javax::swing::text::html::HTML$Attribute>("ACTION"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ALIGN"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ALINK"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ALT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ARCHIVE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("BACKGROUND"), //
		jField<::javax::swing::text::html::HTML$Attribute>("BGCOLOR"), //
		jField<::javax::swing::text::html::HTML$Attribute>("BORDER"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CELLPADDING"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CELLSPACING"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CHECKED"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CLASS"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CLASSID"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CLEAR"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CODE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CODEBASE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CODETYPE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COLOR"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COLS"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COLSPAN"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COMMENT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COMPACT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("CONTENT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("COORDS"), //
		jField<::javax::swing::text::html::HTML$Attribute>("DATA"), //
		jField<::javax::swing::text::html::HTML$Attribute>("DECLARE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("DIR"), //
		jField<::javax::swing::text::html::HTML$Attribute>("DUMMY"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ENCTYPE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ENDTAG"), //
		jField<::javax::swing::text::html::HTML$Attribute>("FACE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("FRAMEBORDER"), //
		jField<::javax::swing::text::html::HTML$Attribute>("HALIGN"), //
		jField<::javax::swing::text::html::HTML$Attribute>("HEIGHT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("HREF"), //
		jField<::javax::swing::text::html::HTML$Attribute>("HSPACE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("HTTPEQUIV"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ID"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ISMAP"), //
		jField<::javax::swing::text::html::HTML$Attribute>("LANG"), //
		jField<::javax::swing::text::html::HTML$Attribute>("LANGUAGE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("LINK"), //
		jField<::javax::swing::text::html::HTML$Attribute>("LOWSRC"), //
		jField<::javax::swing::text::html::HTML$Attribute>("MARGINHEIGHT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("MARGINWIDTH"), //
		jField<::javax::swing::text::html::HTML$Attribute>("MAXLENGTH"), //
		jField<::javax::swing::text::html::HTML$Attribute>("METHOD"), //
		jField<::javax::swing::text::html::HTML$Attribute>("MULTIPLE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("N"), //
		jField<::javax::swing::text::html::HTML$Attribute>("NAME"), //
		jField<::javax::swing::text::html::HTML$Attribute>("NOHREF"), //
		jField<::javax::swing::text::html::HTML$Attribute>("NORESIZE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("NOSHADE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("NOWRAP"), //
		jField<::javax::swing::text::html::HTML$Attribute>("PROMPT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("REL"), //
		jField<::javax::swing::text::html::HTML$Attribute>("REV"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ROWS"), //
		jField<::javax::swing::text::html::HTML$Attribute>("ROWSPAN"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SCROLLING"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SELECTED"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SHAPE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SHAPES"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SIZE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("SRC"), //
		jField<::javax::swing::text::html::HTML$Attribute>("STANDBY"), //
		jField<::javax::swing::text::html::HTML$Attribute>("START"), //
		jField<::javax::swing::text::html::HTML$Attribute>("STYLE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("TARGET"), //
		jField<::javax::swing::text::html::HTML$Attribute>("TEXT"), //
		jField<::javax::swing::text::html::HTML$Attribute>("TITLE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("TYPE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("USEMAP"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VALIGN"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VALUE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VALUETYPE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VERSION"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VLINK"), //
		jField<::javax::swing::text::html::HTML$Attribute>("VSPACE"), //
		jField<::javax::swing::text::html::HTML$Attribute>("WIDTH"), //
	};

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ACTION() {
		static_assert(field_signatures[jField<F>("ACTION")] != -1);
		return sat<F>("ACTION");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ALIGN() {
		static_assert(field_signatures[jField<F>("ALIGN")] != -1);
		return sat<F>("ALIGN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ALINK() {
		static_assert(field_signatures[jField<F>("ALINK")] != -1);
		return sat<F>("ALINK");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ALT() {
		static_assert(field_signatures[jField<F>("ALT")] != -1);
		return sat<F>("ALT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ARCHIVE() {
		static_assert(field_signatures[jField<F>("ARCHIVE")] != -1);
		return sat<F>("ARCHIVE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto BACKGROUND() {
		static_assert(field_signatures[jField<F>("BACKGROUND")] != -1);
		return sat<F>("BACKGROUND");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto BGCOLOR() {
		static_assert(field_signatures[jField<F>("BGCOLOR")] != -1);
		return sat<F>("BGCOLOR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto BORDER() {
		static_assert(field_signatures[jField<F>("BORDER")] != -1);
		return sat<F>("BORDER");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CELLPADDING() {
		static_assert(field_signatures[jField<F>("CELLPADDING")] != -1);
		return sat<F>("CELLPADDING");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CELLSPACING() {
		static_assert(field_signatures[jField<F>("CELLSPACING")] != -1);
		return sat<F>("CELLSPACING");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CHECKED() {
		static_assert(field_signatures[jField<F>("CHECKED")] != -1);
		return sat<F>("CHECKED");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CLASS() {
		static_assert(field_signatures[jField<F>("CLASS")] != -1);
		return sat<F>("CLASS");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CLASSID() {
		static_assert(field_signatures[jField<F>("CLASSID")] != -1);
		return sat<F>("CLASSID");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CLEAR() {
		static_assert(field_signatures[jField<F>("CLEAR")] != -1);
		return sat<F>("CLEAR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CODE() {
		static_assert(field_signatures[jField<F>("CODE")] != -1);
		return sat<F>("CODE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CODEBASE() {
		static_assert(field_signatures[jField<F>("CODEBASE")] != -1);
		return sat<F>("CODEBASE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CODETYPE() {
		static_assert(field_signatures[jField<F>("CODETYPE")] != -1);
		return sat<F>("CODETYPE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COLOR() {
		static_assert(field_signatures[jField<F>("COLOR")] != -1);
		return sat<F>("COLOR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COLS() {
		static_assert(field_signatures[jField<F>("COLS")] != -1);
		return sat<F>("COLS");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COLSPAN() {
		static_assert(field_signatures[jField<F>("COLSPAN")] != -1);
		return sat<F>("COLSPAN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COMMENT() {
		static_assert(field_signatures[jField<F>("COMMENT")] != -1);
		return sat<F>("COMMENT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COMPACT() {
		static_assert(field_signatures[jField<F>("COMPACT")] != -1);
		return sat<F>("COMPACT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto CONTENT() {
		static_assert(field_signatures[jField<F>("CONTENT")] != -1);
		return sat<F>("CONTENT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto COORDS() {
		static_assert(field_signatures[jField<F>("COORDS")] != -1);
		return sat<F>("COORDS");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto DATA() {
		static_assert(field_signatures[jField<F>("DATA")] != -1);
		return sat<F>("DATA");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto DECLARE() {
		static_assert(field_signatures[jField<F>("DECLARE")] != -1);
		return sat<F>("DECLARE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto DIR() {
		static_assert(field_signatures[jField<F>("DIR")] != -1);
		return sat<F>("DIR");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto DUMMY() {
		static_assert(field_signatures[jField<F>("DUMMY")] != -1);
		return sat<F>("DUMMY");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ENCTYPE() {
		static_assert(field_signatures[jField<F>("ENCTYPE")] != -1);
		return sat<F>("ENCTYPE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ENDTAG() {
		static_assert(field_signatures[jField<F>("ENDTAG")] != -1);
		return sat<F>("ENDTAG");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto FACE() {
		static_assert(field_signatures[jField<F>("FACE")] != -1);
		return sat<F>("FACE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto FRAMEBORDER() {
		static_assert(field_signatures[jField<F>("FRAMEBORDER")] != -1);
		return sat<F>("FRAMEBORDER");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto HALIGN() {
		static_assert(field_signatures[jField<F>("HALIGN")] != -1);
		return sat<F>("HALIGN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto HEIGHT() {
		static_assert(field_signatures[jField<F>("HEIGHT")] != -1);
		return sat<F>("HEIGHT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto HREF() {
		static_assert(field_signatures[jField<F>("HREF")] != -1);
		return sat<F>("HREF");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto HSPACE() {
		static_assert(field_signatures[jField<F>("HSPACE")] != -1);
		return sat<F>("HSPACE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto HTTPEQUIV() {
		static_assert(field_signatures[jField<F>("HTTPEQUIV")] != -1);
		return sat<F>("HTTPEQUIV");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ID() {
		static_assert(field_signatures[jField<F>("ID")] != -1);
		return sat<F>("ID");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ISMAP() {
		static_assert(field_signatures[jField<F>("ISMAP")] != -1);
		return sat<F>("ISMAP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto LANG() {
		static_assert(field_signatures[jField<F>("LANG")] != -1);
		return sat<F>("LANG");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto LANGUAGE() {
		static_assert(field_signatures[jField<F>("LANGUAGE")] != -1);
		return sat<F>("LANGUAGE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto LINK() {
		static_assert(field_signatures[jField<F>("LINK")] != -1);
		return sat<F>("LINK");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto LOWSRC() {
		static_assert(field_signatures[jField<F>("LOWSRC")] != -1);
		return sat<F>("LOWSRC");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto MARGINHEIGHT() {
		static_assert(field_signatures[jField<F>("MARGINHEIGHT")] != -1);
		return sat<F>("MARGINHEIGHT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto MARGINWIDTH() {
		static_assert(field_signatures[jField<F>("MARGINWIDTH")] != -1);
		return sat<F>("MARGINWIDTH");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto MAXLENGTH() {
		static_assert(field_signatures[jField<F>("MAXLENGTH")] != -1);
		return sat<F>("MAXLENGTH");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto METHOD() {
		static_assert(field_signatures[jField<F>("METHOD")] != -1);
		return sat<F>("METHOD");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto MULTIPLE() {
		static_assert(field_signatures[jField<F>("MULTIPLE")] != -1);
		return sat<F>("MULTIPLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto N() {
		static_assert(field_signatures[jField<F>("N")] != -1);
		return sat<F>("N");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto NAME() {
		static_assert(field_signatures[jField<F>("NAME")] != -1);
		return sat<F>("NAME");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto NOHREF() {
		static_assert(field_signatures[jField<F>("NOHREF")] != -1);
		return sat<F>("NOHREF");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto NORESIZE() {
		static_assert(field_signatures[jField<F>("NORESIZE")] != -1);
		return sat<F>("NORESIZE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto NOSHADE() {
		static_assert(field_signatures[jField<F>("NOSHADE")] != -1);
		return sat<F>("NOSHADE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto NOWRAP() {
		static_assert(field_signatures[jField<F>("NOWRAP")] != -1);
		return sat<F>("NOWRAP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto PROMPT() {
		static_assert(field_signatures[jField<F>("PROMPT")] != -1);
		return sat<F>("PROMPT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto REL() {
		static_assert(field_signatures[jField<F>("REL")] != -1);
		return sat<F>("REL");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto REV() {
		static_assert(field_signatures[jField<F>("REV")] != -1);
		return sat<F>("REV");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ROWS() {
		static_assert(field_signatures[jField<F>("ROWS")] != -1);
		return sat<F>("ROWS");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto ROWSPAN() {
		static_assert(field_signatures[jField<F>("ROWSPAN")] != -1);
		return sat<F>("ROWSPAN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SCROLLING() {
		static_assert(field_signatures[jField<F>("SCROLLING")] != -1);
		return sat<F>("SCROLLING");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SHAPE() {
		static_assert(field_signatures[jField<F>("SHAPE")] != -1);
		return sat<F>("SHAPE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SHAPES() {
		static_assert(field_signatures[jField<F>("SHAPES")] != -1);
		return sat<F>("SHAPES");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto SRC() {
		static_assert(field_signatures[jField<F>("SRC")] != -1);
		return sat<F>("SRC");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto STANDBY() {
		static_assert(field_signatures[jField<F>("STANDBY")] != -1);
		return sat<F>("STANDBY");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto START() {
		static_assert(field_signatures[jField<F>("START")] != -1);
		return sat<F>("START");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto STYLE() {
		static_assert(field_signatures[jField<F>("STYLE")] != -1);
		return sat<F>("STYLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto TARGET() {
		static_assert(field_signatures[jField<F>("TARGET")] != -1);
		return sat<F>("TARGET");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto TEXT() {
		static_assert(field_signatures[jField<F>("TEXT")] != -1);
		return sat<F>("TEXT");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto TITLE() {
		static_assert(field_signatures[jField<F>("TITLE")] != -1);
		return sat<F>("TITLE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto TYPE() {
		static_assert(field_signatures[jField<F>("TYPE")] != -1);
		return sat<F>("TYPE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto USEMAP() {
		static_assert(field_signatures[jField<F>("USEMAP")] != -1);
		return sat<F>("USEMAP");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VALIGN() {
		static_assert(field_signatures[jField<F>("VALIGN")] != -1);
		return sat<F>("VALIGN");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VALUE() {
		static_assert(field_signatures[jField<F>("VALUE")] != -1);
		return sat<F>("VALUE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VALUETYPE() {
		static_assert(field_signatures[jField<F>("VALUETYPE")] != -1);
		return sat<F>("VALUETYPE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VERSION() {
		static_assert(field_signatures[jField<F>("VERSION")] != -1);
		return sat<F>("VERSION");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VLINK() {
		static_assert(field_signatures[jField<F>("VLINK")] != -1);
		return sat<F>("VLINK");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto VSPACE() {
		static_assert(field_signatures[jField<F>("VSPACE")] != -1);
		return sat<F>("VSPACE");
	}

	template<typename F = ::javax::swing::text::html::HTML$Attribute>
	static auto WIDTH() {
		static_assert(field_signatures[jField<F>("WIDTH")] != -1);
		return sat<F>("WIDTH");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
