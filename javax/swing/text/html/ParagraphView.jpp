#ifndef javax_swing_text_html_ParagraphView_HPP
#define javax_swing_text_html_ParagraphView_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::ParagraphView : public jObject<::javax::swing::text::html::ParagraphView, ::javax::swing::text::ParagraphView> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "ParagraphView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
	};

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", forward<Args>(args)...);
	}

};

#endif
