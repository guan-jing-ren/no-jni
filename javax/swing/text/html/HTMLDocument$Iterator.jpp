#ifndef javax_swing_text_html_HTMLDocument$Iterator_HPP
#define javax_swing_text_html_HTMLDocument$Iterator_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::swing::text::html::HTMLDocument$Iterator : public jObject<::javax::swing::text::html::HTMLDocument$Iterator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text_html / "HTMLDocument$Iterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::javax::swing::text::html::HTML$Tag()>("getTag"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jvoid()>("next"), //
	};

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::html::HTML$Tag, typename... Args>
	auto getTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTag")] != -1);
		return call<R>("getTag", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("next")] != -1);
		return call<R>("next", forward<Args>(args)...);
	}

};

#endif
