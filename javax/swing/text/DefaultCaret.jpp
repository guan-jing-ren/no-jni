#ifndef javax_swing_text_DefaultCaret_HPP
#define javax_swing_text_DefaultCaret_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultCaret : public jObject<::javax::swing::text::DefaultCaret, ::java::awt::Rectangle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultCaret";

	constexpr static Enume field_signatures{
		jField<::jint>("ALWAYS_UPDATE"), //
		jField<::jint>("NEVER_UPDATE"), //
		jField<::jint>("UPDATE_WHEN_ON_EDT"), //
	};

	template<typename F = ::jint>
	static auto ALWAYS_UPDATE() {
		static_assert(field_signatures[jField<F>("ALWAYS_UPDATE")] != -1);
		return sat<F>("ALWAYS_UPDATE");
	}

	template<typename F = ::jint>
	static auto NEVER_UPDATE() {
		static_assert(field_signatures[jField<F>("NEVER_UPDATE")] != -1);
		return sat<F>("NEVER_UPDATE");
	}

	template<typename F = ::jint>
	static auto UPDATE_WHEN_ON_EDT() {
		static_assert(field_signatures[jField<F>("UPDATE_WHEN_ON_EDT")] != -1);
		return sat<F>("UPDATE_WHEN_ON_EDT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("deinstall"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusGained"), //
		jMethod<::jvoid(::java::awt::event::FocusEvent)>("focusLost"), //
		jMethod<::jint()>("getBlinkRate"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::jint()>("getDot"), //
		jMethod<::javax::swing::text::Position$Bias()>("getDotBias"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::java::awt::Point()>("getMagicCaretPosition"), //
		jMethod<::jint()>("getMark"), //
		jMethod<::javax::swing::text::Position$Bias()>("getMarkBias"), //
		jMethod<::jint()>("getUpdatePolicy"), //
		jMethod<::jvoid(::javax::swing::text::JTextComponent)>("install"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isSelectionVisible"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseClicked"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseEntered"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseExited"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseReleased"), //
		jMethod<::jvoid(::jint)>("moveDot"), //
		jMethod<::jvoid(::jint, ::javax::swing::text::Position$Bias)>("moveDot"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jint)>("setBlinkRate"), //
		jMethod<::jvoid(::jint)>("setDot"), //
		jMethod<::jvoid(::jint, ::javax::swing::text::Position$Bias)>("setDot"), //
		jMethod<::jvoid(::java::awt::Point)>("setMagicCaretPosition"), //
		jMethod<::jvoid(::jboolean)>("setSelectionVisible"), //
		jMethod<::jvoid(::jint)>("setUpdatePolicy"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deinstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deinstall")] != -1);
		return call<R>("deinstall", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusGained(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusGained")] != -1);
		return call<R>("focusGained", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto focusLost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("focusLost")] != -1);
		return call<R>("focusLost", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBlinkRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBlinkRate")] != -1);
		return call<R>("getBlinkRate", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDot")] != -1);
		return call<R>("getDot", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position$Bias, typename... Args>
	auto getDotBias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDotBias")] != -1);
		return call<R>("getDotBias", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Point, typename... Args>
	auto getMagicCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMagicCaretPosition")] != -1);
		return call<R>("getMagicCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMark")] != -1);
		return call<R>("getMark", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Position$Bias, typename... Args>
	auto getMarkBias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMarkBias")] != -1);
		return call<R>("getMarkBias", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUpdatePolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUpdatePolicy")] != -1);
		return call<R>("getUpdatePolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSelectionVisible")] != -1);
		return call<R>("isSelectionVisible", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseClicked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseClicked")] != -1);
		return call<R>("mouseClicked", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseEntered")] != -1);
		return call<R>("mouseEntered", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseExited")] != -1);
		return call<R>("mouseExited", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseReleased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("mouseReleased")] != -1);
		return call<R>("mouseReleased", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("moveDot")] != -1);
		return call<R>("moveDot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlinkRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBlinkRate")] != -1);
		return call<R>("setBlinkRate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDot")] != -1);
		return call<R>("setDot", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMagicCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMagicCaretPosition")] != -1);
		return call<R>("setMagicCaretPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSelectionVisible")] != -1);
		return call<R>("setSelectionVisible", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUpdatePolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUpdatePolicy")] != -1);
		return call<R>("setUpdatePolicy", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
