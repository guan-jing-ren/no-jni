#ifndef javax_swing_text_DefaultFormatter_HPP
#define javax_swing_text_DefaultFormatter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultFormatter : public jObject<::javax::swing::text::DefaultFormatter, ::javax::swing::JFormattedTextField$AbstractFormatter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultFormatter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean()>("getAllowsInvalid"), //
		jMethod<::jboolean()>("getCommitsOnValidEdit"), //
		jMethod<::jboolean()>("getOverwriteMode"), //
		jMethod<::java::lang::Class()>("getValueClass"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField)>("install"), //
		jMethod<::jvoid(::jboolean)>("setAllowsInvalid"), //
		jMethod<::jvoid(::jboolean)>("setCommitsOnValidEdit"), //
		jMethod<::jvoid(::jboolean)>("setOverwriteMode"), //
		jMethod<::jvoid(::java::lang::Class)>("setValueClass"), //
		jMethod<::java::lang::Object(::java::lang::String)>("stringToValue"), //
		jMethod<::java::lang::String(::java::lang::Object)>("valueToString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getAllowsInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllowsInvalid")] != -1);
		return call<R>("getAllowsInvalid", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getCommitsOnValidEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCommitsOnValidEdit")] != -1);
		return call<R>("getCommitsOnValidEdit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getOverwriteMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOverwriteMode")] != -1);
		return call<R>("getOverwriteMode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getValueClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueClass")] != -1);
		return call<R>("getValueClass", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("install")] != -1);
		return call<R>("install", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAllowsInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAllowsInvalid")] != -1);
		return call<R>("setAllowsInvalid", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCommitsOnValidEdit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCommitsOnValidEdit")] != -1);
		return call<R>("setCommitsOnValidEdit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOverwriteMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOverwriteMode")] != -1);
		return call<R>("setOverwriteMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueClass")] != -1);
		return call<R>("setValueClass", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto stringToValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stringToValue")] != -1);
		return call<R>("stringToValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto valueToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueToString")] != -1);
		return call<R>("valueToString", forward<Args>(args)...);
	}

};

#endif
