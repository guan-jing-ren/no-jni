#ifndef javax_swing_text_DefaultStyledDocument$ElementSpec_HPP
#define javax_swing_text_DefaultStyledDocument$ElementSpec_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultStyledDocument$ElementSpec : public jObject<::javax::swing::text::DefaultStyledDocument$ElementSpec, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultStyledDocument$ElementSpec";

	constexpr static Enume field_signatures{
		jField<::jshort>("ContentType"), //
		jField<::jshort>("EndTagType"), //
		jField<::jshort>("JoinFractureDirection"), //
		jField<::jshort>("JoinNextDirection"), //
		jField<::jshort>("JoinPreviousDirection"), //
		jField<::jshort>("OriginateDirection"), //
		jField<::jshort>("StartTagType"), //
	};

	template<typename F = ::jshort>
	static auto ContentType() {
		static_assert(field_signatures[jField<F>("ContentType")] != -1);
		return sat<F>("ContentType");
	}

	template<typename F = ::jshort>
	static auto EndTagType() {
		static_assert(field_signatures[jField<F>("EndTagType")] != -1);
		return sat<F>("EndTagType");
	}

	template<typename F = ::jshort>
	static auto JoinFractureDirection() {
		static_assert(field_signatures[jField<F>("JoinFractureDirection")] != -1);
		return sat<F>("JoinFractureDirection");
	}

	template<typename F = ::jshort>
	static auto JoinNextDirection() {
		static_assert(field_signatures[jField<F>("JoinNextDirection")] != -1);
		return sat<F>("JoinNextDirection");
	}

	template<typename F = ::jshort>
	static auto JoinPreviousDirection() {
		static_assert(field_signatures[jField<F>("JoinPreviousDirection")] != -1);
		return sat<F>("JoinPreviousDirection");
	}

	template<typename F = ::jshort>
	static auto OriginateDirection() {
		static_assert(field_signatures[jField<F>("OriginateDirection")] != -1);
		return sat<F>("OriginateDirection");
	}

	template<typename F = ::jshort>
	static auto StartTagType() {
		static_assert(field_signatures[jField<F>("StartTagType")] != -1);
		return sat<F>("StartTagType");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::AttributeSet, ::jshort)>(), //
		jConstructor<::jvoid(::javax::swing::text::AttributeSet, ::jshort, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::text::AttributeSet, ::jshort, ::jchar *, ::jint, ::jint)>(), //
		jMethod<::jchar *()>("getArray"), //
		jMethod<::javax::swing::text::AttributeSet()>("getAttributes"), //
		jMethod<::jshort()>("getDirection"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::jshort()>("getType"), //
		jMethod<::jvoid(::jshort)>("setDirection"), //
		jMethod<::jvoid(::jshort)>("setType"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jchar *, typename... Args>
	auto getArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getArray")] != -1);
		return call<R>("getArray", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirection")] != -1);
		return call<R>("getDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirection")] != -1);
		return call<R>("setDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
