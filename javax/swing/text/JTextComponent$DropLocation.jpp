#ifndef javax_swing_text_JTextComponent$DropLocation_HPP
#define javax_swing_text_JTextComponent$DropLocation_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::JTextComponent$DropLocation : public jObject<::javax::swing::text::JTextComponent$DropLocation, ::javax::swing::TransferHandler$DropLocation> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "JTextComponent$DropLocation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::text::Position$Bias()>("getBias"), //
		jMethod<::jint()>("getIndex"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::swing::text::Position$Bias, typename... Args>
	auto getBias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBias")] != -1);
		return call<R>("getBias", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIndex")] != -1);
		return call<R>("getIndex", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
