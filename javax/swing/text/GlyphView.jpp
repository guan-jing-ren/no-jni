#ifndef javax_swing_text_GlyphView_HPP
#define javax_swing_text_GlyphView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::GlyphView : public jObject<::javax::swing::text::GlyphView, ::javax::swing::text::View> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "GlyphView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element)>(), //
		jMethod<::javax::swing::text::View(::jint, ::jint, ::jfloat, ::jfloat)>("breakView"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("changedUpdate"), //
		jMethod<::javax::swing::text::View(::jint, ::jint)>("createFragment"), //
		jMethod<::jfloat(::jint)>("getAlignment"), //
		jMethod<::java::awt::Color()>("getBackground"), //
		jMethod<::jint(::jint, ::jfloat, ::jfloat)>("getBreakWeight"), //
		jMethod<::jint()>("getEndOffset"), //
		jMethod<::java::awt::Font()>("getFont"), //
		jMethod<::java::awt::Color()>("getForeground"), //
		jMethod<::javax::swing::text::GlyphView$GlyphPainter()>("getGlyphPainter"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::jfloat(::jint, ::jint)>("getPartialSpan"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jint()>("getStartOffset"), //
		jMethod<::javax::swing::text::TabExpander()>("getTabExpander"), //
		jMethod<::jfloat(::jfloat, ::javax::swing::text::TabExpander)>("getTabbedSpan"), //
		jMethod<::javax::swing::text::Segment(::jint, ::jint)>("getText"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("insertUpdate"), //
		jMethod<::jboolean()>("isStrikeThrough"), //
		jMethod<::jboolean()>("isSubscript"), //
		jMethod<::jboolean()>("isSuperscript"), //
		jMethod<::jboolean()>("isUnderline"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::event::DocumentEvent, ::java::awt::Shape, ::javax::swing::text::ViewFactory)>("removeUpdate"), //
		jMethod<::jvoid(::javax::swing::text::GlyphView$GlyphPainter)>("setGlyphPainter"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto breakView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("breakView")] != -1);
		return call<R>("breakView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto changedUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("changedUpdate")] != -1);
		return call<R>("changedUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto createFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFragment")] != -1);
		return call<R>("createFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getBackground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBackground")] != -1);
		return call<R>("getBackground", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBreakWeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBreakWeight")] != -1);
		return call<R>("getBreakWeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndOffset")] != -1);
		return call<R>("getEndOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getForeground(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForeground")] != -1);
		return call<R>("getForeground", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::GlyphView$GlyphPainter, typename... Args>
	auto getGlyphPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlyphPainter")] != -1);
		return call<R>("getGlyphPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPartialSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPartialSpan")] != -1);
		return call<R>("getPartialSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartOffset")] != -1);
		return call<R>("getStartOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::TabExpander, typename... Args>
	auto getTabExpander(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabExpander")] != -1);
		return call<R>("getTabExpander", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTabbedSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTabbedSpan")] != -1);
		return call<R>("getTabbedSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Segment, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertUpdate")] != -1);
		return call<R>("insertUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStrikeThrough(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStrikeThrough")] != -1);
		return call<R>("isStrikeThrough", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSubscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSubscript")] != -1);
		return call<R>("isSubscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSuperscript(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSuperscript")] != -1);
		return call<R>("isSuperscript", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnderline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnderline")] != -1);
		return call<R>("isUnderline", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeUpdate")] != -1);
		return call<R>("removeUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlyphPainter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlyphPainter")] != -1);
		return call<R>("setGlyphPainter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

};

#endif
