#ifndef javax_swing_text_PlainDocument_HPP
#define javax_swing_text_PlainDocument_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::PlainDocument : public jObject<::javax::swing::text::PlainDocument, ::javax::swing::text::AbstractDocument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "PlainDocument";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("lineLimitAttribute"), //
		jField<::java::lang::String>("tabSizeAttribute"), //
	};

	template<typename F = ::java::lang::String>
	static auto lineLimitAttribute() {
		static_assert(field_signatures[jField<F>("lineLimitAttribute")] != -1);
		return sat<F>("lineLimitAttribute");
	}

	template<typename F = ::java::lang::String>
	static auto tabSizeAttribute() {
		static_assert(field_signatures[jField<F>("tabSizeAttribute")] != -1);
		return sat<F>("tabSizeAttribute");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::swing::text::AbstractDocument$Content)>(), //
		jMethod<::javax::swing::text::Element()>("getDefaultRootElement"), //
		jMethod<::javax::swing::text::Element(::jint)>("getParagraphElement"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::javax::swing::text::AttributeSet)>("insertString"), //
	};

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getDefaultRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultRootElement")] != -1);
		return call<R>("getDefaultRootElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getParagraphElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParagraphElement")] != -1);
		return call<R>("getParagraphElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertString")] != -1);
		return call<R>("insertString", forward<Args>(args)...);
	}

};

#endif
