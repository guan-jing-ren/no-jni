#ifndef javax_swing_text_DefaultStyledDocument$ElementBuffer_HPP
#define javax_swing_text_DefaultStyledDocument$ElementBuffer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::DefaultStyledDocument$ElementBuffer : public jObject<::javax::swing::text::DefaultStyledDocument$ElementBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "DefaultStyledDocument$ElementBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::DefaultStyledDocument, ::javax::swing::text::Element)>(), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AbstractDocument$DefaultDocumentEvent)>("change"), //
		jMethod<::javax::swing::text::Element(::javax::swing::text::Element, ::javax::swing::text::Element)>("clone"), //
		jMethod<::javax::swing::text::Element()>("getRootElement"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::DefaultStyledDocument$ElementSpec *, ::javax::swing::text::AbstractDocument$DefaultDocumentEvent)>("insert"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::AbstractDocument$DefaultDocumentEvent)>("remove"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto change(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("change")] != -1);
		return call<R>("change", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::Element, typename... Args>
	auto getRootElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootElement")] != -1);
		return call<R>("getRootElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

};

#endif
