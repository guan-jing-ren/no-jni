#ifndef javax_swing_text_AsyncBoxView_HPP
#define javax_swing_text_AsyncBoxView_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::AsyncBoxView : public jObject<::javax::swing::text::AsyncBoxView, ::javax::swing::text::View> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "AsyncBoxView";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::text::Element, ::jint)>(), //
		jMethod<::jfloat()>("getBottomInset"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape)>("getChildAllocation"), //
		jMethod<::jfloat()>("getLeftInset"), //
		jMethod<::jint()>("getMajorAxis"), //
		jMethod<::jfloat(::jint)>("getMaximumSpan"), //
		jMethod<::jfloat(::jint)>("getMinimumSpan"), //
		jMethod<::jint()>("getMinorAxis"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias, ::java::awt::Shape, ::jint, ::javax::swing::text::Position$Bias *)>("getNextVisualPositionFrom"), //
		jMethod<::jfloat(::jint)>("getPreferredSpan"), //
		jMethod<::jfloat()>("getRightInset"), //
		jMethod<::jfloat()>("getTopInset"), //
		jMethod<::javax::swing::text::View(::jint)>("getView"), //
		jMethod<::jint()>("getViewCount"), //
		jMethod<::jint(::jint, ::javax::swing::text::Position$Bias)>("getViewIndex"), //
		jMethod<::java::awt::Shape(::jint, ::java::awt::Shape, ::javax::swing::text::Position$Bias)>("modelToView"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Shape)>("paint"), //
		jMethod<::jvoid(::javax::swing::text::View, ::jboolean, ::jboolean)>("preferenceChanged"), //
		jMethod<::jvoid(::jint, ::jint, ::javax::swing::text::View *)>("replace"), //
		jMethod<::jvoid(::jfloat)>("setBottomInset"), //
		jMethod<::jvoid(::jfloat)>("setLeftInset"), //
		jMethod<::jvoid(::javax::swing::text::View)>("setParent"), //
		jMethod<::jvoid(::jfloat)>("setRightInset"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("setSize"), //
		jMethod<::jvoid(::jfloat)>("setTopInset"), //
		jMethod<::jint(::jfloat, ::jfloat, ::java::awt::Shape, ::javax::swing::text::Position$Bias *)>("viewToModel"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getBottomInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBottomInset")] != -1);
		return call<R>("getBottomInset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto getChildAllocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildAllocation")] != -1);
		return call<R>("getChildAllocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLeftInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeftInset")] != -1);
		return call<R>("getLeftInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMajorAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajorAxis")] != -1);
		return call<R>("getMajorAxis", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSpan")] != -1);
		return call<R>("getMaximumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimumSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSpan")] != -1);
		return call<R>("getMinimumSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinorAxis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinorAxis")] != -1);
		return call<R>("getMinorAxis", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextVisualPositionFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextVisualPositionFrom")] != -1);
		return call<R>("getNextVisualPositionFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPreferredSpan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSpan")] != -1);
		return call<R>("getPreferredSpan", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getRightInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRightInset")] != -1);
		return call<R>("getRightInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTopInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopInset")] != -1);
		return call<R>("getTopInset", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::View, typename... Args>
	auto getView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getView")] != -1);
		return call<R>("getView", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewCount")] != -1);
		return call<R>("getViewCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getViewIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getViewIndex")] != -1);
		return call<R>("getViewIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Shape, typename... Args>
	auto modelToView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modelToView")] != -1);
		return call<R>("modelToView", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preferenceChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferenceChanged")] != -1);
		return call<R>("preferenceChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBottomInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBottomInset")] != -1);
		return call<R>("setBottomInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeftInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeftInset")] != -1);
		return call<R>("setLeftInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRightInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRightInset")] != -1);
		return call<R>("setRightInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTopInset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTopInset")] != -1);
		return call<R>("setTopInset", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto viewToModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("viewToModel")] != -1);
		return call<R>("viewToModel", std::forward<Args>(args)...);
	}

};

#endif
