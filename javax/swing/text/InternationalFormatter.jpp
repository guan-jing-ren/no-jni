#ifndef javax_swing_text_InternationalFormatter_HPP
#define javax_swing_text_InternationalFormatter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::swing::text::InternationalFormatter : public jObject<::javax::swing::text::InternationalFormatter, ::javax::swing::text::DefaultFormatter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing_text / "InternationalFormatter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::text::Format)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::text::Format$Field *(::jint)>("getFields"), //
		jMethod<::java::text::Format()>("getFormat"), //
		jMethod<::java::lang::Comparable()>("getMaximum"), //
		jMethod<::java::lang::Comparable()>("getMinimum"), //
		jMethod<::jvoid(::javax::swing::JFormattedTextField)>("install"), //
		jMethod<::jvoid(::java::text::Format)>("setFormat"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setMaximum"), //
		jMethod<::jvoid(::java::lang::Comparable)>("setMinimum"), //
		jMethod<::java::lang::Object(::java::lang::String)>("stringToValue"), //
		jMethod<::java::lang::String(::java::lang::Object)>("valueToString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format$Field *, typename... Args>
	auto getFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFields")] != -1);
		return call<R>("getFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::text::Format, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFormat")] != -1);
		return call<R>("setFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto stringToValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringToValue")] != -1);
		return call<R>("stringToValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto valueToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueToString")] != -1);
		return call<R>("valueToString", std::forward<Args>(args)...);
	}

};

#endif
