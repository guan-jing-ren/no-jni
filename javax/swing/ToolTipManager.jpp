#ifndef javax_swing_ToolTipManager_HPP
#define javax_swing_ToolTipManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::ToolTipManager : public jObject<::javax::swing::ToolTipManager, ::java::awt::event::MouseAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "ToolTipManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getDismissDelay"), //
		jMethod<::jint()>("getInitialDelay"), //
		jMethod<::jint()>("getReshowDelay"), //
		jMethod<::jboolean()>("isEnabled"), //
		jMethod<::jboolean()>("isLightWeightPopupEnabled"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseDragged"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseEntered"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseExited"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mouseMoved"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent)>("mousePressed"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("registerComponent"), //
		jMethod<::jvoid(::jint)>("setDismissDelay"), //
		jMethod<::jvoid(::jboolean)>("setEnabled"), //
		jMethod<::jvoid(::jint)>("setInitialDelay"), //
		jMethod<::jvoid(::jboolean)>("setLightWeightPopupEnabled"), //
		jMethod<::jvoid(::jint)>("setReshowDelay"), //
		jMethod<::javax::swing::ToolTipManager()>("sharedInstance"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("unregisterComponent"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDismissDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDismissDelay")] != -1);
		return call<R>("getDismissDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInitialDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitialDelay")] != -1);
		return call<R>("getInitialDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReshowDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReshowDelay")] != -1);
		return call<R>("getReshowDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEnabled")] != -1);
		return call<R>("isEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLightWeightPopupEnabled")] != -1);
		return call<R>("isLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseDragged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseDragged")] != -1);
		return call<R>("mouseDragged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseEntered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseEntered")] != -1);
		return call<R>("mouseEntered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseExited(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseExited")] != -1);
		return call<R>("mouseExited", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mouseMoved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mouseMoved")] != -1);
		return call<R>("mouseMoved", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mousePressed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mousePressed")] != -1);
		return call<R>("mousePressed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerComponent")] != -1);
		return call<R>("registerComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDismissDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDismissDelay")] != -1);
		return call<R>("setDismissDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabled")] != -1);
		return call<R>("setEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitialDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInitialDelay")] != -1);
		return call<R>("setInitialDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLightWeightPopupEnabled")] != -1);
		return call<R>("setLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReshowDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReshowDelay")] != -1);
		return call<R>("setReshowDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::ToolTipManager, typename... Args>
	static auto sharedInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sharedInstance")] != -1);
		return scall<R>("sharedInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterComponent")] != -1);
		return call<R>("unregisterComponent", std::forward<Args>(args)...);
	}

};

#endif
