#ifndef javax_swing_JToolBar$Separator_HPP
#define javax_swing_JToolBar$Separator_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JToolBar$Separator : public jObject<::javax::swing::JToolBar$Separator, ::javax::swing::JSeparator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JToolBar$Separator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::awt::Dimension)>(), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::java::awt::Dimension()>("getSeparatorSize"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setSeparatorSize"), //
	};

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getSeparatorSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeparatorSize")] != -1);
		return call<R>("getSeparatorSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSeparatorSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSeparatorSize")] != -1);
		return call<R>("setSeparatorSize", forward<Args>(args)...);
	}

};

#endif
