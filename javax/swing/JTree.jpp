#ifndef javax_swing_JTree_HPP
#define javax_swing_JTree_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JTree : public jObject<::javax::swing::JTree, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JTree";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ANCHOR_SELECTION_PATH_PROPERTY"), //
		jField<::java::lang::String>("CELL_EDITOR_PROPERTY"), //
		jField<::java::lang::String>("CELL_RENDERER_PROPERTY"), //
		jField<::java::lang::String>("EDITABLE_PROPERTY"), //
		jField<::java::lang::String>("EXPANDS_SELECTED_PATHS_PROPERTY"), //
		jField<::java::lang::String>("INVOKES_STOP_CELL_EDITING_PROPERTY"), //
		jField<::java::lang::String>("LARGE_MODEL_PROPERTY"), //
		jField<::java::lang::String>("LEAD_SELECTION_PATH_PROPERTY"), //
		jField<::java::lang::String>("ROOT_VISIBLE_PROPERTY"), //
		jField<::java::lang::String>("ROW_HEIGHT_PROPERTY"), //
		jField<::java::lang::String>("SCROLLS_ON_EXPAND_PROPERTY"), //
		jField<::java::lang::String>("SELECTION_MODEL_PROPERTY"), //
		jField<::java::lang::String>("SHOWS_ROOT_HANDLES_PROPERTY"), //
		jField<::java::lang::String>("TOGGLE_CLICK_COUNT_PROPERTY"), //
		jField<::java::lang::String>("TREE_MODEL_PROPERTY"), //
		jField<::java::lang::String>("VISIBLE_ROW_COUNT_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto ANCHOR_SELECTION_PATH_PROPERTY() {
		static_assert(field_signatures[jField<F>("ANCHOR_SELECTION_PATH_PROPERTY")] != -1);
		return sat<F>("ANCHOR_SELECTION_PATH_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CELL_EDITOR_PROPERTY() {
		static_assert(field_signatures[jField<F>("CELL_EDITOR_PROPERTY")] != -1);
		return sat<F>("CELL_EDITOR_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CELL_RENDERER_PROPERTY() {
		static_assert(field_signatures[jField<F>("CELL_RENDERER_PROPERTY")] != -1);
		return sat<F>("CELL_RENDERER_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto EDITABLE_PROPERTY() {
		static_assert(field_signatures[jField<F>("EDITABLE_PROPERTY")] != -1);
		return sat<F>("EDITABLE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto EXPANDS_SELECTED_PATHS_PROPERTY() {
		static_assert(field_signatures[jField<F>("EXPANDS_SELECTED_PATHS_PROPERTY")] != -1);
		return sat<F>("EXPANDS_SELECTED_PATHS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto INVOKES_STOP_CELL_EDITING_PROPERTY() {
		static_assert(field_signatures[jField<F>("INVOKES_STOP_CELL_EDITING_PROPERTY")] != -1);
		return sat<F>("INVOKES_STOP_CELL_EDITING_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LARGE_MODEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("LARGE_MODEL_PROPERTY")] != -1);
		return sat<F>("LARGE_MODEL_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LEAD_SELECTION_PATH_PROPERTY() {
		static_assert(field_signatures[jField<F>("LEAD_SELECTION_PATH_PROPERTY")] != -1);
		return sat<F>("LEAD_SELECTION_PATH_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROOT_VISIBLE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROOT_VISIBLE_PROPERTY")] != -1);
		return sat<F>("ROOT_VISIBLE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ROW_HEIGHT_PROPERTY() {
		static_assert(field_signatures[jField<F>("ROW_HEIGHT_PROPERTY")] != -1);
		return sat<F>("ROW_HEIGHT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SCROLLS_ON_EXPAND_PROPERTY() {
		static_assert(field_signatures[jField<F>("SCROLLS_ON_EXPAND_PROPERTY")] != -1);
		return sat<F>("SCROLLS_ON_EXPAND_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SELECTION_MODEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("SELECTION_MODEL_PROPERTY")] != -1);
		return sat<F>("SELECTION_MODEL_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SHOWS_ROOT_HANDLES_PROPERTY() {
		static_assert(field_signatures[jField<F>("SHOWS_ROOT_HANDLES_PROPERTY")] != -1);
		return sat<F>("SHOWS_ROOT_HANDLES_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto TOGGLE_CLICK_COUNT_PROPERTY() {
		static_assert(field_signatures[jField<F>("TOGGLE_CLICK_COUNT_PROPERTY")] != -1);
		return sat<F>("TOGGLE_CLICK_COUNT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto TREE_MODEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("TREE_MODEL_PROPERTY")] != -1);
		return sat<F>("TREE_MODEL_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto VISIBLE_ROW_COUNT_PROPERTY() {
		static_assert(field_signatures[jField<F>("VISIBLE_ROW_COUNT_PROPERTY")] != -1);
		return sat<F>("VISIBLE_ROW_COUNT_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Hashtable)>(), //
		jConstructor<::jvoid(::java::util::Vector)>(), //
		jConstructor<::jvoid(::javax::swing::tree::TreeModel)>(), //
		jConstructor<::jvoid(::javax::swing::tree::TreeNode)>(), //
		jConstructor<::jvoid(::javax::swing::tree::TreeNode, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::jvoid(::jint, ::jint)>("addSelectionInterval"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("addSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("addSelectionPaths"), //
		jMethod<::jvoid(::jint)>("addSelectionRow"), //
		jMethod<::jvoid(::jint *)>("addSelectionRows"), //
		jMethod<::jvoid(::javax::swing::event::TreeExpansionListener)>("addTreeExpansionListener"), //
		jMethod<::jvoid(::javax::swing::event::TreeSelectionListener)>("addTreeSelectionListener"), //
		jMethod<::jvoid(::javax::swing::event::TreeWillExpandListener)>("addTreeWillExpandListener"), //
		jMethod<::jvoid()>("cancelEditing"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("collapsePath"), //
		jMethod<::jvoid(::jint)>("collapseRow"), //
		jMethod<::java::lang::String(::java::lang::Object, ::jboolean, ::jboolean, ::jboolean, ::jint, ::jboolean)>("convertValueToText"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("expandPath"), //
		jMethod<::jvoid(::jint)>("expandRow"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("fireTreeCollapsed"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("fireTreeExpanded"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("fireTreeWillCollapse"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("fireTreeWillExpand"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::tree::TreePath()>("getAnchorSelectionPath"), //
		jMethod<::javax::swing::tree::TreeCellEditor()>("getCellEditor"), //
		jMethod<::javax::swing::tree::TreeCellRenderer()>("getCellRenderer"), //
		jMethod<::javax::swing::tree::TreePath(::jint, ::jint)>("getClosestPathForLocation"), //
		jMethod<::jint(::jint, ::jint)>("getClosestRowForLocation"), //
		jMethod<::jboolean()>("getDragEnabled"), //
		jMethod<::javax::swing::JTree$DropLocation()>("getDropLocation"), //
		jMethod<::javax::swing::DropMode()>("getDropMode"), //
		jMethod<::javax::swing::tree::TreePath()>("getEditingPath"), //
		jMethod<::java::util::Enumeration(::javax::swing::tree::TreePath)>("getExpandedDescendants"), //
		jMethod<::jboolean()>("getExpandsSelectedPaths"), //
		jMethod<::jboolean()>("getInvokesStopCellEditing"), //
		jMethod<::java::lang::Object()>("getLastSelectedPathComponent"), //
		jMethod<::javax::swing::tree::TreePath()>("getLeadSelectionPath"), //
		jMethod<::jint()>("getLeadSelectionRow"), //
		jMethod<::jint()>("getMaxSelectionRow"), //
		jMethod<::jint()>("getMinSelectionRow"), //
		jMethod<::javax::swing::tree::TreeModel()>("getModel"), //
		jMethod<::javax::swing::tree::TreePath(::java::lang::String, ::jint, ::javax::swing::text::Position$Bias)>("getNextMatch"), //
		jMethod<::java::awt::Rectangle(::javax::swing::tree::TreePath)>("getPathBounds"), //
		jMethod<::javax::swing::tree::TreePath(::jint, ::jint)>("getPathForLocation"), //
		jMethod<::javax::swing::tree::TreePath(::jint)>("getPathForRow"), //
		jMethod<::java::awt::Dimension()>("getPreferredScrollableViewportSize"), //
		jMethod<::java::awt::Rectangle(::jint)>("getRowBounds"), //
		jMethod<::jint()>("getRowCount"), //
		jMethod<::jint(::jint, ::jint)>("getRowForLocation"), //
		jMethod<::jint(::javax::swing::tree::TreePath)>("getRowForPath"), //
		jMethod<::jint()>("getRowHeight"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableBlockIncrement"), //
		jMethod<::jboolean()>("getScrollableTracksViewportHeight"), //
		jMethod<::jboolean()>("getScrollableTracksViewportWidth"), //
		jMethod<::jint(::java::awt::Rectangle, ::jint, ::jint)>("getScrollableUnitIncrement"), //
		jMethod<::jboolean()>("getScrollsOnExpand"), //
		jMethod<::jint()>("getSelectionCount"), //
		jMethod<::javax::swing::tree::TreeSelectionModel()>("getSelectionModel"), //
		jMethod<::javax::swing::tree::TreePath()>("getSelectionPath"), //
		jMethod<::javax::swing::tree::TreePath *()>("getSelectionPaths"), //
		jMethod<::jint *()>("getSelectionRows"), //
		jMethod<::jboolean()>("getShowsRootHandles"), //
		jMethod<::jint()>("getToggleClickCount"), //
		jMethod<::java::lang::String(::java::awt::event::MouseEvent)>("getToolTipText"), //
		jMethod<::javax::swing::event::TreeExpansionListener *()>("getTreeExpansionListeners"), //
		jMethod<::javax::swing::event::TreeSelectionListener *()>("getTreeSelectionListeners"), //
		jMethod<::javax::swing::event::TreeWillExpandListener *()>("getTreeWillExpandListeners"), //
		jMethod<::javax::swing::plaf::TreeUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getVisibleRowCount"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("hasBeenExpanded"), //
		jMethod<::jboolean(::jint)>("isCollapsed"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isCollapsed"), //
		jMethod<::jboolean()>("isEditable"), //
		jMethod<::jboolean()>("isEditing"), //
		jMethod<::jboolean(::jint)>("isExpanded"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isExpanded"), //
		jMethod<::jboolean()>("isFixedRowHeight"), //
		jMethod<::jboolean()>("isLargeModel"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isPathEditable"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isPathSelected"), //
		jMethod<::jboolean()>("isRootVisible"), //
		jMethod<::jboolean(::jint)>("isRowSelected"), //
		jMethod<::jboolean()>("isSelectionEmpty"), //
		jMethod<::jboolean(::javax::swing::tree::TreePath)>("isVisible"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("makeVisible"), //
		jMethod<::jvoid(::jint, ::jint)>("removeSelectionInterval"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("removeSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("removeSelectionPaths"), //
		jMethod<::jvoid(::jint)>("removeSelectionRow"), //
		jMethod<::jvoid(::jint *)>("removeSelectionRows"), //
		jMethod<::jvoid(::javax::swing::event::TreeExpansionListener)>("removeTreeExpansionListener"), //
		jMethod<::jvoid(::javax::swing::event::TreeSelectionListener)>("removeTreeSelectionListener"), //
		jMethod<::jvoid(::javax::swing::event::TreeWillExpandListener)>("removeTreeWillExpandListener"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("scrollPathToVisible"), //
		jMethod<::jvoid(::jint)>("scrollRowToVisible"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("setAnchorSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreeCellEditor)>("setCellEditor"), //
		jMethod<::jvoid(::javax::swing::tree::TreeCellRenderer)>("setCellRenderer"), //
		jMethod<::jvoid(::jboolean)>("setDragEnabled"), //
		jMethod<::jvoid(::javax::swing::DropMode)>("setDropMode"), //
		jMethod<::jvoid(::jboolean)>("setEditable"), //
		jMethod<::jvoid(::jboolean)>("setExpandsSelectedPaths"), //
		jMethod<::jvoid(::jboolean)>("setInvokesStopCellEditing"), //
		jMethod<::jvoid(::jboolean)>("setLargeModel"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("setLeadSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreeModel)>("setModel"), //
		jMethod<::jvoid(::jboolean)>("setRootVisible"), //
		jMethod<::jvoid(::jint)>("setRowHeight"), //
		jMethod<::jvoid(::jboolean)>("setScrollsOnExpand"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelectionInterval"), //
		jMethod<::jvoid(::javax::swing::tree::TreeSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("setSelectionPath"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath *)>("setSelectionPaths"), //
		jMethod<::jvoid(::jint)>("setSelectionRow"), //
		jMethod<::jvoid(::jint *)>("setSelectionRows"), //
		jMethod<::jvoid(::jboolean)>("setShowsRootHandles"), //
		jMethod<::jvoid(::jint)>("setToggleClickCount"), //
		jMethod<::jvoid(::javax::swing::plaf::TreeUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setVisibleRowCount"), //
		jMethod<::jvoid(::javax::swing::tree::TreePath)>("startEditingAtPath"), //
		jMethod<::jboolean()>("stopEditing"), //
		jMethod<::jvoid()>("treeDidChange"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionInterval")] != -1);
		return call<R>("addSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionPath")] != -1);
		return call<R>("addSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionPaths")] != -1);
		return call<R>("addSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionRow")] != -1);
		return call<R>("addSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionRows")] != -1);
		return call<R>("addSelectionRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTreeExpansionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeExpansionListener")] != -1);
		return call<R>("addTreeExpansionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTreeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeSelectionListener")] != -1);
		return call<R>("addTreeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTreeWillExpandListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTreeWillExpandListener")] != -1);
		return call<R>("addTreeWillExpandListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cancelEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelEditing")] != -1);
		return call<R>("cancelEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto collapsePath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("collapsePath")] != -1);
		return call<R>("collapsePath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto collapseRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("collapseRow")] != -1);
		return call<R>("collapseRow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto convertValueToText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertValueToText")] != -1);
		return call<R>("convertValueToText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto expandPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("expandPath")] != -1);
		return call<R>("expandPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto expandRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("expandRow")] != -1);
		return call<R>("expandRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTreeCollapsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTreeCollapsed")] != -1);
		return call<R>("fireTreeCollapsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTreeExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTreeExpanded")] != -1);
		return call<R>("fireTreeExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTreeWillCollapse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTreeWillCollapse")] != -1);
		return call<R>("fireTreeWillCollapse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fireTreeWillExpand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fireTreeWillExpand")] != -1);
		return call<R>("fireTreeWillExpand", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getAnchorSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnchorSelectionPath")] != -1);
		return call<R>("getAnchorSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeCellEditor, typename... Args>
	auto getCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellEditor")] != -1);
		return call<R>("getCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeCellRenderer, typename... Args>
	auto getCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCellRenderer")] != -1);
		return call<R>("getCellRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getClosestPathForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClosestPathForLocation")] != -1);
		return call<R>("getClosestPathForLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getClosestRowForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClosestRowForLocation")] != -1);
		return call<R>("getClosestRowForLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDragEnabled")] != -1);
		return call<R>("getDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JTree$DropLocation, typename... Args>
	auto getDropLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropLocation")] != -1);
		return call<R>("getDropLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::DropMode, typename... Args>
	auto getDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDropMode")] != -1);
		return call<R>("getDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getEditingPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEditingPath")] != -1);
		return call<R>("getEditingPath", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getExpandedDescendants(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandedDescendants")] != -1);
		return call<R>("getExpandedDescendants", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getExpandsSelectedPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExpandsSelectedPaths")] != -1);
		return call<R>("getExpandsSelectedPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInvokesStopCellEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvokesStopCellEditing")] != -1);
		return call<R>("getInvokesStopCellEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLastSelectedPathComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastSelectedPathComponent")] != -1);
		return call<R>("getLastSelectedPathComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getLeadSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSelectionPath")] != -1);
		return call<R>("getLeadSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSelectionRow")] != -1);
		return call<R>("getLeadSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxSelectionRow")] != -1);
		return call<R>("getMaxSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinSelectionRow")] != -1);
		return call<R>("getMinSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getNextMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextMatch")] != -1);
		return call<R>("getNextMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getPathBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathBounds")] != -1);
		return call<R>("getPathBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathForLocation")] != -1);
		return call<R>("getPathForLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getPathForRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathForRow")] != -1);
		return call<R>("getPathForRow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredScrollableViewportSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredScrollableViewportSize")] != -1);
		return call<R>("getPreferredScrollableViewportSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getRowBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowBounds")] != -1);
		return call<R>("getRowBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowCount")] != -1);
		return call<R>("getRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowForLocation")] != -1);
		return call<R>("getRowForLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowForPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowForPath")] != -1);
		return call<R>("getRowForPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowHeight")] != -1);
		return call<R>("getRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableBlockIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableBlockIncrement")] != -1);
		return call<R>("getScrollableBlockIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportHeight")] != -1);
		return call<R>("getScrollableTracksViewportHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollableTracksViewportWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableTracksViewportWidth")] != -1);
		return call<R>("getScrollableTracksViewportWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScrollableUnitIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollableUnitIncrement")] != -1);
		return call<R>("getScrollableUnitIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getScrollsOnExpand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScrollsOnExpand")] != -1);
		return call<R>("getScrollsOnExpand", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionCount")] != -1);
		return call<R>("getSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreeSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath, typename... Args>
	auto getSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionPath")] != -1);
		return call<R>("getSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::tree::TreePath *, typename... Args>
	auto getSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionPaths")] != -1);
		return call<R>("getSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectionRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionRows")] != -1);
		return call<R>("getSelectionRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShowsRootHandles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShowsRootHandles")] != -1);
		return call<R>("getShowsRootHandles", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getToggleClickCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToggleClickCount")] != -1);
		return call<R>("getToggleClickCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getToolTipText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolTipText")] != -1);
		return call<R>("getToolTipText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::TreeExpansionListener *, typename... Args>
	auto getTreeExpansionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTreeExpansionListeners")] != -1);
		return call<R>("getTreeExpansionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::TreeSelectionListener *, typename... Args>
	auto getTreeSelectionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTreeSelectionListeners")] != -1);
		return call<R>("getTreeSelectionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::TreeWillExpandListener *, typename... Args>
	auto getTreeWillExpandListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTreeWillExpandListeners")] != -1);
		return call<R>("getTreeWillExpandListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::TreeUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVisibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleRowCount")] != -1);
		return call<R>("getVisibleRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasBeenExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasBeenExpanded")] != -1);
		return call<R>("hasBeenExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCollapsed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCollapsed")] != -1);
		return call<R>("isCollapsed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditable")] != -1);
		return call<R>("isEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEditing")] != -1);
		return call<R>("isEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExpanded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExpanded")] != -1);
		return call<R>("isExpanded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixedRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixedRowHeight")] != -1);
		return call<R>("isFixedRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLargeModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLargeModel")] != -1);
		return call<R>("isLargeModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPathEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPathEditable")] != -1);
		return call<R>("isPathEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPathSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPathSelected")] != -1);
		return call<R>("isPathSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRootVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRootVisible")] != -1);
		return call<R>("isRootVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRowSelected")] != -1);
		return call<R>("isRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelectionEmpty")] != -1);
		return call<R>("isSelectionEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeVisible")] != -1);
		return call<R>("makeVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionInterval")] != -1);
		return call<R>("removeSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionPath")] != -1);
		return call<R>("removeSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionPaths")] != -1);
		return call<R>("removeSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionRow")] != -1);
		return call<R>("removeSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionRows")] != -1);
		return call<R>("removeSelectionRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeExpansionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeExpansionListener")] != -1);
		return call<R>("removeTreeExpansionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeSelectionListener")] != -1);
		return call<R>("removeTreeSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeTreeWillExpandListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeTreeWillExpandListener")] != -1);
		return call<R>("removeTreeWillExpandListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollPathToVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollPathToVisible")] != -1);
		return call<R>("scrollPathToVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto scrollRowToVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("scrollRowToVisible")] != -1);
		return call<R>("scrollRowToVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAnchorSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAnchorSelectionPath")] != -1);
		return call<R>("setAnchorSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellEditor")] != -1);
		return call<R>("setCellEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCellRenderer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCellRenderer")] != -1);
		return call<R>("setCellRenderer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDragEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDragEnabled")] != -1);
		return call<R>("setDragEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDropMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDropMode")] != -1);
		return call<R>("setDropMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEditable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEditable")] != -1);
		return call<R>("setEditable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandsSelectedPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandsSelectedPaths")] != -1);
		return call<R>("setExpandsSelectedPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInvokesStopCellEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInvokesStopCellEditing")] != -1);
		return call<R>("setInvokesStopCellEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLargeModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLargeModel")] != -1);
		return call<R>("setLargeModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeadSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeadSelectionPath")] != -1);
		return call<R>("setLeadSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRootVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRootVisible")] != -1);
		return call<R>("setRootVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowHeight")] != -1);
		return call<R>("setRowHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScrollsOnExpand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScrollsOnExpand")] != -1);
		return call<R>("setScrollsOnExpand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionInterval")] != -1);
		return call<R>("setSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionPath")] != -1);
		return call<R>("setSelectionPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionPaths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionPaths")] != -1);
		return call<R>("setSelectionPaths", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionRow")] != -1);
		return call<R>("setSelectionRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionRows")] != -1);
		return call<R>("setSelectionRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowsRootHandles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowsRootHandles")] != -1);
		return call<R>("setShowsRootHandles", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setToggleClickCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setToggleClickCount")] != -1);
		return call<R>("setToggleClickCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisibleRowCount")] != -1);
		return call<R>("setVisibleRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEditingAtPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startEditingAtPath")] != -1);
		return call<R>("startEditingAtPath", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stopEditing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopEditing")] != -1);
		return call<R>("stopEditing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto treeDidChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("treeDidChange")] != -1);
		return call<R>("treeDidChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
