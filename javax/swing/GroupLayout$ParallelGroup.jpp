#ifndef javax_swing_GroupLayout$ParallelGroup_HPP
#define javax_swing_GroupLayout$ParallelGroup_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::GroupLayout$ParallelGroup : public jObject<::javax::swing::GroupLayout$ParallelGroup, ::javax::swing::GroupLayout$Group> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "GroupLayout$ParallelGroup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::GroupLayout$Group(::java::awt::Component)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::java::awt::Component)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$Group(::java::awt::Component, ::jint, ::jint, ::jint)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::java::awt::Component, ::jint, ::jint, ::jint)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::java::awt::Component, ::javax::swing::GroupLayout$Alignment)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::java::awt::Component, ::javax::swing::GroupLayout$Alignment, ::jint, ::jint, ::jint)>("addComponent"), //
		jMethod<::javax::swing::GroupLayout$Group(::jint)>("addGap"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::jint)>("addGap"), //
		jMethod<::javax::swing::GroupLayout$Group(::jint, ::jint, ::jint)>("addGap"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::jint, ::jint, ::jint)>("addGap"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::javax::swing::GroupLayout$Alignment, ::javax::swing::GroupLayout$Group)>("addGroup"), //
		jMethod<::javax::swing::GroupLayout$Group(::javax::swing::GroupLayout$Group)>("addGroup"), //
		jMethod<::javax::swing::GroupLayout$ParallelGroup(::javax::swing::GroupLayout$Group)>("addGroup"), //
	};

	template<typename R = ::javax::swing::GroupLayout$Group, typename... Args>
	auto addComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addComponent")] != -1);
		return call<R>("addComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$Group, typename... Args>
	auto addGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addGap")] != -1);
		return call<R>("addGap", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$ParallelGroup, typename... Args>
	auto addGroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addGroup")] != -1);
		return call<R>("addGroup", std::forward<Args>(args)...);
	}

};

#endif
