#ifndef javax_swing_JLabel_HPP
#define javax_swing_JLabel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JLabel : public jObject<::javax::swing::JLabel, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JLabel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::swing::Icon, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::Icon)>(), //
		jConstructor<::jvoid(::javax::swing::Icon, ::jint)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Icon()>("getDisabledIcon"), //
		jMethod<::jint()>("getDisplayedMnemonic"), //
		jMethod<::jint()>("getDisplayedMnemonicIndex"), //
		jMethod<::jint()>("getHorizontalAlignment"), //
		jMethod<::jint()>("getHorizontalTextPosition"), //
		jMethod<::javax::swing::Icon()>("getIcon"), //
		jMethod<::jint()>("getIconTextGap"), //
		jMethod<::java::awt::Component()>("getLabelFor"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::javax::swing::plaf::LabelUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getVerticalAlignment"), //
		jMethod<::jint()>("getVerticalTextPosition"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setDisabledIcon"), //
		jMethod<::jvoid(::jchar)>("setDisplayedMnemonic"), //
		jMethod<::jvoid(::jint)>("setDisplayedMnemonic"), //
		jMethod<::jvoid(::jint)>("setDisplayedMnemonicIndex"), //
		jMethod<::jvoid(::jint)>("setHorizontalAlignment"), //
		jMethod<::jvoid(::jint)>("setHorizontalTextPosition"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setIcon"), //
		jMethod<::jvoid(::jint)>("setIconTextGap"), //
		jMethod<::jvoid(::java::awt::Component)>("setLabelFor"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::javax::swing::plaf::LabelUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setVerticalAlignment"), //
		jMethod<::jvoid(::jint)>("setVerticalTextPosition"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayedMnemonic")] != -1);
		return call<R>("getDisplayedMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDisplayedMnemonicIndex")] != -1);
		return call<R>("getDisplayedMnemonicIndex", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHorizontalAlignment")] != -1);
		return call<R>("getHorizontalAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHorizontalTextPosition")] != -1);
		return call<R>("getHorizontalTextPosition", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIconTextGap")] != -1);
		return call<R>("getIconTextGap", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getLabelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLabelFor")] != -1);
		return call<R>("getLabelFor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::LabelUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVerticalAlignment")] != -1);
		return call<R>("getVerticalAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVerticalTextPosition")] != -1);
		return call<R>("getVerticalTextPosition", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisabledIcon")] != -1);
		return call<R>("setDisabledIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisplayedMnemonic")] != -1);
		return call<R>("setDisplayedMnemonic", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDisplayedMnemonicIndex")] != -1);
		return call<R>("setDisplayedMnemonicIndex", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHorizontalAlignment")] != -1);
		return call<R>("setHorizontalAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setHorizontalTextPosition")] != -1);
		return call<R>("setHorizontalTextPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIcon")] != -1);
		return call<R>("setIcon", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setIconTextGap")] != -1);
		return call<R>("setIconTextGap", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLabelFor")] != -1);
		return call<R>("setLabelFor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVerticalAlignment")] != -1);
		return call<R>("setVerticalAlignment", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setVerticalTextPosition")] != -1);
		return call<R>("setVerticalTextPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
