#ifndef javax_swing_JLabel_HPP
#define javax_swing_JLabel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JLabel : public jObject<::javax::swing::JLabel, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JLabel";

	constexpr static Enume field_signatures{
		jField<::jint>("BOTTOM"), //
		jField<::jint>("CENTER"), //
		jField<::jint>("EAST"), //
		jField<::jint>("HORIZONTAL"), //
		jField<::jint>("LEADING"), //
		jField<::jint>("LEFT"), //
		jField<::jint>("NEXT"), //
		jField<::jint>("NORTH"), //
		jField<::jint>("NORTH_EAST"), //
		jField<::jint>("NORTH_WEST"), //
		jField<::jint>("PREVIOUS"), //
		jField<::jint>("RIGHT"), //
		jField<::jint>("SOUTH"), //
		jField<::jint>("SOUTH_EAST"), //
		jField<::jint>("SOUTH_WEST"), //
		jField<::jint>("TOP"), //
		jField<::jint>("TRAILING"), //
		jField<::jint>("VERTICAL"), //
		jField<::jint>("WEST"), //
	};

	template<typename F = ::jint>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::jint>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::jint>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::jint>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::jint>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::jint>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::jint>
	static auto NEXT() {
		static_assert(field_signatures[jField<F>("NEXT")] != -1);
		return sat<F>("NEXT");
	}

	template<typename F = ::jint>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::jint>
	static auto NORTH_EAST() {
		static_assert(field_signatures[jField<F>("NORTH_EAST")] != -1);
		return sat<F>("NORTH_EAST");
	}

	template<typename F = ::jint>
	static auto NORTH_WEST() {
		static_assert(field_signatures[jField<F>("NORTH_WEST")] != -1);
		return sat<F>("NORTH_WEST");
	}

	template<typename F = ::jint>
	static auto PREVIOUS() {
		static_assert(field_signatures[jField<F>("PREVIOUS")] != -1);
		return sat<F>("PREVIOUS");
	}

	template<typename F = ::jint>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::jint>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::jint>
	static auto SOUTH_EAST() {
		static_assert(field_signatures[jField<F>("SOUTH_EAST")] != -1);
		return sat<F>("SOUTH_EAST");
	}

	template<typename F = ::jint>
	static auto SOUTH_WEST() {
		static_assert(field_signatures[jField<F>("SOUTH_WEST")] != -1);
		return sat<F>("SOUTH_WEST");
	}

	template<typename F = ::jint>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	template<typename F = ::jint>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	template<typename F = ::jint>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::jint>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::swing::Icon, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::Icon)>(), //
		jConstructor<::jvoid(::javax::swing::Icon, ::jint)>(), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::Icon()>("getDisabledIcon"), //
		jMethod<::jint()>("getDisplayedMnemonic"), //
		jMethod<::jint()>("getDisplayedMnemonicIndex"), //
		jMethod<::jint()>("getHorizontalAlignment"), //
		jMethod<::jint()>("getHorizontalTextPosition"), //
		jMethod<::javax::swing::Icon()>("getIcon"), //
		jMethod<::jint()>("getIconTextGap"), //
		jMethod<::java::awt::Component()>("getLabelFor"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::javax::swing::plaf::LabelUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getVerticalAlignment"), //
		jMethod<::jint()>("getVerticalTextPosition"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setDisabledIcon"), //
		jMethod<::jvoid(::jchar)>("setDisplayedMnemonic"), //
		jMethod<::jvoid(::jint)>("setDisplayedMnemonic"), //
		jMethod<::jvoid(::jint)>("setDisplayedMnemonicIndex"), //
		jMethod<::jvoid(::jint)>("setHorizontalAlignment"), //
		jMethod<::jvoid(::jint)>("setHorizontalTextPosition"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setIcon"), //
		jMethod<::jvoid(::jint)>("setIconTextGap"), //
		jMethod<::jvoid(::java::awt::Component)>("setLabelFor"), //
		jMethod<::jvoid(::java::lang::String)>("setText"), //
		jMethod<::jvoid(::javax::swing::plaf::LabelUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setVerticalAlignment"), //
		jMethod<::jvoid(::jint)>("setVerticalTextPosition"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayedMnemonic")] != -1);
		return call<R>("getDisplayedMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisplayedMnemonicIndex")] != -1);
		return call<R>("getDisplayedMnemonicIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalAlignment")] != -1);
		return call<R>("getHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHorizontalTextPosition")] != -1);
		return call<R>("getHorizontalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIconTextGap")] != -1);
		return call<R>("getIconTextGap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getLabelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabelFor")] != -1);
		return call<R>("getLabelFor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::LabelUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalAlignment")] != -1);
		return call<R>("getVerticalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVerticalTextPosition")] != -1);
		return call<R>("getVerticalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisabledIcon")] != -1);
		return call<R>("setDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayedMnemonic")] != -1);
		return call<R>("setDisplayedMnemonic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDisplayedMnemonicIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDisplayedMnemonicIndex")] != -1);
		return call<R>("setDisplayedMnemonicIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalAlignment")] != -1);
		return call<R>("setHorizontalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHorizontalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHorizontalTextPosition")] != -1);
		return call<R>("setHorizontalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIcon")] != -1);
		return call<R>("setIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIconTextGap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIconTextGap")] != -1);
		return call<R>("setIconTextGap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabelFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabelFor")] != -1);
		return call<R>("setLabelFor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setText")] != -1);
		return call<R>("setText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalAlignment")] != -1);
		return call<R>("setVerticalAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVerticalTextPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVerticalTextPosition")] != -1);
		return call<R>("setVerticalTextPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
