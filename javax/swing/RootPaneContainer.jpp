#ifndef javax_swing_RootPaneContainer_HPP
#define javax_swing_RootPaneContainer_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RootPaneContainer : public jObject<::javax::swing::RootPaneContainer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RootPaneContainer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::awt::Container()>("getContentPane"), //
		jMethod<::java::awt::Component()>("getGlassPane"), //
		jMethod<::javax::swing::JLayeredPane()>("getLayeredPane"), //
		jMethod<::javax::swing::JRootPane()>("getRootPane"), //
		jMethod<::jvoid(::java::awt::Container)>("setContentPane"), //
		jMethod<::jvoid(::java::awt::Component)>("setGlassPane"), //
		jMethod<::jvoid(::javax::swing::JLayeredPane)>("setLayeredPane"), //
	};

	template<typename R = ::java::awt::Container, typename... Args>
	auto getContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentPane")] != -1);
		return call<R>("getContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlassPane")] != -1);
		return call<R>("getGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JLayeredPane, typename... Args>
	auto getLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayeredPane")] != -1);
		return call<R>("getLayeredPane", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::JRootPane, typename... Args>
	auto getRootPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPane")] != -1);
		return call<R>("getRootPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentPane")] != -1);
		return call<R>("setContentPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlassPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlassPane")] != -1);
		return call<R>("setGlassPane", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLayeredPane(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLayeredPane")] != -1);
		return call<R>("setLayeredPane", std::forward<Args>(args)...);
	}

};

#endif
