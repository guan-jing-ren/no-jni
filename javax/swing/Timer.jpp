#ifndef javax_swing_Timer_HPP
#define javax_swing_Timer_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::Timer : public jObject<::javax::swing::Timer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "Timer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::java::awt::event::ActionListener)>(), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("addActionListener"), //
		jMethod<::java::lang::String()>("getActionCommand"), //
		jMethod<::java::awt::event::ActionListener *()>("getActionListeners"), //
		jMethod<::jint()>("getDelay"), //
		jMethod<::jint()>("getInitialDelay"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jboolean()>("getLogTimers"), //
		jMethod<::jboolean()>("isCoalesce"), //
		jMethod<::jboolean()>("isRepeats"), //
		jMethod<::jboolean()>("isRunning"), //
		jMethod<::jvoid(::java::awt::event::ActionListener)>("removeActionListener"), //
		jMethod<::jvoid()>("restart"), //
		jMethod<::jvoid(::java::lang::String)>("setActionCommand"), //
		jMethod<::jvoid(::jboolean)>("setCoalesce"), //
		jMethod<::jvoid(::jint)>("setDelay"), //
		jMethod<::jvoid(::jint)>("setInitialDelay"), //
		jMethod<::jvoid(::jboolean)>("setLogTimers"), //
		jMethod<::jvoid(::jboolean)>("setRepeats"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addActionListener")] != -1);
		return call<R>("addActionListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionCommand")] != -1);
		return call<R>("getActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::java::awt::event::ActionListener *, typename... Args>
	auto getActionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getActionListeners")] != -1);
		return call<R>("getActionListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDelay")] != -1);
		return call<R>("getDelay", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInitialDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInitialDelay")] != -1);
		return call<R>("getInitialDelay", forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getLogTimers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLogTimers")] != -1);
		return scall<R>("getLogTimers", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCoalesce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCoalesce")] != -1);
		return call<R>("isCoalesce", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRepeats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRepeats")] != -1);
		return call<R>("isRepeats", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRunning")] != -1);
		return call<R>("isRunning", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeActionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeActionListener")] != -1);
		return call<R>("removeActionListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto restart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("restart")] != -1);
		return call<R>("restart", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActionCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setActionCommand")] != -1);
		return call<R>("setActionCommand", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCoalesce(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCoalesce")] != -1);
		return call<R>("setCoalesce", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDelay")] != -1);
		return call<R>("setDelay", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitialDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInitialDelay")] != -1);
		return call<R>("setInitialDelay", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLogTimers(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLogTimers")] != -1);
		return scall<R>("setLogTimers", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRepeats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRepeats")] != -1);
		return call<R>("setRepeats", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("start")] != -1);
		return call<R>("start", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", forward<Args>(args)...);
	}

};

#endif
