#ifndef javax_swing_JSlider_HPP
#define javax_swing_JSlider_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JSlider : public jObject<::javax::swing::JSlider, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JSlider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::javax::swing::BoundedRangeModel)>(), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("addChangeListener"), //
		jMethod<::java::util::Hashtable(::jint)>("createStandardLabels"), //
		jMethod<::java::util::Hashtable(::jint, ::jint)>("createStandardLabels"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::javax::swing::event::ChangeListener *()>("getChangeListeners"), //
		jMethod<::jint()>("getExtent"), //
		jMethod<::jboolean()>("getInverted"), //
		jMethod<::java::util::Dictionary()>("getLabelTable"), //
		jMethod<::jint()>("getMajorTickSpacing"), //
		jMethod<::jint()>("getMaximum"), //
		jMethod<::jint()>("getMinimum"), //
		jMethod<::jint()>("getMinorTickSpacing"), //
		jMethod<::javax::swing::BoundedRangeModel()>("getModel"), //
		jMethod<::jint()>("getOrientation"), //
		jMethod<::jboolean()>("getPaintLabels"), //
		jMethod<::jboolean()>("getPaintTicks"), //
		jMethod<::jboolean()>("getPaintTrack"), //
		jMethod<::jboolean()>("getSnapToTicks"), //
		jMethod<::javax::swing::plaf::SliderUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jboolean(::java::awt::Image, ::jint, ::jint, ::jint, ::jint, ::jint)>("imageUpdate"), //
		jMethod<::jvoid(::javax::swing::event::ChangeListener)>("removeChangeListener"), //
		jMethod<::jvoid(::jint)>("setExtent"), //
		jMethod<::jvoid(::java::awt::Font)>("setFont"), //
		jMethod<::jvoid(::jboolean)>("setInverted"), //
		jMethod<::jvoid(::java::util::Dictionary)>("setLabelTable"), //
		jMethod<::jvoid(::jint)>("setMajorTickSpacing"), //
		jMethod<::jvoid(::jint)>("setMaximum"), //
		jMethod<::jvoid(::jint)>("setMinimum"), //
		jMethod<::jvoid(::jint)>("setMinorTickSpacing"), //
		jMethod<::jvoid(::javax::swing::BoundedRangeModel)>("setModel"), //
		jMethod<::jvoid(::jint)>("setOrientation"), //
		jMethod<::jvoid(::jboolean)>("setPaintLabels"), //
		jMethod<::jvoid(::jboolean)>("setPaintTicks"), //
		jMethod<::jvoid(::jboolean)>("setPaintTrack"), //
		jMethod<::jvoid(::jboolean)>("setSnapToTicks"), //
		jMethod<::jvoid(::javax::swing::plaf::SliderUI)>("setUI"), //
		jMethod<::jvoid(::jint)>("setValue"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addChangeListener")] != -1);
		return call<R>("addChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto createStandardLabels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createStandardLabels")] != -1);
		return call<R>("createStandardLabels", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ChangeListener *, typename... Args>
	auto getChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChangeListeners")] != -1);
		return call<R>("getChangeListeners", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getExtent")] != -1);
		return call<R>("getExtent", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getInverted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInverted")] != -1);
		return call<R>("getInverted", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Dictionary, typename... Args>
	auto getLabelTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLabelTable")] != -1);
		return call<R>("getLabelTable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMajorTickSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMajorTickSpacing")] != -1);
		return call<R>("getMajorTickSpacing", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinorTickSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinorTickSpacing")] != -1);
		return call<R>("getMinorTickSpacing", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::BoundedRangeModel, typename... Args>
	auto getModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getModel")] != -1);
		return call<R>("getModel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOrientation")] != -1);
		return call<R>("getOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPaintLabels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPaintLabels")] != -1);
		return call<R>("getPaintLabels", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPaintTicks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPaintTicks")] != -1);
		return call<R>("getPaintTicks", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPaintTrack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPaintTrack")] != -1);
		return call<R>("getPaintTrack", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSnapToTicks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSnapToTicks")] != -1);
		return call<R>("getSnapToTicks", forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::SliderUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto imageUpdate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("imageUpdate")] != -1);
		return call<R>("imageUpdate", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeChangeListener")] != -1);
		return call<R>("removeChangeListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExtent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setExtent")] != -1);
		return call<R>("setExtent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFont")] != -1);
		return call<R>("setFont", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInverted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setInverted")] != -1);
		return call<R>("setInverted", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabelTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLabelTable")] != -1);
		return call<R>("setLabelTable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMajorTickSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMajorTickSpacing")] != -1);
		return call<R>("setMajorTickSpacing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMaximum")] != -1);
		return call<R>("setMaximum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinimum")] != -1);
		return call<R>("setMinimum", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinorTickSpacing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMinorTickSpacing")] != -1);
		return call<R>("setMinorTickSpacing", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModel")] != -1);
		return call<R>("setModel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOrientation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOrientation")] != -1);
		return call<R>("setOrientation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintLabels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPaintLabels")] != -1);
		return call<R>("setPaintLabels", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintTicks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPaintTicks")] != -1);
		return call<R>("setPaintTicks", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPaintTrack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPaintTrack")] != -1);
		return call<R>("setPaintTrack", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSnapToTicks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSnapToTicks")] != -1);
		return call<R>("setSnapToTicks", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", forward<Args>(args)...);
	}

};

#endif
