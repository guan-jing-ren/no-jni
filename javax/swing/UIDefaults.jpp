#ifndef javax_swing_UIDefaults_HPP
#define javax_swing_UIDefaults_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::UIDefaults : public jObject<::javax::swing::UIDefaults, ::java::util::Hashtable> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "UIDefaults";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jfloat)>(), //
		jConstructor<::jvoid(::java::lang::Object *)>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String)>("addResourceBundle"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::Locale)>("get"), //
		jMethod<::jboolean(::java::lang::Object)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::Object, ::java::util::Locale)>("getBoolean"), //
		jMethod<::javax::swing::border::Border(::java::lang::Object)>("getBorder"), //
		jMethod<::javax::swing::border::Border(::java::lang::Object, ::java::util::Locale)>("getBorder"), //
		jMethod<::java::awt::Color(::java::lang::Object)>("getColor"), //
		jMethod<::java::awt::Color(::java::lang::Object, ::java::util::Locale)>("getColor"), //
		jMethod<::java::util::Locale()>("getDefaultLocale"), //
		jMethod<::java::awt::Dimension(::java::lang::Object)>("getDimension"), //
		jMethod<::java::awt::Dimension(::java::lang::Object, ::java::util::Locale)>("getDimension"), //
		jMethod<::java::awt::Font(::java::lang::Object)>("getFont"), //
		jMethod<::java::awt::Font(::java::lang::Object, ::java::util::Locale)>("getFont"), //
		jMethod<::javax::swing::Icon(::java::lang::Object)>("getIcon"), //
		jMethod<::javax::swing::Icon(::java::lang::Object, ::java::util::Locale)>("getIcon"), //
		jMethod<::java::awt::Insets(::java::lang::Object)>("getInsets"), //
		jMethod<::java::awt::Insets(::java::lang::Object, ::java::util::Locale)>("getInsets"), //
		jMethod<::jint(::java::lang::Object)>("getInt"), //
		jMethod<::jint(::java::lang::Object, ::java::util::Locale)>("getInt"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::java::lang::String(::java::lang::Object)>("getString"), //
		jMethod<::java::lang::String(::java::lang::Object, ::java::util::Locale)>("getString"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("getUI"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getUIClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::ClassLoader)>("getUIClass"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::lang::Object *)>("putDefaults"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String)>("removeResourceBundle"), //
		jMethod<::jvoid(::java::util::Locale)>("setDefaultLocale"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addResourceBundle")] != -1);
		return call<R>("addResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return call<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	auto getBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return call<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	auto getColor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return call<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getDefaultLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultLocale")] != -1);
		return call<R>("getDefaultLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getDimension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDimension")] != -1);
		return call<R>("getDimension", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	auto getFont(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return call<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return call<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return call<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	auto getPropertyChangeListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return call<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getString")] != -1);
		return call<R>("getString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getUIClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClass")] != -1);
		return call<R>("getUIClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putDefaults")] != -1);
		return call<R>("putDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeResourceBundle")] != -1);
		return call<R>("removeResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultLocale")] != -1);
		return call<R>("setDefaultLocale", std::forward<Args>(args)...);
	}

};

#endif
