#ifndef javax_swing_SpringLayout_HPP
#define javax_swing_SpringLayout_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::SpringLayout : public jObject<::javax::swing::SpringLayout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "SpringLayout";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BASELINE"), //
		jField<::java::lang::String>("EAST"), //
		jField<::java::lang::String>("HEIGHT"), //
		jField<::java::lang::String>("HORIZONTAL_CENTER"), //
		jField<::java::lang::String>("NORTH"), //
		jField<::java::lang::String>("SOUTH"), //
		jField<::java::lang::String>("VERTICAL_CENTER"), //
		jField<::java::lang::String>("WEST"), //
		jField<::java::lang::String>("WIDTH"), //
	};

	template<typename F = ::java::lang::String>
	static auto BASELINE() {
		static_assert(field_signatures[jField<F>("BASELINE")] != -1);
		return sat<F>("BASELINE");
	}

	template<typename F = ::java::lang::String>
	static auto EAST() {
		static_assert(field_signatures[jField<F>("EAST")] != -1);
		return sat<F>("EAST");
	}

	template<typename F = ::java::lang::String>
	static auto HEIGHT() {
		static_assert(field_signatures[jField<F>("HEIGHT")] != -1);
		return sat<F>("HEIGHT");
	}

	template<typename F = ::java::lang::String>
	static auto HORIZONTAL_CENTER() {
		static_assert(field_signatures[jField<F>("HORIZONTAL_CENTER")] != -1);
		return sat<F>("HORIZONTAL_CENTER");
	}

	template<typename F = ::java::lang::String>
	static auto NORTH() {
		static_assert(field_signatures[jField<F>("NORTH")] != -1);
		return sat<F>("NORTH");
	}

	template<typename F = ::java::lang::String>
	static auto SOUTH() {
		static_assert(field_signatures[jField<F>("SOUTH")] != -1);
		return sat<F>("SOUTH");
	}

	template<typename F = ::java::lang::String>
	static auto VERTICAL_CENTER() {
		static_assert(field_signatures[jField<F>("VERTICAL_CENTER")] != -1);
		return sat<F>("VERTICAL_CENTER");
	}

	template<typename F = ::java::lang::String>
	static auto WEST() {
		static_assert(field_signatures[jField<F>("WEST")] != -1);
		return sat<F>("WEST");
	}

	template<typename F = ::java::lang::String>
	static auto WIDTH() {
		static_assert(field_signatures[jField<F>("WIDTH")] != -1);
		return sat<F>("WIDTH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::Component, ::java::lang::Object)>("addLayoutComponent"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::javax::swing::Spring(::java::lang::String, ::java::awt::Component)>("getConstraint"), //
		jMethod<::javax::swing::SpringLayout$Constraints(::java::awt::Component)>("getConstraints"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentX"), //
		jMethod<::jfloat(::java::awt::Container)>("getLayoutAlignmentY"), //
		jMethod<::jvoid(::java::awt::Container)>("invalidateLayout"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("maximumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component, ::jint, ::java::lang::String, ::java::awt::Component)>("putConstraint"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component, ::javax::swing::Spring, ::java::lang::String, ::java::awt::Component)>("putConstraint"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Spring, typename... Args>
	auto getConstraint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstraint")] != -1);
		return call<R>("getConstraint", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SpringLayout$Constraints, typename... Args>
	auto getConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstraints")] != -1);
		return call<R>("getConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentX")] != -1);
		return call<R>("getLayoutAlignmentX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLayoutAlignmentY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutAlignmentY")] != -1);
		return call<R>("getLayoutAlignmentY", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidateLayout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidateLayout")] != -1);
		return call<R>("invalidateLayout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto maximumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximumLayoutSize")] != -1);
		return call<R>("maximumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putConstraint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putConstraint")] != -1);
		return call<R>("putConstraint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

};

#endif
