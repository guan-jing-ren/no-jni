#ifndef javax_swing_UIManager_HPP
#define javax_swing_UIManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::UIManager : public jObject<::javax::swing::UIManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "UIManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::LookAndFeel)>("addAuxiliaryLookAndFeel"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::Locale)>("get"), //
		jMethod<::javax::swing::LookAndFeel *()>("getAuxiliaryLookAndFeels"), //
		jMethod<::jboolean(::java::lang::Object)>("getBoolean"), //
		jMethod<::jboolean(::java::lang::Object, ::java::util::Locale)>("getBoolean"), //
		jMethod<::javax::swing::border::Border(::java::lang::Object)>("getBorder"), //
		jMethod<::javax::swing::border::Border(::java::lang::Object, ::java::util::Locale)>("getBorder"), //
		jMethod<::java::awt::Color(::java::lang::Object)>("getColor"), //
		jMethod<::java::awt::Color(::java::lang::Object, ::java::util::Locale)>("getColor"), //
		jMethod<::java::lang::String()>("getCrossPlatformLookAndFeelClassName"), //
		jMethod<::javax::swing::UIDefaults()>("getDefaults"), //
		jMethod<::java::awt::Dimension(::java::lang::Object)>("getDimension"), //
		jMethod<::java::awt::Dimension(::java::lang::Object, ::java::util::Locale)>("getDimension"), //
		jMethod<::java::awt::Font(::java::lang::Object)>("getFont"), //
		jMethod<::java::awt::Font(::java::lang::Object, ::java::util::Locale)>("getFont"), //
		jMethod<::javax::swing::Icon(::java::lang::Object)>("getIcon"), //
		jMethod<::javax::swing::Icon(::java::lang::Object, ::java::util::Locale)>("getIcon"), //
		jMethod<::java::awt::Insets(::java::lang::Object)>("getInsets"), //
		jMethod<::java::awt::Insets(::java::lang::Object, ::java::util::Locale)>("getInsets"), //
		jMethod<::javax::swing::UIManager$LookAndFeelInfo *()>("getInstalledLookAndFeels"), //
		jMethod<::jint(::java::lang::Object)>("getInt"), //
		jMethod<::jint(::java::lang::Object, ::java::util::Locale)>("getInt"), //
		jMethod<::javax::swing::LookAndFeel()>("getLookAndFeel"), //
		jMethod<::javax::swing::UIDefaults()>("getLookAndFeelDefaults"), //
		jMethod<::java::beans::PropertyChangeListener *()>("getPropertyChangeListeners"), //
		jMethod<::java::lang::String(::java::lang::Object)>("getString"), //
		jMethod<::java::lang::String(::java::lang::Object, ::java::util::Locale)>("getString"), //
		jMethod<::java::lang::String()>("getSystemLookAndFeelClassName"), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("getUI"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("installLookAndFeel"), //
		jMethod<::jvoid(::javax::swing::UIManager$LookAndFeelInfo)>("installLookAndFeel"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jboolean(::javax::swing::LookAndFeel)>("removeAuxiliaryLookAndFeel"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::javax::swing::UIManager$LookAndFeelInfo *)>("setInstalledLookAndFeels"), //
		jMethod<::jvoid(::java::lang::String)>("setLookAndFeel"), //
		jMethod<::jvoid(::javax::swing::LookAndFeel)>("setLookAndFeel"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addAuxiliaryLookAndFeel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAuxiliaryLookAndFeel")] != -1);
		return scall<R>("addAuxiliaryLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto addPropertyChangeListener(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return scall<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LookAndFeel *, typename... Args>
	static auto getAuxiliaryLookAndFeels(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuxiliaryLookAndFeels")] != -1);
		return scall<R>("getAuxiliaryLookAndFeels", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getBoolean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBoolean")] != -1);
		return scall<R>("getBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorder")] != -1);
		return scall<R>("getBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Color, typename... Args>
	static auto getColor(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColor")] != -1);
		return scall<R>("getColor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getCrossPlatformLookAndFeelClassName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCrossPlatformLookAndFeelClassName")] != -1);
		return scall<R>("getCrossPlatformLookAndFeelClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	static auto getDefaults(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaults")] != -1);
		return scall<R>("getDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	static auto getDimension(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDimension")] != -1);
		return scall<R>("getDimension", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Font, typename... Args>
	static auto getFont(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFont")] != -1);
		return scall<R>("getFont", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIcon")] != -1);
		return scall<R>("getIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	static auto getInsets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInsets")] != -1);
		return scall<R>("getInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIManager$LookAndFeelInfo *, typename... Args>
	static auto getInstalledLookAndFeels(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstalledLookAndFeels")] != -1);
		return scall<R>("getInstalledLookAndFeels", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return scall<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LookAndFeel, typename... Args>
	static auto getLookAndFeel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLookAndFeel")] != -1);
		return scall<R>("getLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	static auto getLookAndFeelDefaults(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLookAndFeelDefaults")] != -1);
		return scall<R>("getLookAndFeelDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::PropertyChangeListener *, typename... Args>
	static auto getPropertyChangeListeners(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyChangeListeners")] != -1);
		return scall<R>("getPropertyChangeListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getString")] != -1);
		return scall<R>("getString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getSystemLookAndFeelClassName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemLookAndFeelClassName")] != -1);
		return scall<R>("getSystemLookAndFeelClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto getUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return scall<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto installLookAndFeel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("installLookAndFeel")] != -1);
		return scall<R>("installLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto put(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return scall<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto removeAuxiliaryLookAndFeel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAuxiliaryLookAndFeel")] != -1);
		return scall<R>("removeAuxiliaryLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto removePropertyChangeListener(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return scall<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setInstalledLookAndFeels(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInstalledLookAndFeels")] != -1);
		return scall<R>("setInstalledLookAndFeels", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLookAndFeel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLookAndFeel")] != -1);
		return scall<R>("setLookAndFeel", std::forward<Args>(args)...);
	}

};

#endif
