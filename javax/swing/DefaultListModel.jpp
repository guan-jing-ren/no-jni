#ifndef javax_swing_DefaultListModel_HPP
#define javax_swing_DefaultListModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultListModel : public jObject<::javax::swing::DefaultListModel, ::javax::swing::AbstractListModel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultListModel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("add"), //
		jMethod<::jvoid(::java::lang::Object)>("addElement"), //
		jMethod<::jint()>("capacity"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::jvoid(::java::lang::Object *)>("copyInto"), //
		jMethod<::java::lang::Object(::jint)>("elementAt"), //
		jMethod<::java::util::Enumeration()>("elements"), //
		jMethod<::jvoid(::jint)>("ensureCapacity"), //
		jMethod<::java::lang::Object()>("firstElement"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::java::lang::Object(::jint)>("getElementAt"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint(::java::lang::Object)>("indexOf"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("indexOf"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("insertElementAt"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::lang::Object()>("lastElement"), //
		jMethod<::jint(::java::lang::Object)>("lastIndexOf"), //
		jMethod<::jint(::java::lang::Object, ::jint)>("lastIndexOf"), //
		jMethod<::java::lang::Object(::jint)>("remove"), //
		jMethod<::jvoid()>("removeAllElements"), //
		jMethod<::jboolean(::java::lang::Object)>("removeElement"), //
		jMethod<::jvoid(::jint)>("removeElementAt"), //
		jMethod<::jvoid(::jint, ::jint)>("removeRange"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("set"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("setElementAt"), //
		jMethod<::jvoid(::jint)>("setSize"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("trimToSize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addElement")] != -1);
		return call<R>("addElement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto capacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("capacity")] != -1);
		return call<R>("capacity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto copyInto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("copyInto")] != -1);
		return call<R>("copyInto", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto elementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("elementAt")] != -1);
		return call<R>("elementAt", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto elements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("elements")] != -1);
		return call<R>("elements", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ensureCapacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("ensureCapacity")] != -1);
		return call<R>("ensureCapacity", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto firstElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("firstElement")] != -1);
		return call<R>("firstElement", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getElementAt")] != -1);
		return call<R>("getElementAt", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("insertElementAt")] != -1);
		return call<R>("insertElementAt", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lastElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lastElement")] != -1);
		return call<R>("lastElement", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lastIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lastIndexOf")] != -1);
		return call<R>("lastIndexOf", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllElements")] != -1);
		return call<R>("removeAllElements", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeElement")] != -1);
		return call<R>("removeElement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeElementAt")] != -1);
		return call<R>("removeElementAt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeRange")] != -1);
		return call<R>("removeRange", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElementAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setElementAt")] != -1);
		return call<R>("setElementAt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trimToSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("trimToSize")] != -1);
		return call<R>("trimToSize", forward<Args>(args)...);
	}

};

#endif
