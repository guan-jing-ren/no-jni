#ifndef javax_swing_RowFilter$ComparisonType_HPP
#define javax_swing_RowFilter$ComparisonType_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::RowFilter$ComparisonType : public jObject<::javax::swing::RowFilter$ComparisonType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "RowFilter$ComparisonType";

	constexpr static Enume field_signatures{
		jField<::javax::swing::RowFilter$ComparisonType>("AFTER"), //
		jField<::javax::swing::RowFilter$ComparisonType>("BEFORE"), //
		jField<::javax::swing::RowFilter$ComparisonType>("EQUAL"), //
		jField<::javax::swing::RowFilter$ComparisonType>("NOT_EQUAL"), //
	};

	template<typename F = ::javax::swing::RowFilter$ComparisonType>
	static auto AFTER() {
		static_assert(field_signatures[jField<F>("AFTER")] != -1);
		return sat<F>("AFTER");
	}

	template<typename F = ::javax::swing::RowFilter$ComparisonType>
	static auto BEFORE() {
		static_assert(field_signatures[jField<F>("BEFORE")] != -1);
		return sat<F>("BEFORE");
	}

	template<typename F = ::javax::swing::RowFilter$ComparisonType>
	static auto EQUAL() {
		static_assert(field_signatures[jField<F>("EQUAL")] != -1);
		return sat<F>("EQUAL");
	}

	template<typename F = ::javax::swing::RowFilter$ComparisonType>
	static auto NOT_EQUAL() {
		static_assert(field_signatures[jField<F>("NOT_EQUAL")] != -1);
		return sat<F>("NOT_EQUAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::RowFilter$ComparisonType(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::RowFilter$ComparisonType *()>("values"), //
	};

	template<typename R = ::javax::swing::RowFilter$ComparisonType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::RowFilter$ComparisonType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
