#ifndef javax_swing_JPopupMenu_HPP
#define javax_swing_JPopupMenu_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::JPopupMenu : public jObject<::javax::swing::JPopupMenu, ::javax::swing::JComponent> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "JPopupMenu";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::javax::swing::JMenuItem(::java::lang::String)>("add"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::Action)>("add"), //
		jMethod<::javax::swing::JMenuItem(::javax::swing::JMenuItem)>("add"), //
		jMethod<::jvoid(::javax::swing::event::MenuKeyListener)>("addMenuKeyListener"), //
		jMethod<::jvoid(::javax::swing::event::PopupMenuListener)>("addPopupMenuListener"), //
		jMethod<::jvoid()>("addSeparator"), //
		jMethod<::javax::accessibility::AccessibleContext()>("getAccessibleContext"), //
		jMethod<::java::awt::Component()>("getComponent"), //
		jMethod<::jint(::java::awt::Component)>("getComponentIndex"), //
		jMethod<::jboolean()>("getDefaultLightWeightPopupEnabled"), //
		jMethod<::java::awt::Component()>("getInvoker"), //
		jMethod<::java::lang::String()>("getLabel"), //
		jMethod<::java::awt::Insets()>("getMargin"), //
		jMethod<::javax::swing::event::MenuKeyListener *()>("getMenuKeyListeners"), //
		jMethod<::javax::swing::event::PopupMenuListener *()>("getPopupMenuListeners"), //
		jMethod<::javax::swing::SingleSelectionModel()>("getSelectionModel"), //
		jMethod<::javax::swing::MenuElement *()>("getSubElements"), //
		jMethod<::javax::swing::plaf::PopupMenuUI()>("getUI"), //
		jMethod<::java::lang::String()>("getUIClassID"), //
		jMethod<::jvoid(::java::awt::Component, ::jint)>("insert"), //
		jMethod<::jvoid(::javax::swing::Action, ::jint)>("insert"), //
		jMethod<::jboolean()>("isBorderPainted"), //
		jMethod<::jboolean()>("isLightWeightPopupEnabled"), //
		jMethod<::jboolean(::java::awt::event::MouseEvent)>("isPopupTrigger"), //
		jMethod<::jboolean()>("isVisible"), //
		jMethod<::jvoid(::jboolean)>("menuSelectionChanged"), //
		jMethod<::jvoid()>("pack"), //
		jMethod<::jvoid(::java::awt::event::KeyEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processKeyEvent"), //
		jMethod<::jvoid(::java::awt::event::MouseEvent, ::javax::swing::MenuElement *, ::javax::swing::MenuSelectionManager)>("processMouseEvent"), //
		jMethod<::jvoid(::jint)>("remove"), //
		jMethod<::jvoid(::javax::swing::event::MenuKeyListener)>("removeMenuKeyListener"), //
		jMethod<::jvoid(::javax::swing::event::PopupMenuListener)>("removePopupMenuListener"), //
		jMethod<::jvoid(::jboolean)>("setBorderPainted"), //
		jMethod<::jvoid(::jboolean)>("setDefaultLightWeightPopupEnabled"), //
		jMethod<::jvoid(::java::awt::Component)>("setInvoker"), //
		jMethod<::jvoid(::java::lang::String)>("setLabel"), //
		jMethod<::jvoid(::jboolean)>("setLightWeightPopupEnabled"), //
		jMethod<::jvoid(::jint, ::jint)>("setLocation"), //
		jMethod<::jvoid(::jint, ::jint)>("setPopupSize"), //
		jMethod<::jvoid(::java::awt::Dimension)>("setPopupSize"), //
		jMethod<::jvoid(::java::awt::Component)>("setSelected"), //
		jMethod<::jvoid(::javax::swing::SingleSelectionModel)>("setSelectionModel"), //
		jMethod<::jvoid(::javax::swing::plaf::PopupMenuUI)>("setUI"), //
		jMethod<::jvoid(::jboolean)>("setVisible"), //
		jMethod<::jvoid(::java::awt::Component, ::jint, ::jint)>("show"), //
		jMethod<::jvoid()>("updateUI"), //
	};

	template<typename R = ::javax::swing::JMenuItem, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addMenuKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMenuKeyListener")] != -1);
		return call<R>("addMenuKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPopupMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPopupMenuListener")] != -1);
		return call<R>("addPopupMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSeparator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSeparator")] != -1);
		return call<R>("addSeparator", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleContext, typename... Args>
	auto getAccessibleContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleContext")] != -1);
		return call<R>("getAccessibleContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponent")] != -1);
		return call<R>("getComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getComponentIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getComponentIndex")] != -1);
		return call<R>("getComponentIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto getDefaultLightWeightPopupEnabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultLightWeightPopupEnabled")] != -1);
		return scall<R>("getDefaultLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getInvoker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvoker")] != -1);
		return call<R>("getInvoker", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLabel")] != -1);
		return call<R>("getLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getMargin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMargin")] != -1);
		return call<R>("getMargin", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::MenuKeyListener *, typename... Args>
	auto getMenuKeyListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuKeyListeners")] != -1);
		return call<R>("getMenuKeyListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::PopupMenuListener *, typename... Args>
	auto getPopupMenuListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPopupMenuListeners")] != -1);
		return call<R>("getPopupMenuListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::SingleSelectionModel, typename... Args>
	auto getSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionModel")] != -1);
		return call<R>("getSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::MenuElement *, typename... Args>
	auto getSubElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubElements")] != -1);
		return call<R>("getSubElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::plaf::PopupMenuUI, typename... Args>
	auto getUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUI")] != -1);
		return call<R>("getUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUIClassID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUIClassID")] != -1);
		return call<R>("getUIClassID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insert")] != -1);
		return call<R>("insert", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBorderPainted")] != -1);
		return call<R>("isBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLightWeightPopupEnabled")] != -1);
		return call<R>("isLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPopupTrigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPopupTrigger")] != -1);
		return call<R>("isPopupTrigger", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVisible")] != -1);
		return call<R>("isVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto menuSelectionChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("menuSelectionChanged")] != -1);
		return call<R>("menuSelectionChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto pack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pack")] != -1);
		return call<R>("pack", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processKeyEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processKeyEvent")] != -1);
		return call<R>("processKeyEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMouseEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processMouseEvent")] != -1);
		return call<R>("processMouseEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMenuKeyListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMenuKeyListener")] != -1);
		return call<R>("removeMenuKeyListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePopupMenuListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePopupMenuListener")] != -1);
		return call<R>("removePopupMenuListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBorderPainted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBorderPainted")] != -1);
		return call<R>("setBorderPainted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultLightWeightPopupEnabled(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultLightWeightPopupEnabled")] != -1);
		return scall<R>("setDefaultLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInvoker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInvoker")] != -1);
		return call<R>("setInvoker", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLabel")] != -1);
		return call<R>("setLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLightWeightPopupEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLightWeightPopupEnabled")] != -1);
		return call<R>("setLightWeightPopupEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPopupSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPopupSize")] != -1);
		return call<R>("setPopupSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelected")] != -1);
		return call<R>("setSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionModel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionModel")] != -1);
		return call<R>("setSelectionModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUI")] != -1);
		return call<R>("setUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVisible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVisible")] != -1);
		return call<R>("setVisible", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto show(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("show")] != -1);
		return call<R>("show", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateUI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateUI")] != -1);
		return call<R>("updateUI", std::forward<Args>(args)...);
	}

};

#endif
