#ifndef javax_swing_DefaultListSelectionModel_HPP
#define javax_swing_DefaultListSelectionModel_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultListSelectionModel : public jObject<::javax::swing::DefaultListSelectionModel, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultListSelectionModel";

	constexpr static Enume field_signatures{
		jField<::jint>("MULTIPLE_INTERVAL_SELECTION"), //
		jField<::jint>("SINGLE_INTERVAL_SELECTION"), //
		jField<::jint>("SINGLE_SELECTION"), //
	};

	template<typename F = ::jint>
	static auto MULTIPLE_INTERVAL_SELECTION() {
		static_assert(field_signatures[jField<F>("MULTIPLE_INTERVAL_SELECTION")] != -1);
		return sat<F>("MULTIPLE_INTERVAL_SELECTION");
	}

	template<typename F = ::jint>
	static auto SINGLE_INTERVAL_SELECTION() {
		static_assert(field_signatures[jField<F>("SINGLE_INTERVAL_SELECTION")] != -1);
		return sat<F>("SINGLE_INTERVAL_SELECTION");
	}

	template<typename F = ::jint>
	static auto SINGLE_SELECTION() {
		static_assert(field_signatures[jField<F>("SINGLE_SELECTION")] != -1);
		return sat<F>("SINGLE_SELECTION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionListener)>("addListSelectionListener"), //
		jMethod<::jvoid(::jint, ::jint)>("addSelectionInterval"), //
		jMethod<::jvoid()>("clearSelection"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint()>("getAnchorSelectionIndex"), //
		jMethod<::jint()>("getLeadSelectionIndex"), //
		jMethod<::javax::swing::event::ListSelectionListener *()>("getListSelectionListeners"), //
		jMethod<::java::util::EventListener *(::java::lang::Class)>("getListeners"), //
		jMethod<::jint()>("getMaxSelectionIndex"), //
		jMethod<::jint()>("getMinSelectionIndex"), //
		jMethod<::jint()>("getSelectionMode"), //
		jMethod<::jboolean()>("getValueIsAdjusting"), //
		jMethod<::jvoid(::jint, ::jint, ::jboolean)>("insertIndexInterval"), //
		jMethod<::jboolean()>("isLeadAnchorNotificationEnabled"), //
		jMethod<::jboolean(::jint)>("isSelectedIndex"), //
		jMethod<::jboolean()>("isSelectionEmpty"), //
		jMethod<::jvoid(::jint)>("moveLeadSelectionIndex"), //
		jMethod<::jvoid(::jint, ::jint)>("removeIndexInterval"), //
		jMethod<::jvoid(::javax::swing::event::ListSelectionListener)>("removeListSelectionListener"), //
		jMethod<::jvoid(::jint, ::jint)>("removeSelectionInterval"), //
		jMethod<::jvoid(::jint)>("setAnchorSelectionIndex"), //
		jMethod<::jvoid(::jboolean)>("setLeadAnchorNotificationEnabled"), //
		jMethod<::jvoid(::jint)>("setLeadSelectionIndex"), //
		jMethod<::jvoid(::jint, ::jint)>("setSelectionInterval"), //
		jMethod<::jvoid(::jint)>("setSelectionMode"), //
		jMethod<::jvoid(::jboolean)>("setValueIsAdjusting"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addListSelectionListener")] != -1);
		return call<R>("addListSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addSelectionInterval")] != -1);
		return call<R>("addSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearSelection")] != -1);
		return call<R>("clearSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAnchorSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnchorSelectionIndex")] != -1);
		return call<R>("getAnchorSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLeadSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLeadSelectionIndex")] != -1);
		return call<R>("getLeadSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::event::ListSelectionListener *, typename... Args>
	auto getListSelectionListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListSelectionListeners")] != -1);
		return call<R>("getListSelectionListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::EventListener *, typename... Args>
	auto getListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListeners")] != -1);
		return call<R>("getListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxSelectionIndex")] != -1);
		return call<R>("getMaxSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinSelectionIndex")] != -1);
		return call<R>("getMinSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionMode")] != -1);
		return call<R>("getSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueIsAdjusting")] != -1);
		return call<R>("getValueIsAdjusting", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertIndexInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertIndexInterval")] != -1);
		return call<R>("insertIndexInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLeadAnchorNotificationEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLeadAnchorNotificationEnabled")] != -1);
		return call<R>("isLeadAnchorNotificationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelectedIndex")] != -1);
		return call<R>("isSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSelectionEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSelectionEmpty")] != -1);
		return call<R>("isSelectionEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveLeadSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveLeadSelectionIndex")] != -1);
		return call<R>("moveLeadSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeIndexInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeIndexInterval")] != -1);
		return call<R>("removeIndexInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeListSelectionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeListSelectionListener")] != -1);
		return call<R>("removeListSelectionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeSelectionInterval")] != -1);
		return call<R>("removeSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAnchorSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAnchorSelectionIndex")] != -1);
		return call<R>("setAnchorSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeadAnchorNotificationEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeadAnchorNotificationEnabled")] != -1);
		return call<R>("setLeadAnchorNotificationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLeadSelectionIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLeadSelectionIndex")] != -1);
		return call<R>("setLeadSelectionIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionInterval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionInterval")] != -1);
		return call<R>("setSelectionInterval", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionMode")] != -1);
		return call<R>("setSelectionMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueIsAdjusting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueIsAdjusting")] != -1);
		return call<R>("setValueIsAdjusting", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
