#ifndef javax_swing_GroupLayout$Alignment_HPP
#define javax_swing_GroupLayout$Alignment_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::GroupLayout$Alignment : public jObject<::javax::swing::GroupLayout$Alignment, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "GroupLayout$Alignment";

	constexpr static Enume field_signatures{
		jField<::javax::swing::GroupLayout$Alignment>("BASELINE"), //
		jField<::javax::swing::GroupLayout$Alignment>("CENTER"), //
		jField<::javax::swing::GroupLayout$Alignment>("LEADING"), //
		jField<::javax::swing::GroupLayout$Alignment>("TRAILING"), //
	};

	template<typename F = ::javax::swing::GroupLayout$Alignment>
	static auto BASELINE() {
		static_assert(field_signatures[jField<F>("BASELINE")] != -1);
		return sat<F>("BASELINE");
	}

	template<typename F = ::javax::swing::GroupLayout$Alignment>
	static auto CENTER() {
		static_assert(field_signatures[jField<F>("CENTER")] != -1);
		return sat<F>("CENTER");
	}

	template<typename F = ::javax::swing::GroupLayout$Alignment>
	static auto LEADING() {
		static_assert(field_signatures[jField<F>("LEADING")] != -1);
		return sat<F>("LEADING");
	}

	template<typename F = ::javax::swing::GroupLayout$Alignment>
	static auto TRAILING() {
		static_assert(field_signatures[jField<F>("TRAILING")] != -1);
		return sat<F>("TRAILING");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::swing::GroupLayout$Alignment(::java::lang::String)>("valueOf"), //
		jMethod<::javax::swing::GroupLayout$Alignment *()>("values"), //
	};

	template<typename R = ::javax::swing::GroupLayout$Alignment, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::GroupLayout$Alignment *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
