#ifndef javax_swing_DefaultDesktopManager_HPP
#define javax_swing_DefaultDesktopManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::swing::DefaultDesktopManager : public jObject<::javax::swing::DefaultDesktopManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_swing / "DefaultDesktopManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("activateFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("beginDraggingFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint)>("beginResizingFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("closeFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("deactivateFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("deiconifyFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint, ::jint)>("dragFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("endDraggingFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent)>("endResizingFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("iconifyFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("maximizeFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("minimizeFrame"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("openFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint, ::jint, ::jint, ::jint)>("resizeFrame"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::jint, ::jint, ::jint, ::jint)>("setBoundsForFrame"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activateFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("activateFrame")] != -1);
		return call<R>("activateFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beginDraggingFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("beginDraggingFrame")] != -1);
		return call<R>("beginDraggingFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto beginResizingFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("beginResizingFrame")] != -1);
		return call<R>("beginResizingFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("closeFrame")] != -1);
		return call<R>("closeFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivateFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deactivateFrame")] != -1);
		return call<R>("deactivateFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deiconifyFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("deiconifyFrame")] != -1);
		return call<R>("deiconifyFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dragFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dragFrame")] != -1);
		return call<R>("dragFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDraggingFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endDraggingFrame")] != -1);
		return call<R>("endDraggingFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endResizingFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("endResizingFrame")] != -1);
		return call<R>("endResizingFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto iconifyFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("iconifyFrame")] != -1);
		return call<R>("iconifyFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto maximizeFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("maximizeFrame")] != -1);
		return call<R>("maximizeFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto minimizeFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("minimizeFrame")] != -1);
		return call<R>("minimizeFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto openFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("openFrame")] != -1);
		return call<R>("openFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resizeFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("resizeFrame")] != -1);
		return call<R>("resizeFrame", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoundsForFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBoundsForFrame")] != -1);
		return call<R>("setBoundsForFrame", forward<Args>(args)...);
	}

};

#endif
