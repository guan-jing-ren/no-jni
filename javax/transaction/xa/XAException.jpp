#ifndef javax_transaction_xa_XAException_HPP
#define javax_transaction_xa_XAException_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::transaction::xa::XAException : public jObject<::javax::transaction::xa::XAException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_transaction_xa / "XAException";

	constexpr static Enume field_signatures{
		jField<::jint>("XAER_ASYNC"), //
		jField<::jint>("XAER_DUPID"), //
		jField<::jint>("XAER_INVAL"), //
		jField<::jint>("XAER_NOTA"), //
		jField<::jint>("XAER_OUTSIDE"), //
		jField<::jint>("XAER_PROTO"), //
		jField<::jint>("XAER_RMERR"), //
		jField<::jint>("XAER_RMFAIL"), //
		jField<::jint>("XA_HEURCOM"), //
		jField<::jint>("XA_HEURHAZ"), //
		jField<::jint>("XA_HEURMIX"), //
		jField<::jint>("XA_HEURRB"), //
		jField<::jint>("XA_NOMIGRATE"), //
		jField<::jint>("XA_RBBASE"), //
		jField<::jint>("XA_RBCOMMFAIL"), //
		jField<::jint>("XA_RBDEADLOCK"), //
		jField<::jint>("XA_RBEND"), //
		jField<::jint>("XA_RBINTEGRITY"), //
		jField<::jint>("XA_RBOTHER"), //
		jField<::jint>("XA_RBPROTO"), //
		jField<::jint>("XA_RBROLLBACK"), //
		jField<::jint>("XA_RBTIMEOUT"), //
		jField<::jint>("XA_RBTRANSIENT"), //
		jField<::jint>("XA_RDONLY"), //
		jField<::jint>("XA_RETRY"), //
		jField<::jint>("errorCode"), //
	};

	template<typename F = ::jint>
	static auto XAER_ASYNC() {
		static_assert(field_signatures[jField<F>("XAER_ASYNC")] != -1);
		return sat<F>("XAER_ASYNC");
	}

	template<typename F = ::jint>
	static auto XAER_DUPID() {
		static_assert(field_signatures[jField<F>("XAER_DUPID")] != -1);
		return sat<F>("XAER_DUPID");
	}

	template<typename F = ::jint>
	static auto XAER_INVAL() {
		static_assert(field_signatures[jField<F>("XAER_INVAL")] != -1);
		return sat<F>("XAER_INVAL");
	}

	template<typename F = ::jint>
	static auto XAER_NOTA() {
		static_assert(field_signatures[jField<F>("XAER_NOTA")] != -1);
		return sat<F>("XAER_NOTA");
	}

	template<typename F = ::jint>
	static auto XAER_OUTSIDE() {
		static_assert(field_signatures[jField<F>("XAER_OUTSIDE")] != -1);
		return sat<F>("XAER_OUTSIDE");
	}

	template<typename F = ::jint>
	static auto XAER_PROTO() {
		static_assert(field_signatures[jField<F>("XAER_PROTO")] != -1);
		return sat<F>("XAER_PROTO");
	}

	template<typename F = ::jint>
	static auto XAER_RMERR() {
		static_assert(field_signatures[jField<F>("XAER_RMERR")] != -1);
		return sat<F>("XAER_RMERR");
	}

	template<typename F = ::jint>
	static auto XAER_RMFAIL() {
		static_assert(field_signatures[jField<F>("XAER_RMFAIL")] != -1);
		return sat<F>("XAER_RMFAIL");
	}

	template<typename F = ::jint>
	static auto XA_HEURCOM() {
		static_assert(field_signatures[jField<F>("XA_HEURCOM")] != -1);
		return sat<F>("XA_HEURCOM");
	}

	template<typename F = ::jint>
	static auto XA_HEURHAZ() {
		static_assert(field_signatures[jField<F>("XA_HEURHAZ")] != -1);
		return sat<F>("XA_HEURHAZ");
	}

	template<typename F = ::jint>
	static auto XA_HEURMIX() {
		static_assert(field_signatures[jField<F>("XA_HEURMIX")] != -1);
		return sat<F>("XA_HEURMIX");
	}

	template<typename F = ::jint>
	static auto XA_HEURRB() {
		static_assert(field_signatures[jField<F>("XA_HEURRB")] != -1);
		return sat<F>("XA_HEURRB");
	}

	template<typename F = ::jint>
	static auto XA_NOMIGRATE() {
		static_assert(field_signatures[jField<F>("XA_NOMIGRATE")] != -1);
		return sat<F>("XA_NOMIGRATE");
	}

	template<typename F = ::jint>
	static auto XA_RBBASE() {
		static_assert(field_signatures[jField<F>("XA_RBBASE")] != -1);
		return sat<F>("XA_RBBASE");
	}

	template<typename F = ::jint>
	static auto XA_RBCOMMFAIL() {
		static_assert(field_signatures[jField<F>("XA_RBCOMMFAIL")] != -1);
		return sat<F>("XA_RBCOMMFAIL");
	}

	template<typename F = ::jint>
	static auto XA_RBDEADLOCK() {
		static_assert(field_signatures[jField<F>("XA_RBDEADLOCK")] != -1);
		return sat<F>("XA_RBDEADLOCK");
	}

	template<typename F = ::jint>
	static auto XA_RBEND() {
		static_assert(field_signatures[jField<F>("XA_RBEND")] != -1);
		return sat<F>("XA_RBEND");
	}

	template<typename F = ::jint>
	static auto XA_RBINTEGRITY() {
		static_assert(field_signatures[jField<F>("XA_RBINTEGRITY")] != -1);
		return sat<F>("XA_RBINTEGRITY");
	}

	template<typename F = ::jint>
	static auto XA_RBOTHER() {
		static_assert(field_signatures[jField<F>("XA_RBOTHER")] != -1);
		return sat<F>("XA_RBOTHER");
	}

	template<typename F = ::jint>
	static auto XA_RBPROTO() {
		static_assert(field_signatures[jField<F>("XA_RBPROTO")] != -1);
		return sat<F>("XA_RBPROTO");
	}

	template<typename F = ::jint>
	static auto XA_RBROLLBACK() {
		static_assert(field_signatures[jField<F>("XA_RBROLLBACK")] != -1);
		return sat<F>("XA_RBROLLBACK");
	}

	template<typename F = ::jint>
	static auto XA_RBTIMEOUT() {
		static_assert(field_signatures[jField<F>("XA_RBTIMEOUT")] != -1);
		return sat<F>("XA_RBTIMEOUT");
	}

	template<typename F = ::jint>
	static auto XA_RBTRANSIENT() {
		static_assert(field_signatures[jField<F>("XA_RBTRANSIENT")] != -1);
		return sat<F>("XA_RBTRANSIENT");
	}

	template<typename F = ::jint>
	static auto XA_RDONLY() {
		static_assert(field_signatures[jField<F>("XA_RDONLY")] != -1);
		return sat<F>("XA_RDONLY");
	}

	template<typename F = ::jint>
	static auto XA_RETRY() {
		static_assert(field_signatures[jField<F>("XA_RETRY")] != -1);
		return sat<F>("XA_RETRY");
	}

	template<typename F = ::jint>
	auto errorCode() const {
		static_assert(field_signatures[jField<F>("errorCode")] != -1);
		return at<F>("errorCode");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
	};

};

#endif
