#ifndef javax_net_ssl_SSLEngineResult$Status_HPP
#define javax_net_ssl_SSLEngineResult$Status_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLEngineResult$Status : public jObject<::javax::net::ssl::SSLEngineResult$Status, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLEngineResult$Status";

	constexpr static Enume field_signatures{
		jField<::javax::net::ssl::SSLEngineResult$Status>("BUFFER_OVERFLOW"), //
		jField<::javax::net::ssl::SSLEngineResult$Status>("BUFFER_UNDERFLOW"), //
		jField<::javax::net::ssl::SSLEngineResult$Status>("CLOSED"), //
		jField<::javax::net::ssl::SSLEngineResult$Status>("OK"), //
	};

	template<typename F = ::javax::net::ssl::SSLEngineResult$Status>
	static auto BUFFER_OVERFLOW() {
		static_assert(field_signatures[jField<F>("BUFFER_OVERFLOW")] != -1);
		return sat<F>("BUFFER_OVERFLOW");
	}

	template<typename F = ::javax::net::ssl::SSLEngineResult$Status>
	static auto BUFFER_UNDERFLOW() {
		static_assert(field_signatures[jField<F>("BUFFER_UNDERFLOW")] != -1);
		return sat<F>("BUFFER_UNDERFLOW");
	}

	template<typename F = ::javax::net::ssl::SSLEngineResult$Status>
	static auto CLOSED() {
		static_assert(field_signatures[jField<F>("CLOSED")] != -1);
		return sat<F>("CLOSED");
	}

	template<typename F = ::javax::net::ssl::SSLEngineResult$Status>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::net::ssl::SSLEngineResult$Status(::java::lang::String)>("valueOf"), //
		jMethod<::javax::net::ssl::SSLEngineResult$Status *()>("values"), //
	};

	template<typename R = ::javax::net::ssl::SSLEngineResult$Status, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLEngineResult$Status *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
