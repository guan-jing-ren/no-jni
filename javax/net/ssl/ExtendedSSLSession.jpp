#ifndef javax_net_ssl_ExtendedSSLSession_HPP
#define javax_net_ssl_ExtendedSSLSession_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::ExtendedSSLSession : public jObject<::javax::net::ssl::ExtendedSSLSession, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "ExtendedSSLSession";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getApplicationBufferSize"), //
		jMethod<::java::lang::String()>("getCipherSuite"), //
		jMethod<::jlong()>("getCreationTime"), //
		jMethod<::jbyte *()>("getId"), //
		jMethod<::jlong()>("getLastAccessedTime"), //
		jMethod<::java::security::cert::Certificate *()>("getLocalCertificates"), //
		jMethod<::java::security::Principal()>("getLocalPrincipal"), //
		jMethod<::java::lang::String *()>("getLocalSupportedSignatureAlgorithms"), //
		jMethod<::jint()>("getPacketBufferSize"), //
		jMethod<::javax::security::cert::X509Certificate *()>("getPeerCertificateChain"), //
		jMethod<::java::security::cert::Certificate *()>("getPeerCertificates"), //
		jMethod<::java::lang::String()>("getPeerHost"), //
		jMethod<::jint()>("getPeerPort"), //
		jMethod<::java::security::Principal()>("getPeerPrincipal"), //
		jMethod<::java::lang::String *()>("getPeerSupportedSignatureAlgorithms"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::util::List()>("getRequestedServerNames"), //
		jMethod<::javax::net::ssl::SSLSessionContext()>("getSessionContext"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getValue"), //
		jMethod<::java::lang::String *()>("getValueNames"), //
		jMethod<::jvoid()>("invalidate"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("putValue"), //
		jMethod<::jvoid(::java::lang::String)>("removeValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getApplicationBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApplicationBufferSize")] != -1);
		return call<R>("getApplicationBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCipherSuite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuite")] != -1);
		return call<R>("getCipherSuite", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getCreationTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreationTime")] != -1);
		return call<R>("getCreationTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastAccessedTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastAccessedTime")] != -1);
		return call<R>("getLastAccessedTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getLocalCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalCertificates")] != -1);
		return call<R>("getLocalCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getLocalPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPrincipal")] != -1);
		return call<R>("getLocalPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getLocalSupportedSignatureAlgorithms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalSupportedSignatureAlgorithms")] != -1);
		return call<R>("getLocalSupportedSignatureAlgorithms", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPacketBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPacketBufferSize")] != -1);
		return call<R>("getPacketBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::cert::X509Certificate *, typename... Args>
	auto getPeerCertificateChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerCertificateChain")] != -1);
		return call<R>("getPeerCertificateChain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getPeerCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerCertificates")] != -1);
		return call<R>("getPeerCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPeerHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerHost")] != -1);
		return call<R>("getPeerHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPeerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerPort")] != -1);
		return call<R>("getPeerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getPeerPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerPrincipal")] != -1);
		return call<R>("getPeerPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getPeerSupportedSignatureAlgorithms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerSupportedSignatureAlgorithms")] != -1);
		return call<R>("getPeerSupportedSignatureAlgorithms", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRequestedServerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestedServerNames")] != -1);
		return call<R>("getRequestedServerNames", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSessionContext, typename... Args>
	auto getSessionContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSessionContext")] != -1);
		return call<R>("getSessionContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getValueNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueNames")] != -1);
		return call<R>("getValueNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invalidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidate")] != -1);
		return call<R>("invalidate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putValue")] != -1);
		return call<R>("putValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeValue")] != -1);
		return call<R>("removeValue", std::forward<Args>(args)...);
	}

};

#endif
