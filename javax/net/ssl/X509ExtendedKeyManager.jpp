#ifndef javax_net_ssl_X509ExtendedKeyManager_HPP
#define javax_net_ssl_X509ExtendedKeyManager_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::X509ExtendedKeyManager : public jObject<::javax::net::ssl::X509ExtendedKeyManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "X509ExtendedKeyManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String *, ::java::security::Principal *, ::javax::net::ssl::SSLEngine)>("chooseEngineClientAlias"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::security::Principal *, ::javax::net::ssl::SSLEngine)>("chooseEngineServerAlias"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto chooseEngineClientAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("chooseEngineClientAlias")] != -1);
		return call<R>("chooseEngineClientAlias", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto chooseEngineServerAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("chooseEngineServerAlias")] != -1);
		return call<R>("chooseEngineServerAlias", forward<Args>(args)...);
	}

};

#endif
