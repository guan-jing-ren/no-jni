#ifndef javax_net_ssl_SSLEngine_HPP
#define javax_net_ssl_SSLEngine_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLEngine : public jObject<::javax::net::ssl::SSLEngine, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLEngine";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("beginHandshake"), //
		jMethod<::jvoid()>("closeInbound"), //
		jMethod<::jvoid()>("closeOutbound"), //
		jMethod<::java::lang::Runnable()>("getDelegatedTask"), //
		jMethod<::jboolean()>("getEnableSessionCreation"), //
		jMethod<::java::lang::String *()>("getEnabledCipherSuites"), //
		jMethod<::java::lang::String *()>("getEnabledProtocols"), //
		jMethod<::javax::net::ssl::SSLSession()>("getHandshakeSession"), //
		jMethod<::javax::net::ssl::SSLEngineResult$HandshakeStatus()>("getHandshakeStatus"), //
		jMethod<::jboolean()>("getNeedClientAuth"), //
		jMethod<::java::lang::String()>("getPeerHost"), //
		jMethod<::jint()>("getPeerPort"), //
		jMethod<::javax::net::ssl::SSLParameters()>("getSSLParameters"), //
		jMethod<::javax::net::ssl::SSLSession()>("getSession"), //
		jMethod<::java::lang::String *()>("getSupportedCipherSuites"), //
		jMethod<::java::lang::String *()>("getSupportedProtocols"), //
		jMethod<::jboolean()>("getUseClientMode"), //
		jMethod<::jboolean()>("getWantClientAuth"), //
		jMethod<::jboolean()>("isInboundDone"), //
		jMethod<::jboolean()>("isOutboundDone"), //
		jMethod<::jvoid(::jboolean)>("setEnableSessionCreation"), //
		jMethod<::jvoid(::java::lang::String *)>("setEnabledCipherSuites"), //
		jMethod<::jvoid(::java::lang::String *)>("setEnabledProtocols"), //
		jMethod<::jvoid(::jboolean)>("setNeedClientAuth"), //
		jMethod<::jvoid(::javax::net::ssl::SSLParameters)>("setSSLParameters"), //
		jMethod<::jvoid(::jboolean)>("setUseClientMode"), //
		jMethod<::jvoid(::jboolean)>("setWantClientAuth"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer, ::java::nio::ByteBuffer)>("unwrap"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer, ::java::nio::ByteBuffer *)>("unwrap"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer, ::java::nio::ByteBuffer *, ::jint, ::jint)>("unwrap"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer, ::java::nio::ByteBuffer)>("wrap"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer *, ::jint, ::jint, ::java::nio::ByteBuffer)>("wrap"), //
		jMethod<::javax::net::ssl::SSLEngineResult(::java::nio::ByteBuffer *, ::java::nio::ByteBuffer)>("wrap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto beginHandshake(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginHandshake")] != -1);
		return call<R>("beginHandshake", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeInbound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeInbound")] != -1);
		return call<R>("closeInbound", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeOutbound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeOutbound")] != -1);
		return call<R>("closeOutbound", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Runnable, typename... Args>
	auto getDelegatedTask(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegatedTask")] != -1);
		return call<R>("getDelegatedTask", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEnableSessionCreation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnableSessionCreation")] != -1);
		return call<R>("getEnableSessionCreation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledCipherSuites")] != -1);
		return call<R>("getEnabledCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledProtocols")] != -1);
		return call<R>("getEnabledProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSession, typename... Args>
	auto getHandshakeSession(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandshakeSession")] != -1);
		return call<R>("getHandshakeSession", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLEngineResult$HandshakeStatus, typename... Args>
	auto getHandshakeStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandshakeStatus")] != -1);
		return call<R>("getHandshakeStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNeedClientAuth")] != -1);
		return call<R>("getNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPeerHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerHost")] != -1);
		return call<R>("getPeerHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPeerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerPort")] != -1);
		return call<R>("getPeerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLParameters, typename... Args>
	auto getSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSSLParameters")] != -1);
		return call<R>("getSSLParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSession, typename... Args>
	auto getSession(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSession")] != -1);
		return call<R>("getSession", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedCipherSuites")] != -1);
		return call<R>("getSupportedCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedProtocols")] != -1);
		return call<R>("getSupportedProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseClientMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseClientMode")] != -1);
		return call<R>("getUseClientMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWantClientAuth")] != -1);
		return call<R>("getWantClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInboundDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInboundDone")] != -1);
		return call<R>("isInboundDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOutboundDone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOutboundDone")] != -1);
		return call<R>("isOutboundDone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnableSessionCreation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnableSessionCreation")] != -1);
		return call<R>("setEnableSessionCreation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabledCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabledCipherSuites")] != -1);
		return call<R>("setEnabledCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabledProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabledProtocols")] != -1);
		return call<R>("setEnabledProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNeedClientAuth")] != -1);
		return call<R>("setNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSSLParameters")] != -1);
		return call<R>("setSSLParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseClientMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseClientMode")] != -1);
		return call<R>("setUseClientMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWantClientAuth")] != -1);
		return call<R>("setWantClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLEngineResult, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLEngineResult, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
