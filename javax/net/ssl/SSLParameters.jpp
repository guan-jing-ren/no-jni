#ifndef javax_net_ssl_SSLParameters_HPP
#define javax_net_ssl_SSLParameters_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLParameters : public jObject<::javax::net::ssl::SSLParameters, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLParameters";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String *)>(), //
		jConstructor<::jvoid(::java::lang::String *, ::java::lang::String *)>(), //
		jMethod<::java::security::AlgorithmConstraints()>("getAlgorithmConstraints"), //
		jMethod<::java::lang::String *()>("getCipherSuites"), //
		jMethod<::java::lang::String()>("getEndpointIdentificationAlgorithm"), //
		jMethod<::jboolean()>("getNeedClientAuth"), //
		jMethod<::java::lang::String *()>("getProtocols"), //
		jMethod<::java::util::Collection()>("getSNIMatchers"), //
		jMethod<::java::util::List()>("getServerNames"), //
		jMethod<::jboolean()>("getUseCipherSuitesOrder"), //
		jMethod<::jboolean()>("getWantClientAuth"), //
		jMethod<::jvoid(::java::security::AlgorithmConstraints)>("setAlgorithmConstraints"), //
		jMethod<::jvoid(::java::lang::String *)>("setCipherSuites"), //
		jMethod<::jvoid(::java::lang::String)>("setEndpointIdentificationAlgorithm"), //
		jMethod<::jvoid(::jboolean)>("setNeedClientAuth"), //
		jMethod<::jvoid(::java::lang::String *)>("setProtocols"), //
		jMethod<::jvoid(::java::util::Collection)>("setSNIMatchers"), //
		jMethod<::jvoid(::java::util::List)>("setServerNames"), //
		jMethod<::jvoid(::jboolean)>("setUseCipherSuitesOrder"), //
		jMethod<::jvoid(::jboolean)>("setWantClientAuth"), //
	};

	template<typename R = ::java::security::AlgorithmConstraints, typename... Args>
	auto getAlgorithmConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithmConstraints")] != -1);
		return call<R>("getAlgorithmConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuites")] != -1);
		return call<R>("getCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEndpointIdentificationAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndpointIdentificationAlgorithm")] != -1);
		return call<R>("getEndpointIdentificationAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNeedClientAuth")] != -1);
		return call<R>("getNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocols")] != -1);
		return call<R>("getProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getSNIMatchers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSNIMatchers")] != -1);
		return call<R>("getSNIMatchers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getServerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerNames")] != -1);
		return call<R>("getServerNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseCipherSuitesOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseCipherSuitesOrder")] != -1);
		return call<R>("getUseCipherSuitesOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWantClientAuth")] != -1);
		return call<R>("getWantClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAlgorithmConstraints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAlgorithmConstraints")] != -1);
		return call<R>("setAlgorithmConstraints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCipherSuites")] != -1);
		return call<R>("setCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEndpointIdentificationAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEndpointIdentificationAlgorithm")] != -1);
		return call<R>("setEndpointIdentificationAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNeedClientAuth")] != -1);
		return call<R>("setNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProtocols")] != -1);
		return call<R>("setProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSNIMatchers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSNIMatchers")] != -1);
		return call<R>("setSNIMatchers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServerNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServerNames")] != -1);
		return call<R>("setServerNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseCipherSuitesOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseCipherSuitesOrder")] != -1);
		return call<R>("setUseCipherSuitesOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWantClientAuth")] != -1);
		return call<R>("setWantClientAuth", std::forward<Args>(args)...);
	}

};

#endif
