#ifndef javax_net_ssl_KeyManagerFactory_HPP
#define javax_net_ssl_KeyManagerFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::KeyManagerFactory : public jObject<::javax::net::ssl::KeyManagerFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "KeyManagerFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::java::lang::String()>("getDefaultAlgorithm"), //
		jMethod<::javax::net::ssl::KeyManagerFactory(::java::lang::String)>("getInstance"), //
		jMethod<::javax::net::ssl::KeyManagerFactory(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::net::ssl::KeyManagerFactory(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::javax::net::ssl::KeyManager *()>("getKeyManagers"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::jvoid(::java::security::KeyStore, ::jchar *)>("init"), //
		jMethod<::jvoid(::javax::net::ssl::ManagerFactoryParameters)>("init"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultAlgorithm(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultAlgorithm")] != -1);
		return scall<R>("getDefaultAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::KeyManagerFactory, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::KeyManager *, typename... Args>
	auto getKeyManagers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyManagers")] != -1);
		return call<R>("getKeyManagers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

};

#endif
