#ifndef javax_net_ssl_SSLServerSocketFactory_HPP
#define javax_net_ssl_SSLServerSocketFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLServerSocketFactory : public jObject<::javax::net::ssl::SSLServerSocketFactory, ::javax::net::ServerSocketFactory> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLServerSocketFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::net::ServerSocketFactory()>("getDefault"), //
		jMethod<::java::lang::String *()>("getDefaultCipherSuites"), //
		jMethod<::java::lang::String *()>("getSupportedCipherSuites"), //
	};

	template<typename R = ::javax::net::ServerSocketFactory, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getDefaultCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultCipherSuites")] != -1);
		return call<R>("getDefaultCipherSuites", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedCipherSuites")] != -1);
		return call<R>("getSupportedCipherSuites", forward<Args>(args)...);
	}

};

#endif
