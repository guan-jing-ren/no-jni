#ifndef javax_net_ssl_SSLServerSocket_HPP
#define javax_net_ssl_SSLServerSocket_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLServerSocket : public jObject<::javax::net::ssl::SSLServerSocket, ::java::net::ServerSocket> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLServerSocket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getEnableSessionCreation"), //
		jMethod<::java::lang::String *()>("getEnabledCipherSuites"), //
		jMethod<::java::lang::String *()>("getEnabledProtocols"), //
		jMethod<::jboolean()>("getNeedClientAuth"), //
		jMethod<::javax::net::ssl::SSLParameters()>("getSSLParameters"), //
		jMethod<::java::lang::String *()>("getSupportedCipherSuites"), //
		jMethod<::java::lang::String *()>("getSupportedProtocols"), //
		jMethod<::jboolean()>("getUseClientMode"), //
		jMethod<::jboolean()>("getWantClientAuth"), //
		jMethod<::jvoid(::jboolean)>("setEnableSessionCreation"), //
		jMethod<::jvoid(::java::lang::String *)>("setEnabledCipherSuites"), //
		jMethod<::jvoid(::java::lang::String *)>("setEnabledProtocols"), //
		jMethod<::jvoid(::jboolean)>("setNeedClientAuth"), //
		jMethod<::jvoid(::javax::net::ssl::SSLParameters)>("setSSLParameters"), //
		jMethod<::jvoid(::jboolean)>("setUseClientMode"), //
		jMethod<::jvoid(::jboolean)>("setWantClientAuth"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getEnableSessionCreation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnableSessionCreation")] != -1);
		return call<R>("getEnableSessionCreation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledCipherSuites")] != -1);
		return call<R>("getEnabledCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledProtocols")] != -1);
		return call<R>("getEnabledProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNeedClientAuth")] != -1);
		return call<R>("getNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLParameters, typename... Args>
	auto getSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSSLParameters")] != -1);
		return call<R>("getSSLParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedCipherSuites")] != -1);
		return call<R>("getSupportedCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedProtocols")] != -1);
		return call<R>("getSupportedProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getUseClientMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUseClientMode")] != -1);
		return call<R>("getUseClientMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWantClientAuth")] != -1);
		return call<R>("getWantClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnableSessionCreation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnableSessionCreation")] != -1);
		return call<R>("setEnableSessionCreation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabledCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabledCipherSuites")] != -1);
		return call<R>("setEnabledCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnabledProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnabledProtocols")] != -1);
		return call<R>("setEnabledProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNeedClientAuth")] != -1);
		return call<R>("setNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSSLParameters")] != -1);
		return call<R>("setSSLParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseClientMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseClientMode")] != -1);
		return call<R>("setUseClientMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWantClientAuth")] != -1);
		return call<R>("setWantClientAuth", std::forward<Args>(args)...);
	}

};

#endif
