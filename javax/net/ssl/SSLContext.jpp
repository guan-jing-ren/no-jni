#ifndef javax_net_ssl_SSLContext_HPP
#define javax_net_ssl_SSLContext_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLContext : public jObject<::javax::net::ssl::SSLContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::net::ssl::SSLEngine()>("createSSLEngine"), //
		jMethod<::javax::net::ssl::SSLEngine(::java::lang::String, ::jint)>("createSSLEngine"), //
		jMethod<::javax::net::ssl::SSLSessionContext()>("getClientSessionContext"), //
		jMethod<::javax::net::ssl::SSLContext()>("getDefault"), //
		jMethod<::javax::net::ssl::SSLParameters()>("getDefaultSSLParameters"), //
		jMethod<::javax::net::ssl::SSLContext(::java::lang::String)>("getInstance"), //
		jMethod<::javax::net::ssl::SSLContext(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::net::ssl::SSLContext(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::javax::net::ssl::SSLSessionContext()>("getServerSessionContext"), //
		jMethod<::javax::net::ssl::SSLServerSocketFactory()>("getServerSocketFactory"), //
		jMethod<::javax::net::ssl::SSLSocketFactory()>("getSocketFactory"), //
		jMethod<::javax::net::ssl::SSLParameters()>("getSupportedSSLParameters"), //
		jMethod<::jvoid(::javax::net::ssl::KeyManager *, ::javax::net::ssl::TrustManager *, ::java::security::SecureRandom)>("init"), //
		jMethod<::jvoid(::javax::net::ssl::SSLContext)>("setDefault"), //
	};

	template<typename R = ::javax::net::ssl::SSLEngine, typename... Args>
	auto createSSLEngine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createSSLEngine")] != -1);
		return call<R>("createSSLEngine", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSessionContext, typename... Args>
	auto getClientSessionContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClientSessionContext")] != -1);
		return call<R>("getClientSessionContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLContext, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLParameters, typename... Args>
	auto getDefaultSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultSSLParameters")] != -1);
		return call<R>("getDefaultSSLParameters", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLContext, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSessionContext, typename... Args>
	auto getServerSessionContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getServerSessionContext")] != -1);
		return call<R>("getServerSessionContext", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLServerSocketFactory, typename... Args>
	auto getServerSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getServerSocketFactory")] != -1);
		return call<R>("getServerSocketFactory", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSocketFactory, typename... Args>
	auto getSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSocketFactory")] != -1);
		return call<R>("getSocketFactory", forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLParameters, typename... Args>
	auto getSupportedSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedSSLParameters")] != -1);
		return call<R>("getSupportedSSLParameters", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("init")] != -1);
		return call<R>("init", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDefault")] != -1);
		return scall<R>("setDefault", forward<Args>(args)...);
	}

};

#endif
