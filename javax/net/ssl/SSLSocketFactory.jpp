#ifndef javax_net_ssl_SSLSocketFactory_HPP
#define javax_net_ssl_SSLSocketFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::SSLSocketFactory : public jObject<::javax::net::ssl::SSLSocketFactory, ::javax::net::SocketFactory> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "SSLSocketFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::Socket(::java::net::Socket, ::java::io::InputStream, ::jboolean)>("createSocket"), //
		jMethod<::java::net::Socket(::java::net::Socket, ::java::lang::String, ::jint, ::jboolean)>("createSocket"), //
		jMethod<::javax::net::SocketFactory()>("getDefault"), //
		jMethod<::java::lang::String *()>("getDefaultCipherSuites"), //
		jMethod<::java::lang::String *()>("getSupportedCipherSuites"), //
	};

	template<typename R = ::java::net::Socket, typename... Args>
	auto createSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSocket")] != -1);
		return call<R>("createSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::SocketFactory, typename... Args>
	static auto getDefault(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefault")] != -1);
		return scall<R>("getDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getDefaultCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultCipherSuites")] != -1);
		return call<R>("getDefaultCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getSupportedCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedCipherSuites")] != -1);
		return call<R>("getSupportedCipherSuites", std::forward<Args>(args)...);
	}

};

#endif
