#ifndef javax_net_ssl_HttpsURLConnection_HPP
#define javax_net_ssl_HttpsURLConnection_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::net::ssl::HttpsURLConnection : public jObject<::javax::net::ssl::HttpsURLConnection, ::java::net::HttpURLConnection> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_net_ssl / "HttpsURLConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCipherSuite"), //
		jMethod<::javax::net::ssl::HostnameVerifier()>("getDefaultHostnameVerifier"), //
		jMethod<::javax::net::ssl::SSLSocketFactory()>("getDefaultSSLSocketFactory"), //
		jMethod<::javax::net::ssl::HostnameVerifier()>("getHostnameVerifier"), //
		jMethod<::java::security::cert::Certificate *()>("getLocalCertificates"), //
		jMethod<::java::security::Principal()>("getLocalPrincipal"), //
		jMethod<::java::security::Principal()>("getPeerPrincipal"), //
		jMethod<::javax::net::ssl::SSLSocketFactory()>("getSSLSocketFactory"), //
		jMethod<::java::security::cert::Certificate *()>("getServerCertificates"), //
		jMethod<::jvoid(::javax::net::ssl::HostnameVerifier)>("setDefaultHostnameVerifier"), //
		jMethod<::jvoid(::javax::net::ssl::SSLSocketFactory)>("setDefaultSSLSocketFactory"), //
		jMethod<::jvoid(::javax::net::ssl::HostnameVerifier)>("setHostnameVerifier"), //
		jMethod<::jvoid(::javax::net::ssl::SSLSocketFactory)>("setSSLSocketFactory"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCipherSuite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuite")] != -1);
		return call<R>("getCipherSuite", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::HostnameVerifier, typename... Args>
	static auto getDefaultHostnameVerifier(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultHostnameVerifier")] != -1);
		return scall<R>("getDefaultHostnameVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSocketFactory, typename... Args>
	static auto getDefaultSSLSocketFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultSSLSocketFactory")] != -1);
		return scall<R>("getDefaultSSLSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::HostnameVerifier, typename... Args>
	auto getHostnameVerifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostnameVerifier")] != -1);
		return call<R>("getHostnameVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getLocalCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalCertificates")] != -1);
		return call<R>("getLocalCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getLocalPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalPrincipal")] != -1);
		return call<R>("getLocalPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getPeerPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeerPrincipal")] != -1);
		return call<R>("getPeerPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLSocketFactory, typename... Args>
	auto getSSLSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSSLSocketFactory")] != -1);
		return call<R>("getSSLSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::Certificate *, typename... Args>
	auto getServerCertificates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerCertificates")] != -1);
		return call<R>("getServerCertificates", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultHostnameVerifier(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultHostnameVerifier")] != -1);
		return scall<R>("setDefaultHostnameVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDefaultSSLSocketFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultSSLSocketFactory")] != -1);
		return scall<R>("setDefaultSSLSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHostnameVerifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHostnameVerifier")] != -1);
		return call<R>("setHostnameVerifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSSLSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSSLSocketFactory")] != -1);
		return call<R>("setSSLSocketFactory", std::forward<Args>(args)...);
	}

};

#endif
