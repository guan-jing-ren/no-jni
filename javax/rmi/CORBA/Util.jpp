#ifndef javax_rmi_CORBA_Util_HPP
#define javax_rmi_CORBA_Util_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::rmi::CORBA::Util : public jObject<::javax::rmi::CORBA::Util, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_rmi_CORBA / "Util";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object, ::org::omg::CORBA::ORB)>("copyObject"), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::org::omg::CORBA::ORB)>("copyObjects"), //
		jMethod<::javax::rmi::CORBA::ValueHandler()>("createValueHandler"), //
		jMethod<::java::lang::String(::java::lang::Class)>("getCodebase"), //
		jMethod<::javax::rmi::CORBA::Tie(::java::rmi::Remote)>("getTie"), //
		jMethod<::jboolean(::javax::rmi::CORBA::Stub)>("isLocal"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::String, ::java::lang::ClassLoader)>("loadClass"), //
		jMethod<::java::rmi::RemoteException(::org::omg::CORBA::SystemException)>("mapSystemException"), //
		jMethod<::java::lang::Object(::org::omg::CORBA::portable::InputStream)>("readAny"), //
		jMethod<::jvoid(::javax::rmi::CORBA::Tie, ::java::rmi::Remote)>("registerTarget"), //
		jMethod<::jvoid(::java::rmi::Remote)>("unexportObject"), //
		jMethod<::java::rmi::RemoteException(::java::lang::Throwable)>("wrapException"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::lang::Object)>("writeAbstractObject"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::lang::Object)>("writeAny"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::lang::Object)>("writeRemoteObject"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto copyObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyObject")] != -1);
		return scall<R>("copyObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	static auto copyObjects(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyObjects")] != -1);
		return scall<R>("copyObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::ValueHandler, typename... Args>
	static auto createValueHandler(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createValueHandler")] != -1);
		return scall<R>("createValueHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getCodebase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodebase")] != -1);
		return scall<R>("getCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::Tie, typename... Args>
	static auto getTie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTie")] != -1);
		return scall<R>("getTie", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLocal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocal")] != -1);
		return scall<R>("isLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto loadClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadClass")] != -1);
		return scall<R>("loadClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::RemoteException, typename... Args>
	static auto mapSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapSystemException")] != -1);
		return scall<R>("mapSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto readAny(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAny")] != -1);
		return scall<R>("readAny", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto registerTarget(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerTarget")] != -1);
		return scall<R>("registerTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto unexportObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexportObject")] != -1);
		return scall<R>("unexportObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::RemoteException, typename... Args>
	static auto wrapException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrapException")] != -1);
		return scall<R>("wrapException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeAbstractObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeAbstractObject")] != -1);
		return scall<R>("writeAbstractObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeAny(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeAny")] != -1);
		return scall<R>("writeAny", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeRemoteObject(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeRemoteObject")] != -1);
		return scall<R>("writeRemoteObject", std::forward<Args>(args)...);
	}

};

#endif
