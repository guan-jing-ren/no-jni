#ifndef javax_rmi_CORBA_PortableRemoteObjectDelegate_HPP
#define javax_rmi_CORBA_PortableRemoteObjectDelegate_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::rmi::CORBA::PortableRemoteObjectDelegate : public jObject<::javax::rmi::CORBA::PortableRemoteObjectDelegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_rmi_CORBA / "PortableRemoteObjectDelegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::rmi::Remote, ::java::rmi::Remote)>("connect"), //
		jMethod<::jvoid(::java::rmi::Remote)>("exportObject"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Class)>("narrow"), //
		jMethod<::java::rmi::Remote(::java::rmi::Remote)>("toStub"), //
		jMethod<::jvoid(::java::rmi::Remote)>("unexportObject"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("exportObject")] != -1);
		return call<R>("exportObject", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto narrow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("narrow")] != -1);
		return call<R>("narrow", forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	auto toStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toStub")] != -1);
		return call<R>("toStub", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unexportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unexportObject")] != -1);
		return call<R>("unexportObject", forward<Args>(args)...);
	}

};

#endif
