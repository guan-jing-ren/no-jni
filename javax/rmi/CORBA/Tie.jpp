#ifndef javax_rmi_CORBA_Tie_HPP
#define javax_rmi_CORBA_Tie_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::rmi::CORBA::Tie : public jObject<::javax::rmi::CORBA::Tie, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_rmi_CORBA / "Tie";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::portable::OutputStream(::java::lang::String, ::org::omg::CORBA::portable::InputStream, ::org::omg::CORBA::portable::ResponseHandler)>("_invoke"), //
		jMethod<::jvoid()>("deactivate"), //
		jMethod<::java::rmi::Remote()>("getTarget"), //
		jMethod<::org::omg::CORBA::ORB()>("orb"), //
		jMethod<::jvoid(::org::omg::CORBA::ORB)>("orb"), //
		jMethod<::jvoid(::java::rmi::Remote)>("setTarget"), //
		jMethod<::org::omg::CORBA::Object()>("thisObject"), //
	};

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto _invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_invoke")] != -1);
		return call<R>("_invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto thisObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thisObject")] != -1);
		return call<R>("thisObject", std::forward<Args>(args)...);
	}

};

#endif
