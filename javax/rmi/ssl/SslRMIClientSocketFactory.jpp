#ifndef javax_rmi_ssl_SslRMIClientSocketFactory_HPP
#define javax_rmi_ssl_SslRMIClientSocketFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::rmi::ssl::SslRMIClientSocketFactory : public jObject<::javax::rmi::ssl::SslRMIClientSocketFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_rmi_ssl / "SslRMIClientSocketFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::Socket(::java::lang::String, ::jint)>("createSocket"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::net::Socket, typename... Args>
	auto createSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createSocket")] != -1);
		return call<R>("createSocket", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

};

#endif
