#ifndef javax_rmi_ssl_SslRMIServerSocketFactory_HPP
#define javax_rmi_ssl_SslRMIServerSocketFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::rmi::ssl::SslRMIServerSocketFactory : public jObject<::javax::rmi::ssl::SslRMIServerSocketFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_rmi_ssl / "SslRMIServerSocketFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::net::ssl::SSLContext, ::java::lang::String *, ::java::lang::String *, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String *, ::java::lang::String *, ::jboolean)>(), //
		jMethod<::java::net::ServerSocket(::jint)>("createServerSocket"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String *()>("getEnabledCipherSuites"), //
		jMethod<::java::lang::String *()>("getEnabledProtocols"), //
		jMethod<::jboolean()>("getNeedClientAuth"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::net::ServerSocket, typename... Args>
	auto createServerSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createServerSocket")] != -1);
		return call<R>("createServerSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledCipherSuites")] != -1);
		return call<R>("getEnabledCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getEnabledProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnabledProtocols")] != -1);
		return call<R>("getEnabledProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNeedClientAuth")] != -1);
		return call<R>("getNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
