#ifndef javax_naming_CannotProceedException_HPP
#define javax_naming_CannotProceedException_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::CannotProceedException : public jObject<::javax::naming::CannotProceedException, ::javax::naming::NamingException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "CannotProceedException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::javax::naming::Name()>("getAltName"), //
		jMethod<::javax::naming::Context()>("getAltNameCtx"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::javax::naming::Name()>("getRemainingNewName"), //
		jMethod<::jvoid(::javax::naming::Name)>("setAltName"), //
		jMethod<::jvoid(::javax::naming::Context)>("setAltNameCtx"), //
		jMethod<::jvoid(::java::util::Hashtable)>("setEnvironment"), //
		jMethod<::jvoid(::javax::naming::Name)>("setRemainingNewName"), //
	};

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getAltName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAltName")] != -1);
		return call<R>("getAltName", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto getAltNameCtx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAltNameCtx")] != -1);
		return call<R>("getAltNameCtx", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getRemainingNewName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRemainingNewName")] != -1);
		return call<R>("getRemainingNewName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAltName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAltName")] != -1);
		return call<R>("setAltName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAltNameCtx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAltNameCtx")] != -1);
		return call<R>("setAltNameCtx", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEnvironment")] != -1);
		return call<R>("setEnvironment", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRemainingNewName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRemainingNewName")] != -1);
		return call<R>("setRemainingNewName", forward<Args>(args)...);
	}

};

#endif
