#ifndef javax_naming_ReferralException_HPP
#define javax_naming_ReferralException_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::ReferralException : public jObject<::javax::naming::ReferralException, ::javax::naming::NamingException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "ReferralException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::naming::Context()>("getReferralContext"), //
		jMethod<::javax::naming::Context(::java::util::Hashtable)>("getReferralContext"), //
		jMethod<::java::lang::Object()>("getReferralInfo"), //
		jMethod<::jvoid()>("retryReferral"), //
		jMethod<::jboolean()>("skipReferral"), //
	};

	template<typename R = ::javax::naming::Context, typename... Args>
	auto getReferralContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReferralContext")] != -1);
		return call<R>("getReferralContext", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getReferralInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReferralInfo")] != -1);
		return call<R>("getReferralInfo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto retryReferral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("retryReferral")] != -1);
		return call<R>("retryReferral", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto skipReferral(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skipReferral")] != -1);
		return call<R>("skipReferral", forward<Args>(args)...);
	}

};

#endif
