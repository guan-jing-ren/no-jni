#ifndef javax_naming_directory_SearchControls_HPP
#define javax_naming_directory_SearchControls_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::directory::SearchControls : public jObject<::javax::naming::directory::SearchControls, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_directory / "SearchControls";

	constexpr static Enume field_signatures{
		jField<::jint>("OBJECT_SCOPE"), //
		jField<::jint>("ONELEVEL_SCOPE"), //
		jField<::jint>("SUBTREE_SCOPE"), //
	};

	template<typename F = ::jint>
	static auto OBJECT_SCOPE() {
		static_assert(field_signatures[jField<F>("OBJECT_SCOPE")] != -1);
		return sat<F>("OBJECT_SCOPE");
	}

	template<typename F = ::jint>
	static auto ONELEVEL_SCOPE() {
		static_assert(field_signatures[jField<F>("ONELEVEL_SCOPE")] != -1);
		return sat<F>("ONELEVEL_SCOPE");
	}

	template<typename F = ::jint>
	static auto SUBTREE_SCOPE() {
		static_assert(field_signatures[jField<F>("SUBTREE_SCOPE")] != -1);
		return sat<F>("SUBTREE_SCOPE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jlong, ::jint, ::java::lang::String *, ::jboolean, ::jboolean)>(), //
		jMethod<::jlong()>("getCountLimit"), //
		jMethod<::jboolean()>("getDerefLinkFlag"), //
		jMethod<::java::lang::String *()>("getReturningAttributes"), //
		jMethod<::jboolean()>("getReturningObjFlag"), //
		jMethod<::jint()>("getSearchScope"), //
		jMethod<::jint()>("getTimeLimit"), //
		jMethod<::jvoid(::jlong)>("setCountLimit"), //
		jMethod<::jvoid(::jboolean)>("setDerefLinkFlag"), //
		jMethod<::jvoid(::java::lang::String *)>("setReturningAttributes"), //
		jMethod<::jvoid(::jboolean)>("setReturningObjFlag"), //
		jMethod<::jvoid(::jint)>("setSearchScope"), //
		jMethod<::jvoid(::jint)>("setTimeLimit"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getCountLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCountLimit")] != -1);
		return call<R>("getCountLimit", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDerefLinkFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDerefLinkFlag")] != -1);
		return call<R>("getDerefLinkFlag", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getReturningAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReturningAttributes")] != -1);
		return call<R>("getReturningAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getReturningObjFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReturningObjFlag")] != -1);
		return call<R>("getReturningObjFlag", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSearchScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSearchScope")] != -1);
		return call<R>("getSearchScope", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTimeLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeLimit")] != -1);
		return call<R>("getTimeLimit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCountLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCountLimit")] != -1);
		return call<R>("setCountLimit", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDerefLinkFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDerefLinkFlag")] != -1);
		return call<R>("setDerefLinkFlag", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReturningAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReturningAttributes")] != -1);
		return call<R>("setReturningAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReturningObjFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setReturningObjFlag")] != -1);
		return call<R>("setReturningObjFlag", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSearchScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSearchScope")] != -1);
		return call<R>("setSearchScope", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeLimit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTimeLimit")] != -1);
		return call<R>("setTimeLimit", forward<Args>(args)...);
	}

};

#endif
