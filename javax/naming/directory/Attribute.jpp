#ifndef javax_naming_directory_Attribute_HPP
#define javax_naming_directory_Attribute_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::directory::Attribute : public jObject<::javax::naming::directory::Attribute, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_directory / "Attribute";

	constexpr static Enume field_signatures{
		jField<::jlong>("serialVersionUID"), //
	};

	template<typename F = ::jlong>
	static auto serialVersionUID() {
		static_assert(field_signatures[jField<F>("serialVersionUID")] != -1);
		return sat<F>("serialVersionUID");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("contains"), //
		jMethod<::java::lang::Object()>("get"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::javax::naming::NamingEnumeration()>("getAll"), //
		jMethod<::javax::naming::directory::DirContext()>("getAttributeDefinition"), //
		jMethod<::javax::naming::directory::DirContext()>("getAttributeSyntaxDefinition"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::jboolean()>("isOrdered"), //
		jMethod<::java::lang::Object(::jint)>("remove"), //
		jMethod<::jboolean(::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("set"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto getAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAll")] != -1);
		return call<R>("getAll", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getAttributeDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeDefinition")] != -1);
		return call<R>("getAttributeDefinition", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getAttributeSyntaxDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributeSyntaxDefinition")] != -1);
		return call<R>("getAttributeSyntaxDefinition", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOrdered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isOrdered")] != -1);
		return call<R>("isOrdered", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("set")] != -1);
		return call<R>("set", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

};

#endif
