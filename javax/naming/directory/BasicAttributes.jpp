#ifndef javax_naming_directory_BasicAttributes_HPP
#define javax_naming_directory_BasicAttributes_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::directory::BasicAttributes : public jObject<::javax::naming::directory::BasicAttributes, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_directory / "BasicAttributes";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jboolean)>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::javax::naming::directory::Attribute(::java::lang::String)>("get"), //
		jMethod<::javax::naming::NamingEnumeration()>("getAll"), //
		jMethod<::javax::naming::NamingEnumeration()>("getIDs"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isCaseIgnored"), //
		jMethod<::javax::naming::directory::Attribute(::java::lang::String, ::java::lang::Object)>("put"), //
		jMethod<::javax::naming::directory::Attribute(::javax::naming::directory::Attribute)>("put"), //
		jMethod<::javax::naming::directory::Attribute(::java::lang::String)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attribute, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto getAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAll")] != -1);
		return call<R>("getAll", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto getIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIDs")] != -1);
		return call<R>("getIDs", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCaseIgnored(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCaseIgnored")] != -1);
		return call<R>("isCaseIgnored", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attribute, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attribute, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("size")] != -1);
		return call<R>("size", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
