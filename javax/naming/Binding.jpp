#ifndef javax_naming_Binding_HPP
#define javax_naming_Binding_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::Binding : public jObject<::javax::naming::Binding, ::javax::naming::NameClassPair> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "Binding";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::jboolean)>(), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::lang::Object()>("getObject"), //
		jMethod<::jvoid(::java::lang::Object)>("setObject"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObject")] != -1);
		return call<R>("setObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
