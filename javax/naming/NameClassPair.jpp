#ifndef javax_naming_NameClassPair_HPP
#define javax_naming_NameClassPair_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::NameClassPair : public jObject<::javax::naming::NameClassPair, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "NameClassPair";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean)>(), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::jboolean()>("isRelative"), //
		jMethod<::jvoid(::java::lang::String)>("setClassName"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setNameInNamespace"), //
		jMethod<::jvoid(::jboolean)>("setRelative"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRelative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRelative")] != -1);
		return call<R>("isRelative", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setClassName")] != -1);
		return call<R>("setClassName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNameInNamespace")] != -1);
		return call<R>("setNameInNamespace", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRelative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRelative")] != -1);
		return call<R>("setRelative", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
