#ifndef javax_naming_InitialContext_HPP
#define javax_naming_InitialContext_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::InitialContext : public jObject<::javax::naming::InitialContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "InitialContext";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("APPLET"), //
		jField<::java::lang::String>("AUTHORITATIVE"), //
		jField<::java::lang::String>("BATCHSIZE"), //
		jField<::java::lang::String>("DNS_URL"), //
		jField<::java::lang::String>("INITIAL_CONTEXT_FACTORY"), //
		jField<::java::lang::String>("LANGUAGE"), //
		jField<::java::lang::String>("OBJECT_FACTORIES"), //
		jField<::java::lang::String>("PROVIDER_URL"), //
		jField<::java::lang::String>("REFERRAL"), //
		jField<::java::lang::String>("SECURITY_AUTHENTICATION"), //
		jField<::java::lang::String>("SECURITY_CREDENTIALS"), //
		jField<::java::lang::String>("SECURITY_PRINCIPAL"), //
		jField<::java::lang::String>("SECURITY_PROTOCOL"), //
		jField<::java::lang::String>("STATE_FACTORIES"), //
		jField<::java::lang::String>("URL_PKG_PREFIXES"), //
	};

	template<typename F = ::java::lang::String>
	static auto APPLET() {
		static_assert(field_signatures[jField<F>("APPLET")] != -1);
		return sat<F>("APPLET");
	}

	template<typename F = ::java::lang::String>
	static auto AUTHORITATIVE() {
		static_assert(field_signatures[jField<F>("AUTHORITATIVE")] != -1);
		return sat<F>("AUTHORITATIVE");
	}

	template<typename F = ::java::lang::String>
	static auto BATCHSIZE() {
		static_assert(field_signatures[jField<F>("BATCHSIZE")] != -1);
		return sat<F>("BATCHSIZE");
	}

	template<typename F = ::java::lang::String>
	static auto DNS_URL() {
		static_assert(field_signatures[jField<F>("DNS_URL")] != -1);
		return sat<F>("DNS_URL");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_CONTEXT_FACTORY() {
		static_assert(field_signatures[jField<F>("INITIAL_CONTEXT_FACTORY")] != -1);
		return sat<F>("INITIAL_CONTEXT_FACTORY");
	}

	template<typename F = ::java::lang::String>
	static auto LANGUAGE() {
		static_assert(field_signatures[jField<F>("LANGUAGE")] != -1);
		return sat<F>("LANGUAGE");
	}

	template<typename F = ::java::lang::String>
	static auto OBJECT_FACTORIES() {
		static_assert(field_signatures[jField<F>("OBJECT_FACTORIES")] != -1);
		return sat<F>("OBJECT_FACTORIES");
	}

	template<typename F = ::java::lang::String>
	static auto PROVIDER_URL() {
		static_assert(field_signatures[jField<F>("PROVIDER_URL")] != -1);
		return sat<F>("PROVIDER_URL");
	}

	template<typename F = ::java::lang::String>
	static auto REFERRAL() {
		static_assert(field_signatures[jField<F>("REFERRAL")] != -1);
		return sat<F>("REFERRAL");
	}

	template<typename F = ::java::lang::String>
	static auto SECURITY_AUTHENTICATION() {
		static_assert(field_signatures[jField<F>("SECURITY_AUTHENTICATION")] != -1);
		return sat<F>("SECURITY_AUTHENTICATION");
	}

	template<typename F = ::java::lang::String>
	static auto SECURITY_CREDENTIALS() {
		static_assert(field_signatures[jField<F>("SECURITY_CREDENTIALS")] != -1);
		return sat<F>("SECURITY_CREDENTIALS");
	}

	template<typename F = ::java::lang::String>
	static auto SECURITY_PRINCIPAL() {
		static_assert(field_signatures[jField<F>("SECURITY_PRINCIPAL")] != -1);
		return sat<F>("SECURITY_PRINCIPAL");
	}

	template<typename F = ::java::lang::String>
	static auto SECURITY_PROTOCOL() {
		static_assert(field_signatures[jField<F>("SECURITY_PROTOCOL")] != -1);
		return sat<F>("SECURITY_PROTOCOL");
	}

	template<typename F = ::java::lang::String>
	static auto STATE_FACTORIES() {
		static_assert(field_signatures[jField<F>("STATE_FACTORIES")] != -1);
		return sat<F>("STATE_FACTORIES");
	}

	template<typename F = ::java::lang::String>
	static auto URL_PKG_PREFIXES() {
		static_assert(field_signatures[jField<F>("URL_PKG_PREFIXES")] != -1);
		return sat<F>("URL_PKG_PREFIXES");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Hashtable)>(), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("addToEnvironment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("composeName"), //
		jMethod<::javax::naming::Name(::javax::naming::Name, ::javax::naming::Name)>("composeName"), //
		jMethod<::javax::naming::Context(::java::lang::String)>("createSubcontext"), //
		jMethod<::javax::naming::Context(::javax::naming::Name)>("createSubcontext"), //
		jMethod<::jvoid(::java::lang::String)>("destroySubcontext"), //
		jMethod<::jvoid(::javax::naming::Name)>("destroySubcontext"), //
		jMethod<::java::lang::Object(::java::lang::String)>("doLookup"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("doLookup"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::javax::naming::NameParser(::java::lang::String)>("getNameParser"), //
		jMethod<::javax::naming::NameParser(::javax::naming::Name)>("getNameParser"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("listBindings"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("listBindings"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookup"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookup"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookupLink"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookupLink"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("rebind"), //
		jMethod<::java::lang::Object(::java::lang::String)>("removeFromEnvironment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("rename"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::Name)>("rename"), //
		jMethod<::jvoid(::java::lang::String)>("unbind"), //
		jMethod<::jvoid(::javax::naming::Name)>("unbind"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto addToEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToEnvironment")] != -1);
		return call<R>("addToEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto composeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("composeName")] != -1);
		return call<R>("composeName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto createSubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSubcontext")] != -1);
		return call<R>("createSubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroySubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroySubcontext")] != -1);
		return call<R>("destroySubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto doLookup(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLookup")] != -1);
		return scall<R>("doLookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NameParser, typename... Args>
	auto getNameParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameParser")] != -1);
		return call<R>("getNameParser", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto listBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listBindings")] != -1);
		return call<R>("listBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return call<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookupLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupLink")] != -1);
		return call<R>("lookupLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rebind")] != -1);
		return call<R>("rebind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFromEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromEnvironment")] != -1);
		return call<R>("removeFromEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rename(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rename")] != -1);
		return call<R>("rename", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbind")] != -1);
		return call<R>("unbind", std::forward<Args>(args)...);
	}

};

#endif
