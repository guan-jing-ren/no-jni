#ifndef javax_naming_ldap_ExtendedRequest_HPP
#define javax_naming_ldap_ExtendedRequest_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::ldap::ExtendedRequest : public jObject<::javax::naming::ldap::ExtendedRequest, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_ldap / "ExtendedRequest";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::naming::ldap::ExtendedResponse(::java::lang::String, ::jbyte *, ::jint, ::jint)>("createExtendedResponse"), //
		jMethod<::jbyte *()>("getEncodedValue"), //
		jMethod<::java::lang::String()>("getID"), //
	};

	template<typename R = ::javax::naming::ldap::ExtendedResponse, typename... Args>
	auto createExtendedResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createExtendedResponse")] != -1);
		return call<R>("createExtendedResponse", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncodedValue")] != -1);
		return call<R>("getEncodedValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", forward<Args>(args)...);
	}

};

#endif
