#ifndef javax_naming_ldap_Rdn_HPP
#define javax_naming_ldap_Rdn_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::ldap::Rdn : public jObject<::javax::naming::ldap::Rdn, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_ldap / "Rdn";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::javax::naming::directory::Attributes)>(), //
		jConstructor<::jvoid(::javax::naming::ldap::Rdn)>(), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::lang::Object)>("escapeValue"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("size"), //
		jMethod<::javax::naming::directory::Attributes()>("toAttributes"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::Object(::java::lang::String)>("unescapeValue"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto escapeValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("escapeValue")] != -1);
		return scall<R>("escapeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attributes, typename... Args>
	auto toAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toAttributes")] != -1);
		return call<R>("toAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto unescapeValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unescapeValue")] != -1);
		return scall<R>("unescapeValue", std::forward<Args>(args)...);
	}

};

#endif
