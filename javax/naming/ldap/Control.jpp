#ifndef javax_naming_ldap_Control_HPP
#define javax_naming_ldap_Control_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::ldap::Control : public jObject<::javax::naming::ldap::Control, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_ldap / "Control";

	constexpr static Enume field_signatures{
		jField<::jboolean>("CRITICAL"), //
		jField<::jboolean>("NONCRITICAL"), //
	};

	template<typename F = ::jboolean>
	static auto CRITICAL() {
		static_assert(field_signatures[jField<F>("CRITICAL")] != -1);
		return sat<F>("CRITICAL");
	}

	template<typename F = ::jboolean>
	static auto NONCRITICAL() {
		static_assert(field_signatures[jField<F>("NONCRITICAL")] != -1);
		return sat<F>("NONCRITICAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::jbyte *()>("getEncodedValue"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::jboolean()>("isCritical"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncodedValue")] != -1);
		return call<R>("getEncodedValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCritical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCritical")] != -1);
		return call<R>("isCritical", forward<Args>(args)...);
	}

};

#endif
