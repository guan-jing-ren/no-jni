#ifndef javax_naming_LinkException_HPP
#define javax_naming_LinkException_HPP

#include "../../jfwd_decl.hpp"

class ::javax::naming::LinkException : public jObject<::javax::naming::LinkException, ::javax::naming::NamingException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming / "LinkException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getLinkExplanation"), //
		jMethod<::javax::naming::Name()>("getLinkRemainingName"), //
		jMethod<::javax::naming::Name()>("getLinkResolvedName"), //
		jMethod<::java::lang::Object()>("getLinkResolvedObj"), //
		jMethod<::jvoid(::java::lang::String)>("setLinkExplanation"), //
		jMethod<::jvoid(::javax::naming::Name)>("setLinkRemainingName"), //
		jMethod<::jvoid(::javax::naming::Name)>("setLinkResolvedName"), //
		jMethod<::jvoid(::java::lang::Object)>("setLinkResolvedObj"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jboolean)>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getLinkExplanation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkExplanation")] != -1);
		return call<R>("getLinkExplanation", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getLinkRemainingName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkRemainingName")] != -1);
		return call<R>("getLinkRemainingName", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getLinkResolvedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkResolvedName")] != -1);
		return call<R>("getLinkResolvedName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getLinkResolvedObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkResolvedObj")] != -1);
		return call<R>("getLinkResolvedObj", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkExplanation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkExplanation")] != -1);
		return call<R>("setLinkExplanation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkRemainingName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkRemainingName")] != -1);
		return call<R>("setLinkRemainingName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkResolvedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkResolvedName")] != -1);
		return call<R>("setLinkResolvedName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkResolvedObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkResolvedObj")] != -1);
		return call<R>("setLinkResolvedObj", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
