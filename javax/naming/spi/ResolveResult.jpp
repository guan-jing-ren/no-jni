#ifndef javax_naming_spi_ResolveResult_HPP
#define javax_naming_spi_ResolveResult_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::spi::ResolveResult : public jObject<::javax::naming::spi::ResolveResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_spi / "ResolveResult";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::javax::naming::Name)>(), //
		jMethod<::jvoid(::java::lang::String)>("appendRemainingComponent"), //
		jMethod<::jvoid(::javax::naming::Name)>("appendRemainingName"), //
		jMethod<::javax::naming::Name()>("getRemainingName"), //
		jMethod<::java::lang::Object()>("getResolvedObj"), //
		jMethod<::jvoid(::javax::naming::Name)>("setRemainingName"), //
		jMethod<::jvoid(::java::lang::Object)>("setResolvedObj"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto appendRemainingComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendRemainingComponent")] != -1);
		return call<R>("appendRemainingComponent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appendRemainingName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendRemainingName")] != -1);
		return call<R>("appendRemainingName", forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getRemainingName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRemainingName")] != -1);
		return call<R>("getRemainingName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getResolvedObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResolvedObj")] != -1);
		return call<R>("getResolvedObj", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRemainingName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRemainingName")] != -1);
		return call<R>("setRemainingName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResolvedObj(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResolvedObj")] != -1);
		return call<R>("setResolvedObj", forward<Args>(args)...);
	}

};

#endif
