#ifndef javax_naming_event_EventContext_HPP
#define javax_naming_event_EventContext_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::event::EventContext : public jObject<::javax::naming::event::EventContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_event / "EventContext";

	constexpr static Enume field_signatures{
		jField<::jint>("OBJECT_SCOPE"), //
		jField<::jint>("ONELEVEL_SCOPE"), //
		jField<::jint>("SUBTREE_SCOPE"), //
	};

	template<typename F = ::jint>
	static auto OBJECT_SCOPE() {
		static_assert(field_signatures[jField<F>("OBJECT_SCOPE")] != -1);
		return sat<F>("OBJECT_SCOPE");
	}

	template<typename F = ::jint>
	static auto ONELEVEL_SCOPE() {
		static_assert(field_signatures[jField<F>("ONELEVEL_SCOPE")] != -1);
		return sat<F>("ONELEVEL_SCOPE");
	}

	template<typename F = ::jint>
	static auto SUBTREE_SCOPE() {
		static_assert(field_signatures[jField<F>("SUBTREE_SCOPE")] != -1);
		return sat<F>("SUBTREE_SCOPE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("addToEnvironment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("composeName"), //
		jMethod<::javax::naming::Name(::javax::naming::Name, ::javax::naming::Name)>("composeName"), //
		jMethod<::javax::naming::Context(::java::lang::String)>("createSubcontext"), //
		jMethod<::javax::naming::Context(::javax::naming::Name)>("createSubcontext"), //
		jMethod<::jvoid(::java::lang::String)>("destroySubcontext"), //
		jMethod<::jvoid(::javax::naming::Name)>("destroySubcontext"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::javax::naming::NameParser(::java::lang::String)>("getNameParser"), //
		jMethod<::javax::naming::NameParser(::javax::naming::Name)>("getNameParser"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("listBindings"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("listBindings"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookup"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookup"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookupLink"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookupLink"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("rebind"), //
		jMethod<::java::lang::Object(::java::lang::String)>("removeFromEnvironment"), //
		jMethod<::jvoid(::javax::naming::event::NamingListener)>("removeNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("rename"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::Name)>("rename"), //
		jMethod<::jboolean()>("targetMustExist"), //
		jMethod<::jvoid(::java::lang::String)>("unbind"), //
		jMethod<::jvoid(::javax::naming::Name)>("unbind"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNamingListener")] != -1);
		return call<R>("addNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto addToEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToEnvironment")] != -1);
		return call<R>("addToEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto composeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("composeName")] != -1);
		return call<R>("composeName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto createSubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSubcontext")] != -1);
		return call<R>("createSubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroySubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroySubcontext")] != -1);
		return call<R>("destroySubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NameParser, typename... Args>
	auto getNameParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameParser")] != -1);
		return call<R>("getNameParser", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto listBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listBindings")] != -1);
		return call<R>("listBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return call<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookupLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupLink")] != -1);
		return call<R>("lookupLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rebind")] != -1);
		return call<R>("rebind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFromEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromEnvironment")] != -1);
		return call<R>("removeFromEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamingListener")] != -1);
		return call<R>("removeNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rename(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rename")] != -1);
		return call<R>("rename", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto targetMustExist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("targetMustExist")] != -1);
		return call<R>("targetMustExist", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbind")] != -1);
		return call<R>("unbind", std::forward<Args>(args)...);
	}

};

#endif
