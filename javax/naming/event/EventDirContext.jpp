#ifndef javax_naming_event_EventDirContext_HPP
#define javax_naming_event_EventDirContext_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::naming::event::EventDirContext : public jObject<::javax::naming::event::EventDirContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_naming_event / "EventDirContext";

	constexpr static Enume field_signatures{
		jField<::jint>("ADD_ATTRIBUTE"), //
		jField<::jint>("OBJECT_SCOPE"), //
		jField<::jint>("ONELEVEL_SCOPE"), //
		jField<::jint>("REMOVE_ATTRIBUTE"), //
		jField<::jint>("REPLACE_ATTRIBUTE"), //
		jField<::jint>("SUBTREE_SCOPE"), //
	};

	template<typename F = ::jint>
	static auto ADD_ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("ADD_ATTRIBUTE")] != -1);
		return sat<F>("ADD_ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto OBJECT_SCOPE() {
		static_assert(field_signatures[jField<F>("OBJECT_SCOPE")] != -1);
		return sat<F>("OBJECT_SCOPE");
	}

	template<typename F = ::jint>
	static auto ONELEVEL_SCOPE() {
		static_assert(field_signatures[jField<F>("ONELEVEL_SCOPE")] != -1);
		return sat<F>("ONELEVEL_SCOPE");
	}

	template<typename F = ::jint>
	static auto REMOVE_ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("REMOVE_ATTRIBUTE")] != -1);
		return sat<F>("REMOVE_ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto REPLACE_ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("REPLACE_ATTRIBUTE")] != -1);
		return sat<F>("REPLACE_ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto SUBTREE_SCOPE() {
		static_assert(field_signatures[jField<F>("SUBTREE_SCOPE")] != -1);
		return sat<F>("SUBTREE_SCOPE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::String, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::javax::naming::directory::Attributes)>("bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes)>("bind"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String, ::javax::naming::directory::Attributes)>("createSubcontext"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name, ::javax::naming::directory::Attributes)>("createSubcontext"), //
		jMethod<::javax::naming::directory::Attributes(::java::lang::String)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::java::lang::String, ::java::lang::String *)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::javax::naming::Name)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::javax::naming::Name, ::java::lang::String *)>("getAttributes"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String)>("getSchema"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name)>("getSchema"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String)>("getSchemaClassDefinition"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name)>("getSchemaClassDefinition"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::javax::naming::directory::Attributes)>("modifyAttributes"), //
		jMethod<::jvoid(::java::lang::String, ::javax::naming::directory::ModificationItem *)>("modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::directory::Attributes)>("modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::directory::ModificationItem *)>("modifyAttributes"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::javax::naming::directory::Attributes)>("rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes)>("rebind"), //
		jMethod<::jvoid(::javax::naming::event::NamingListener)>("removeNamingListener"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::java::lang::String, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::javax::naming::directory::Attributes)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::javax::naming::directory::Attributes, ::java::lang::String *)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::javax::naming::directory::Attributes)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::javax::naming::directory::Attributes, ::java::lang::String *)>("search"), //
		jMethod<::jboolean()>("targetMustExist"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNamingListener")] != -1);
		return call<R>("addNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto createSubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSubcontext")] != -1);
		return call<R>("createSubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attributes, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getSchemaClassDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaClassDefinition")] != -1);
		return call<R>("getSchemaClassDefinition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modifyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modifyAttributes")] != -1);
		return call<R>("modifyAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rebind")] != -1);
		return call<R>("rebind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamingListener")] != -1);
		return call<R>("removeNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto search(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("search")] != -1);
		return call<R>("search", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto targetMustExist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("targetMustExist")] != -1);
		return call<R>("targetMustExist", std::forward<Args>(args)...);
	}

};

#endif
