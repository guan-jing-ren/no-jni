#ifndef javax_activation_URLDataSource_HPP
#define javax_activation_URLDataSource_HPP

#include "../../jfwd_decl.hpp"

class ::javax::activation::URLDataSource : public jObject<::javax::activation::URLDataSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_activation / "URLDataSource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::java::net::URL()>("getURL"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", forward<Args>(args)...);
	}

};

#endif
