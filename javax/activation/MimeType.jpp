#ifndef javax_activation_MimeType_HPP
#define javax_activation_MimeType_HPP

#include "../../jfwd_decl.hpp"

class ::javax::activation::MimeType : public jObject<::javax::activation::MimeType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_activation / "MimeType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getBaseType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getParameter"), //
		jMethod<::javax::activation::MimeTypeParameterList()>("getParameters"), //
		jMethod<::java::lang::String()>("getPrimaryType"), //
		jMethod<::java::lang::String()>("getSubType"), //
		jMethod<::jboolean(::java::lang::String)>("match"), //
		jMethod<::jboolean(::javax::activation::MimeType)>("match"), //
		jMethod<::jvoid(::java::io::ObjectInput)>("readExternal"), //
		jMethod<::jvoid(::java::lang::String)>("removeParameter"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setParameter"), //
		jMethod<::jvoid(::java::lang::String)>("setPrimaryType"), //
		jMethod<::jvoid(::java::lang::String)>("setSubType"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::ObjectOutput)>("writeExternal"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseType")] != -1);
		return call<R>("getBaseType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::activation::MimeTypeParameterList, typename... Args>
	auto getParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameters")] != -1);
		return call<R>("getParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrimaryType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryType")] != -1);
		return call<R>("getPrimaryType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSubType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubType")] != -1);
		return call<R>("getSubType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto match(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("match")] != -1);
		return call<R>("match", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readExternal")] != -1);
		return call<R>("readExternal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeParameter")] != -1);
		return call<R>("removeParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParameter")] != -1);
		return call<R>("setParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrimaryType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrimaryType")] != -1);
		return call<R>("setPrimaryType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSubType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSubType")] != -1);
		return call<R>("setSubType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeExternal")] != -1);
		return call<R>("writeExternal", std::forward<Args>(args)...);
	}

};

#endif
