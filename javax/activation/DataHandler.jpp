#ifndef javax_activation_DataHandler_HPP
#define javax_activation_DataHandler_HPP

#include "../../jfwd_decl.hpp"

class ::javax::activation::DataHandler : public jObject<::javax::activation::DataHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_activation / "DataHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jConstructor<::jvoid(::javax::activation::DataSource)>(), //
		jMethod<::javax::activation::CommandInfo *()>("getAllCommands"), //
		jMethod<::java::lang::Object(::javax::activation::CommandInfo)>("getBean"), //
		jMethod<::javax::activation::CommandInfo(::java::lang::String)>("getCommand"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::javax::activation::DataSource()>("getDataSource"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::javax::activation::CommandInfo *()>("getPreferredCommands"), //
		jMethod<::java::lang::Object(::java::awt::datatransfer::DataFlavor)>("getTransferData"), //
		jMethod<::java::awt::datatransfer::DataFlavor *()>("getTransferDataFlavors"), //
		jMethod<::jboolean(::java::awt::datatransfer::DataFlavor)>("isDataFlavorSupported"), //
		jMethod<::jvoid(::javax::activation::CommandMap)>("setCommandMap"), //
		jMethod<::jvoid(::javax::activation::DataContentHandlerFactory)>("setDataContentHandlerFactory"), //
		jMethod<::jvoid(::java::io::OutputStream)>("writeTo"), //
	};

	template<typename R = ::javax::activation::CommandInfo *, typename... Args>
	auto getAllCommands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllCommands")] != -1);
		return call<R>("getAllCommands", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBean")] != -1);
		return call<R>("getBean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::activation::CommandInfo, typename... Args>
	auto getCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommand")] != -1);
		return call<R>("getCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::activation::DataSource, typename... Args>
	auto getDataSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSource")] != -1);
		return call<R>("getDataSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::activation::CommandInfo *, typename... Args>
	auto getPreferredCommands(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredCommands")] != -1);
		return call<R>("getPreferredCommands", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTransferData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferData")] != -1);
		return call<R>("getTransferData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::datatransfer::DataFlavor *, typename... Args>
	auto getTransferDataFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransferDataFlavors")] != -1);
		return call<R>("getTransferDataFlavors", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDataFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDataFlavorSupported")] != -1);
		return call<R>("isDataFlavorSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCommandMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCommandMap")] != -1);
		return call<R>("setCommandMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDataContentHandlerFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataContentHandlerFactory")] != -1);
		return scall<R>("setDataContentHandlerFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeTo")] != -1);
		return call<R>("writeTo", std::forward<Args>(args)...);
	}

};

#endif
