#ifndef javax_accessibility_AccessibleContext_HPP
#define javax_accessibility_AccessibleContext_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleContext : public jObject<::javax::accessibility::AccessibleContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleContext";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCESSIBLE_ACTION_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_CARET_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_CHILD_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_COMPONENT_BOUNDS_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_DESCRIPTION_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_HYPERTEXT_OFFSET"), //
		jField<::java::lang::String>("ACCESSIBLE_INVALIDATE_CHILDREN"), //
		jField<::java::lang::String>("ACCESSIBLE_NAME_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_SELECTION_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_STATE_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_CAPTION_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_MODEL_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_ROW_HEADER_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TABLE_SUMMARY_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED"), //
		jField<::java::lang::String>("ACCESSIBLE_TEXT_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_VALUE_PROPERTY"), //
		jField<::java::lang::String>("ACCESSIBLE_VISIBLE_DATA_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_ACTION_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_ACTION_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_ACTION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_ACTIVE_DESCENDANT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_CARET_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_CARET_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_CARET_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_CHILD_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_CHILD_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_CHILD_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_COMPONENT_BOUNDS_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_COMPONENT_BOUNDS_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_COMPONENT_BOUNDS_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_DESCRIPTION_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_DESCRIPTION_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_DESCRIPTION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_HYPERTEXT_OFFSET() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_HYPERTEXT_OFFSET")] != -1);
		return sat<F>("ACCESSIBLE_HYPERTEXT_OFFSET");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_INVALIDATE_CHILDREN() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_INVALIDATE_CHILDREN")] != -1);
		return sat<F>("ACCESSIBLE_INVALIDATE_CHILDREN");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_NAME_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_NAME_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_NAME_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_SELECTION_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_SELECTION_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_SELECTION_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_STATE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_STATE_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_STATE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_CAPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_CAPTION_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_CAPTION_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_COLUMN_DESCRIPTION_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_COLUMN_HEADER_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_MODEL_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_MODEL_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_MODEL_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_ROW_DESCRIPTION_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_ROW_HEADER_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_ROW_HEADER_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_ROW_HEADER_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TABLE_SUMMARY_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TABLE_SUMMARY_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TABLE_SUMMARY_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED")] != -1);
		return sat<F>("ACCESSIBLE_TEXT_ATTRIBUTES_CHANGED");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_TEXT_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_TEXT_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_TEXT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_VALUE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_VALUE_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_VALUE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCESSIBLE_VISIBLE_DATA_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCESSIBLE_VISIBLE_DATA_PROPERTY")] != -1);
		return sat<F>("ACCESSIBLE_VISIBLE_DATA_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::java::lang::Object)>("firePropertyChange"), //
		jMethod<::javax::accessibility::AccessibleAction()>("getAccessibleAction"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleChild"), //
		jMethod<::jint()>("getAccessibleChildrenCount"), //
		jMethod<::javax::accessibility::AccessibleComponent()>("getAccessibleComponent"), //
		jMethod<::java::lang::String()>("getAccessibleDescription"), //
		jMethod<::javax::accessibility::AccessibleEditableText()>("getAccessibleEditableText"), //
		jMethod<::javax::accessibility::AccessibleIcon *()>("getAccessibleIcon"), //
		jMethod<::jint()>("getAccessibleIndexInParent"), //
		jMethod<::java::lang::String()>("getAccessibleName"), //
		jMethod<::javax::accessibility::Accessible()>("getAccessibleParent"), //
		jMethod<::javax::accessibility::AccessibleRelationSet()>("getAccessibleRelationSet"), //
		jMethod<::javax::accessibility::AccessibleRole()>("getAccessibleRole"), //
		jMethod<::javax::accessibility::AccessibleSelection()>("getAccessibleSelection"), //
		jMethod<::javax::accessibility::AccessibleStateSet()>("getAccessibleStateSet"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleTable"), //
		jMethod<::javax::accessibility::AccessibleText()>("getAccessibleText"), //
		jMethod<::javax::accessibility::AccessibleValue()>("getAccessibleValue"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessibleDescription"), //
		jMethod<::jvoid(::java::lang::String)>("setAccessibleName"), //
		jMethod<::jvoid(::javax::accessibility::Accessible)>("setAccessibleParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto firePropertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("firePropertyChange")] != -1);
		return call<R>("firePropertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleAction, typename... Args>
	auto getAccessibleAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleAction")] != -1);
		return call<R>("getAccessibleAction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChild")] != -1);
		return call<R>("getAccessibleChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleChildrenCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleChildrenCount")] != -1);
		return call<R>("getAccessibleChildrenCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleComponent, typename... Args>
	auto getAccessibleComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleComponent")] != -1);
		return call<R>("getAccessibleComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleDescription")] != -1);
		return call<R>("getAccessibleDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleEditableText, typename... Args>
	auto getAccessibleEditableText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleEditableText")] != -1);
		return call<R>("getAccessibleEditableText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleIcon *, typename... Args>
	auto getAccessibleIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIcon")] != -1);
		return call<R>("getAccessibleIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleIndexInParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIndexInParent")] != -1);
		return call<R>("getAccessibleIndexInParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleName")] != -1);
		return call<R>("getAccessibleName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleParent")] != -1);
		return call<R>("getAccessibleParent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleRelationSet, typename... Args>
	auto getAccessibleRelationSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRelationSet")] != -1);
		return call<R>("getAccessibleRelationSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleRole, typename... Args>
	auto getAccessibleRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRole")] != -1);
		return call<R>("getAccessibleRole", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleSelection, typename... Args>
	auto getAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleSelection")] != -1);
		return call<R>("getAccessibleSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleStateSet, typename... Args>
	auto getAccessibleStateSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleStateSet")] != -1);
		return call<R>("getAccessibleStateSet", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleTable")] != -1);
		return call<R>("getAccessibleTable", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleText, typename... Args>
	auto getAccessibleText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleText")] != -1);
		return call<R>("getAccessibleText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleValue, typename... Args>
	auto getAccessibleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleValue")] != -1);
		return call<R>("getAccessibleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleDescription")] != -1);
		return call<R>("setAccessibleDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleName")] != -1);
		return call<R>("setAccessibleName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleParent")] != -1);
		return call<R>("setAccessibleParent", std::forward<Args>(args)...);
	}

};

#endif
