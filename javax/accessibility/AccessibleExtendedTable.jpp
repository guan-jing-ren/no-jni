#ifndef javax_accessibility_AccessibleExtendedTable_HPP
#define javax_accessibility_AccessibleExtendedTable_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleExtendedTable : public jObject<::javax::accessibility::AccessibleExtendedTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleExtendedTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::accessibility::Accessible(::jint, ::jint)>("getAccessibleAt"), //
		jMethod<::javax::accessibility::Accessible()>("getAccessibleCaption"), //
		jMethod<::jint(::jint)>("getAccessibleColumn"), //
		jMethod<::jint()>("getAccessibleColumnCount"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleColumnDescription"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleColumnExtentAt"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleColumnHeader"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleIndex"), //
		jMethod<::jint(::jint)>("getAccessibleRow"), //
		jMethod<::jint()>("getAccessibleRowCount"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleRowDescription"), //
		jMethod<::jint(::jint, ::jint)>("getAccessibleRowExtentAt"), //
		jMethod<::javax::accessibility::AccessibleTable()>("getAccessibleRowHeader"), //
		jMethod<::javax::accessibility::Accessible()>("getAccessibleSummary"), //
		jMethod<::jint *()>("getSelectedAccessibleColumns"), //
		jMethod<::jint *()>("getSelectedAccessibleRows"), //
		jMethod<::jboolean(::jint)>("isAccessibleColumnSelected"), //
		jMethod<::jboolean(::jint)>("isAccessibleRowSelected"), //
		jMethod<::jboolean(::jint, ::jint)>("isAccessibleSelected"), //
		jMethod<::jvoid(::javax::accessibility::Accessible)>("setAccessibleCaption"), //
		jMethod<::jvoid(::jint, ::javax::accessibility::Accessible)>("setAccessibleColumnDescription"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleTable)>("setAccessibleColumnHeader"), //
		jMethod<::jvoid(::jint, ::javax::accessibility::Accessible)>("setAccessibleRowDescription"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleTable)>("setAccessibleRowHeader"), //
		jMethod<::jvoid(::javax::accessibility::Accessible)>("setAccessibleSummary"), //
	};

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleAt")] != -1);
		return call<R>("getAccessibleAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleCaption")] != -1);
		return call<R>("getAccessibleCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumn")] != -1);
		return call<R>("getAccessibleColumn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnCount")] != -1);
		return call<R>("getAccessibleColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleColumnDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnDescription")] != -1);
		return call<R>("getAccessibleColumnDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleColumnExtentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnExtentAt")] != -1);
		return call<R>("getAccessibleColumnExtentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleColumnHeader")] != -1);
		return call<R>("getAccessibleColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleIndex")] != -1);
		return call<R>("getAccessibleIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRow")] != -1);
		return call<R>("getAccessibleRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRowCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowCount")] != -1);
		return call<R>("getAccessibleRowCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleRowDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowDescription")] != -1);
		return call<R>("getAccessibleRowDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleRowExtentAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowExtentAt")] != -1);
		return call<R>("getAccessibleRowExtentAt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleTable, typename... Args>
	auto getAccessibleRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleRowHeader")] != -1);
		return call<R>("getAccessibleRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleSummary")] != -1);
		return call<R>("getAccessibleSummary", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedAccessibleColumns(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedAccessibleColumns")] != -1);
		return call<R>("getSelectedAccessibleColumns", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getSelectedAccessibleRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedAccessibleRows")] != -1);
		return call<R>("getSelectedAccessibleRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleColumnSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleColumnSelected")] != -1);
		return call<R>("isAccessibleColumnSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleRowSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleRowSelected")] != -1);
		return call<R>("isAccessibleRowSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleSelected")] != -1);
		return call<R>("isAccessibleSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleCaption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleCaption")] != -1);
		return call<R>("setAccessibleCaption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleColumnDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleColumnDescription")] != -1);
		return call<R>("setAccessibleColumnDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleColumnHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleColumnHeader")] != -1);
		return call<R>("setAccessibleColumnHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleRowDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleRowDescription")] != -1);
		return call<R>("setAccessibleRowDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleRowHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleRowHeader")] != -1);
		return call<R>("setAccessibleRowHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAccessibleSummary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAccessibleSummary")] != -1);
		return call<R>("setAccessibleSummary", std::forward<Args>(args)...);
	}

};

#endif
