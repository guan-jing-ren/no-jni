#ifndef javax_accessibility_AccessibleState_HPP
#define javax_accessibility_AccessibleState_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleState : public jObject<::javax::accessibility::AccessibleState, ::javax::accessibility::AccessibleBundle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleState";

	constexpr static Enume field_signatures{
		jField<::javax::accessibility::AccessibleState>("ACTIVE"), //
		jField<::javax::accessibility::AccessibleState>("ARMED"), //
		jField<::javax::accessibility::AccessibleState>("BUSY"), //
		jField<::javax::accessibility::AccessibleState>("CHECKED"), //
		jField<::javax::accessibility::AccessibleState>("COLLAPSED"), //
		jField<::javax::accessibility::AccessibleState>("EDITABLE"), //
		jField<::javax::accessibility::AccessibleState>("ENABLED"), //
		jField<::javax::accessibility::AccessibleState>("EXPANDABLE"), //
		jField<::javax::accessibility::AccessibleState>("EXPANDED"), //
		jField<::javax::accessibility::AccessibleState>("FOCUSABLE"), //
		jField<::javax::accessibility::AccessibleState>("FOCUSED"), //
		jField<::javax::accessibility::AccessibleState>("HORIZONTAL"), //
		jField<::javax::accessibility::AccessibleState>("ICONIFIED"), //
		jField<::javax::accessibility::AccessibleState>("INDETERMINATE"), //
		jField<::javax::accessibility::AccessibleState>("MANAGES_DESCENDANTS"), //
		jField<::javax::accessibility::AccessibleState>("MODAL"), //
		jField<::javax::accessibility::AccessibleState>("MULTISELECTABLE"), //
		jField<::javax::accessibility::AccessibleState>("MULTI_LINE"), //
		jField<::javax::accessibility::AccessibleState>("OPAQUE"), //
		jField<::javax::accessibility::AccessibleState>("PRESSED"), //
		jField<::javax::accessibility::AccessibleState>("RESIZABLE"), //
		jField<::javax::accessibility::AccessibleState>("SELECTABLE"), //
		jField<::javax::accessibility::AccessibleState>("SELECTED"), //
		jField<::javax::accessibility::AccessibleState>("SHOWING"), //
		jField<::javax::accessibility::AccessibleState>("SINGLE_LINE"), //
		jField<::javax::accessibility::AccessibleState>("TRANSIENT"), //
		jField<::javax::accessibility::AccessibleState>("TRUNCATED"), //
		jField<::javax::accessibility::AccessibleState>("VERTICAL"), //
		jField<::javax::accessibility::AccessibleState>("VISIBLE"), //
	};

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto ACTIVE() {
		static_assert(field_signatures[jField<F>("ACTIVE")] != -1);
		return sat<F>("ACTIVE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto ARMED() {
		static_assert(field_signatures[jField<F>("ARMED")] != -1);
		return sat<F>("ARMED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto BUSY() {
		static_assert(field_signatures[jField<F>("BUSY")] != -1);
		return sat<F>("BUSY");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto CHECKED() {
		static_assert(field_signatures[jField<F>("CHECKED")] != -1);
		return sat<F>("CHECKED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto COLLAPSED() {
		static_assert(field_signatures[jField<F>("COLLAPSED")] != -1);
		return sat<F>("COLLAPSED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto EDITABLE() {
		static_assert(field_signatures[jField<F>("EDITABLE")] != -1);
		return sat<F>("EDITABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto ENABLED() {
		static_assert(field_signatures[jField<F>("ENABLED")] != -1);
		return sat<F>("ENABLED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto EXPANDABLE() {
		static_assert(field_signatures[jField<F>("EXPANDABLE")] != -1);
		return sat<F>("EXPANDABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto EXPANDED() {
		static_assert(field_signatures[jField<F>("EXPANDED")] != -1);
		return sat<F>("EXPANDED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto FOCUSABLE() {
		static_assert(field_signatures[jField<F>("FOCUSABLE")] != -1);
		return sat<F>("FOCUSABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto FOCUSED() {
		static_assert(field_signatures[jField<F>("FOCUSED")] != -1);
		return sat<F>("FOCUSED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto HORIZONTAL() {
		static_assert(field_signatures[jField<F>("HORIZONTAL")] != -1);
		return sat<F>("HORIZONTAL");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto ICONIFIED() {
		static_assert(field_signatures[jField<F>("ICONIFIED")] != -1);
		return sat<F>("ICONIFIED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto INDETERMINATE() {
		static_assert(field_signatures[jField<F>("INDETERMINATE")] != -1);
		return sat<F>("INDETERMINATE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto MANAGES_DESCENDANTS() {
		static_assert(field_signatures[jField<F>("MANAGES_DESCENDANTS")] != -1);
		return sat<F>("MANAGES_DESCENDANTS");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto MODAL() {
		static_assert(field_signatures[jField<F>("MODAL")] != -1);
		return sat<F>("MODAL");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto MULTISELECTABLE() {
		static_assert(field_signatures[jField<F>("MULTISELECTABLE")] != -1);
		return sat<F>("MULTISELECTABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto MULTI_LINE() {
		static_assert(field_signatures[jField<F>("MULTI_LINE")] != -1);
		return sat<F>("MULTI_LINE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto OPAQUE() {
		static_assert(field_signatures[jField<F>("OPAQUE")] != -1);
		return sat<F>("OPAQUE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto PRESSED() {
		static_assert(field_signatures[jField<F>("PRESSED")] != -1);
		return sat<F>("PRESSED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto RESIZABLE() {
		static_assert(field_signatures[jField<F>("RESIZABLE")] != -1);
		return sat<F>("RESIZABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto SELECTABLE() {
		static_assert(field_signatures[jField<F>("SELECTABLE")] != -1);
		return sat<F>("SELECTABLE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto SHOWING() {
		static_assert(field_signatures[jField<F>("SHOWING")] != -1);
		return sat<F>("SHOWING");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto SINGLE_LINE() {
		static_assert(field_signatures[jField<F>("SINGLE_LINE")] != -1);
		return sat<F>("SINGLE_LINE");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto TRANSIENT() {
		static_assert(field_signatures[jField<F>("TRANSIENT")] != -1);
		return sat<F>("TRANSIENT");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto TRUNCATED() {
		static_assert(field_signatures[jField<F>("TRUNCATED")] != -1);
		return sat<F>("TRUNCATED");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto VERTICAL() {
		static_assert(field_signatures[jField<F>("VERTICAL")] != -1);
		return sat<F>("VERTICAL");
	}

	template<typename F = ::javax::accessibility::AccessibleState>
	static auto VISIBLE() {
		static_assert(field_signatures[jField<F>("VISIBLE")] != -1);
		return sat<F>("VISIBLE");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
