#ifndef javax_accessibility_AccessibleSelection_HPP
#define javax_accessibility_AccessibleSelection_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleSelection : public jObject<::javax::accessibility::AccessibleSelection, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleSelection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("addAccessibleSelection"), //
		jMethod<::jvoid()>("clearAccessibleSelection"), //
		jMethod<::javax::accessibility::Accessible(::jint)>("getAccessibleSelection"), //
		jMethod<::jint()>("getAccessibleSelectionCount"), //
		jMethod<::jboolean(::jint)>("isAccessibleChildSelected"), //
		jMethod<::jvoid(::jint)>("removeAccessibleSelection"), //
		jMethod<::jvoid()>("selectAllAccessibleSelection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAccessibleSelection")] != -1);
		return call<R>("addAccessibleSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAccessibleSelection")] != -1);
		return call<R>("clearAccessibleSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::Accessible, typename... Args>
	auto getAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleSelection")] != -1);
		return call<R>("getAccessibleSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleSelectionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleSelectionCount")] != -1);
		return call<R>("getAccessibleSelectionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAccessibleChildSelected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAccessibleChildSelected")] != -1);
		return call<R>("isAccessibleChildSelected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAccessibleSelection")] != -1);
		return call<R>("removeAccessibleSelection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto selectAllAccessibleSelection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectAllAccessibleSelection")] != -1);
		return call<R>("selectAllAccessibleSelection", std::forward<Args>(args)...);
	}

};

#endif
