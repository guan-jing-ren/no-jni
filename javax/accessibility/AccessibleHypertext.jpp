#ifndef javax_accessibility_AccessibleHypertext_HPP
#define javax_accessibility_AccessibleHypertext_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleHypertext : public jObject<::javax::accessibility::AccessibleHypertext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleHypertext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::jint, ::jint)>("getAfterIndex"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getAtIndex"), //
		jMethod<::java::lang::String(::jint, ::jint)>("getBeforeIndex"), //
		jMethod<::jint()>("getCaretPosition"), //
		jMethod<::jint()>("getCharCount"), //
		jMethod<::javax::swing::text::AttributeSet(::jint)>("getCharacterAttribute"), //
		jMethod<::java::awt::Rectangle(::jint)>("getCharacterBounds"), //
		jMethod<::jint(::java::awt::Point)>("getIndexAtPoint"), //
		jMethod<::javax::accessibility::AccessibleHyperlink(::jint)>("getLink"), //
		jMethod<::jint()>("getLinkCount"), //
		jMethod<::jint(::jint)>("getLinkIndex"), //
		jMethod<::java::lang::String()>("getSelectedText"), //
		jMethod<::jint()>("getSelectionEnd"), //
		jMethod<::jint()>("getSelectionStart"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getAfterIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAfterIndex")] != -1);
		return call<R>("getAfterIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAtIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAtIndex")] != -1);
		return call<R>("getAtIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBeforeIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBeforeIndex")] != -1);
		return call<R>("getBeforeIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaretPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaretPosition")] != -1);
		return call<R>("getCaretPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCharCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCount")] != -1);
		return call<R>("getCharCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::text::AttributeSet, typename... Args>
	auto getCharacterAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterAttribute")] != -1);
		return call<R>("getCharacterAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Rectangle, typename... Args>
	auto getCharacterBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterBounds")] != -1);
		return call<R>("getCharacterBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIndexAtPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndexAtPoint")] != -1);
		return call<R>("getIndexAtPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleHyperlink, typename... Args>
	auto getLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLink")] != -1);
		return call<R>("getLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLinkCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinkCount")] != -1);
		return call<R>("getLinkCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLinkIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLinkIndex")] != -1);
		return call<R>("getLinkIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSelectedText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedText")] != -1);
		return call<R>("getSelectedText", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionEnd(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionEnd")] != -1);
		return call<R>("getSelectionEnd", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectionStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionStart")] != -1);
		return call<R>("getSelectionStart", std::forward<Args>(args)...);
	}

};

#endif
