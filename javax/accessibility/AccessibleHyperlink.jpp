#ifndef javax_accessibility_AccessibleHyperlink_HPP
#define javax_accessibility_AccessibleHyperlink_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleHyperlink : public jObject<::javax::accessibility::AccessibleHyperlink, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleHyperlink";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CLICK"), //
		jField<::java::lang::String>("DECREMENT"), //
		jField<::java::lang::String>("INCREMENT"), //
		jField<::java::lang::String>("TOGGLE_EXPAND"), //
		jField<::java::lang::String>("TOGGLE_POPUP"), //
	};

	template<typename F = ::java::lang::String>
	static auto CLICK() {
		static_assert(field_signatures[jField<F>("CLICK")] != -1);
		return sat<F>("CLICK");
	}

	template<typename F = ::java::lang::String>
	static auto DECREMENT() {
		static_assert(field_signatures[jField<F>("DECREMENT")] != -1);
		return sat<F>("DECREMENT");
	}

	template<typename F = ::java::lang::String>
	static auto INCREMENT() {
		static_assert(field_signatures[jField<F>("INCREMENT")] != -1);
		return sat<F>("INCREMENT");
	}

	template<typename F = ::java::lang::String>
	static auto TOGGLE_EXPAND() {
		static_assert(field_signatures[jField<F>("TOGGLE_EXPAND")] != -1);
		return sat<F>("TOGGLE_EXPAND");
	}

	template<typename F = ::java::lang::String>
	static auto TOGGLE_POPUP() {
		static_assert(field_signatures[jField<F>("TOGGLE_POPUP")] != -1);
		return sat<F>("TOGGLE_POPUP");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::jint)>("doAccessibleAction"), //
		jMethod<::java::lang::Object(::jint)>("getAccessibleActionAnchor"), //
		jMethod<::jint()>("getAccessibleActionCount"), //
		jMethod<::java::lang::String(::jint)>("getAccessibleActionDescription"), //
		jMethod<::java::lang::Object(::jint)>("getAccessibleActionObject"), //
		jMethod<::jint()>("getEndIndex"), //
		jMethod<::jint()>("getStartIndex"), //
		jMethod<::jboolean()>("isValid"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto doAccessibleAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doAccessibleAction")] != -1);
		return call<R>("doAccessibleAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAccessibleActionAnchor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionAnchor")] != -1);
		return call<R>("getAccessibleActionAnchor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAccessibleActionCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionCount")] != -1);
		return call<R>("getAccessibleActionCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAccessibleActionDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionDescription")] != -1);
		return call<R>("getAccessibleActionDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAccessibleActionObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessibleActionObject")] != -1);
		return call<R>("getAccessibleActionObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndIndex")] != -1);
		return call<R>("getEndIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStartIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartIndex")] != -1);
		return call<R>("getStartIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

};

#endif
