#ifndef javax_accessibility_AccessibleRelation_HPP
#define javax_accessibility_AccessibleRelation_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleRelation : public jObject<::javax::accessibility::AccessibleRelation, ::javax::accessibility::AccessibleBundle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleRelation";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CHILD_NODE_OF"), //
		jField<::java::lang::String>("CHILD_NODE_OF_PROPERTY"), //
		jField<::java::lang::String>("CONTROLLED_BY"), //
		jField<::java::lang::String>("CONTROLLED_BY_PROPERTY"), //
		jField<::java::lang::String>("CONTROLLER_FOR"), //
		jField<::java::lang::String>("CONTROLLER_FOR_PROPERTY"), //
		jField<::java::lang::String>("EMBEDDED_BY"), //
		jField<::java::lang::String>("EMBEDDED_BY_PROPERTY"), //
		jField<::java::lang::String>("EMBEDS"), //
		jField<::java::lang::String>("EMBEDS_PROPERTY"), //
		jField<::java::lang::String>("FLOWS_FROM"), //
		jField<::java::lang::String>("FLOWS_FROM_PROPERTY"), //
		jField<::java::lang::String>("FLOWS_TO"), //
		jField<::java::lang::String>("FLOWS_TO_PROPERTY"), //
		jField<::java::lang::String>("LABELED_BY"), //
		jField<::java::lang::String>("LABELED_BY_PROPERTY"), //
		jField<::java::lang::String>("LABEL_FOR"), //
		jField<::java::lang::String>("LABEL_FOR_PROPERTY"), //
		jField<::java::lang::String>("MEMBER_OF"), //
		jField<::java::lang::String>("MEMBER_OF_PROPERTY"), //
		jField<::java::lang::String>("PARENT_WINDOW_OF"), //
		jField<::java::lang::String>("PARENT_WINDOW_OF_PROPERTY"), //
		jField<::java::lang::String>("SUBWINDOW_OF"), //
		jField<::java::lang::String>("SUBWINDOW_OF_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto CHILD_NODE_OF() {
		static_assert(field_signatures[jField<F>("CHILD_NODE_OF")] != -1);
		return sat<F>("CHILD_NODE_OF");
	}

	template<typename F = ::java::lang::String>
	static auto CHILD_NODE_OF_PROPERTY() {
		static_assert(field_signatures[jField<F>("CHILD_NODE_OF_PROPERTY")] != -1);
		return sat<F>("CHILD_NODE_OF_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTROLLED_BY() {
		static_assert(field_signatures[jField<F>("CONTROLLED_BY")] != -1);
		return sat<F>("CONTROLLED_BY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTROLLED_BY_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTROLLED_BY_PROPERTY")] != -1);
		return sat<F>("CONTROLLED_BY_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTROLLER_FOR() {
		static_assert(field_signatures[jField<F>("CONTROLLER_FOR")] != -1);
		return sat<F>("CONTROLLER_FOR");
	}

	template<typename F = ::java::lang::String>
	static auto CONTROLLER_FOR_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTROLLER_FOR_PROPERTY")] != -1);
		return sat<F>("CONTROLLER_FOR_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto EMBEDDED_BY() {
		static_assert(field_signatures[jField<F>("EMBEDDED_BY")] != -1);
		return sat<F>("EMBEDDED_BY");
	}

	template<typename F = ::java::lang::String>
	static auto EMBEDDED_BY_PROPERTY() {
		static_assert(field_signatures[jField<F>("EMBEDDED_BY_PROPERTY")] != -1);
		return sat<F>("EMBEDDED_BY_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto EMBEDS() {
		static_assert(field_signatures[jField<F>("EMBEDS")] != -1);
		return sat<F>("EMBEDS");
	}

	template<typename F = ::java::lang::String>
	static auto EMBEDS_PROPERTY() {
		static_assert(field_signatures[jField<F>("EMBEDS_PROPERTY")] != -1);
		return sat<F>("EMBEDS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FLOWS_FROM() {
		static_assert(field_signatures[jField<F>("FLOWS_FROM")] != -1);
		return sat<F>("FLOWS_FROM");
	}

	template<typename F = ::java::lang::String>
	static auto FLOWS_FROM_PROPERTY() {
		static_assert(field_signatures[jField<F>("FLOWS_FROM_PROPERTY")] != -1);
		return sat<F>("FLOWS_FROM_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto FLOWS_TO() {
		static_assert(field_signatures[jField<F>("FLOWS_TO")] != -1);
		return sat<F>("FLOWS_TO");
	}

	template<typename F = ::java::lang::String>
	static auto FLOWS_TO_PROPERTY() {
		static_assert(field_signatures[jField<F>("FLOWS_TO_PROPERTY")] != -1);
		return sat<F>("FLOWS_TO_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LABELED_BY() {
		static_assert(field_signatures[jField<F>("LABELED_BY")] != -1);
		return sat<F>("LABELED_BY");
	}

	template<typename F = ::java::lang::String>
	static auto LABELED_BY_PROPERTY() {
		static_assert(field_signatures[jField<F>("LABELED_BY_PROPERTY")] != -1);
		return sat<F>("LABELED_BY_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LABEL_FOR() {
		static_assert(field_signatures[jField<F>("LABEL_FOR")] != -1);
		return sat<F>("LABEL_FOR");
	}

	template<typename F = ::java::lang::String>
	static auto LABEL_FOR_PROPERTY() {
		static_assert(field_signatures[jField<F>("LABEL_FOR_PROPERTY")] != -1);
		return sat<F>("LABEL_FOR_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto MEMBER_OF() {
		static_assert(field_signatures[jField<F>("MEMBER_OF")] != -1);
		return sat<F>("MEMBER_OF");
	}

	template<typename F = ::java::lang::String>
	static auto MEMBER_OF_PROPERTY() {
		static_assert(field_signatures[jField<F>("MEMBER_OF_PROPERTY")] != -1);
		return sat<F>("MEMBER_OF_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto PARENT_WINDOW_OF() {
		static_assert(field_signatures[jField<F>("PARENT_WINDOW_OF")] != -1);
		return sat<F>("PARENT_WINDOW_OF");
	}

	template<typename F = ::java::lang::String>
	static auto PARENT_WINDOW_OF_PROPERTY() {
		static_assert(field_signatures[jField<F>("PARENT_WINDOW_OF_PROPERTY")] != -1);
		return sat<F>("PARENT_WINDOW_OF_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SUBWINDOW_OF() {
		static_assert(field_signatures[jField<F>("SUBWINDOW_OF")] != -1);
		return sat<F>("SUBWINDOW_OF");
	}

	template<typename F = ::java::lang::String>
	static auto SUBWINDOW_OF_PROPERTY() {
		static_assert(field_signatures[jField<F>("SUBWINDOW_OF_PROPERTY")] != -1);
		return sat<F>("SUBWINDOW_OF_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object *)>(), //
		jMethod<::java::lang::String()>("getKey"), //
		jMethod<::java::lang::Object *()>("getTarget"), //
		jMethod<::jvoid(::java::lang::Object)>("setTarget"), //
		jMethod<::jvoid(::java::lang::Object *)>("setTarget"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

};

#endif
