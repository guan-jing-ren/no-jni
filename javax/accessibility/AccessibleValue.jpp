#ifndef javax_accessibility_AccessibleValue_HPP
#define javax_accessibility_AccessibleValue_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleValue : public jObject<::javax::accessibility::AccessibleValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleValue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Number()>("getCurrentAccessibleValue"), //
		jMethod<::java::lang::Number()>("getMaximumAccessibleValue"), //
		jMethod<::java::lang::Number()>("getMinimumAccessibleValue"), //
		jMethod<::jboolean(::java::lang::Number)>("setCurrentAccessibleValue"), //
	};

	template<typename R = ::java::lang::Number, typename... Args>
	auto getCurrentAccessibleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentAccessibleValue")] != -1);
		return call<R>("getCurrentAccessibleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getMaximumAccessibleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumAccessibleValue")] != -1);
		return call<R>("getMaximumAccessibleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getMinimumAccessibleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumAccessibleValue")] != -1);
		return call<R>("getMinimumAccessibleValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto setCurrentAccessibleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentAccessibleValue")] != -1);
		return call<R>("setCurrentAccessibleValue", std::forward<Args>(args)...);
	}

};

#endif
