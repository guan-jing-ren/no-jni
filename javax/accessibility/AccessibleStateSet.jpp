#ifndef javax_accessibility_AccessibleStateSet_HPP
#define javax_accessibility_AccessibleStateSet_HPP

#include "../../jfwd_decl.hpp"

class ::javax::accessibility::AccessibleStateSet : public jObject<::javax::accessibility::AccessibleStateSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_accessibility / "AccessibleStateSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::accessibility::AccessibleState *)>(), //
		jMethod<::jboolean(::javax::accessibility::AccessibleState)>("add"), //
		jMethod<::jvoid(::javax::accessibility::AccessibleState *)>("addAll"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::javax::accessibility::AccessibleState)>("contains"), //
		jMethod<::jboolean(::javax::accessibility::AccessibleState)>("remove"), //
		jMethod<::javax::accessibility::AccessibleState *()>("toArray"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", forward<Args>(args)...);
	}

	template<typename R = ::javax::accessibility::AccessibleState *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
