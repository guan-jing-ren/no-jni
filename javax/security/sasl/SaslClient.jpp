#ifndef javax_security_sasl_SaslClient_HPP
#define javax_security_sasl_SaslClient_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::security::sasl::SaslClient : public jObject<::javax::security::sasl::SaslClient, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_sasl / "SaslClient";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jbyte *(::jbyte *)>("evaluateChallenge"), //
		jMethod<::java::lang::String()>("getMechanismName"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getNegotiatedProperty"), //
		jMethod<::jboolean()>("hasInitialResponse"), //
		jMethod<::jboolean()>("isComplete"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("unwrap"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("wrap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto evaluateChallenge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("evaluateChallenge")] != -1);
		return call<R>("evaluateChallenge", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMechanismName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanismName")] != -1);
		return call<R>("getMechanismName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNegotiatedProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNegotiatedProperty")] != -1);
		return call<R>("getNegotiatedProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasInitialResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasInitialResponse")] != -1);
		return call<R>("hasInitialResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComplete")] != -1);
		return call<R>("isComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", std::forward<Args>(args)...);
	}

};

#endif
