#ifndef javax_security_sasl_SaslServer_HPP
#define javax_security_sasl_SaslServer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::security::sasl::SaslServer : public jObject<::javax::security::sasl::SaslServer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_sasl / "SaslServer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jbyte *(::jbyte *)>("evaluateResponse"), //
		jMethod<::java::lang::String()>("getAuthorizationID"), //
		jMethod<::java::lang::String()>("getMechanismName"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getNegotiatedProperty"), //
		jMethod<::jboolean()>("isComplete"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("unwrap"), //
		jMethod<::jbyte *(::jbyte *, ::jint, ::jint)>("wrap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto evaluateResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("evaluateResponse")] != -1);
		return call<R>("evaluateResponse", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAuthorizationID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAuthorizationID")] != -1);
		return call<R>("getAuthorizationID", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMechanismName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMechanismName")] != -1);
		return call<R>("getMechanismName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNegotiatedProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNegotiatedProperty")] != -1);
		return call<R>("getNegotiatedProperty", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isComplete")] != -1);
		return call<R>("isComplete", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto wrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("wrap")] != -1);
		return call<R>("wrap", forward<Args>(args)...);
	}

};

#endif
