#ifndef javax_security_sasl_SaslException_HPP
#define javax_security_sasl_SaslException_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::security::sasl::SaslException : public jObject<::javax::security::sasl::SaslException, ::java::io::IOException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_sasl / "SaslException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable)>(), //
		jMethod<::java::lang::Throwable()>("getCause"), //
		jMethod<::java::lang::Throwable(::java::lang::Throwable)>("initCause"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return call<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto initCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initCause")] != -1);
		return call<R>("initCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
