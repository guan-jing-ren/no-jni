#ifndef javax_security_auth_callback_ConfirmationCallback_HPP
#define javax_security_auth_callback_ConfirmationCallback_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::callback::ConfirmationCallback : public jObject<::javax::security::auth::callback::ConfirmationCallback, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_callback / "ConfirmationCallback";

	constexpr static Enume field_signatures{
		jField<::jint>("CANCEL"), //
		jField<::jint>("ERROR"), //
		jField<::jint>("INFORMATION"), //
		jField<::jint>("NO"), //
		jField<::jint>("OK"), //
		jField<::jint>("OK_CANCEL_OPTION"), //
		jField<::jint>("UNSPECIFIED_OPTION"), //
		jField<::jint>("WARNING"), //
		jField<::jint>("YES"), //
		jField<::jint>("YES_NO_CANCEL_OPTION"), //
		jField<::jint>("YES_NO_OPTION"), //
	};

	template<typename F = ::jint>
	static auto CANCEL() {
		static_assert(field_signatures[jField<F>("CANCEL")] != -1);
		return sat<F>("CANCEL");
	}

	template<typename F = ::jint>
	static auto ERROR() {
		static_assert(field_signatures[jField<F>("ERROR")] != -1);
		return sat<F>("ERROR");
	}

	template<typename F = ::jint>
	static auto INFORMATION() {
		static_assert(field_signatures[jField<F>("INFORMATION")] != -1);
		return sat<F>("INFORMATION");
	}

	template<typename F = ::jint>
	static auto NO() {
		static_assert(field_signatures[jField<F>("NO")] != -1);
		return sat<F>("NO");
	}

	template<typename F = ::jint>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	template<typename F = ::jint>
	static auto OK_CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("OK_CANCEL_OPTION")] != -1);
		return sat<F>("OK_CANCEL_OPTION");
	}

	template<typename F = ::jint>
	static auto UNSPECIFIED_OPTION() {
		static_assert(field_signatures[jField<F>("UNSPECIFIED_OPTION")] != -1);
		return sat<F>("UNSPECIFIED_OPTION");
	}

	template<typename F = ::jint>
	static auto WARNING() {
		static_assert(field_signatures[jField<F>("WARNING")] != -1);
		return sat<F>("WARNING");
	}

	template<typename F = ::jint>
	static auto YES() {
		static_assert(field_signatures[jField<F>("YES")] != -1);
		return sat<F>("YES");
	}

	template<typename F = ::jint>
	static auto YES_NO_CANCEL_OPTION() {
		static_assert(field_signatures[jField<F>("YES_NO_CANCEL_OPTION")] != -1);
		return sat<F>("YES_NO_CANCEL_OPTION");
	}

	template<typename F = ::jint>
	static auto YES_NO_OPTION() {
		static_assert(field_signatures[jField<F>("YES_NO_OPTION")] != -1);
		return sat<F>("YES_NO_OPTION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::java::lang::String *, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::lang::String *, ::jint)>(), //
		jMethod<::jint()>("getDefaultOption"), //
		jMethod<::jint()>("getMessageType"), //
		jMethod<::jint()>("getOptionType"), //
		jMethod<::java::lang::String *()>("getOptions"), //
		jMethod<::java::lang::String()>("getPrompt"), //
		jMethod<::jint()>("getSelectedIndex"), //
		jMethod<::jvoid(::jint)>("setSelectedIndex"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDefaultOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultOption")] != -1);
		return call<R>("getDefaultOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMessageType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageType")] != -1);
		return call<R>("getMessageType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOptionType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptionType")] != -1);
		return call<R>("getOptionType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrompt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrompt")] != -1);
		return call<R>("getPrompt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectedIndex")] != -1);
		return call<R>("getSelectedIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectedIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectedIndex")] != -1);
		return call<R>("setSelectedIndex", std::forward<Args>(args)...);
	}

};

#endif
