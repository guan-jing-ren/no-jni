#ifndef javax_security_auth_callback_PasswordCallback_HPP
#define javax_security_auth_callback_PasswordCallback_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::callback::PasswordCallback : public jObject<::javax::security::auth::callback::PasswordCallback, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_callback / "PasswordCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
		jMethod<::jvoid()>("clearPassword"), //
		jMethod<::jchar *()>("getPassword"), //
		jMethod<::java::lang::String()>("getPrompt"), //
		jMethod<::jboolean()>("isEchoOn"), //
		jMethod<::jvoid(::jchar *)>("setPassword"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearPassword")] != -1);
		return call<R>("clearPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassword")] != -1);
		return call<R>("getPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrompt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrompt")] != -1);
		return call<R>("getPrompt", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEchoOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEchoOn")] != -1);
		return call<R>("isEchoOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPassword")] != -1);
		return call<R>("setPassword", std::forward<Args>(args)...);
	}

};

#endif
