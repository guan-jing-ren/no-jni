#ifndef javax_security_auth_callback_NameCallback_HPP
#define javax_security_auth_callback_NameCallback_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::callback::NameCallback : public jObject<::javax::security::auth::callback::NameCallback, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_callback / "NameCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getDefaultName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getPrompt"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultName")] != -1);
		return call<R>("getDefaultName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrompt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrompt")] != -1);
		return call<R>("getPrompt", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", forward<Args>(args)...);
	}

};

#endif
