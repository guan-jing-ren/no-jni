#ifndef javax_security_auth_x500_X500PrivateCredential_HPP
#define javax_security_auth_x500_X500PrivateCredential_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::x500::X500PrivateCredential : public jObject<::javax::security::auth::x500::X500PrivateCredential, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_x500 / "X500PrivateCredential";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::security::cert::X509Certificate, ::java::security::PrivateKey)>(), //
		jConstructor<::jvoid(::java::security::cert::X509Certificate, ::java::security::PrivateKey, ::java::lang::String)>(), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::java::lang::String()>("getAlias"), //
		jMethod<::java::security::cert::X509Certificate()>("getCertificate"), //
		jMethod<::java::security::PrivateKey()>("getPrivateKey"), //
		jMethod<::jboolean()>("isDestroyed"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlias")] != -1);
		return call<R>("getAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::cert::X509Certificate, typename... Args>
	auto getCertificate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCertificate")] != -1);
		return call<R>("getCertificate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::PrivateKey, typename... Args>
	auto getPrivateKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrivateKey")] != -1);
		return call<R>("getPrivateKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDestroyed")] != -1);
		return call<R>("isDestroyed", std::forward<Args>(args)...);
	}

};

#endif
