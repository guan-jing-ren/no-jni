#ifndef javax_security_auth_kerberos_KerberosPrincipal_HPP
#define javax_security_auth_kerberos_KerberosPrincipal_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::kerberos::KerberosPrincipal : public jObject<::javax::security::auth::kerberos::KerberosPrincipal, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_kerberos / "KerberosPrincipal";

	constexpr static Enume field_signatures{
		jField<::jint>("KRB_NT_PRINCIPAL"), //
		jField<::jint>("KRB_NT_SRV_HST"), //
		jField<::jint>("KRB_NT_SRV_INST"), //
		jField<::jint>("KRB_NT_SRV_XHST"), //
		jField<::jint>("KRB_NT_UID"), //
		jField<::jint>("KRB_NT_UNKNOWN"), //
	};

	template<typename F = ::jint>
	static auto KRB_NT_PRINCIPAL() {
		static_assert(field_signatures[jField<F>("KRB_NT_PRINCIPAL")] != -1);
		return sat<F>("KRB_NT_PRINCIPAL");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_HST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_HST")] != -1);
		return sat<F>("KRB_NT_SRV_HST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_INST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_INST")] != -1);
		return sat<F>("KRB_NT_SRV_INST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_SRV_XHST() {
		static_assert(field_signatures[jField<F>("KRB_NT_SRV_XHST")] != -1);
		return sat<F>("KRB_NT_SRV_XHST");
	}

	template<typename F = ::jint>
	static auto KRB_NT_UID() {
		static_assert(field_signatures[jField<F>("KRB_NT_UID")] != -1);
		return sat<F>("KRB_NT_UID");
	}

	template<typename F = ::jint>
	static auto KRB_NT_UNKNOWN() {
		static_assert(field_signatures[jField<F>("KRB_NT_UNKNOWN")] != -1);
		return sat<F>("KRB_NT_UNKNOWN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getNameType"), //
		jMethod<::java::lang::String()>("getRealm"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNameType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameType")] != -1);
		return call<R>("getNameType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealm")] != -1);
		return call<R>("getRealm", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
