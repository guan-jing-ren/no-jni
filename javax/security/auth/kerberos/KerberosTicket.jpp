#ifndef javax_security_auth_kerberos_KerberosTicket_HPP
#define javax_security_auth_kerberos_KerberosTicket_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::kerberos::KerberosTicket : public jObject<::javax::security::auth::kerberos::KerberosTicket, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_kerberos / "KerberosTicket";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *, ::javax::security::auth::kerberos::KerberosPrincipal, ::javax::security::auth::kerberos::KerberosPrincipal, ::jbyte *, ::jint, ::jboolean *, ::java::util::Date, ::java::util::Date, ::java::util::Date, ::java::util::Date, ::java::net::InetAddress *)>(), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::util::Date()>("getAuthTime"), //
		jMethod<::javax::security::auth::kerberos::KerberosPrincipal()>("getClient"), //
		jMethod<::java::net::InetAddress *()>("getClientAddresses"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::java::util::Date()>("getEndTime"), //
		jMethod<::jboolean *()>("getFlags"), //
		jMethod<::java::util::Date()>("getRenewTill"), //
		jMethod<::javax::security::auth::kerberos::KerberosPrincipal()>("getServer"), //
		jMethod<::javax::crypto::SecretKey()>("getSessionKey"), //
		jMethod<::jint()>("getSessionKeyType"), //
		jMethod<::java::util::Date()>("getStartTime"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isCurrent"), //
		jMethod<::jboolean()>("isDestroyed"), //
		jMethod<::jboolean()>("isForwardable"), //
		jMethod<::jboolean()>("isForwarded"), //
		jMethod<::jboolean()>("isInitial"), //
		jMethod<::jboolean()>("isPostdated"), //
		jMethod<::jboolean()>("isProxiable"), //
		jMethod<::jboolean()>("isProxy"), //
		jMethod<::jboolean()>("isRenewable"), //
		jMethod<::jvoid()>("refresh"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getAuthTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthTime")] != -1);
		return call<R>("getAuthTime", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::kerberos::KerberosPrincipal, typename... Args>
	auto getClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClient")] != -1);
		return call<R>("getClient", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetAddress *, typename... Args>
	auto getClientAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientAddresses")] != -1);
		return call<R>("getClientAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getEndTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndTime")] != -1);
		return call<R>("getEndTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean *, typename... Args>
	auto getFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFlags")] != -1);
		return call<R>("getFlags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getRenewTill(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRenewTill")] != -1);
		return call<R>("getRenewTill", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::kerberos::KerberosPrincipal, typename... Args>
	auto getServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServer")] != -1);
		return call<R>("getServer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::crypto::SecretKey, typename... Args>
	auto getSessionKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSessionKey")] != -1);
		return call<R>("getSessionKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSessionKeyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSessionKeyType")] != -1);
		return call<R>("getSessionKeyType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCurrent")] != -1);
		return call<R>("isCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDestroyed")] != -1);
		return call<R>("isDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForwardable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForwardable")] != -1);
		return call<R>("isForwardable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isForwarded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForwarded")] != -1);
		return call<R>("isForwarded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInitial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInitial")] != -1);
		return call<R>("isInitial", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPostdated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPostdated")] != -1);
		return call<R>("isPostdated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isProxiable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isProxiable")] != -1);
		return call<R>("isProxiable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isProxy")] != -1);
		return call<R>("isProxy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRenewable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRenewable")] != -1);
		return call<R>("isRenewable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto refresh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refresh")] != -1);
		return call<R>("refresh", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
