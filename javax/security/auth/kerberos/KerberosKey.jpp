#ifndef javax_security_auth_kerberos_KerberosKey_HPP
#define javax_security_auth_kerberos_KerberosKey_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::security::auth::kerberos::KerberosKey : public jObject<::javax::security::auth::kerberos::KerberosKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_security_auth_kerberos / "KerberosKey";

	constexpr static Enume field_signatures{
		jField<::jlong>("serialVersionUID"), //
	};

	template<typename F = ::jlong>
	static auto serialVersionUID() {
		static_assert(field_signatures[jField<F>("serialVersionUID")] != -1);
		return sat<F>("serialVersionUID");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::security::auth::kerberos::KerberosPrincipal, ::jbyte *, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::javax::security::auth::kerberos::KerberosPrincipal, ::jchar *, ::java::lang::String)>(), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::jbyte *()>("getEncoded"), //
		jMethod<::java::lang::String()>("getFormat"), //
		jMethod<::jint()>("getKeyType"), //
		jMethod<::javax::security::auth::kerberos::KerberosPrincipal()>("getPrincipal"), //
		jMethod<::jint()>("getVersionNumber"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDestroyed"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getEncoded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoded")] != -1);
		return call<R>("getEncoded", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyType")] != -1);
		return call<R>("getKeyType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::security::auth::kerberos::KerberosPrincipal, typename... Args>
	auto getPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipal")] != -1);
		return call<R>("getPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersionNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersionNumber")] != -1);
		return call<R>("getVersionNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDestroyed")] != -1);
		return call<R>("isDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
