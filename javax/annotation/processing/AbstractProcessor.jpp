#ifndef javax_annotation_processing_AbstractProcessor_HPP
#define javax_annotation_processing_AbstractProcessor_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::annotation::processing::AbstractProcessor : public jObject<::javax::annotation::processing::AbstractProcessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_annotation_processing / "AbstractProcessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Iterable(::javax::lang::model::element::Element, ::javax::lang::model::element::AnnotationMirror, ::javax::lang::model::element::ExecutableElement, ::java::lang::String)>("getCompletions"), //
		jMethod<::java::util::Set()>("getSupportedAnnotationTypes"), //
		jMethod<::java::util::Set()>("getSupportedOptions"), //
		jMethod<::javax::lang::model::SourceVersion()>("getSupportedSourceVersion"), //
		jMethod<::jvoid(::javax::annotation::processing::ProcessingEnvironment)>("init"), //
		jMethod<::jboolean(::java::util::Set, ::javax::annotation::processing::RoundEnvironment)>("process"), //
	};

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getCompletions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompletions")] != -1);
		return call<R>("getCompletions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getSupportedAnnotationTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedAnnotationTypes")] != -1);
		return call<R>("getSupportedAnnotationTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getSupportedOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedOptions")] != -1);
		return call<R>("getSupportedOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion, typename... Args>
	auto getSupportedSourceVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSupportedSourceVersion")] != -1);
		return call<R>("getSupportedSourceVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto process(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("process")] != -1);
		return call<R>("process", std::forward<Args>(args)...);
	}

};

#endif
