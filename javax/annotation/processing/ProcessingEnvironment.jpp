#ifndef javax_annotation_processing_ProcessingEnvironment_HPP
#define javax_annotation_processing_ProcessingEnvironment_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::annotation::processing::ProcessingEnvironment : public jObject<::javax::annotation::processing::ProcessingEnvironment, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_annotation_processing / "ProcessingEnvironment";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::lang::model::util::Elements()>("getElementUtils"), //
		jMethod<::javax::annotation::processing::Filer()>("getFiler"), //
		jMethod<::java::util::Locale()>("getLocale"), //
		jMethod<::javax::annotation::processing::Messager()>("getMessager"), //
		jMethod<::java::util::Map()>("getOptions"), //
		jMethod<::javax::lang::model::SourceVersion()>("getSourceVersion"), //
		jMethod<::javax::lang::model::util::Types()>("getTypeUtils"), //
	};

	template<typename R = ::javax::lang::model::util::Elements, typename... Args>
	auto getElementUtils(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementUtils")] != -1);
		return call<R>("getElementUtils", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::annotation::processing::Filer, typename... Args>
	auto getFiler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFiler")] != -1);
		return call<R>("getFiler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocale")] != -1);
		return call<R>("getLocale", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::annotation::processing::Messager, typename... Args>
	auto getMessager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessager")] != -1);
		return call<R>("getMessager", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::SourceVersion, typename... Args>
	auto getSourceVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceVersion")] != -1);
		return call<R>("getSourceVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::util::Types, typename... Args>
	auto getTypeUtils(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeUtils")] != -1);
		return call<R>("getTypeUtils", std::forward<Args>(args)...);
	}

};

#endif
