#ifndef javax_annotation_Resource_HPP
#define javax_annotation_Resource_HPP

#include "../../jfwd_decl.hpp"

class ::javax::annotation::Resource : public jObject<::javax::annotation::Resource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_annotation / "Resource";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::annotation::Resource$AuthenticationType()>("authenticationType"), //
		jMethod<::java::lang::String()>("description"), //
		jMethod<::java::lang::String()>("lookup"), //
		jMethod<::java::lang::String()>("mappedName"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::jboolean()>("shareable"), //
		jMethod<::java::lang::Class()>("type"), //
	};

	template<typename R = ::javax::annotation::Resource$AuthenticationType, typename... Args>
	auto authenticationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("authenticationType")] != -1);
		return call<R>("authenticationType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto description(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("description")] != -1);
		return call<R>("description", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return call<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto mappedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mappedName")] != -1);
		return call<R>("mappedName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shareable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shareable")] != -1);
		return call<R>("shareable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
