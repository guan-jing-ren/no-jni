#ifndef javax_tools_Tool_HPP
#define javax_tools_Tool_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::Tool : public jObject<::javax::tools::Tool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "Tool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Set()>("getSourceVersions"), //
		jMethod<::jint(::java::io::InputStream, ::java::io::OutputStream, ::java::io::OutputStream, ::java::lang::String *)>("run"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto getSourceVersions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSourceVersions")] != -1);
		return call<R>("getSourceVersions", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("run")] != -1);
		return call<R>("run", forward<Args>(args)...);
	}

};

#endif
