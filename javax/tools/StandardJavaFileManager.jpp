#ifndef javax_tools_StandardJavaFileManager_HPP
#define javax_tools_StandardJavaFileManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::StandardJavaFileManager : public jObject<::javax::tools::StandardJavaFileManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "StandardJavaFileManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::java::lang::ClassLoader(::javax::tools::JavaFileManager$Location)>("getClassLoader"), //
		jMethod<::javax::tools::FileObject(::javax::tools::JavaFileManager$Location, ::java::lang::String, ::java::lang::String)>("getFileForInput"), //
		jMethod<::javax::tools::FileObject(::javax::tools::JavaFileManager$Location, ::java::lang::String, ::java::lang::String, ::javax::tools::FileObject)>("getFileForOutput"), //
		jMethod<::javax::tools::JavaFileObject(::javax::tools::JavaFileManager$Location, ::java::lang::String, ::javax::tools::JavaFileObject$Kind)>("getJavaFileForInput"), //
		jMethod<::javax::tools::JavaFileObject(::javax::tools::JavaFileManager$Location, ::java::lang::String, ::javax::tools::JavaFileObject$Kind, ::javax::tools::FileObject)>("getJavaFileForOutput"), //
		jMethod<::java::lang::Iterable(::java::io::File *)>("getJavaFileObjects"), //
		jMethod<::java::lang::Iterable(::java::lang::String *)>("getJavaFileObjects"), //
		jMethod<::java::lang::Iterable(::java::lang::Iterable)>("getJavaFileObjectsFromFiles"), //
		jMethod<::java::lang::Iterable(::java::lang::Iterable)>("getJavaFileObjectsFromStrings"), //
		jMethod<::java::lang::Iterable(::javax::tools::JavaFileManager$Location)>("getLocation"), //
		jMethod<::jboolean(::java::lang::String, ::java::util::Iterator)>("handleOption"), //
		jMethod<::jboolean(::javax::tools::JavaFileManager$Location)>("hasLocation"), //
		jMethod<::java::lang::String(::javax::tools::JavaFileManager$Location, ::javax::tools::JavaFileObject)>("inferBinaryName"), //
		jMethod<::jboolean(::javax::tools::FileObject, ::javax::tools::FileObject)>("isSameFile"), //
		jMethod<::java::lang::Iterable(::javax::tools::JavaFileManager$Location, ::java::lang::String, ::java::util::Set, ::jboolean)>("list"), //
		jMethod<::jvoid(::javax::tools::JavaFileManager$Location, ::java::lang::Iterable)>("setLocation"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoader")] != -1);
		return call<R>("getClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::FileObject, typename... Args>
	auto getFileForInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileForInput")] != -1);
		return call<R>("getFileForInput", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::FileObject, typename... Args>
	auto getFileForOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileForOutput")] != -1);
		return call<R>("getFileForOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::JavaFileObject, typename... Args>
	auto getJavaFileForInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaFileForInput")] != -1);
		return call<R>("getJavaFileForInput", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::JavaFileObject, typename... Args>
	auto getJavaFileForOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaFileForOutput")] != -1);
		return call<R>("getJavaFileForOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getJavaFileObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaFileObjects")] != -1);
		return call<R>("getJavaFileObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getJavaFileObjectsFromFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaFileObjectsFromFiles")] != -1);
		return call<R>("getJavaFileObjectsFromFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getJavaFileObjectsFromStrings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaFileObjectsFromStrings")] != -1);
		return call<R>("getJavaFileObjectsFromStrings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handleOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleOption")] != -1);
		return call<R>("handleOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasLocation")] != -1);
		return call<R>("hasLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto inferBinaryName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inferBinaryName")] != -1);
		return call<R>("inferBinaryName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSameFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSameFile")] != -1);
		return call<R>("isSameFile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Iterable, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

};

#endif
