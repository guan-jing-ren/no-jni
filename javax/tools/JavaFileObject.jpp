#ifndef javax_tools_JavaFileObject_HPP
#define javax_tools_JavaFileObject_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::JavaFileObject : public jObject<::javax::tools::JavaFileObject, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "JavaFileObject";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("delete"), //
		jMethod<::javax::lang::model::element::Modifier()>("getAccessLevel"), //
		jMethod<::java::lang::CharSequence(::jboolean)>("getCharContent"), //
		jMethod<::javax::tools::JavaFileObject$Kind()>("getKind"), //
		jMethod<::jlong()>("getLastModified"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::lang::model::element::NestingKind()>("getNestingKind"), //
		jMethod<::jboolean(::java::lang::String, ::javax::tools::JavaFileObject$Kind)>("isNameCompatible"), //
		jMethod<::java::io::InputStream()>("openInputStream"), //
		jMethod<::java::io::OutputStream()>("openOutputStream"), //
		jMethod<::java::io::Reader(::jboolean)>("openReader"), //
		jMethod<::java::io::Writer()>("openWriter"), //
		jMethod<::java::net::URI()>("toUri"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::Modifier, typename... Args>
	auto getAccessLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAccessLevel")] != -1);
		return call<R>("getAccessLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::CharSequence, typename... Args>
	auto getCharContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharContent")] != -1);
		return call<R>("getCharContent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::JavaFileObject$Kind, typename... Args>
	auto getKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKind")] != -1);
		return call<R>("getKind", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastModified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastModified")] != -1);
		return call<R>("getLastModified", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::lang::model::element::NestingKind, typename... Args>
	auto getNestingKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNestingKind")] != -1);
		return call<R>("getNestingKind", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNameCompatible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNameCompatible")] != -1);
		return call<R>("isNameCompatible", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto openInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openInputStream")] != -1);
		return call<R>("openInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto openOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openOutputStream")] != -1);
		return call<R>("openOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto openReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openReader")] != -1);
		return call<R>("openReader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Writer, typename... Args>
	auto openWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openWriter")] != -1);
		return call<R>("openWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto toUri(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toUri")] != -1);
		return call<R>("toUri", std::forward<Args>(args)...);
	}

};

#endif
