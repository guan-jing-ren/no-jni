#ifndef javax_tools_Diagnostic_HPP
#define javax_tools_Diagnostic_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::Diagnostic : public jObject<::javax::tools::Diagnostic, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "Diagnostic";

	constexpr static Enume field_signatures{
		jField<::jlong>("NOPOS"), //
	};

	template<typename F = ::jlong>
	static auto NOPOS() {
		static_assert(field_signatures[jField<F>("NOPOS")] != -1);
		return sat<F>("NOPOS");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCode"), //
		jMethod<::jlong()>("getColumnNumber"), //
		jMethod<::jlong()>("getEndPosition"), //
		jMethod<::javax::tools::Diagnostic$Kind()>("getKind"), //
		jMethod<::jlong()>("getLineNumber"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getMessage"), //
		jMethod<::jlong()>("getPosition"), //
		jMethod<::java::lang::Object()>("getSource"), //
		jMethod<::jlong()>("getStartPosition"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCode")] != -1);
		return call<R>("getCode", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getColumnNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnNumber")] != -1);
		return call<R>("getColumnNumber", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEndPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEndPosition")] != -1);
		return call<R>("getEndPosition", forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::Diagnostic$Kind, typename... Args>
	auto getKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getKind")] != -1);
		return call<R>("getKind", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLineNumber")] != -1);
		return call<R>("getLineNumber", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStartPosition")] != -1);
		return call<R>("getStartPosition", forward<Args>(args)...);
	}

};

#endif
