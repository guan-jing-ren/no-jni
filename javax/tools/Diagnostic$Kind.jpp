#ifndef javax_tools_Diagnostic$Kind_HPP
#define javax_tools_Diagnostic$Kind_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::Diagnostic$Kind : public jObject<::javax::tools::Diagnostic$Kind, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "Diagnostic$Kind";

	constexpr static Enume field_signatures{
		jField<::javax::tools::Diagnostic$Kind>("ERROR"), //
		jField<::javax::tools::Diagnostic$Kind>("MANDATORY_WARNING"), //
		jField<::javax::tools::Diagnostic$Kind>("NOTE"), //
		jField<::javax::tools::Diagnostic$Kind>("OTHER"), //
		jField<::javax::tools::Diagnostic$Kind>("WARNING"), //
	};

	template<typename F = ::javax::tools::Diagnostic$Kind>
	static auto ERROR() {
		static_assert(field_signatures[jField<F>("ERROR")] != -1);
		return sat<F>("ERROR");
	}

	template<typename F = ::javax::tools::Diagnostic$Kind>
	static auto MANDATORY_WARNING() {
		static_assert(field_signatures[jField<F>("MANDATORY_WARNING")] != -1);
		return sat<F>("MANDATORY_WARNING");
	}

	template<typename F = ::javax::tools::Diagnostic$Kind>
	static auto NOTE() {
		static_assert(field_signatures[jField<F>("NOTE")] != -1);
		return sat<F>("NOTE");
	}

	template<typename F = ::javax::tools::Diagnostic$Kind>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	template<typename F = ::javax::tools::Diagnostic$Kind>
	static auto WARNING() {
		static_assert(field_signatures[jField<F>("WARNING")] != -1);
		return sat<F>("WARNING");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::tools::Diagnostic$Kind(::java::lang::String)>("valueOf"), //
		jMethod<::javax::tools::Diagnostic$Kind *()>("values"), //
	};

	template<typename R = ::javax::tools::Diagnostic$Kind, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::tools::Diagnostic$Kind *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
