#ifndef javax_tools_DiagnosticCollector_HPP
#define javax_tools_DiagnosticCollector_HPP

#include "../../jfwd_decl.hpp"

class ::javax::tools::DiagnosticCollector : public jObject<::javax::tools::DiagnosticCollector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_tools / "DiagnosticCollector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::util::List()>("getDiagnostics"), //
		jMethod<::jvoid(::javax::tools::Diagnostic)>("report"), //
	};

	template<typename R = ::java::util::List, typename... Args>
	auto getDiagnostics(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDiagnostics")] != -1);
		return call<R>("getDiagnostics", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto report(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("report")] != -1);
		return call<R>("report", std::forward<Args>(args)...);
	}

};

#endif
