#ifndef javax_sound_sampled_FloatControl$Type_HPP
#define javax_sound_sampled_FloatControl$Type_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::FloatControl$Type : public jObject<::javax::sound::sampled::FloatControl$Type, ::javax::sound::sampled::Control$Type> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "FloatControl$Type";

	constexpr static Enume field_signatures{
		jField<::javax::sound::sampled::FloatControl$Type>("AUX_RETURN"), //
		jField<::javax::sound::sampled::FloatControl$Type>("AUX_SEND"), //
		jField<::javax::sound::sampled::FloatControl$Type>("BALANCE"), //
		jField<::javax::sound::sampled::FloatControl$Type>("MASTER_GAIN"), //
		jField<::javax::sound::sampled::FloatControl$Type>("PAN"), //
		jField<::javax::sound::sampled::FloatControl$Type>("REVERB_RETURN"), //
		jField<::javax::sound::sampled::FloatControl$Type>("REVERB_SEND"), //
		jField<::javax::sound::sampled::FloatControl$Type>("SAMPLE_RATE"), //
		jField<::javax::sound::sampled::FloatControl$Type>("VOLUME"), //
	};

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto AUX_RETURN() {
		static_assert(field_signatures[jField<F>("AUX_RETURN")] != -1);
		return sat<F>("AUX_RETURN");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto AUX_SEND() {
		static_assert(field_signatures[jField<F>("AUX_SEND")] != -1);
		return sat<F>("AUX_SEND");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto BALANCE() {
		static_assert(field_signatures[jField<F>("BALANCE")] != -1);
		return sat<F>("BALANCE");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto MASTER_GAIN() {
		static_assert(field_signatures[jField<F>("MASTER_GAIN")] != -1);
		return sat<F>("MASTER_GAIN");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto PAN() {
		static_assert(field_signatures[jField<F>("PAN")] != -1);
		return sat<F>("PAN");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto REVERB_RETURN() {
		static_assert(field_signatures[jField<F>("REVERB_RETURN")] != -1);
		return sat<F>("REVERB_RETURN");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto REVERB_SEND() {
		static_assert(field_signatures[jField<F>("REVERB_SEND")] != -1);
		return sat<F>("REVERB_SEND");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto SAMPLE_RATE() {
		static_assert(field_signatures[jField<F>("SAMPLE_RATE")] != -1);
		return sat<F>("SAMPLE_RATE");
	}

	template<typename F = ::javax::sound::sampled::FloatControl$Type>
	static auto VOLUME() {
		static_assert(field_signatures[jField<F>("VOLUME")] != -1);
		return sat<F>("VOLUME");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
