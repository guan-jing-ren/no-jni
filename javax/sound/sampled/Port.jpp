#ifndef javax_sound_sampled_Port_HPP
#define javax_sound_sampled_Port_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::Port : public jObject<::javax::sound::sampled::Port, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "Port";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("addLineListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::sound::sampled::Control(::javax::sound::sampled::Control$Type)>("getControl"), //
		jMethod<::javax::sound::sampled::Control *()>("getControls"), //
		jMethod<::javax::sound::sampled::Line$Info()>("getLineInfo"), //
		jMethod<::jboolean(::javax::sound::sampled::Control$Type)>("isControlSupported"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("removeLineListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLineListener")] != -1);
		return call<R>("addLineListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control *, typename... Args>
	auto getControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControls")] != -1);
		return call<R>("getControls", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info, typename... Args>
	auto getLineInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineInfo")] != -1);
		return call<R>("getLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isControlSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isControlSupported")] != -1);
		return call<R>("isControlSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLineListener")] != -1);
		return call<R>("removeLineListener", std::forward<Args>(args)...);
	}

};

#endif
