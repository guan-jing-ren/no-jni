#ifndef javax_sound_sampled_AudioFormat$Encoding_HPP
#define javax_sound_sampled_AudioFormat$Encoding_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::AudioFormat$Encoding : public jObject<::javax::sound::sampled::AudioFormat$Encoding, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "AudioFormat$Encoding";

	constexpr static Enume field_signatures{
		jField<::javax::sound::sampled::AudioFormat$Encoding>("ALAW"), //
		jField<::javax::sound::sampled::AudioFormat$Encoding>("PCM_FLOAT"), //
		jField<::javax::sound::sampled::AudioFormat$Encoding>("PCM_SIGNED"), //
		jField<::javax::sound::sampled::AudioFormat$Encoding>("PCM_UNSIGNED"), //
		jField<::javax::sound::sampled::AudioFormat$Encoding>("ULAW"), //
	};

	template<typename F = ::javax::sound::sampled::AudioFormat$Encoding>
	static auto ALAW() {
		static_assert(field_signatures[jField<F>("ALAW")] != -1);
		return sat<F>("ALAW");
	}

	template<typename F = ::javax::sound::sampled::AudioFormat$Encoding>
	static auto PCM_FLOAT() {
		static_assert(field_signatures[jField<F>("PCM_FLOAT")] != -1);
		return sat<F>("PCM_FLOAT");
	}

	template<typename F = ::javax::sound::sampled::AudioFormat$Encoding>
	static auto PCM_SIGNED() {
		static_assert(field_signatures[jField<F>("PCM_SIGNED")] != -1);
		return sat<F>("PCM_SIGNED");
	}

	template<typename F = ::javax::sound::sampled::AudioFormat$Encoding>
	static auto PCM_UNSIGNED() {
		static_assert(field_signatures[jField<F>("PCM_UNSIGNED")] != -1);
		return sat<F>("PCM_UNSIGNED");
	}

	template<typename F = ::javax::sound::sampled::AudioFormat$Encoding>
	static auto ULAW() {
		static_assert(field_signatures[jField<F>("ULAW")] != -1);
		return sat<F>("ULAW");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
