#ifndef javax_sound_sampled_AudioSystem_HPP
#define javax_sound_sampled_AudioSystem_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::AudioSystem : public jObject<::javax::sound::sampled::AudioSystem, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "AudioSystem";

	constexpr static Enume field_signatures{
		jField<::jint>("NOT_SPECIFIED"), //
	};

	template<typename F = ::jint>
	static auto NOT_SPECIFIED() {
		static_assert(field_signatures[jField<F>("NOT_SPECIFIED")] != -1);
		return sat<F>("NOT_SPECIFIED");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::sound::sampled::AudioFileFormat(::java::io::File)>("getAudioFileFormat"), //
		jMethod<::javax::sound::sampled::AudioFileFormat(::java::io::InputStream)>("getAudioFileFormat"), //
		jMethod<::javax::sound::sampled::AudioFileFormat(::java::net::URL)>("getAudioFileFormat"), //
		jMethod<::javax::sound::sampled::AudioFileFormat$Type *()>("getAudioFileTypes"), //
		jMethod<::javax::sound::sampled::AudioFileFormat$Type *(::javax::sound::sampled::AudioInputStream)>("getAudioFileTypes"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::java::io::File)>("getAudioInputStream"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::java::io::InputStream)>("getAudioInputStream"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::java::net::URL)>("getAudioInputStream"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::javax::sound::sampled::AudioFormat$Encoding, ::javax::sound::sampled::AudioInputStream)>("getAudioInputStream"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::javax::sound::sampled::AudioFormat, ::javax::sound::sampled::AudioInputStream)>("getAudioInputStream"), //
		jMethod<::javax::sound::sampled::Clip()>("getClip"), //
		jMethod<::javax::sound::sampled::Clip(::javax::sound::sampled::Mixer$Info)>("getClip"), //
		jMethod<::javax::sound::sampled::Line(::javax::sound::sampled::Line$Info)>("getLine"), //
		jMethod<::javax::sound::sampled::Mixer(::javax::sound::sampled::Mixer$Info)>("getMixer"), //
		jMethod<::javax::sound::sampled::Mixer$Info *()>("getMixerInfo"), //
		jMethod<::javax::sound::sampled::SourceDataLine(::javax::sound::sampled::AudioFormat)>("getSourceDataLine"), //
		jMethod<::javax::sound::sampled::SourceDataLine(::javax::sound::sampled::AudioFormat, ::javax::sound::sampled::Mixer$Info)>("getSourceDataLine"), //
		jMethod<::javax::sound::sampled::Line$Info *(::javax::sound::sampled::Line$Info)>("getSourceLineInfo"), //
		jMethod<::javax::sound::sampled::TargetDataLine(::javax::sound::sampled::AudioFormat)>("getTargetDataLine"), //
		jMethod<::javax::sound::sampled::TargetDataLine(::javax::sound::sampled::AudioFormat, ::javax::sound::sampled::Mixer$Info)>("getTargetDataLine"), //
		jMethod<::javax::sound::sampled::AudioFormat$Encoding *(::javax::sound::sampled::AudioFormat$Encoding)>("getTargetEncodings"), //
		jMethod<::javax::sound::sampled::AudioFormat$Encoding *(::javax::sound::sampled::AudioFormat)>("getTargetEncodings"), //
		jMethod<::javax::sound::sampled::AudioFormat *(::javax::sound::sampled::AudioFormat$Encoding, ::javax::sound::sampled::AudioFormat)>("getTargetFormats"), //
		jMethod<::javax::sound::sampled::Line$Info *(::javax::sound::sampled::Line$Info)>("getTargetLineInfo"), //
		jMethod<::jboolean(::javax::sound::sampled::AudioFormat$Encoding, ::javax::sound::sampled::AudioFormat)>("isConversionSupported"), //
		jMethod<::jboolean(::javax::sound::sampled::AudioFormat, ::javax::sound::sampled::AudioFormat)>("isConversionSupported"), //
		jMethod<::jboolean(::javax::sound::sampled::AudioFileFormat$Type)>("isFileTypeSupported"), //
		jMethod<::jboolean(::javax::sound::sampled::AudioFileFormat$Type, ::javax::sound::sampled::AudioInputStream)>("isFileTypeSupported"), //
		jMethod<::jboolean(::javax::sound::sampled::Line$Info)>("isLineSupported"), //
		jMethod<::jint(::javax::sound::sampled::AudioInputStream, ::javax::sound::sampled::AudioFileFormat$Type, ::java::io::File)>("write"), //
		jMethod<::jint(::javax::sound::sampled::AudioInputStream, ::javax::sound::sampled::AudioFileFormat$Type, ::java::io::OutputStream)>("write"), //
	};

	template<typename R = ::javax::sound::sampled::AudioFileFormat, typename... Args>
	static auto getAudioFileFormat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAudioFileFormat")] != -1);
		return scall<R>("getAudioFileFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFileFormat$Type *, typename... Args>
	static auto getAudioFileTypes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAudioFileTypes")] != -1);
		return scall<R>("getAudioFileTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioInputStream, typename... Args>
	static auto getAudioInputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAudioInputStream")] != -1);
		return scall<R>("getAudioInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Clip, typename... Args>
	static auto getClip(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClip")] != -1);
		return scall<R>("getClip", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line, typename... Args>
	static auto getLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLine")] != -1);
		return scall<R>("getLine", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Mixer, typename... Args>
	static auto getMixer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMixer")] != -1);
		return scall<R>("getMixer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Mixer$Info *, typename... Args>
	static auto getMixerInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMixerInfo")] != -1);
		return scall<R>("getMixerInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::SourceDataLine, typename... Args>
	static auto getSourceDataLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceDataLine")] != -1);
		return scall<R>("getSourceDataLine", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info *, typename... Args>
	static auto getSourceLineInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceLineInfo")] != -1);
		return scall<R>("getSourceLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::TargetDataLine, typename... Args>
	static auto getTargetDataLine(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetDataLine")] != -1);
		return scall<R>("getTargetDataLine", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat$Encoding *, typename... Args>
	static auto getTargetEncodings(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetEncodings")] != -1);
		return scall<R>("getTargetEncodings", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat *, typename... Args>
	static auto getTargetFormats(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetFormats")] != -1);
		return scall<R>("getTargetFormats", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info *, typename... Args>
	static auto getTargetLineInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetLineInfo")] != -1);
		return scall<R>("getTargetLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isConversionSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConversionSupported")] != -1);
		return scall<R>("isConversionSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isFileTypeSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileTypeSupported")] != -1);
		return scall<R>("isFileTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLineSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLineSupported")] != -1);
		return scall<R>("isLineSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto write(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return scall<R>("write", std::forward<Args>(args)...);
	}

};

#endif
