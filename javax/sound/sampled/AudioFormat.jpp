#ifndef javax_sound_sampled_AudioFormat_HPP
#define javax_sound_sampled_AudioFormat_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::AudioFormat : public jObject<::javax::sound::sampled::AudioFormat, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "AudioFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jint, ::jint, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::javax::sound::sampled::AudioFormat$Encoding, ::jfloat, ::jint, ::jint, ::jint, ::jfloat, ::jboolean)>(), //
		jConstructor<::jvoid(::javax::sound::sampled::AudioFormat$Encoding, ::jfloat, ::jint, ::jint, ::jint, ::jfloat, ::jboolean, ::java::util::Map)>(), //
		jMethod<::jint()>("getChannels"), //
		jMethod<::javax::sound::sampled::AudioFormat$Encoding()>("getEncoding"), //
		jMethod<::jfloat()>("getFrameRate"), //
		jMethod<::jint()>("getFrameSize"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::jfloat()>("getSampleRate"), //
		jMethod<::jint()>("getSampleSizeInBits"), //
		jMethod<::jboolean()>("isBigEndian"), //
		jMethod<::jboolean(::javax::sound::sampled::AudioFormat)>("matches"), //
		jMethod<::java::util::Map()>("properties"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChannels")] != -1);
		return call<R>("getChannels", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat$Encoding, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getFrameRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFrameRate")] != -1);
		return call<R>("getFrameRate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFrameSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFrameSize")] != -1);
		return call<R>("getFrameSize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSampleRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSampleRate")] != -1);
		return call<R>("getSampleRate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSampleSizeInBits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSampleSizeInBits")] != -1);
		return call<R>("getSampleSizeInBits", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBigEndian(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isBigEndian")] != -1);
		return call<R>("isBigEndian", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto matches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("matches")] != -1);
		return call<R>("matches", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto properties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("properties")] != -1);
		return call<R>("properties", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
