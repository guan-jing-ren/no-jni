#ifndef javax_sound_sampled_Clip_HPP
#define javax_sound_sampled_Clip_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::Clip : public jObject<::javax::sound::sampled::Clip, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "Clip";

	constexpr static Enume field_signatures{
		jField<::jint>("LOOP_CONTINUOUSLY"), //
	};

	template<typename F = ::jint>
	static auto LOOP_CONTINUOUSLY() {
		static_assert(field_signatures[jField<F>("LOOP_CONTINUOUSLY")] != -1);
		return sat<F>("LOOP_CONTINUOUSLY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("drain"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jint()>("getBufferSize"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jint()>("getFrameLength"), //
		jMethod<::jint()>("getFramePosition"), //
		jMethod<::jfloat()>("getLevel"), //
		jMethod<::jlong()>("getLongFramePosition"), //
		jMethod<::jlong()>("getMicrosecondLength"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isRunning"), //
		jMethod<::jvoid(::jint)>("loop"), //
		jMethod<::jvoid(::javax::sound::sampled::AudioFormat, ::jbyte *, ::jint, ::jint)>("open"), //
		jMethod<::jvoid(::javax::sound::sampled::AudioInputStream)>("open"), //
		jMethod<::jvoid(::jint)>("setFramePosition"), //
		jMethod<::jvoid(::jint, ::jint)>("setLoopPoints"), //
		jMethod<::jvoid(::jlong)>("setMicrosecondPosition"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drain")] != -1);
		return call<R>("drain", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferSize")] != -1);
		return call<R>("getBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFrameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameLength")] != -1);
		return call<R>("getFrameLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFramePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFramePosition")] != -1);
		return call<R>("getFramePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLongFramePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongFramePosition")] != -1);
		return call<R>("getLongFramePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondLength")] != -1);
		return call<R>("getMicrosecondLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRunning")] != -1);
		return call<R>("isRunning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto loop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loop")] != -1);
		return call<R>("loop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFramePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFramePosition")] != -1);
		return call<R>("setFramePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopPoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopPoints")] != -1);
		return call<R>("setLoopPoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMicrosecondPosition")] != -1);
		return call<R>("setMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
