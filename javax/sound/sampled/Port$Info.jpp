#ifndef javax_sound_sampled_Port$Info_HPP
#define javax_sound_sampled_Port$Info_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::Port$Info : public jObject<::javax::sound::sampled::Port$Info, ::javax::sound::sampled::Line$Info> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "Port$Info";

	constexpr static Enume field_signatures{
		jField<::javax::sound::sampled::Port$Info>("COMPACT_DISC"), //
		jField<::javax::sound::sampled::Port$Info>("HEADPHONE"), //
		jField<::javax::sound::sampled::Port$Info>("LINE_IN"), //
		jField<::javax::sound::sampled::Port$Info>("LINE_OUT"), //
		jField<::javax::sound::sampled::Port$Info>("MICROPHONE"), //
		jField<::javax::sound::sampled::Port$Info>("SPEAKER"), //
	};

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto COMPACT_DISC() {
		static_assert(field_signatures[jField<F>("COMPACT_DISC")] != -1);
		return sat<F>("COMPACT_DISC");
	}

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto HEADPHONE() {
		static_assert(field_signatures[jField<F>("HEADPHONE")] != -1);
		return sat<F>("HEADPHONE");
	}

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto LINE_IN() {
		static_assert(field_signatures[jField<F>("LINE_IN")] != -1);
		return sat<F>("LINE_IN");
	}

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto LINE_OUT() {
		static_assert(field_signatures[jField<F>("LINE_OUT")] != -1);
		return sat<F>("LINE_OUT");
	}

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto MICROPHONE() {
		static_assert(field_signatures[jField<F>("MICROPHONE")] != -1);
		return sat<F>("MICROPHONE");
	}

	template<typename F = ::javax::sound::sampled::Port$Info>
	static auto SPEAKER() {
		static_assert(field_signatures[jField<F>("SPEAKER")] != -1);
		return sat<F>("SPEAKER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String, ::jboolean)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isSource"), //
		jMethod<::jboolean(::javax::sound::sampled::Line$Info)>("matches"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSource")] != -1);
		return call<R>("isSource", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto matches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("matches")] != -1);
		return call<R>("matches", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
