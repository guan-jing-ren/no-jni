#ifndef javax_sound_sampled_FloatControl_HPP
#define javax_sound_sampled_FloatControl_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::FloatControl : public jObject<::javax::sound::sampled::FloatControl, ::javax::sound::sampled::Control> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "FloatControl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getMaxLabel"), //
		jMethod<::jfloat()>("getMaximum"), //
		jMethod<::java::lang::String()>("getMidLabel"), //
		jMethod<::java::lang::String()>("getMinLabel"), //
		jMethod<::jfloat()>("getMinimum"), //
		jMethod<::jfloat()>("getPrecision"), //
		jMethod<::java::lang::String()>("getUnits"), //
		jMethod<::jint()>("getUpdatePeriod"), //
		jMethod<::jfloat()>("getValue"), //
		jMethod<::jvoid(::jfloat)>("setValue"), //
		jMethod<::jvoid(::jfloat, ::jfloat, ::jint)>("shift"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getMaxLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxLabel")] != -1);
		return call<R>("getMaxLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaximum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximum")] != -1);
		return call<R>("getMaximum", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMidLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidLabel")] != -1);
		return call<R>("getMidLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMinLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinLabel")] != -1);
		return call<R>("getMinLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimum")] != -1);
		return call<R>("getMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPrecision(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrecision")] != -1);
		return call<R>("getPrecision", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnits(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnits")] != -1);
		return call<R>("getUnits", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUpdatePeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUpdatePeriod")] != -1);
		return call<R>("getUpdatePeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shift(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shift")] != -1);
		return call<R>("shift", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
