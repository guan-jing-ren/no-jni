#ifndef javax_sound_sampled_AudioFileFormat$Type_HPP
#define javax_sound_sampled_AudioFileFormat$Type_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::AudioFileFormat$Type : public jObject<::javax::sound::sampled::AudioFileFormat$Type, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "AudioFileFormat$Type";

	constexpr static Enume field_signatures{
		jField<::javax::sound::sampled::AudioFileFormat$Type>("AIFC"), //
		jField<::javax::sound::sampled::AudioFileFormat$Type>("AIFF"), //
		jField<::javax::sound::sampled::AudioFileFormat$Type>("AU"), //
		jField<::javax::sound::sampled::AudioFileFormat$Type>("SND"), //
		jField<::javax::sound::sampled::AudioFileFormat$Type>("WAVE"), //
	};

	template<typename F = ::javax::sound::sampled::AudioFileFormat$Type>
	static auto AIFC() {
		static_assert(field_signatures[jField<F>("AIFC")] != -1);
		return sat<F>("AIFC");
	}

	template<typename F = ::javax::sound::sampled::AudioFileFormat$Type>
	static auto AIFF() {
		static_assert(field_signatures[jField<F>("AIFF")] != -1);
		return sat<F>("AIFF");
	}

	template<typename F = ::javax::sound::sampled::AudioFileFormat$Type>
	static auto AU() {
		static_assert(field_signatures[jField<F>("AU")] != -1);
		return sat<F>("AU");
	}

	template<typename F = ::javax::sound::sampled::AudioFileFormat$Type>
	static auto SND() {
		static_assert(field_signatures[jField<F>("SND")] != -1);
		return sat<F>("SND");
	}

	template<typename F = ::javax::sound::sampled::AudioFileFormat$Type>
	static auto WAVE() {
		static_assert(field_signatures[jField<F>("WAVE")] != -1);
		return sat<F>("WAVE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getExtension"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtension")] != -1);
		return call<R>("getExtension", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
