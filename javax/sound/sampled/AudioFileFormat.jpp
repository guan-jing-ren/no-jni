#ifndef javax_sound_sampled_AudioFileFormat_HPP
#define javax_sound_sampled_AudioFileFormat_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::AudioFileFormat : public jObject<::javax::sound::sampled::AudioFileFormat, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "AudioFileFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::sound::sampled::AudioFileFormat$Type, ::javax::sound::sampled::AudioFormat, ::jint)>(), //
		jConstructor<::jvoid(::javax::sound::sampled::AudioFileFormat$Type, ::javax::sound::sampled::AudioFormat, ::jint, ::java::util::Map)>(), //
		jMethod<::jint()>("getByteLength"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jint()>("getFrameLength"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::sound::sampled::AudioFileFormat$Type()>("getType"), //
		jMethod<::java::util::Map()>("properties"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getByteLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteLength")] != -1);
		return call<R>("getByteLength", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFrameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameLength")] != -1);
		return call<R>("getFrameLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFileFormat$Type, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto properties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("properties")] != -1);
		return call<R>("properties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
