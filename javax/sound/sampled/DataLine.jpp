#ifndef javax_sound_sampled_DataLine_HPP
#define javax_sound_sampled_DataLine_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::DataLine : public jObject<::javax::sound::sampled::DataLine, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "DataLine";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("addLineListener"), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("drain"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::jint()>("getBufferSize"), //
		jMethod<::javax::sound::sampled::Control(::javax::sound::sampled::Control$Type)>("getControl"), //
		jMethod<::javax::sound::sampled::Control *()>("getControls"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jint()>("getFramePosition"), //
		jMethod<::jfloat()>("getLevel"), //
		jMethod<::javax::sound::sampled::Line$Info()>("getLineInfo"), //
		jMethod<::jlong()>("getLongFramePosition"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean(::javax::sound::sampled::Control$Type)>("isControlSupported"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jboolean()>("isRunning"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("removeLineListener"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLineListener")] != -1);
		return call<R>("addLineListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto drain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drain")] != -1);
		return call<R>("drain", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferSize")] != -1);
		return call<R>("getBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control *, typename... Args>
	auto getControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControls")] != -1);
		return call<R>("getControls", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFramePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFramePosition")] != -1);
		return call<R>("getFramePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLevel")] != -1);
		return call<R>("getLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info, typename... Args>
	auto getLineInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineInfo")] != -1);
		return call<R>("getLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLongFramePosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLongFramePosition")] != -1);
		return call<R>("getLongFramePosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isControlSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isControlSupported")] != -1);
		return call<R>("isControlSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRunning")] != -1);
		return call<R>("isRunning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLineListener")] != -1);
		return call<R>("removeLineListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
