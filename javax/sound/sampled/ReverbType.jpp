#ifndef javax_sound_sampled_ReverbType_HPP
#define javax_sound_sampled_ReverbType_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::ReverbType : public jObject<::javax::sound::sampled::ReverbType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "ReverbType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getDecayTime"), //
		jMethod<::jint()>("getEarlyReflectionDelay"), //
		jMethod<::jfloat()>("getEarlyReflectionIntensity"), //
		jMethod<::jint()>("getLateReflectionDelay"), //
		jMethod<::jfloat()>("getLateReflectionIntensity"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDecayTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDecayTime")] != -1);
		return call<R>("getDecayTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEarlyReflectionDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEarlyReflectionDelay")] != -1);
		return call<R>("getEarlyReflectionDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getEarlyReflectionIntensity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEarlyReflectionIntensity")] != -1);
		return call<R>("getEarlyReflectionIntensity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLateReflectionDelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLateReflectionDelay")] != -1);
		return call<R>("getLateReflectionDelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLateReflectionIntensity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLateReflectionIntensity")] != -1);
		return call<R>("getLateReflectionIntensity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
