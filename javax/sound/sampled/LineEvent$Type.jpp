#ifndef javax_sound_sampled_LineEvent$Type_HPP
#define javax_sound_sampled_LineEvent$Type_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::sampled::LineEvent$Type : public jObject<::javax::sound::sampled::LineEvent$Type, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_sampled / "LineEvent$Type";

	constexpr static Enume field_signatures{
		jField<::javax::sound::sampled::LineEvent$Type>("CLOSE"), //
		jField<::javax::sound::sampled::LineEvent$Type>("OPEN"), //
		jField<::javax::sound::sampled::LineEvent$Type>("START"), //
		jField<::javax::sound::sampled::LineEvent$Type>("STOP"), //
	};

	template<typename F = ::javax::sound::sampled::LineEvent$Type>
	static auto CLOSE() {
		static_assert(field_signatures[jField<F>("CLOSE")] != -1);
		return sat<F>("CLOSE");
	}

	template<typename F = ::javax::sound::sampled::LineEvent$Type>
	static auto OPEN() {
		static_assert(field_signatures[jField<F>("OPEN")] != -1);
		return sat<F>("OPEN");
	}

	template<typename F = ::javax::sound::sampled::LineEvent$Type>
	static auto START() {
		static_assert(field_signatures[jField<F>("START")] != -1);
		return sat<F>("START");
	}

	template<typename F = ::javax::sound::sampled::LineEvent$Type>
	static auto STOP() {
		static_assert(field_signatures[jField<F>("STOP")] != -1);
		return sat<F>("STOP");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
