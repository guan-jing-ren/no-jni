#ifndef javax_sound_midi_ShortMessage_HPP
#define javax_sound_midi_ShortMessage_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::ShortMessage : public jObject<::javax::sound::midi::ShortMessage, ::javax::sound::midi::MidiMessage> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "ShortMessage";

	constexpr static Enume field_signatures{
		jField<::jint>("ACTIVE_SENSING"), //
		jField<::jint>("CHANNEL_PRESSURE"), //
		jField<::jint>("CONTINUE"), //
		jField<::jint>("CONTROL_CHANGE"), //
		jField<::jint>("END_OF_EXCLUSIVE"), //
		jField<::jint>("MIDI_TIME_CODE"), //
		jField<::jint>("NOTE_OFF"), //
		jField<::jint>("NOTE_ON"), //
		jField<::jint>("PITCH_BEND"), //
		jField<::jint>("POLY_PRESSURE"), //
		jField<::jint>("PROGRAM_CHANGE"), //
		jField<::jint>("SONG_POSITION_POINTER"), //
		jField<::jint>("SONG_SELECT"), //
		jField<::jint>("START"), //
		jField<::jint>("STOP"), //
		jField<::jint>("SYSTEM_RESET"), //
		jField<::jint>("TIMING_CLOCK"), //
		jField<::jint>("TUNE_REQUEST"), //
	};

	template<typename F = ::jint>
	static auto ACTIVE_SENSING() {
		static_assert(field_signatures[jField<F>("ACTIVE_SENSING")] != -1);
		return sat<F>("ACTIVE_SENSING");
	}

	template<typename F = ::jint>
	static auto CHANNEL_PRESSURE() {
		static_assert(field_signatures[jField<F>("CHANNEL_PRESSURE")] != -1);
		return sat<F>("CHANNEL_PRESSURE");
	}

	template<typename F = ::jint>
	static auto CONTINUE() {
		static_assert(field_signatures[jField<F>("CONTINUE")] != -1);
		return sat<F>("CONTINUE");
	}

	template<typename F = ::jint>
	static auto CONTROL_CHANGE() {
		static_assert(field_signatures[jField<F>("CONTROL_CHANGE")] != -1);
		return sat<F>("CONTROL_CHANGE");
	}

	template<typename F = ::jint>
	static auto END_OF_EXCLUSIVE() {
		static_assert(field_signatures[jField<F>("END_OF_EXCLUSIVE")] != -1);
		return sat<F>("END_OF_EXCLUSIVE");
	}

	template<typename F = ::jint>
	static auto MIDI_TIME_CODE() {
		static_assert(field_signatures[jField<F>("MIDI_TIME_CODE")] != -1);
		return sat<F>("MIDI_TIME_CODE");
	}

	template<typename F = ::jint>
	static auto NOTE_OFF() {
		static_assert(field_signatures[jField<F>("NOTE_OFF")] != -1);
		return sat<F>("NOTE_OFF");
	}

	template<typename F = ::jint>
	static auto NOTE_ON() {
		static_assert(field_signatures[jField<F>("NOTE_ON")] != -1);
		return sat<F>("NOTE_ON");
	}

	template<typename F = ::jint>
	static auto PITCH_BEND() {
		static_assert(field_signatures[jField<F>("PITCH_BEND")] != -1);
		return sat<F>("PITCH_BEND");
	}

	template<typename F = ::jint>
	static auto POLY_PRESSURE() {
		static_assert(field_signatures[jField<F>("POLY_PRESSURE")] != -1);
		return sat<F>("POLY_PRESSURE");
	}

	template<typename F = ::jint>
	static auto PROGRAM_CHANGE() {
		static_assert(field_signatures[jField<F>("PROGRAM_CHANGE")] != -1);
		return sat<F>("PROGRAM_CHANGE");
	}

	template<typename F = ::jint>
	static auto SONG_POSITION_POINTER() {
		static_assert(field_signatures[jField<F>("SONG_POSITION_POINTER")] != -1);
		return sat<F>("SONG_POSITION_POINTER");
	}

	template<typename F = ::jint>
	static auto SONG_SELECT() {
		static_assert(field_signatures[jField<F>("SONG_SELECT")] != -1);
		return sat<F>("SONG_SELECT");
	}

	template<typename F = ::jint>
	static auto START() {
		static_assert(field_signatures[jField<F>("START")] != -1);
		return sat<F>("START");
	}

	template<typename F = ::jint>
	static auto STOP() {
		static_assert(field_signatures[jField<F>("STOP")] != -1);
		return sat<F>("STOP");
	}

	template<typename F = ::jint>
	static auto SYSTEM_RESET() {
		static_assert(field_signatures[jField<F>("SYSTEM_RESET")] != -1);
		return sat<F>("SYSTEM_RESET");
	}

	template<typename F = ::jint>
	static auto TIMING_CLOCK() {
		static_assert(field_signatures[jField<F>("TIMING_CLOCK")] != -1);
		return sat<F>("TIMING_CLOCK");
	}

	template<typename F = ::jint>
	static auto TUNE_REQUEST() {
		static_assert(field_signatures[jField<F>("TUNE_REQUEST")] != -1);
		return sat<F>("TUNE_REQUEST");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint()>("getChannel"), //
		jMethod<::jint()>("getCommand"), //
		jMethod<::jint()>("getData1"), //
		jMethod<::jint()>("getData2"), //
		jMethod<::jvoid(::jint)>("setMessage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setMessage"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setMessage"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCommand")] != -1);
		return call<R>("getCommand", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getData1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData1")] != -1);
		return call<R>("getData1", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getData2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData2")] != -1);
		return call<R>("getData2", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", forward<Args>(args)...);
	}

};

#endif
