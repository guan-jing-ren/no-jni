#ifndef javax_sound_midi_Sequencer_HPP
#define javax_sound_midi_Sequencer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::Sequencer : public jObject<::javax::sound::midi::Sequencer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "Sequencer";

	constexpr static Enume field_signatures{
		jField<::jint>("LOOP_CONTINUOUSLY"), //
	};

	template<typename F = ::jint>
	static auto LOOP_CONTINUOUSLY() {
		static_assert(field_signatures[jField<F>("LOOP_CONTINUOUSLY")] != -1);
		return sat<F>("LOOP_CONTINUOUSLY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint *(::javax::sound::midi::ControllerEventListener, ::jint *)>("addControllerEventListener"), //
		jMethod<::jboolean(::javax::sound::midi::MetaEventListener)>("addMetaEventListener"), //
		jMethod<::jint()>("getLoopCount"), //
		jMethod<::jlong()>("getLoopEndPoint"), //
		jMethod<::jlong()>("getLoopStartPoint"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode()>("getMasterSyncMode"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode *()>("getMasterSyncModes"), //
		jMethod<::jlong()>("getMicrosecondLength"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::javax::sound::midi::Sequence()>("getSequence"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode()>("getSlaveSyncMode"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode *()>("getSlaveSyncModes"), //
		jMethod<::jfloat()>("getTempoFactor"), //
		jMethod<::jfloat()>("getTempoInBPM"), //
		jMethod<::jfloat()>("getTempoInMPQ"), //
		jMethod<::jlong()>("getTickLength"), //
		jMethod<::jlong()>("getTickPosition"), //
		jMethod<::jboolean(::jint)>("getTrackMute"), //
		jMethod<::jboolean(::jint)>("getTrackSolo"), //
		jMethod<::jboolean()>("isRecording"), //
		jMethod<::jboolean()>("isRunning"), //
		jMethod<::jvoid(::javax::sound::midi::Track)>("recordDisable"), //
		jMethod<::jvoid(::javax::sound::midi::Track, ::jint)>("recordEnable"), //
		jMethod<::jint *(::javax::sound::midi::ControllerEventListener, ::jint *)>("removeControllerEventListener"), //
		jMethod<::jvoid(::javax::sound::midi::MetaEventListener)>("removeMetaEventListener"), //
		jMethod<::jvoid(::jint)>("setLoopCount"), //
		jMethod<::jvoid(::jlong)>("setLoopEndPoint"), //
		jMethod<::jvoid(::jlong)>("setLoopStartPoint"), //
		jMethod<::jvoid(::javax::sound::midi::Sequencer$SyncMode)>("setMasterSyncMode"), //
		jMethod<::jvoid(::jlong)>("setMicrosecondPosition"), //
		jMethod<::jvoid(::java::io::InputStream)>("setSequence"), //
		jMethod<::jvoid(::javax::sound::midi::Sequence)>("setSequence"), //
		jMethod<::jvoid(::javax::sound::midi::Sequencer$SyncMode)>("setSlaveSyncMode"), //
		jMethod<::jvoid(::jfloat)>("setTempoFactor"), //
		jMethod<::jvoid(::jfloat)>("setTempoInBPM"), //
		jMethod<::jvoid(::jfloat)>("setTempoInMPQ"), //
		jMethod<::jvoid(::jlong)>("setTickPosition"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setTrackMute"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setTrackSolo"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("startRecording"), //
		jMethod<::jvoid()>("stop"), //
		jMethod<::jvoid()>("stopRecording"), //
	};

	template<typename R = ::jint *, typename... Args>
	auto addControllerEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addControllerEventListener")] != -1);
		return call<R>("addControllerEventListener", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addMetaEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMetaEventListener")] != -1);
		return call<R>("addMetaEventListener", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLoopCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLoopCount")] != -1);
		return call<R>("getLoopCount", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLoopEndPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLoopEndPoint")] != -1);
		return call<R>("getLoopEndPoint", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLoopStartPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLoopStartPoint")] != -1);
		return call<R>("getLoopStartPoint", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode, typename... Args>
	auto getMasterSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMasterSyncMode")] != -1);
		return call<R>("getMasterSyncMode", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode *, typename... Args>
	auto getMasterSyncModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMasterSyncModes")] != -1);
		return call<R>("getMasterSyncModes", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMicrosecondLength")] != -1);
		return call<R>("getMicrosecondLength", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequence, typename... Args>
	auto getSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSequence")] != -1);
		return call<R>("getSequence", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode, typename... Args>
	auto getSlaveSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSlaveSyncMode")] != -1);
		return call<R>("getSlaveSyncMode", forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode *, typename... Args>
	auto getSlaveSyncModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSlaveSyncModes")] != -1);
		return call<R>("getSlaveSyncModes", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTempoFactor")] != -1);
		return call<R>("getTempoFactor", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoInBPM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTempoInBPM")] != -1);
		return call<R>("getTempoInBPM", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoInMPQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTempoInMPQ")] != -1);
		return call<R>("getTempoInMPQ", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTickLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTickLength")] != -1);
		return call<R>("getTickLength", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTickPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTickPosition")] != -1);
		return call<R>("getTickPosition", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTrackMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTrackMute")] != -1);
		return call<R>("getTrackMute", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTrackSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTrackSolo")] != -1);
		return call<R>("getTrackSolo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRecording")] != -1);
		return call<R>("isRecording", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRunning")] != -1);
		return call<R>("isRunning", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recordDisable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("recordDisable")] != -1);
		return call<R>("recordDisable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recordEnable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("recordEnable")] != -1);
		return call<R>("recordEnable", forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto removeControllerEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeControllerEventListener")] != -1);
		return call<R>("removeControllerEventListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMetaEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMetaEventListener")] != -1);
		return call<R>("removeMetaEventListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLoopCount")] != -1);
		return call<R>("setLoopCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopEndPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLoopEndPoint")] != -1);
		return call<R>("setLoopEndPoint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopStartPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLoopStartPoint")] != -1);
		return call<R>("setLoopStartPoint", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMasterSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMasterSyncMode")] != -1);
		return call<R>("setMasterSyncMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMicrosecondPosition")] != -1);
		return call<R>("setMicrosecondPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSequence")] != -1);
		return call<R>("setSequence", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSlaveSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSlaveSyncMode")] != -1);
		return call<R>("setSlaveSyncMode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTempoFactor")] != -1);
		return call<R>("setTempoFactor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoInBPM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTempoInBPM")] != -1);
		return call<R>("setTempoInBPM", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoInMPQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTempoInMPQ")] != -1);
		return call<R>("setTempoInMPQ", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTickPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTickPosition")] != -1);
		return call<R>("setTickPosition", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrackMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTrackMute")] != -1);
		return call<R>("setTrackMute", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrackSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTrackSolo")] != -1);
		return call<R>("setTrackSolo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("start")] != -1);
		return call<R>("start", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("startRecording")] != -1);
		return call<R>("startRecording", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stopRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stopRecording")] != -1);
		return call<R>("stopRecording", forward<Args>(args)...);
	}

};

#endif
