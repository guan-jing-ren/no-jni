#ifndef javax_sound_midi_Sequencer_HPP
#define javax_sound_midi_Sequencer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::Sequencer : public jObject<::javax::sound::midi::Sequencer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "Sequencer";

	constexpr static Enume field_signatures{
		jField<::jint>("LOOP_CONTINUOUSLY"), //
	};

	template<typename F = ::jint>
	static auto LOOP_CONTINUOUSLY() {
		static_assert(field_signatures[jField<F>("LOOP_CONTINUOUSLY")] != -1);
		return sat<F>("LOOP_CONTINUOUSLY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint *(::javax::sound::midi::ControllerEventListener, ::jint *)>("addControllerEventListener"), //
		jMethod<::jboolean(::javax::sound::midi::MetaEventListener)>("addMetaEventListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::sound::midi::MidiDevice$Info()>("getDeviceInfo"), //
		jMethod<::jint()>("getLoopCount"), //
		jMethod<::jlong()>("getLoopEndPoint"), //
		jMethod<::jlong()>("getLoopStartPoint"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode()>("getMasterSyncMode"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode *()>("getMasterSyncModes"), //
		jMethod<::jint()>("getMaxReceivers"), //
		jMethod<::jint()>("getMaxTransmitters"), //
		jMethod<::jlong()>("getMicrosecondLength"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::javax::sound::midi::Receiver()>("getReceiver"), //
		jMethod<::java::util::List()>("getReceivers"), //
		jMethod<::javax::sound::midi::Sequence()>("getSequence"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode()>("getSlaveSyncMode"), //
		jMethod<::javax::sound::midi::Sequencer$SyncMode *()>("getSlaveSyncModes"), //
		jMethod<::jfloat()>("getTempoFactor"), //
		jMethod<::jfloat()>("getTempoInBPM"), //
		jMethod<::jfloat()>("getTempoInMPQ"), //
		jMethod<::jlong()>("getTickLength"), //
		jMethod<::jlong()>("getTickPosition"), //
		jMethod<::jboolean(::jint)>("getTrackMute"), //
		jMethod<::jboolean(::jint)>("getTrackSolo"), //
		jMethod<::javax::sound::midi::Transmitter()>("getTransmitter"), //
		jMethod<::java::util::List()>("getTransmitters"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jboolean()>("isRecording"), //
		jMethod<::jboolean()>("isRunning"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::javax::sound::midi::Track)>("recordDisable"), //
		jMethod<::jvoid(::javax::sound::midi::Track, ::jint)>("recordEnable"), //
		jMethod<::jint *(::javax::sound::midi::ControllerEventListener, ::jint *)>("removeControllerEventListener"), //
		jMethod<::jvoid(::javax::sound::midi::MetaEventListener)>("removeMetaEventListener"), //
		jMethod<::jvoid(::jint)>("setLoopCount"), //
		jMethod<::jvoid(::jlong)>("setLoopEndPoint"), //
		jMethod<::jvoid(::jlong)>("setLoopStartPoint"), //
		jMethod<::jvoid(::javax::sound::midi::Sequencer$SyncMode)>("setMasterSyncMode"), //
		jMethod<::jvoid(::jlong)>("setMicrosecondPosition"), //
		jMethod<::jvoid(::java::io::InputStream)>("setSequence"), //
		jMethod<::jvoid(::javax::sound::midi::Sequence)>("setSequence"), //
		jMethod<::jvoid(::javax::sound::midi::Sequencer$SyncMode)>("setSlaveSyncMode"), //
		jMethod<::jvoid(::jfloat)>("setTempoFactor"), //
		jMethod<::jvoid(::jfloat)>("setTempoInBPM"), //
		jMethod<::jvoid(::jfloat)>("setTempoInMPQ"), //
		jMethod<::jvoid(::jlong)>("setTickPosition"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setTrackMute"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setTrackSolo"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("startRecording"), //
		jMethod<::jvoid()>("stop"), //
		jMethod<::jvoid()>("stopRecording"), //
	};

	template<typename R = ::jint *, typename... Args>
	auto addControllerEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addControllerEventListener")] != -1);
		return call<R>("addControllerEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addMetaEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMetaEventListener")] != -1);
		return call<R>("addMetaEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiDevice$Info, typename... Args>
	auto getDeviceInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceInfo")] != -1);
		return call<R>("getDeviceInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLoopCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopCount")] != -1);
		return call<R>("getLoopCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLoopEndPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopEndPoint")] != -1);
		return call<R>("getLoopEndPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLoopStartPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopStartPoint")] != -1);
		return call<R>("getLoopStartPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode, typename... Args>
	auto getMasterSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMasterSyncMode")] != -1);
		return call<R>("getMasterSyncMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode *, typename... Args>
	auto getMasterSyncModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMasterSyncModes")] != -1);
		return call<R>("getMasterSyncModes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxReceivers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxReceivers")] != -1);
		return call<R>("getMaxReceivers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxTransmitters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxTransmitters")] != -1);
		return call<R>("getMaxTransmitters", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondLength")] != -1);
		return call<R>("getMicrosecondLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Receiver, typename... Args>
	auto getReceiver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiver")] != -1);
		return call<R>("getReceiver", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getReceivers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceivers")] != -1);
		return call<R>("getReceivers", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequence, typename... Args>
	auto getSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequence")] != -1);
		return call<R>("getSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode, typename... Args>
	auto getSlaveSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSlaveSyncMode")] != -1);
		return call<R>("getSlaveSyncMode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer$SyncMode *, typename... Args>
	auto getSlaveSyncModes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSlaveSyncModes")] != -1);
		return call<R>("getSlaveSyncModes", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTempoFactor")] != -1);
		return call<R>("getTempoFactor", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoInBPM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTempoInBPM")] != -1);
		return call<R>("getTempoInBPM", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getTempoInMPQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTempoInMPQ")] != -1);
		return call<R>("getTempoInMPQ", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTickLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTickLength")] != -1);
		return call<R>("getTickLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTickPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTickPosition")] != -1);
		return call<R>("getTickPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTrackMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrackMute")] != -1);
		return call<R>("getTrackMute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getTrackSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrackSolo")] != -1);
		return call<R>("getTrackSolo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Transmitter, typename... Args>
	auto getTransmitter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitter")] != -1);
		return call<R>("getTransmitter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTransmitters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitters")] != -1);
		return call<R>("getTransmitters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRecording")] != -1);
		return call<R>("isRecording", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRunning")] != -1);
		return call<R>("isRunning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recordDisable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recordDisable")] != -1);
		return call<R>("recordDisable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recordEnable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recordEnable")] != -1);
		return call<R>("recordEnable", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto removeControllerEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeControllerEventListener")] != -1);
		return call<R>("removeControllerEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMetaEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMetaEventListener")] != -1);
		return call<R>("removeMetaEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopCount")] != -1);
		return call<R>("setLoopCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopEndPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopEndPoint")] != -1);
		return call<R>("setLoopEndPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopStartPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopStartPoint")] != -1);
		return call<R>("setLoopStartPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMasterSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMasterSyncMode")] != -1);
		return call<R>("setMasterSyncMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMicrosecondPosition")] != -1);
		return call<R>("setMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSequence")] != -1);
		return call<R>("setSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSlaveSyncMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSlaveSyncMode")] != -1);
		return call<R>("setSlaveSyncMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoFactor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTempoFactor")] != -1);
		return call<R>("setTempoFactor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoInBPM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTempoInBPM")] != -1);
		return call<R>("setTempoInBPM", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTempoInMPQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTempoInMPQ")] != -1);
		return call<R>("setTempoInMPQ", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTickPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTickPosition")] != -1);
		return call<R>("setTickPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrackMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrackMute")] != -1);
		return call<R>("setTrackMute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTrackSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTrackSolo")] != -1);
		return call<R>("setTrackSolo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startRecording")] != -1);
		return call<R>("startRecording", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stopRecording(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopRecording")] != -1);
		return call<R>("stopRecording", std::forward<Args>(args)...);
	}

};

#endif
