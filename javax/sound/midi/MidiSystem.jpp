#ifndef javax_sound_midi_MidiSystem_HPP
#define javax_sound_midi_MidiSystem_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::MidiSystem : public jObject<::javax::sound::midi::MidiSystem, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "MidiSystem";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::sound::midi::MidiDevice(::javax::sound::midi::MidiDevice$Info)>("getMidiDevice"), //
		jMethod<::javax::sound::midi::MidiDevice$Info *()>("getMidiDeviceInfo"), //
		jMethod<::javax::sound::midi::MidiFileFormat(::java::io::File)>("getMidiFileFormat"), //
		jMethod<::javax::sound::midi::MidiFileFormat(::java::io::InputStream)>("getMidiFileFormat"), //
		jMethod<::javax::sound::midi::MidiFileFormat(::java::net::URL)>("getMidiFileFormat"), //
		jMethod<::jint *()>("getMidiFileTypes"), //
		jMethod<::jint *(::javax::sound::midi::Sequence)>("getMidiFileTypes"), //
		jMethod<::javax::sound::midi::Receiver()>("getReceiver"), //
		jMethod<::javax::sound::midi::Sequence(::java::io::File)>("getSequence"), //
		jMethod<::javax::sound::midi::Sequence(::java::io::InputStream)>("getSequence"), //
		jMethod<::javax::sound::midi::Sequence(::java::net::URL)>("getSequence"), //
		jMethod<::javax::sound::midi::Sequencer()>("getSequencer"), //
		jMethod<::javax::sound::midi::Sequencer(::jboolean)>("getSequencer"), //
		jMethod<::javax::sound::midi::Soundbank(::java::io::File)>("getSoundbank"), //
		jMethod<::javax::sound::midi::Soundbank(::java::io::InputStream)>("getSoundbank"), //
		jMethod<::javax::sound::midi::Soundbank(::java::net::URL)>("getSoundbank"), //
		jMethod<::javax::sound::midi::Synthesizer()>("getSynthesizer"), //
		jMethod<::javax::sound::midi::Transmitter()>("getTransmitter"), //
		jMethod<::jboolean(::jint)>("isFileTypeSupported"), //
		jMethod<::jboolean(::jint, ::javax::sound::midi::Sequence)>("isFileTypeSupported"), //
		jMethod<::jint(::javax::sound::midi::Sequence, ::jint, ::java::io::File)>("write"), //
		jMethod<::jint(::javax::sound::midi::Sequence, ::jint, ::java::io::OutputStream)>("write"), //
	};

	template<typename R = ::javax::sound::midi::MidiDevice, typename... Args>
	static auto getMidiDevice(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidiDevice")] != -1);
		return scall<R>("getMidiDevice", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiDevice$Info *, typename... Args>
	static auto getMidiDeviceInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidiDeviceInfo")] != -1);
		return scall<R>("getMidiDeviceInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiFileFormat, typename... Args>
	static auto getMidiFileFormat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidiFileFormat")] != -1);
		return scall<R>("getMidiFileFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto getMidiFileTypes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidiFileTypes")] != -1);
		return scall<R>("getMidiFileTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Receiver, typename... Args>
	static auto getReceiver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiver")] != -1);
		return scall<R>("getReceiver", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequence, typename... Args>
	static auto getSequence(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequence")] != -1);
		return scall<R>("getSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Sequencer, typename... Args>
	static auto getSequencer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequencer")] != -1);
		return scall<R>("getSequencer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Soundbank, typename... Args>
	static auto getSoundbank(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoundbank")] != -1);
		return scall<R>("getSoundbank", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Synthesizer, typename... Args>
	static auto getSynthesizer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSynthesizer")] != -1);
		return scall<R>("getSynthesizer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Transmitter, typename... Args>
	static auto getTransmitter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitter")] != -1);
		return scall<R>("getTransmitter", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isFileTypeSupported(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileTypeSupported")] != -1);
		return scall<R>("isFileTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto write(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return scall<R>("write", std::forward<Args>(args)...);
	}

};

#endif
