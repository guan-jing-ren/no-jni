#ifndef javax_sound_midi_Synthesizer_HPP
#define javax_sound_midi_Synthesizer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::Synthesizer : public jObject<::javax::sound::midi::Synthesizer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "Synthesizer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::sound::midi::Instrument *()>("getAvailableInstruments"), //
		jMethod<::javax::sound::midi::MidiChannel *()>("getChannels"), //
		jMethod<::javax::sound::midi::Soundbank()>("getDefaultSoundbank"), //
		jMethod<::javax::sound::midi::MidiDevice$Info()>("getDeviceInfo"), //
		jMethod<::jlong()>("getLatency"), //
		jMethod<::javax::sound::midi::Instrument *()>("getLoadedInstruments"), //
		jMethod<::jint()>("getMaxPolyphony"), //
		jMethod<::jint()>("getMaxReceivers"), //
		jMethod<::jint()>("getMaxTransmitters"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::javax::sound::midi::Receiver()>("getReceiver"), //
		jMethod<::java::util::List()>("getReceivers"), //
		jMethod<::javax::sound::midi::Transmitter()>("getTransmitter"), //
		jMethod<::java::util::List()>("getTransmitters"), //
		jMethod<::javax::sound::midi::VoiceStatus *()>("getVoiceStatus"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jboolean(::javax::sound::midi::Soundbank)>("isSoundbankSupported"), //
		jMethod<::jboolean(::javax::sound::midi::Soundbank)>("loadAllInstruments"), //
		jMethod<::jboolean(::javax::sound::midi::Instrument)>("loadInstrument"), //
		jMethod<::jboolean(::javax::sound::midi::Soundbank, ::javax::sound::midi::Patch *)>("loadInstruments"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jboolean(::javax::sound::midi::Instrument, ::javax::sound::midi::Instrument)>("remapInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::Soundbank)>("unloadAllInstruments"), //
		jMethod<::jvoid(::javax::sound::midi::Instrument)>("unloadInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::Soundbank, ::javax::sound::midi::Patch *)>("unloadInstruments"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Instrument *, typename... Args>
	auto getAvailableInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAvailableInstruments")] != -1);
		return call<R>("getAvailableInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiChannel *, typename... Args>
	auto getChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannels")] != -1);
		return call<R>("getChannels", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Soundbank, typename... Args>
	auto getDefaultSoundbank(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultSoundbank")] != -1);
		return call<R>("getDefaultSoundbank", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiDevice$Info, typename... Args>
	auto getDeviceInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeviceInfo")] != -1);
		return call<R>("getDeviceInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLatency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLatency")] != -1);
		return call<R>("getLatency", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Instrument *, typename... Args>
	auto getLoadedInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoadedInstruments")] != -1);
		return call<R>("getLoadedInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxPolyphony(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxPolyphony")] != -1);
		return call<R>("getMaxPolyphony", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxReceivers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxReceivers")] != -1);
		return call<R>("getMaxReceivers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxTransmitters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxTransmitters")] != -1);
		return call<R>("getMaxTransmitters", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Receiver, typename... Args>
	auto getReceiver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiver")] != -1);
		return call<R>("getReceiver", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getReceivers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceivers")] != -1);
		return call<R>("getReceivers", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Transmitter, typename... Args>
	auto getTransmitter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitter")] != -1);
		return call<R>("getTransmitter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTransmitters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitters")] != -1);
		return call<R>("getTransmitters", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::VoiceStatus *, typename... Args>
	auto getVoiceStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVoiceStatus")] != -1);
		return call<R>("getVoiceStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSoundbankSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSoundbankSupported")] != -1);
		return call<R>("isSoundbankSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto loadAllInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadAllInstruments")] != -1);
		return call<R>("loadAllInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto loadInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadInstrument")] != -1);
		return call<R>("loadInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto loadInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadInstruments")] != -1);
		return call<R>("loadInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto remapInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remapInstrument")] != -1);
		return call<R>("remapInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unloadAllInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unloadAllInstruments")] != -1);
		return call<R>("unloadAllInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unloadInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unloadInstrument")] != -1);
		return call<R>("unloadInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unloadInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unloadInstruments")] != -1);
		return call<R>("unloadInstruments", std::forward<Args>(args)...);
	}

};

#endif
