#ifndef javax_sound_midi_VoiceStatus_HPP
#define javax_sound_midi_VoiceStatus_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sound::midi::VoiceStatus : public jObject<::javax::sound::midi::VoiceStatus, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sound_midi / "VoiceStatus";

	constexpr static Enume field_signatures{
		jField<::jboolean>("active"), //
		jField<::jint>("bank"), //
		jField<::jint>("channel"), //
		jField<::jint>("note"), //
		jField<::jint>("program"), //
		jField<::jint>("volume"), //
	};

	template<typename F = ::jboolean>
	auto active() const {
		static_assert(field_signatures[jField<F>("active")] != -1);
		return at<F>("active");
	}

	template<typename F = ::jint>
	auto bank() const {
		static_assert(field_signatures[jField<F>("bank")] != -1);
		return at<F>("bank");
	}

	template<typename F = ::jint>
	auto channel() const {
		static_assert(field_signatures[jField<F>("channel")] != -1);
		return at<F>("channel");
	}

	template<typename F = ::jint>
	auto note() const {
		static_assert(field_signatures[jField<F>("note")] != -1);
		return at<F>("note");
	}

	template<typename F = ::jint>
	auto program() const {
		static_assert(field_signatures[jField<F>("program")] != -1);
		return at<F>("program");
	}

	template<typename F = ::jint>
	auto volume() const {
		static_assert(field_signatures[jField<F>("volume")] != -1);
		return at<F>("volume");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
