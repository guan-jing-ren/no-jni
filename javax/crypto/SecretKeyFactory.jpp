#ifndef javax_crypto_SecretKeyFactory_HPP
#define javax_crypto_SecretKeyFactory_HPP

#include "../../jfwd_decl.hpp"

class ::javax::crypto::SecretKeyFactory : public jObject<::javax::crypto::SecretKeyFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto / "SecretKeyFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::crypto::SecretKey(::java::security::spec::KeySpec)>("generateSecret"), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::javax::crypto::SecretKeyFactory(::java::lang::String)>("getInstance"), //
		jMethod<::javax::crypto::SecretKeyFactory(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::crypto::SecretKeyFactory(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::security::spec::KeySpec(::javax::crypto::SecretKey, ::java::lang::Class)>("getKeySpec"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::javax::crypto::SecretKey(::javax::crypto::SecretKey)>("translateKey"), //
	};

	template<typename R = ::javax::crypto::SecretKey, typename... Args>
	auto generateSecret(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("generateSecret")] != -1);
		return call<R>("generateSecret", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::crypto::SecretKeyFactory, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::spec::KeySpec, typename... Args>
	auto getKeySpec(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeySpec")] != -1);
		return call<R>("getKeySpec", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::crypto::SecretKey, typename... Args>
	auto translateKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translateKey")] != -1);
		return call<R>("translateKey", std::forward<Args>(args)...);
	}

};

#endif
