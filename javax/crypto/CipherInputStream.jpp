#ifndef javax_crypto_CipherInputStream_HPP
#define javax_crypto_CipherInputStream_HPP

#include "../../jfwd_decl.hpp"

class ::javax::crypto::CipherInputStream : public jObject<::javax::crypto::CipherInputStream, ::java::io::FilterInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto / "CipherInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream, ::javax::crypto::Cipher)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("markSupported"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *)>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
		jMethod<::jlong(::jlong)>("skip"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("available")] != -1);
		return call<R>("available", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("close")] != -1);
		return call<R>("close", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto markSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("markSupported")] != -1);
		return call<R>("markSupported", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("read")] != -1);
		return call<R>("read", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", forward<Args>(args)...);
	}

};

#endif
