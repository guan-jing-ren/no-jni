#ifndef javax_crypto_Mac_HPP
#define javax_crypto_Mac_HPP

#include "../../jfwd_decl.hpp"

class ::javax::crypto::Mac : public jObject<::javax::crypto::Mac, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto / "Mac";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jbyte *()>("doFinal"), //
		jMethod<::jbyte *(::jbyte *)>("doFinal"), //
		jMethod<::jvoid(::jbyte *, ::jint)>("doFinal"), //
		jMethod<::java::lang::String()>("getAlgorithm"), //
		jMethod<::javax::crypto::Mac(::java::lang::String)>("getInstance"), //
		jMethod<::javax::crypto::Mac(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::crypto::Mac(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::jint()>("getMacLength"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::jvoid(::java::security::Key)>("init"), //
		jMethod<::jvoid(::java::security::Key, ::java::security::spec::AlgorithmParameterSpec)>("init"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jbyte)>("update"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("update"), //
		jMethod<::jvoid(::jbyte *)>("update"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("update"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto doFinal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("doFinal")] != -1);
		return call<R>("doFinal", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAlgorithm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAlgorithm")] != -1);
		return call<R>("getAlgorithm", forward<Args>(args)...);
	}

	template<typename R = ::javax::crypto::Mac, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMacLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMacLength")] != -1);
		return call<R>("getMacLength", forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("init")] != -1);
		return call<R>("init", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("update")] != -1);
		return call<R>("update", forward<Args>(args)...);
	}

};

#endif
