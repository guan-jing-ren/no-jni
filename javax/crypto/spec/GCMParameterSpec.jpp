#ifndef javax_crypto_spec_GCMParameterSpec_HPP
#define javax_crypto_spec_GCMParameterSpec_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::crypto::spec::GCMParameterSpec : public jObject<::javax::crypto::spec::GCMParameterSpec, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto_spec / "GCMParameterSpec";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jbyte *)>(), //
		jConstructor<::jvoid(::jint, ::jbyte *, ::jint, ::jint)>(), //
		jMethod<::jbyte *()>("getIV"), //
		jMethod<::jint()>("getTLen"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getIV(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getIV")] != -1);
		return call<R>("getIV", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTLen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTLen")] != -1);
		return call<R>("getTLen", forward<Args>(args)...);
	}

};

#endif
