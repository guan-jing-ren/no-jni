#ifndef javax_crypto_spec_DESedeKeySpec_HPP
#define javax_crypto_spec_DESedeKeySpec_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::crypto::spec::DESedeKeySpec : public jObject<::javax::crypto::spec::DESedeKeySpec, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto_spec / "DESedeKeySpec";

	constexpr static Enume field_signatures{
		jField<::jint>("DES_EDE_KEY_LEN"), //
	};

	template<typename F = ::jint>
	static auto DES_EDE_KEY_LEN() {
		static_assert(field_signatures[jField<F>("DES_EDE_KEY_LEN")] != -1);
		return sat<F>("DES_EDE_KEY_LEN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint)>(), //
		jMethod<::jbyte *()>("getKey"), //
		jMethod<::jboolean(::jbyte *, ::jint)>("isParityAdjusted"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isParityAdjusted(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isParityAdjusted")] != -1);
		return scall<R>("isParityAdjusted", forward<Args>(args)...);
	}

};

#endif
