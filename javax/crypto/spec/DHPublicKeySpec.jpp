#ifndef javax_crypto_spec_DHPublicKeySpec_HPP
#define javax_crypto_spec_DHPublicKeySpec_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::crypto::spec::DHPublicKeySpec : public jObject<::javax::crypto::spec::DHPublicKeySpec, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_crypto_spec / "DHPublicKeySpec";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger)>(), //
		jMethod<::java::math::BigInteger()>("getG"), //
		jMethod<::java::math::BigInteger()>("getP"), //
		jMethod<::java::math::BigInteger()>("getY"), //
	};

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getG(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getG")] != -1);
		return call<R>("getG", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getP(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getP")] != -1);
		return call<R>("getP", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

};

#endif
