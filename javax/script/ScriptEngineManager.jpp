#ifndef javax_script_ScriptEngineManager_HPP
#define javax_script_ScriptEngineManager_HPP

#include "../../jfwd_decl.hpp"

class ::javax::script::ScriptEngineManager : public jObject<::javax::script::ScriptEngineManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_script / "ScriptEngineManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::ClassLoader)>(), //
		jMethod<::java::lang::Object(::java::lang::String)>("get"), //
		jMethod<::javax::script::Bindings()>("getBindings"), //
		jMethod<::javax::script::ScriptEngine(::java::lang::String)>("getEngineByExtension"), //
		jMethod<::javax::script::ScriptEngine(::java::lang::String)>("getEngineByMimeType"), //
		jMethod<::javax::script::ScriptEngine(::java::lang::String)>("getEngineByName"), //
		jMethod<::java::util::List()>("getEngineFactories"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::lang::String, ::javax::script::ScriptEngineFactory)>("registerEngineExtension"), //
		jMethod<::jvoid(::java::lang::String, ::javax::script::ScriptEngineFactory)>("registerEngineMimeType"), //
		jMethod<::jvoid(::java::lang::String, ::javax::script::ScriptEngineFactory)>("registerEngineName"), //
		jMethod<::jvoid(::javax::script::Bindings)>("setBindings"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("get")] != -1);
		return call<R>("get", forward<Args>(args)...);
	}

	template<typename R = ::javax::script::Bindings, typename... Args>
	auto getBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBindings")] != -1);
		return call<R>("getBindings", forward<Args>(args)...);
	}

	template<typename R = ::javax::script::ScriptEngine, typename... Args>
	auto getEngineByExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEngineByExtension")] != -1);
		return call<R>("getEngineByExtension", forward<Args>(args)...);
	}

	template<typename R = ::javax::script::ScriptEngine, typename... Args>
	auto getEngineByMimeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEngineByMimeType")] != -1);
		return call<R>("getEngineByMimeType", forward<Args>(args)...);
	}

	template<typename R = ::javax::script::ScriptEngine, typename... Args>
	auto getEngineByName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEngineByName")] != -1);
		return call<R>("getEngineByName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getEngineFactories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEngineFactories")] != -1);
		return call<R>("getEngineFactories", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("put")] != -1);
		return call<R>("put", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerEngineExtension(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerEngineExtension")] != -1);
		return call<R>("registerEngineExtension", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerEngineMimeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerEngineMimeType")] != -1);
		return call<R>("registerEngineMimeType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerEngineName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("registerEngineName")] != -1);
		return call<R>("registerEngineName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBindings")] != -1);
		return call<R>("setBindings", forward<Args>(args)...);
	}

};

#endif
