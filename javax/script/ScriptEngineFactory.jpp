#ifndef javax_script_ScriptEngineFactory_HPP
#define javax_script_ScriptEngineFactory_HPP

#include "../../jfwd_decl.hpp"

class ::javax::script::ScriptEngineFactory : public jObject<::javax::script::ScriptEngineFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_script / "ScriptEngineFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getEngineName"), //
		jMethod<::java::lang::String()>("getEngineVersion"), //
		jMethod<::java::util::List()>("getExtensions"), //
		jMethod<::java::lang::String()>("getLanguageName"), //
		jMethod<::java::lang::String()>("getLanguageVersion"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String, ::java::lang::String *)>("getMethodCallSyntax"), //
		jMethod<::java::util::List()>("getMimeTypes"), //
		jMethod<::java::util::List()>("getNames"), //
		jMethod<::java::lang::String(::java::lang::String)>("getOutputStatement"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getParameter"), //
		jMethod<::java::lang::String(::java::lang::String *)>("getProgram"), //
		jMethod<::javax::script::ScriptEngine()>("getScriptEngine"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getEngineName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEngineName")] != -1);
		return call<R>("getEngineName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEngineVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEngineVersion")] != -1);
		return call<R>("getEngineVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return call<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLanguageName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLanguageName")] != -1);
		return call<R>("getLanguageName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLanguageVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLanguageVersion")] != -1);
		return call<R>("getLanguageVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMethodCallSyntax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethodCallSyntax")] != -1);
		return call<R>("getMethodCallSyntax", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getMimeTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMimeTypes")] != -1);
		return call<R>("getMimeTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNames")] != -1);
		return call<R>("getNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutputStatement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStatement")] != -1);
		return call<R>("getOutputStatement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProgram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgram")] != -1);
		return call<R>("getProgram", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::script::ScriptEngine, typename... Args>
	auto getScriptEngine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScriptEngine")] != -1);
		return call<R>("getScriptEngine", std::forward<Args>(args)...);
	}

};

#endif
