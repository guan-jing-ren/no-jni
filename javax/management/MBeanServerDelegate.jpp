#ifndef javax_management_MBeanServerDelegate_HPP
#define javax_management_MBeanServerDelegate_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::MBeanServerDelegate : public jObject<::javax::management::MBeanServerDelegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "MBeanServerDelegate";

	constexpr static Enume field_signatures{
		jField<::javax::management::ObjectName>("DELEGATE_NAME"), //
	};

	template<typename F = ::javax::management::ObjectName>
	static auto DELEGATE_NAME() {
		static_assert(field_signatures[jField<F>("DELEGATE_NAME")] != -1);
		return sat<F>("DELEGATE_NAME");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("addNotificationListener"), //
		jMethod<::java::lang::String()>("getImplementationName"), //
		jMethod<::java::lang::String()>("getImplementationVendor"), //
		jMethod<::java::lang::String()>("getImplementationVersion"), //
		jMethod<::java::lang::String()>("getMBeanServerId"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotificationInfo"), //
		jMethod<::java::lang::String()>("getSpecificationName"), //
		jMethod<::java::lang::String()>("getSpecificationVendor"), //
		jMethod<::java::lang::String()>("getSpecificationVersion"), //
		jMethod<::jvoid(::javax::management::NotificationListener)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::Notification)>("sendNotification"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotificationListener")] != -1);
		return call<R>("addNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplementationName")] != -1);
		return call<R>("getImplementationName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplementationVendor")] != -1);
		return call<R>("getImplementationVendor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getImplementationVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplementationVersion")] != -1);
		return call<R>("getImplementationVersion", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMBeanServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMBeanServerId")] != -1);
		return call<R>("getMBeanServerId", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationInfo")] != -1);
		return call<R>("getNotificationInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpecificationName")] != -1);
		return call<R>("getSpecificationName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpecificationVendor")] != -1);
		return call<R>("getSpecificationVendor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSpecificationVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSpecificationVersion")] != -1);
		return call<R>("getSpecificationVersion", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotificationListener")] != -1);
		return call<R>("removeNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendNotification")] != -1);
		return call<R>("sendNotification", forward<Args>(args)...);
	}

};

#endif
