#ifndef javax_management_DescriptorAccess_HPP
#define javax_management_DescriptorAccess_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::DescriptorAccess : public jObject<::javax::management::DescriptorAccess, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "DescriptorAccess";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::management::Descriptor()>("getDescriptor"), //
		jMethod<::jvoid(::javax::management::Descriptor)>("setDescriptor"), //
	};

	template<typename R = ::javax::management::Descriptor, typename... Args>
	auto getDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescriptor")] != -1);
		return call<R>("getDescriptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDescriptor")] != -1);
		return call<R>("setDescriptor", std::forward<Args>(args)...);
	}

};

#endif
