#ifndef javax_management_ObjectName_HPP
#define javax_management_ObjectName_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::ObjectName : public jObject<::javax::management::ObjectName, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "ObjectName";

	constexpr static Enume field_signatures{
		jField<::javax::management::ObjectName>("WILDCARD"), //
	};

	template<typename F = ::javax::management::ObjectName>
	static auto WILDCARD() {
		static_assert(field_signatures[jField<F>("WILDCARD")] != -1);
		return sat<F>("WILDCARD");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::util::Hashtable)>(), //
		jMethod<::jboolean(::javax::management::ObjectName)>("apply"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::javax::management::ObjectName)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getCanonicalKeyPropertyListString"), //
		jMethod<::java::lang::String()>("getCanonicalName"), //
		jMethod<::java::lang::String()>("getDomain"), //
		jMethod<::javax::management::ObjectName(::java::lang::String)>("getInstance"), //
		jMethod<::javax::management::ObjectName(::java::lang::String, ::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::management::ObjectName(::java::lang::String, ::java::util::Hashtable)>("getInstance"), //
		jMethod<::javax::management::ObjectName(::javax::management::ObjectName)>("getInstance"), //
		jMethod<::java::lang::String(::java::lang::String)>("getKeyProperty"), //
		jMethod<::java::util::Hashtable()>("getKeyPropertyList"), //
		jMethod<::java::lang::String()>("getKeyPropertyListString"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isDomainPattern"), //
		jMethod<::jboolean()>("isPattern"), //
		jMethod<::jboolean()>("isPropertyListPattern"), //
		jMethod<::jboolean()>("isPropertyPattern"), //
		jMethod<::jboolean()>("isPropertyValuePattern"), //
		jMethod<::jboolean(::java::lang::String)>("isPropertyValuePattern"), //
		jMethod<::java::lang::String(::java::lang::String)>("quote"), //
		jMethod<::jvoid(::javax::management::MBeanServer)>("setMBeanServer"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::java::lang::String)>("unquote"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto apply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("apply")] != -1);
		return call<R>("apply", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCanonicalKeyPropertyListString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCanonicalKeyPropertyListString")] != -1);
		return call<R>("getCanonicalKeyPropertyListString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCanonicalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCanonicalName")] != -1);
		return call<R>("getCanonicalName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyProperty")] != -1);
		return call<R>("getKeyProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getKeyPropertyList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyPropertyList")] != -1);
		return call<R>("getKeyPropertyList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyPropertyListString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyPropertyListString")] != -1);
		return call<R>("getKeyPropertyListString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDomainPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDomainPattern")] != -1);
		return call<R>("isDomainPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPattern")] != -1);
		return call<R>("isPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPropertyListPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPropertyListPattern")] != -1);
		return call<R>("isPropertyListPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPropertyPattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPropertyPattern")] != -1);
		return call<R>("isPropertyPattern", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPropertyValuePattern(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPropertyValuePattern")] != -1);
		return call<R>("isPropertyValuePattern", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto quote(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("quote")] != -1);
		return scall<R>("quote", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMBeanServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMBeanServer")] != -1);
		return call<R>("setMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto unquote(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unquote")] != -1);
		return scall<R>("unquote", std::forward<Args>(args)...);
	}

};

#endif
