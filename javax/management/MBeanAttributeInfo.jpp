#ifndef javax_management_MBeanAttributeInfo_HPP
#define javax_management_MBeanAttributeInfo_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::MBeanAttributeInfo : public jObject<::javax::management::MBeanAttributeInfo, ::javax::management::MBeanFeatureInfo> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "MBeanAttributeInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jboolean, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::jboolean, ::jboolean, ::jboolean, ::javax::management::Descriptor)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::reflect::Method, ::java::lang::reflect::Method)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isIs"), //
		jMethod<::jboolean()>("isReadable"), //
		jMethod<::jboolean()>("isWritable"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIs")] != -1);
		return call<R>("isIs", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadable")] != -1);
		return call<R>("isReadable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWritable")] != -1);
		return call<R>("isWritable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
