#ifndef javax_management_modelmbean_RequiredModelMBean_HPP
#define javax_management_modelmbean_RequiredModelMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::modelmbean::RequiredModelMBean : public jObject<::javax::management::modelmbean::RequiredModelMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_modelmbean / "RequiredModelMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::management::modelmbean::ModelMBeanInfo)>(), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::java::lang::String, ::java::lang::Object)>("addAttributeChangeNotificationListener"), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("addNotificationListener"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::java::lang::String *)>("getAttributes"), //
		jMethod<::javax::management::MBeanInfo()>("getMBeanInfo"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotificationInfo"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("invoke"), //
		jMethod<::jvoid()>("load"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::java::lang::String)>("removeAttributeChangeNotificationListener"), //
		jMethod<::jvoid(::javax::management::NotificationListener)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::Attribute, ::javax::management::Attribute)>("sendAttributeChangeNotification"), //
		jMethod<::jvoid(::javax::management::AttributeChangeNotification)>("sendAttributeChangeNotification"), //
		jMethod<::jvoid(::java::lang::String)>("sendNotification"), //
		jMethod<::jvoid(::javax::management::Notification)>("sendNotification"), //
		jMethod<::jvoid(::javax::management::Attribute)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::AttributeList)>("setAttributes"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("setManagedResource"), //
		jMethod<::jvoid(::javax::management::modelmbean::ModelMBeanInfo)>("setModelMBeanInfo"), //
		jMethod<::jvoid()>("store"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttributeChangeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addAttributeChangeNotificationListener")] != -1);
		return call<R>("addAttributeChangeNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotificationListener")] != -1);
		return call<R>("addNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationInfo")] != -1);
		return call<R>("getNotificationInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("load")] != -1);
		return call<R>("load", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributeChangeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAttributeChangeNotificationListener")] != -1);
		return call<R>("removeAttributeChangeNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotificationListener")] != -1);
		return call<R>("removeNotificationListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendAttributeChangeNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendAttributeChangeNotification")] != -1);
		return call<R>("sendAttributeChangeNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendNotification")] != -1);
		return call<R>("sendNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setManagedResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setManagedResource")] != -1);
		return call<R>("setManagedResource", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModelMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setModelMBeanInfo")] != -1);
		return call<R>("setModelMBeanInfo", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto store(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("store")] != -1);
		return call<R>("store", forward<Args>(args)...);
	}

};

#endif
