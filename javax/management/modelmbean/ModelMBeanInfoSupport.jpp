#ifndef javax_management_modelmbean_ModelMBeanInfoSupport_HPP
#define javax_management_modelmbean_ModelMBeanInfoSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::modelmbean::ModelMBeanInfoSupport : public jObject<::javax::management::modelmbean::ModelMBeanInfoSupport, ::javax::management::MBeanInfo> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_modelmbean / "ModelMBeanInfoSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::modelmbean::ModelMBeanAttributeInfo *, ::javax::management::modelmbean::ModelMBeanConstructorInfo *, ::javax::management::modelmbean::ModelMBeanOperationInfo *, ::javax::management::modelmbean::ModelMBeanNotificationInfo *)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::modelmbean::ModelMBeanAttributeInfo *, ::javax::management::modelmbean::ModelMBeanConstructorInfo *, ::javax::management::modelmbean::ModelMBeanOperationInfo *, ::javax::management::modelmbean::ModelMBeanNotificationInfo *, ::javax::management::Descriptor)>(), //
		jConstructor<::jvoid(::javax::management::modelmbean::ModelMBeanInfo)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::javax::management::modelmbean::ModelMBeanAttributeInfo(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::modelmbean::ModelMBeanConstructorInfo(::java::lang::String)>("getConstructor"), //
		jMethod<::javax::management::Descriptor()>("getDescriptor"), //
		jMethod<::javax::management::Descriptor(::java::lang::String)>("getDescriptor"), //
		jMethod<::javax::management::Descriptor(::java::lang::String, ::java::lang::String)>("getDescriptor"), //
		jMethod<::javax::management::Descriptor *(::java::lang::String)>("getDescriptors"), //
		jMethod<::javax::management::Descriptor()>("getMBeanDescriptor"), //
		jMethod<::javax::management::modelmbean::ModelMBeanNotificationInfo(::java::lang::String)>("getNotification"), //
		jMethod<::javax::management::modelmbean::ModelMBeanOperationInfo(::java::lang::String)>("getOperation"), //
		jMethod<::jvoid(::javax::management::Descriptor, ::java::lang::String)>("setDescriptor"), //
		jMethod<::jvoid(::javax::management::Descriptor *)>("setDescriptors"), //
		jMethod<::jvoid(::javax::management::Descriptor)>("setMBeanDescriptor"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::modelmbean::ModelMBeanAttributeInfo, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::modelmbean::ModelMBeanConstructorInfo, typename... Args>
	auto getConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getConstructor")] != -1);
		return call<R>("getConstructor", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Descriptor, typename... Args>
	auto getDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescriptor")] != -1);
		return call<R>("getDescriptor", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Descriptor *, typename... Args>
	auto getDescriptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescriptors")] != -1);
		return call<R>("getDescriptors", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Descriptor, typename... Args>
	auto getMBeanDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMBeanDescriptor")] != -1);
		return call<R>("getMBeanDescriptor", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::modelmbean::ModelMBeanNotificationInfo, typename... Args>
	auto getNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotification")] != -1);
		return call<R>("getNotification", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::modelmbean::ModelMBeanOperationInfo, typename... Args>
	auto getOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOperation")] != -1);
		return call<R>("getOperation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDescriptor")] != -1);
		return call<R>("setDescriptor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescriptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDescriptors")] != -1);
		return call<R>("setDescriptors", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMBeanDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMBeanDescriptor")] != -1);
		return call<R>("setMBeanDescriptor", forward<Args>(args)...);
	}

};

#endif
