#ifndef javax_management_Query_HPP
#define javax_management_Query_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::Query : public jObject<::javax::management::Query, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "Query";

	constexpr static Enume field_signatures{
		jField<::jint>("DIV"), //
		jField<::jint>("EQ"), //
		jField<::jint>("GE"), //
		jField<::jint>("GT"), //
		jField<::jint>("LE"), //
		jField<::jint>("LT"), //
		jField<::jint>("MINUS"), //
		jField<::jint>("PLUS"), //
		jField<::jint>("TIMES"), //
	};

	template<typename F = ::jint>
	static auto DIV() {
		static_assert(field_signatures[jField<F>("DIV")] != -1);
		return sat<F>("DIV");
	}

	template<typename F = ::jint>
	static auto EQ() {
		static_assert(field_signatures[jField<F>("EQ")] != -1);
		return sat<F>("EQ");
	}

	template<typename F = ::jint>
	static auto GE() {
		static_assert(field_signatures[jField<F>("GE")] != -1);
		return sat<F>("GE");
	}

	template<typename F = ::jint>
	static auto GT() {
		static_assert(field_signatures[jField<F>("GT")] != -1);
		return sat<F>("GT");
	}

	template<typename F = ::jint>
	static auto LE() {
		static_assert(field_signatures[jField<F>("LE")] != -1);
		return sat<F>("LE");
	}

	template<typename F = ::jint>
	static auto LT() {
		static_assert(field_signatures[jField<F>("LT")] != -1);
		return sat<F>("LT");
	}

	template<typename F = ::jint>
	static auto MINUS() {
		static_assert(field_signatures[jField<F>("MINUS")] != -1);
		return sat<F>("MINUS");
	}

	template<typename F = ::jint>
	static auto PLUS() {
		static_assert(field_signatures[jField<F>("PLUS")] != -1);
		return sat<F>("PLUS");
	}

	template<typename F = ::jint>
	static auto TIMES() {
		static_assert(field_signatures[jField<F>("TIMES")] != -1);
		return sat<F>("TIMES");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::management::QueryExp(::javax::management::QueryExp, ::javax::management::QueryExp)>("and"), //
		jMethod<::javax::management::QueryExp(::javax::management::AttributeValueExp, ::javax::management::StringValueExp)>("anySubString"), //
		jMethod<::javax::management::AttributeValueExp(::java::lang::String)>("attr"), //
		jMethod<::javax::management::AttributeValueExp(::java::lang::String, ::java::lang::String)>("attr"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp, ::javax::management::ValueExp)>("between"), //
		jMethod<::javax::management::AttributeValueExp()>("classattr"), //
		jMethod<::javax::management::ValueExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("div"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("eq"), //
		jMethod<::javax::management::QueryExp(::javax::management::AttributeValueExp, ::javax::management::StringValueExp)>("finalSubString"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("geq"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("gt"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp *)>("in"), //
		jMethod<::javax::management::QueryExp(::javax::management::AttributeValueExp, ::javax::management::StringValueExp)>("initialSubString"), //
		jMethod<::javax::management::QueryExp(::javax::management::StringValueExp)>("isInstanceOf"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("leq"), //
		jMethod<::javax::management::QueryExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("lt"), //
		jMethod<::javax::management::QueryExp(::javax::management::AttributeValueExp, ::javax::management::StringValueExp)>("match"), //
		jMethod<::javax::management::ValueExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("minus"), //
		jMethod<::javax::management::QueryExp(::javax::management::QueryExp)>("not"), //
		jMethod<::javax::management::QueryExp(::javax::management::QueryExp, ::javax::management::QueryExp)>("or"), //
		jMethod<::javax::management::ValueExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("plus"), //
		jMethod<::javax::management::ValueExp(::javax::management::ValueExp, ::javax::management::ValueExp)>("times"), //
		jMethod<::javax::management::ValueExp(::jdouble)>("value"), //
		jMethod<::javax::management::ValueExp(::jfloat)>("value"), //
		jMethod<::javax::management::ValueExp(::jint)>("value"), //
		jMethod<::javax::management::ValueExp(::jlong)>("value"), //
		jMethod<::javax::management::ValueExp(::java::lang::Number)>("value"), //
		jMethod<::javax::management::StringValueExp(::java::lang::String)>("value"), //
		jMethod<::javax::management::ValueExp(::jboolean)>("value"), //
	};

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto and_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("and")] != -1);
		return scall<R>("and", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto anySubString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("anySubString")] != -1);
		return scall<R>("anySubString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeValueExp, typename... Args>
	static auto attr(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attr")] != -1);
		return scall<R>("attr", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto between(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("between")] != -1);
		return scall<R>("between", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeValueExp, typename... Args>
	static auto classattr(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classattr")] != -1);
		return scall<R>("classattr", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ValueExp, typename... Args>
	static auto div(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("div")] != -1);
		return scall<R>("div", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto eq(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("eq")] != -1);
		return scall<R>("eq", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto finalSubString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finalSubString")] != -1);
		return scall<R>("finalSubString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto geq(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("geq")] != -1);
		return scall<R>("geq", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto gt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("gt")] != -1);
		return scall<R>("gt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto in(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("in")] != -1);
		return scall<R>("in", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto initialSubString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialSubString")] != -1);
		return scall<R>("initialSubString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto isInstanceOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInstanceOf")] != -1);
		return scall<R>("isInstanceOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto leq(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("leq")] != -1);
		return scall<R>("leq", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto lt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lt")] != -1);
		return scall<R>("lt", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto match(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("match")] != -1);
		return scall<R>("match", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ValueExp, typename... Args>
	static auto minus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minus")] != -1);
		return scall<R>("minus", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto not_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("not")] != -1);
		return scall<R>("not", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::QueryExp, typename... Args>
	static auto or_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("or")] != -1);
		return scall<R>("or", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ValueExp, typename... Args>
	static auto plus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("plus")] != -1);
		return scall<R>("plus", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ValueExp, typename... Args>
	static auto times(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("times")] != -1);
		return scall<R>("times", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ValueExp, typename... Args>
	static auto value(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return scall<R>("value", std::forward<Args>(args)...);
	}

};

#endif
