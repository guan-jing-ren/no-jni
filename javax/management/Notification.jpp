#ifndef javax_management_Notification_HPP
#define javax_management_Notification_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::Notification : public jObject<::javax::management::Notification, ::java::util::EventObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "Notification";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jlong)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jlong, ::jlong)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jlong, ::jlong, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object, ::jlong, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jlong()>("getSequenceNumber"), //
		jMethod<::jlong()>("getTimeStamp"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::Object()>("getUserData"), //
		jMethod<::jvoid(::jlong)>("setSequenceNumber"), //
		jMethod<::jvoid(::java::lang::Object)>("setSource"), //
		jMethod<::jvoid(::jlong)>("setTimeStamp"), //
		jMethod<::jvoid(::java::lang::Object)>("setUserData"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSequenceNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSequenceNumber")] != -1);
		return call<R>("getSequenceNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeStamp")] != -1);
		return call<R>("getTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserData")] != -1);
		return call<R>("getUserData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSequenceNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSequenceNumber")] != -1);
		return call<R>("setSequenceNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSource")] != -1);
		return call<R>("setSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeStamp")] != -1);
		return call<R>("setTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUserData")] != -1);
		return call<R>("setUserData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
