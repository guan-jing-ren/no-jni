#ifndef javax_management_StandardMBean_HPP
#define javax_management_StandardMBean_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::StandardMBean : public jObject<::javax::management::StandardMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "StandardMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::Class)>(), //
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::Class, ::jboolean)>(), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::java::lang::String *)>("getAttributes"), //
		jMethod<::java::lang::Object()>("getImplementation"), //
		jMethod<::java::lang::Class()>("getImplementationClass"), //
		jMethod<::javax::management::MBeanInfo()>("getMBeanInfo"), //
		jMethod<::java::lang::Class()>("getMBeanInterface"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("invoke"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid(::javax::management::Attribute)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::AttributeList)>("setAttributes"), //
		jMethod<::jvoid(::java::lang::Object)>("setImplementation"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getImplementation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplementation")] != -1);
		return call<R>("getImplementation", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getImplementationClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImplementationClass")] != -1);
		return call<R>("getImplementationClass", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getMBeanInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMBeanInterface")] != -1);
		return call<R>("getMBeanInterface", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setImplementation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setImplementation")] != -1);
		return call<R>("setImplementation", forward<Args>(args)...);
	}

};

#endif
