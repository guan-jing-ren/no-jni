#ifndef javax_management_loading_MLetContent_HPP
#define javax_management_loading_MLetContent_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::loading::MLetContent : public jObject<::javax::management::loading::MLetContent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_loading / "MLetContent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::net::URL, ::java::util::Map, ::java::util::List, ::java::util::List)>(), //
		jMethod<::java::util::Map()>("getAttributes"), //
		jMethod<::java::lang::String()>("getCode"), //
		jMethod<::java::net::URL()>("getCodeBase"), //
		jMethod<::java::net::URL()>("getDocumentBase"), //
		jMethod<::java::lang::String()>("getJarFiles"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::util::List()>("getParameterTypes"), //
		jMethod<::java::util::List()>("getParameterValues"), //
		jMethod<::java::lang::String()>("getSerializedObject"), //
		jMethod<::java::lang::String()>("getVersion"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCode")] != -1);
		return call<R>("getCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getDocumentBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentBase")] != -1);
		return call<R>("getDocumentBase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJarFiles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJarFiles")] != -1);
		return call<R>("getJarFiles", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getParameterTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterTypes")] != -1);
		return call<R>("getParameterTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getParameterValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParameterValues")] != -1);
		return call<R>("getParameterValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSerializedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerializedObject")] != -1);
		return call<R>("getSerializedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

};

#endif
