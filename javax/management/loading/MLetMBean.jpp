#ifndef javax_management_loading_MLetMBean_HPP
#define javax_management_loading_MLetMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::loading::MLetMBean : public jObject<::javax::management::loading::MLetMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_loading / "MLetMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String)>("addURL"), //
		jMethod<::jvoid(::java::net::URL)>("addURL"), //
		jMethod<::java::lang::String()>("getLibraryDirectory"), //
		jMethod<::java::util::Set(::java::lang::String)>("getMBeansFromURL"), //
		jMethod<::java::util::Set(::java::net::URL)>("getMBeansFromURL"), //
		jMethod<::java::net::URL(::java::lang::String)>("getResource"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getResourceAsStream"), //
		jMethod<::java::util::Enumeration(::java::lang::String)>("getResources"), //
		jMethod<::java::net::URL *()>("getURLs"), //
		jMethod<::jvoid(::java::lang::String)>("setLibraryDirectory"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addURL")] != -1);
		return call<R>("addURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLibraryDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLibraryDirectory")] != -1);
		return call<R>("getLibraryDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getMBeansFromURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeansFromURL")] != -1);
		return call<R>("getMBeansFromURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResource")] != -1);
		return call<R>("getResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getResourceAsStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceAsStream")] != -1);
		return call<R>("getResourceAsStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResources")] != -1);
		return call<R>("getResources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL *, typename... Args>
	auto getURLs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURLs")] != -1);
		return call<R>("getURLs", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLibraryDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLibraryDirectory")] != -1);
		return call<R>("setLibraryDirectory", std::forward<Args>(args)...);
	}

};

#endif
