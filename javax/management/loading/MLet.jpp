#ifndef javax_management_loading_MLet_HPP
#define javax_management_loading_MLet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::loading::MLet : public jObject<::javax::management::loading::MLet, ::java::net::URLClassLoader> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_loading / "MLet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::net::URL *)>(), //
		jConstructor<::jvoid(::java::net::URL *, ::java::lang::ClassLoader)>(), //
		jConstructor<::jvoid(::java::net::URL *, ::java::lang::ClassLoader, ::java::net::URLStreamHandlerFactory)>(), //
		jConstructor<::jvoid(::java::net::URL *, ::java::lang::ClassLoader, ::java::net::URLStreamHandlerFactory, ::jboolean)>(), //
		jConstructor<::jvoid(::java::net::URL *, ::java::lang::ClassLoader, ::jboolean)>(), //
		jConstructor<::jvoid(::java::net::URL *, ::jboolean)>(), //
		jMethod<::jvoid(::java::lang::String)>("addURL"), //
		jMethod<::jvoid(::java::net::URL)>("addURL"), //
		jMethod<::java::lang::String()>("getLibraryDirectory"), //
		jMethod<::java::util::Set(::java::lang::String)>("getMBeansFromURL"), //
		jMethod<::java::util::Set(::java::net::URL)>("getMBeansFromURL"), //
		jMethod<::java::net::URL(::java::lang::String)>("getResource"), //
		jMethod<::java::io::InputStream(::java::lang::String)>("getResourceAsStream"), //
		jMethod<::java::util::Enumeration(::java::lang::String)>("getResources"), //
		jMethod<::java::net::URL *()>("getURLs"), //
		jMethod<::java::lang::Class(::java::lang::String, ::javax::management::loading::ClassLoaderRepository)>("loadClass"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid(::java::io::ObjectInput)>("readExternal"), //
		jMethod<::jvoid(::java::lang::String)>("setLibraryDirectory"), //
		jMethod<::jvoid(::java::io::ObjectOutput)>("writeExternal"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addURL")] != -1);
		return call<R>("addURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLibraryDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLibraryDirectory")] != -1);
		return call<R>("getLibraryDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getMBeansFromURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeansFromURL")] != -1);
		return call<R>("getMBeansFromURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResource")] != -1);
		return call<R>("getResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getResourceAsStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceAsStream")] != -1);
		return call<R>("getResourceAsStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResources")] != -1);
		return call<R>("getResources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL *, typename... Args>
	auto getURLs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURLs")] != -1);
		return call<R>("getURLs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto loadClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadClass")] != -1);
		return call<R>("loadClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readExternal")] != -1);
		return call<R>("readExternal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLibraryDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLibraryDirectory")] != -1);
		return call<R>("setLibraryDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeExternal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeExternal")] != -1);
		return call<R>("writeExternal", std::forward<Args>(args)...);
	}

};

#endif
