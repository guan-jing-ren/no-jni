#ifndef javax_management_RuntimeErrorException_HPP
#define javax_management_RuntimeErrorException_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::RuntimeErrorException : public jObject<::javax::management::RuntimeErrorException, ::javax::management::JMRuntimeException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "RuntimeErrorException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Error)>(), //
		jConstructor<::jvoid(::java::lang::Error, ::java::lang::String)>(), //
		jMethod<::java::lang::Throwable()>("getCause"), //
		jMethod<::java::lang::Error()>("getTargetError"), //
	};

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return call<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Error, typename... Args>
	auto getTargetError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetError")] != -1);
		return call<R>("getTargetError", std::forward<Args>(args)...);
	}

};

#endif
