#ifndef javax_management_ImmutableDescriptor_HPP
#define javax_management_ImmutableDescriptor_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::ImmutableDescriptor : public jObject<::javax::management::ImmutableDescriptor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "ImmutableDescriptor";

	constexpr static Enume field_signatures{
		jField<::javax::management::ImmutableDescriptor>("EMPTY_DESCRIPTOR"), //
	};

	template<typename F = ::javax::management::ImmutableDescriptor>
	static auto EMPTY_DESCRIPTOR() {
		static_assert(field_signatures[jField<F>("EMPTY_DESCRIPTOR")] != -1);
		return sat<F>("EMPTY_DESCRIPTOR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::Map)>(), //
		jConstructor<::jvoid(::java::lang::String *)>(), //
		jConstructor<::jvoid(::java::lang::String *, ::java::lang::Object *)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::javax::management::Descriptor()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String *()>("getFieldNames"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getFieldValue"), //
		jMethod<::java::lang::Object *(::java::lang::String *)>("getFieldValues"), //
		jMethod<::java::lang::String *()>("getFields"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::jvoid(::java::lang::String)>("removeField"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setField"), //
		jMethod<::jvoid(::java::lang::String *, ::java::lang::Object *)>("setFields"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::javax::management::ImmutableDescriptor(::javax::management::Descriptor *)>("union"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFieldNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldNames")] != -1);
		return call<R>("getFieldNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getFieldValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldValue")] != -1);
		return call<R>("getFieldValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getFieldValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldValues")] != -1);
		return call<R>("getFieldValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFields")] != -1);
		return call<R>("getFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeField")] != -1);
		return call<R>("removeField", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setField")] != -1);
		return call<R>("setField", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFields")] != -1);
		return call<R>("setFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ImmutableDescriptor, typename... Args>
	static auto union_(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("union")] != -1);
		return scall<R>("union", std::forward<Args>(args)...);
	}

};

#endif
