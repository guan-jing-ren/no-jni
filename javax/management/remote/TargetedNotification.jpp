#ifndef javax_management_remote_TargetedNotification_HPP
#define javax_management_remote_TargetedNotification_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::remote::TargetedNotification : public jObject<::javax::management::remote::TargetedNotification, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote / "TargetedNotification";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::management::Notification, ::java::lang::Integer)>(), //
		jMethod<::java::lang::Integer()>("getListenerID"), //
		jMethod<::javax::management::Notification()>("getNotification"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getListenerID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListenerID")] != -1);
		return call<R>("getListenerID", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Notification, typename... Args>
	auto getNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotification")] != -1);
		return call<R>("getNotification", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
