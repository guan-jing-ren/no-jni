#ifndef javax_management_remote_JMXServiceURL_HPP
#define javax_management_remote_JMXServiceURL_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::remote::JMXServiceURL : public jObject<::javax::management::remote::JMXServiceURL, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote / "JMXServiceURL";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::lang::String()>("getURLPath"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURLPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURLPath")] != -1);
		return call<R>("getURLPath", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
