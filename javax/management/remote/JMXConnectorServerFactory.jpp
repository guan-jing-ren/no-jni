#ifndef javax_management_remote_JMXConnectorServerFactory_HPP
#define javax_management_remote_JMXConnectorServerFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::remote::JMXConnectorServerFactory : public jObject<::javax::management::remote::JMXConnectorServerFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote / "JMXConnectorServerFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_CLASS_LOADER"), //
		jField<::java::lang::String>("DEFAULT_CLASS_LOADER_NAME"), //
		jField<::java::lang::String>("PROTOCOL_PROVIDER_CLASS_LOADER"), //
		jField<::java::lang::String>("PROTOCOL_PROVIDER_PACKAGES"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_CLASS_LOADER() {
		static_assert(field_signatures[jField<F>("DEFAULT_CLASS_LOADER")] != -1);
		return sat<F>("DEFAULT_CLASS_LOADER");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_CLASS_LOADER_NAME() {
		static_assert(field_signatures[jField<F>("DEFAULT_CLASS_LOADER_NAME")] != -1);
		return sat<F>("DEFAULT_CLASS_LOADER_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto PROTOCOL_PROVIDER_CLASS_LOADER() {
		static_assert(field_signatures[jField<F>("PROTOCOL_PROVIDER_CLASS_LOADER")] != -1);
		return sat<F>("PROTOCOL_PROVIDER_CLASS_LOADER");
	}

	template<typename F = ::java::lang::String>
	static auto PROTOCOL_PROVIDER_PACKAGES() {
		static_assert(field_signatures[jField<F>("PROTOCOL_PROVIDER_PACKAGES")] != -1);
		return sat<F>("PROTOCOL_PROVIDER_PACKAGES");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::management::remote::JMXConnectorServer(::javax::management::remote::JMXServiceURL, ::java::util::Map, ::javax::management::MBeanServer)>("newJMXConnectorServer"), //
	};

	template<typename R = ::javax::management::remote::JMXConnectorServer, typename... Args>
	static auto newJMXConnectorServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newJMXConnectorServer")] != -1);
		return scall<R>("newJMXConnectorServer", forward<Args>(args)...);
	}

};

#endif
