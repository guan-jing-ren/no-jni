#ifndef javax_management_remote_rmi_RMIConnector_HPP
#define javax_management_remote_rmi_RMIConnector_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::management::remote::rmi::RMIConnector : public jObject<::javax::management::remote::rmi::RMIConnector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote_rmi / "RMIConnector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::management::remote::JMXServiceURL, ::java::util::Map)>(), //
		jConstructor<::jvoid(::javax::management::remote::rmi::RMIServer, ::java::util::Map)>(), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("addConnectionNotificationListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("connect"), //
		jMethod<::jvoid(::java::util::Map)>("connect"), //
		jMethod<::javax::management::remote::JMXServiceURL()>("getAddress"), //
		jMethod<::java::lang::String()>("getConnectionId"), //
		jMethod<::javax::management::MBeanServerConnection()>("getMBeanServerConnection"), //
		jMethod<::javax::management::MBeanServerConnection(::javax::security::auth::Subject)>("getMBeanServerConnection"), //
		jMethod<::jvoid(::javax::management::NotificationListener)>("removeConnectionNotificationListener"), //
		jMethod<::jvoid(::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("removeConnectionNotificationListener"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addConnectionNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addConnectionNotificationListener")] != -1);
		return call<R>("addConnectionNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::remote::JMXServiceURL, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionId")] != -1);
		return call<R>("getConnectionId", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServerConnection, typename... Args>
	auto getMBeanServerConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanServerConnection")] != -1);
		return call<R>("getMBeanServerConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeConnectionNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeConnectionNotificationListener")] != -1);
		return call<R>("removeConnectionNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
