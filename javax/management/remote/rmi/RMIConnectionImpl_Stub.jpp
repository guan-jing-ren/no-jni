#ifndef javax_management_remote_rmi_RMIConnectionImpl_Stub_HPP
#define javax_management_remote_rmi_RMIConnectionImpl_Stub_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::management::remote::rmi::RMIConnectionImpl_Stub : public jObject<::javax::management::remote::rmi::RMIConnectionImpl_Stub, ::java::rmi::server::RemoteStub> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote_rmi / "RMIConnectionImpl_Stub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::rmi::server::RemoteRef)>(), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("addNotificationListener"), //
		jMethod<::java::lang::Integer *(::javax::management::ObjectName *, ::java::rmi::MarshalledObject *, ::javax::security::auth::Subject *)>("addNotificationListeners"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::java::lang::String *, ::javax::security::auth::Subject)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::java::lang::String *, ::javax::security::auth::Subject)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::javax::management::ObjectName, ::javax::security::auth::Subject)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::javax::security::auth::Subject)>("createMBean"), //
		jMethod<::javax::management::remote::NotificationResult(::jlong, ::jint, ::jlong)>("fetchNotifications"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName, ::java::lang::String, ::javax::security::auth::Subject)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::ObjectName, ::java::lang::String *, ::javax::security::auth::Subject)>("getAttributes"), //
		jMethod<::java::lang::String()>("getConnectionId"), //
		jMethod<::java::lang::String(::javax::security::auth::Subject)>("getDefaultDomain"), //
		jMethod<::java::lang::String *(::javax::security::auth::Subject)>("getDomains"), //
		jMethod<::java::lang::Integer(::javax::security::auth::Subject)>("getMBeanCount"), //
		jMethod<::javax::management::MBeanInfo(::javax::management::ObjectName, ::javax::security::auth::Subject)>("getMBeanInfo"), //
		jMethod<::javax::management::ObjectInstance(::javax::management::ObjectName, ::javax::security::auth::Subject)>("getObjectInstance"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName, ::java::lang::String, ::java::rmi::MarshalledObject, ::java::lang::String *, ::javax::security::auth::Subject)>("invoke"), //
		jMethod<::jboolean(::javax::management::ObjectName, ::java::lang::String, ::javax::security::auth::Subject)>("isInstanceOf"), //
		jMethod<::jboolean(::javax::management::ObjectName, ::javax::security::auth::Subject)>("isRegistered"), //
		jMethod<::java::util::Set(::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("queryMBeans"), //
		jMethod<::java::util::Set(::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("queryNames"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName, ::javax::security::auth::Subject)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::java::lang::Integer *, ::javax::security::auth::Subject)>("removeNotificationListeners"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::ObjectName, ::java::rmi::MarshalledObject, ::javax::security::auth::Subject)>("setAttributes"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::security::auth::Subject)>("unregisterMBean"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotificationListener")] != -1);
		return call<R>("addNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer *, typename... Args>
	auto addNotificationListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotificationListeners")] != -1);
		return call<R>("addNotificationListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectInstance, typename... Args>
	auto createMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMBean")] != -1);
		return call<R>("createMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::remote::NotificationResult, typename... Args>
	auto fetchNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fetchNotifications")] != -1);
		return call<R>("fetchNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionId")] != -1);
		return call<R>("getConnectionId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultDomain")] != -1);
		return call<R>("getDefaultDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getDomains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomains")] != -1);
		return call<R>("getDomains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getMBeanCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanCount")] != -1);
		return call<R>("getMBeanCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectInstance, typename... Args>
	auto getObjectInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectInstance")] != -1);
		return call<R>("getObjectInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInstanceOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInstanceOf")] != -1);
		return call<R>("isInstanceOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRegistered")] != -1);
		return call<R>("isRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto queryMBeans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("queryMBeans")] != -1);
		return call<R>("queryMBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto queryNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("queryNames")] != -1);
		return call<R>("queryNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotificationListener")] != -1);
		return call<R>("removeNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListeners(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotificationListeners")] != -1);
		return call<R>("removeNotificationListeners", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterMBean")] != -1);
		return call<R>("unregisterMBean", std::forward<Args>(args)...);
	}

};

#endif
