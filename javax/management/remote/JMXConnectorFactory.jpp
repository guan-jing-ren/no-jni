#ifndef javax_management_remote_JMXConnectorFactory_HPP
#define javax_management_remote_JMXConnectorFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::remote::JMXConnectorFactory : public jObject<::javax::management::remote::JMXConnectorFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_remote / "JMXConnectorFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_CLASS_LOADER"), //
		jField<::java::lang::String>("PROTOCOL_PROVIDER_CLASS_LOADER"), //
		jField<::java::lang::String>("PROTOCOL_PROVIDER_PACKAGES"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_CLASS_LOADER() {
		static_assert(field_signatures[jField<F>("DEFAULT_CLASS_LOADER")] != -1);
		return sat<F>("DEFAULT_CLASS_LOADER");
	}

	template<typename F = ::java::lang::String>
	static auto PROTOCOL_PROVIDER_CLASS_LOADER() {
		static_assert(field_signatures[jField<F>("PROTOCOL_PROVIDER_CLASS_LOADER")] != -1);
		return sat<F>("PROTOCOL_PROVIDER_CLASS_LOADER");
	}

	template<typename F = ::java::lang::String>
	static auto PROTOCOL_PROVIDER_PACKAGES() {
		static_assert(field_signatures[jField<F>("PROTOCOL_PROVIDER_PACKAGES")] != -1);
		return sat<F>("PROTOCOL_PROVIDER_PACKAGES");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::management::remote::JMXConnector(::javax::management::remote::JMXServiceURL)>("connect"), //
		jMethod<::javax::management::remote::JMXConnector(::javax::management::remote::JMXServiceURL, ::java::util::Map)>("connect"), //
		jMethod<::javax::management::remote::JMXConnector(::javax::management::remote::JMXServiceURL, ::java::util::Map)>("newJMXConnector"), //
	};

	template<typename R = ::javax::management::remote::JMXConnector, typename... Args>
	static auto connect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("connect")] != -1);
		return scall<R>("connect", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::remote::JMXConnector, typename... Args>
	static auto newJMXConnector(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newJMXConnector")] != -1);
		return scall<R>("newJMXConnector", forward<Args>(args)...);
	}

};

#endif
