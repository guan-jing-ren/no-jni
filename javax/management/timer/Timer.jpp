#ifndef javax_management_timer_Timer_HPP
#define javax_management_timer_Timer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::timer::Timer : public jObject<::javax::management::timer::Timer, ::javax::management::NotificationBroadcasterSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_timer / "Timer";

	constexpr static Enume field_signatures{
		jField<::jlong>("ONE_DAY"), //
		jField<::jlong>("ONE_HOUR"), //
		jField<::jlong>("ONE_MINUTE"), //
		jField<::jlong>("ONE_SECOND"), //
		jField<::jlong>("ONE_WEEK"), //
	};

	template<typename F = ::jlong>
	static auto ONE_DAY() {
		static_assert(field_signatures[jField<F>("ONE_DAY")] != -1);
		return sat<F>("ONE_DAY");
	}

	template<typename F = ::jlong>
	static auto ONE_HOUR() {
		static_assert(field_signatures[jField<F>("ONE_HOUR")] != -1);
		return sat<F>("ONE_HOUR");
	}

	template<typename F = ::jlong>
	static auto ONE_MINUTE() {
		static_assert(field_signatures[jField<F>("ONE_MINUTE")] != -1);
		return sat<F>("ONE_MINUTE");
	}

	template<typename F = ::jlong>
	static auto ONE_SECOND() {
		static_assert(field_signatures[jField<F>("ONE_SECOND")] != -1);
		return sat<F>("ONE_SECOND");
	}

	template<typename F = ::jlong>
	static auto ONE_WEEK() {
		static_assert(field_signatures[jField<F>("ONE_WEEK")] != -1);
		return sat<F>("ONE_WEEK");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong, ::jlong)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong, ::jlong, ::jboolean)>("addNotification"), //
		jMethod<::java::util::Vector()>("getAllNotificationIDs"), //
		jMethod<::java::util::Date(::java::lang::Integer)>("getDate"), //
		jMethod<::java::lang::Boolean(::java::lang::Integer)>("getFixedRate"), //
		jMethod<::jint()>("getNbNotifications"), //
		jMethod<::java::lang::Long(::java::lang::Integer)>("getNbOccurences"), //
		jMethod<::java::util::Vector(::java::lang::String)>("getNotificationIDs"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotificationInfo"), //
		jMethod<::java::lang::String(::java::lang::Integer)>("getNotificationMessage"), //
		jMethod<::java::lang::String(::java::lang::Integer)>("getNotificationType"), //
		jMethod<::java::lang::Object(::java::lang::Integer)>("getNotificationUserData"), //
		jMethod<::java::lang::Long(::java::lang::Integer)>("getPeriod"), //
		jMethod<::jboolean()>("getSendPastNotifications"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid()>("removeAllNotifications"), //
		jMethod<::jvoid(::java::lang::Integer)>("removeNotification"), //
		jMethod<::jvoid(::java::lang::String)>("removeNotifications"), //
		jMethod<::jvoid(::jboolean)>("setSendPastNotifications"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::java::lang::Integer, typename... Args>
	auto addNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotification")] != -1);
		return call<R>("addNotification", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getAllNotificationIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllNotificationIDs")] != -1);
		return call<R>("getAllNotificationIDs", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Boolean, typename... Args>
	auto getFixedRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFixedRate")] != -1);
		return call<R>("getFixedRate", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNbNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNbNotifications")] != -1);
		return call<R>("getNbNotifications", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	auto getNbOccurences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNbOccurences")] != -1);
		return call<R>("getNbOccurences", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getNotificationIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationIDs")] != -1);
		return call<R>("getNotificationIDs", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationInfo")] != -1);
		return call<R>("getNotificationInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotificationMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationMessage")] != -1);
		return call<R>("getNotificationMessage", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotificationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationType")] != -1);
		return call<R>("getNotificationType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNotificationUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationUserData")] != -1);
		return call<R>("getNotificationUserData", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	auto getPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPeriod")] != -1);
		return call<R>("getPeriod", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSendPastNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSendPastNotifications")] != -1);
		return call<R>("getSendPastNotifications", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllNotifications")] != -1);
		return call<R>("removeAllNotifications", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotification")] != -1);
		return call<R>("removeNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeNotifications")] != -1);
		return call<R>("removeNotifications", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSendPastNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSendPastNotifications")] != -1);
		return call<R>("setSendPastNotifications", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("start")] != -1);
		return call<R>("start", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", forward<Args>(args)...);
	}

};

#endif
