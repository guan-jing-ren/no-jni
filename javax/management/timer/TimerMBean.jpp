#ifndef javax_management_timer_TimerMBean_HPP
#define javax_management_timer_TimerMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::timer::TimerMBean : public jObject<::javax::management::timer::TimerMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_timer / "TimerMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong, ::jlong)>("addNotification"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String, ::java::lang::Object, ::java::util::Date, ::jlong, ::jlong, ::jboolean)>("addNotification"), //
		jMethod<::java::util::Vector()>("getAllNotificationIDs"), //
		jMethod<::java::util::Date(::java::lang::Integer)>("getDate"), //
		jMethod<::java::lang::Boolean(::java::lang::Integer)>("getFixedRate"), //
		jMethod<::jint()>("getNbNotifications"), //
		jMethod<::java::lang::Long(::java::lang::Integer)>("getNbOccurences"), //
		jMethod<::java::util::Vector(::java::lang::String)>("getNotificationIDs"), //
		jMethod<::java::lang::String(::java::lang::Integer)>("getNotificationMessage"), //
		jMethod<::java::lang::String(::java::lang::Integer)>("getNotificationType"), //
		jMethod<::java::lang::Object(::java::lang::Integer)>("getNotificationUserData"), //
		jMethod<::java::lang::Long(::java::lang::Integer)>("getPeriod"), //
		jMethod<::jboolean()>("getSendPastNotifications"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jvoid()>("removeAllNotifications"), //
		jMethod<::jvoid(::java::lang::Integer)>("removeNotification"), //
		jMethod<::jvoid(::java::lang::String)>("removeNotifications"), //
		jMethod<::jvoid(::jboolean)>("setSendPastNotifications"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::java::lang::Integer, typename... Args>
	auto addNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotification")] != -1);
		return call<R>("addNotification", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getAllNotificationIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllNotificationIDs")] != -1);
		return call<R>("getAllNotificationIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Date, typename... Args>
	auto getDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDate")] != -1);
		return call<R>("getDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Boolean, typename... Args>
	auto getFixedRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFixedRate")] != -1);
		return call<R>("getFixedRate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNbNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNbNotifications")] != -1);
		return call<R>("getNbNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	auto getNbOccurences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNbOccurences")] != -1);
		return call<R>("getNbOccurences", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Vector, typename... Args>
	auto getNotificationIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationIDs")] != -1);
		return call<R>("getNotificationIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotificationMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationMessage")] != -1);
		return call<R>("getNotificationMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotificationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationType")] != -1);
		return call<R>("getNotificationType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getNotificationUserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationUserData")] != -1);
		return call<R>("getNotificationUserData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Long, typename... Args>
	auto getPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPeriod")] != -1);
		return call<R>("getPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSendPastNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSendPastNotifications")] != -1);
		return call<R>("getSendPastNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllNotifications")] != -1);
		return call<R>("removeAllNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotification")] != -1);
		return call<R>("removeNotification", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotifications")] != -1);
		return call<R>("removeNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSendPastNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSendPastNotifications")] != -1);
		return call<R>("setSendPastNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
