#ifndef javax_management_monitor_StringMonitor_HPP
#define javax_management_monitor_StringMonitor_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::monitor::StringMonitor : public jObject<::javax::management::monitor::StringMonitor, ::javax::management::monitor::Monitor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_monitor / "StringMonitor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getDerivedGauge"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName)>("getDerivedGauge"), //
		jMethod<::java::lang::String(::javax::management::ObjectName)>("getDerivedGauge"), //
		jMethod<::jlong()>("getDerivedGaugeTimeStamp"), //
		jMethod<::jlong(::javax::management::ObjectName)>("getDerivedGaugeTimeStamp"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotificationInfo"), //
		jMethod<::jboolean()>("getNotifyDiffer"), //
		jMethod<::jboolean()>("getNotifyMatch"), //
		jMethod<::java::lang::String()>("getStringToCompare"), //
		jMethod<::jvoid(::jboolean)>("setNotifyDiffer"), //
		jMethod<::jvoid(::jboolean)>("setNotifyMatch"), //
		jMethod<::jvoid(::java::lang::String)>("setStringToCompare"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDerivedGauge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGauge")] != -1);
		return call<R>("getDerivedGauge", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDerivedGaugeTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGaugeTimeStamp")] != -1);
		return call<R>("getDerivedGaugeTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationInfo")] != -1);
		return call<R>("getNotificationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNotifyDiffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifyDiffer")] != -1);
		return call<R>("getNotifyDiffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNotifyMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifyMatch")] != -1);
		return call<R>("getNotifyMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringToCompare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringToCompare")] != -1);
		return call<R>("getStringToCompare", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNotifyDiffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNotifyDiffer")] != -1);
		return call<R>("setNotifyDiffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNotifyMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNotifyMatch")] != -1);
		return call<R>("setNotifyMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStringToCompare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStringToCompare")] != -1);
		return call<R>("setStringToCompare", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
