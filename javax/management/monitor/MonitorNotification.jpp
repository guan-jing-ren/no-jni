#ifndef javax_management_monitor_MonitorNotification_HPP
#define javax_management_monitor_MonitorNotification_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::monitor::MonitorNotification : public jObject<::javax::management::monitor::MonitorNotification, ::javax::management::Notification> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_monitor / "MonitorNotification";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("OBSERVED_ATTRIBUTE_ERROR"), //
		jField<::java::lang::String>("OBSERVED_ATTRIBUTE_TYPE_ERROR"), //
		jField<::java::lang::String>("OBSERVED_OBJECT_ERROR"), //
		jField<::java::lang::String>("RUNTIME_ERROR"), //
		jField<::java::lang::String>("STRING_TO_COMPARE_VALUE_DIFFERED"), //
		jField<::java::lang::String>("STRING_TO_COMPARE_VALUE_MATCHED"), //
		jField<::java::lang::String>("THRESHOLD_ERROR"), //
		jField<::java::lang::String>("THRESHOLD_HIGH_VALUE_EXCEEDED"), //
		jField<::java::lang::String>("THRESHOLD_LOW_VALUE_EXCEEDED"), //
		jField<::java::lang::String>("THRESHOLD_VALUE_EXCEEDED"), //
	};

	template<typename F = ::java::lang::String>
	static auto OBSERVED_ATTRIBUTE_ERROR() {
		static_assert(field_signatures[jField<F>("OBSERVED_ATTRIBUTE_ERROR")] != -1);
		return sat<F>("OBSERVED_ATTRIBUTE_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto OBSERVED_ATTRIBUTE_TYPE_ERROR() {
		static_assert(field_signatures[jField<F>("OBSERVED_ATTRIBUTE_TYPE_ERROR")] != -1);
		return sat<F>("OBSERVED_ATTRIBUTE_TYPE_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto OBSERVED_OBJECT_ERROR() {
		static_assert(field_signatures[jField<F>("OBSERVED_OBJECT_ERROR")] != -1);
		return sat<F>("OBSERVED_OBJECT_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto RUNTIME_ERROR() {
		static_assert(field_signatures[jField<F>("RUNTIME_ERROR")] != -1);
		return sat<F>("RUNTIME_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto STRING_TO_COMPARE_VALUE_DIFFERED() {
		static_assert(field_signatures[jField<F>("STRING_TO_COMPARE_VALUE_DIFFERED")] != -1);
		return sat<F>("STRING_TO_COMPARE_VALUE_DIFFERED");
	}

	template<typename F = ::java::lang::String>
	static auto STRING_TO_COMPARE_VALUE_MATCHED() {
		static_assert(field_signatures[jField<F>("STRING_TO_COMPARE_VALUE_MATCHED")] != -1);
		return sat<F>("STRING_TO_COMPARE_VALUE_MATCHED");
	}

	template<typename F = ::java::lang::String>
	static auto THRESHOLD_ERROR() {
		static_assert(field_signatures[jField<F>("THRESHOLD_ERROR")] != -1);
		return sat<F>("THRESHOLD_ERROR");
	}

	template<typename F = ::java::lang::String>
	static auto THRESHOLD_HIGH_VALUE_EXCEEDED() {
		static_assert(field_signatures[jField<F>("THRESHOLD_HIGH_VALUE_EXCEEDED")] != -1);
		return sat<F>("THRESHOLD_HIGH_VALUE_EXCEEDED");
	}

	template<typename F = ::java::lang::String>
	static auto THRESHOLD_LOW_VALUE_EXCEEDED() {
		static_assert(field_signatures[jField<F>("THRESHOLD_LOW_VALUE_EXCEEDED")] != -1);
		return sat<F>("THRESHOLD_LOW_VALUE_EXCEEDED");
	}

	template<typename F = ::java::lang::String>
	static auto THRESHOLD_VALUE_EXCEEDED() {
		static_assert(field_signatures[jField<F>("THRESHOLD_VALUE_EXCEEDED")] != -1);
		return sat<F>("THRESHOLD_VALUE_EXCEEDED");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object()>("getDerivedGauge"), //
		jMethod<::java::lang::String()>("getObservedAttribute"), //
		jMethod<::javax::management::ObjectName()>("getObservedObject"), //
		jMethod<::java::lang::Object()>("getTrigger"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDerivedGauge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDerivedGauge")] != -1);
		return call<R>("getDerivedGauge", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObservedAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObservedAttribute")] != -1);
		return call<R>("getObservedAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getObservedObject")] != -1);
		return call<R>("getObservedObject", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTrigger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTrigger")] != -1);
		return call<R>("getTrigger", forward<Args>(args)...);
	}

};

#endif
