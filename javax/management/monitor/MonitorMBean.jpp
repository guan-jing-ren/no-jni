#ifndef javax_management_monitor_MonitorMBean_HPP
#define javax_management_monitor_MonitorMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::monitor::MonitorMBean : public jObject<::javax::management::monitor::MonitorMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_monitor / "MonitorMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::management::ObjectName)>("addObservedObject"), //
		jMethod<::jboolean(::javax::management::ObjectName)>("containsObservedObject"), //
		jMethod<::jlong()>("getGranularityPeriod"), //
		jMethod<::java::lang::String()>("getObservedAttribute"), //
		jMethod<::javax::management::ObjectName *()>("getObservedObjects"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jvoid(::javax::management::ObjectName)>("removeObservedObject"), //
		jMethod<::jvoid(::jlong)>("setGranularityPeriod"), //
		jMethod<::jvoid(::java::lang::String)>("setObservedAttribute"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addObservedObject")] != -1);
		return call<R>("addObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsObservedObject")] != -1);
		return call<R>("containsObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getGranularityPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGranularityPeriod")] != -1);
		return call<R>("getGranularityPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObservedAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObservedAttribute")] != -1);
		return call<R>("getObservedAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName *, typename... Args>
	auto getObservedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObservedObjects")] != -1);
		return call<R>("getObservedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeObservedObject")] != -1);
		return call<R>("removeObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGranularityPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGranularityPeriod")] != -1);
		return call<R>("setGranularityPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObservedAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObservedAttribute")] != -1);
		return call<R>("setObservedAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
