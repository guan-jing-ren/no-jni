#ifndef javax_management_monitor_GaugeMonitorMBean_HPP
#define javax_management_monitor_GaugeMonitorMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::monitor::GaugeMonitorMBean : public jObject<::javax::management::monitor::GaugeMonitorMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_monitor / "GaugeMonitorMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::management::ObjectName)>("addObservedObject"), //
		jMethod<::jboolean(::javax::management::ObjectName)>("containsObservedObject"), //
		jMethod<::java::lang::Number(::javax::management::ObjectName)>("getDerivedGauge"), //
		jMethod<::jlong(::javax::management::ObjectName)>("getDerivedGaugeTimeStamp"), //
		jMethod<::jboolean()>("getDifferenceMode"), //
		jMethod<::jlong()>("getGranularityPeriod"), //
		jMethod<::java::lang::Number()>("getHighThreshold"), //
		jMethod<::java::lang::Number()>("getLowThreshold"), //
		jMethod<::jboolean()>("getNotifyHigh"), //
		jMethod<::jboolean()>("getNotifyLow"), //
		jMethod<::java::lang::String()>("getObservedAttribute"), //
		jMethod<::javax::management::ObjectName *()>("getObservedObjects"), //
		jMethod<::jboolean()>("isActive"), //
		jMethod<::jvoid(::javax::management::ObjectName)>("removeObservedObject"), //
		jMethod<::jvoid(::jboolean)>("setDifferenceMode"), //
		jMethod<::jvoid(::jlong)>("setGranularityPeriod"), //
		jMethod<::jvoid(::jboolean)>("setNotifyHigh"), //
		jMethod<::jvoid(::jboolean)>("setNotifyLow"), //
		jMethod<::jvoid(::java::lang::String)>("setObservedAttribute"), //
		jMethod<::jvoid(::java::lang::Number, ::java::lang::Number)>("setThresholds"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addObservedObject")] != -1);
		return call<R>("addObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsObservedObject")] != -1);
		return call<R>("containsObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getDerivedGauge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGauge")] != -1);
		return call<R>("getDerivedGauge", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDerivedGaugeTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGaugeTimeStamp")] != -1);
		return call<R>("getDerivedGaugeTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDifferenceMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDifferenceMode")] != -1);
		return call<R>("getDifferenceMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getGranularityPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGranularityPeriod")] != -1);
		return call<R>("getGranularityPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getHighThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighThreshold")] != -1);
		return call<R>("getHighThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getLowThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowThreshold")] != -1);
		return call<R>("getLowThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNotifyHigh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifyHigh")] != -1);
		return call<R>("getNotifyHigh", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNotifyLow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifyLow")] != -1);
		return call<R>("getNotifyLow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObservedAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObservedAttribute")] != -1);
		return call<R>("getObservedAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName *, typename... Args>
	auto getObservedObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObservedObjects")] != -1);
		return call<R>("getObservedObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeObservedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeObservedObject")] != -1);
		return call<R>("removeObservedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDifferenceMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDifferenceMode")] != -1);
		return call<R>("setDifferenceMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGranularityPeriod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGranularityPeriod")] != -1);
		return call<R>("setGranularityPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNotifyHigh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNotifyHigh")] != -1);
		return call<R>("setNotifyHigh", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNotifyLow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNotifyLow")] != -1);
		return call<R>("setNotifyLow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObservedAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObservedAttribute")] != -1);
		return call<R>("setObservedAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThresholds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThresholds")] != -1);
		return call<R>("setThresholds", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
