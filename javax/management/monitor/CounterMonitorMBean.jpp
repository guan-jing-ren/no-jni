#ifndef javax_management_monitor_CounterMonitorMBean_HPP
#define javax_management_monitor_CounterMonitorMBean_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::monitor::CounterMonitorMBean : public jObject<::javax::management::monitor::CounterMonitorMBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_monitor / "CounterMonitorMBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Number()>("getDerivedGauge"), //
		jMethod<::java::lang::Number(::javax::management::ObjectName)>("getDerivedGauge"), //
		jMethod<::jlong()>("getDerivedGaugeTimeStamp"), //
		jMethod<::jlong(::javax::management::ObjectName)>("getDerivedGaugeTimeStamp"), //
		jMethod<::jboolean()>("getDifferenceMode"), //
		jMethod<::java::lang::Number()>("getInitThreshold"), //
		jMethod<::java::lang::Number()>("getModulus"), //
		jMethod<::jboolean()>("getNotify"), //
		jMethod<::java::lang::Number()>("getOffset"), //
		jMethod<::java::lang::Number()>("getThreshold"), //
		jMethod<::java::lang::Number(::javax::management::ObjectName)>("getThreshold"), //
		jMethod<::jvoid(::jboolean)>("setDifferenceMode"), //
		jMethod<::jvoid(::java::lang::Number)>("setInitThreshold"), //
		jMethod<::jvoid(::java::lang::Number)>("setModulus"), //
		jMethod<::jvoid(::jboolean)>("setNotify"), //
		jMethod<::jvoid(::java::lang::Number)>("setOffset"), //
		jMethod<::jvoid(::java::lang::Number)>("setThreshold"), //
	};

	template<typename R = ::java::lang::Number, typename... Args>
	auto getDerivedGauge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGauge")] != -1);
		return call<R>("getDerivedGauge", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDerivedGaugeTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDerivedGaugeTimeStamp")] != -1);
		return call<R>("getDerivedGaugeTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getDifferenceMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDifferenceMode")] != -1);
		return call<R>("getDifferenceMode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getInitThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitThreshold")] != -1);
		return call<R>("getInitThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getModulus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModulus")] != -1);
		return call<R>("getModulus", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotify")] != -1);
		return call<R>("getNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreshold")] != -1);
		return call<R>("getThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDifferenceMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDifferenceMode")] != -1);
		return call<R>("setDifferenceMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInitThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInitThreshold")] != -1);
		return call<R>("setInitThreshold", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModulus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModulus")] != -1);
		return call<R>("setModulus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNotify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNotify")] != -1);
		return call<R>("setNotify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOffset")] != -1);
		return call<R>("setOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreshold(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreshold")] != -1);
		return call<R>("setThreshold", std::forward<Args>(args)...);
	}

};

#endif
