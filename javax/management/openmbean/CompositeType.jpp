#ifndef javax_management_openmbean_CompositeType_HPP
#define javax_management_openmbean_CompositeType_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::CompositeType : public jObject<::javax::management::openmbean::CompositeType, ::javax::management::openmbean::OpenType> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "CompositeType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String *, ::java::lang::String *, ::javax::management::openmbean::OpenType *)>(), //
		jMethod<::jboolean(::java::lang::String)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::java::lang::String)>("getDescription"), //
		jMethod<::javax::management::openmbean::OpenType(::java::lang::String)>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Object)>("isValue"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::OpenType, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValue")] != -1);
		return call<R>("isValue", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
