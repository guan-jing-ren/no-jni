#ifndef javax_management_openmbean_SimpleType_HPP
#define javax_management_openmbean_SimpleType_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::SimpleType : public jObject<::javax::management::openmbean::SimpleType, ::javax::management::openmbean::OpenType> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "SimpleType";

	constexpr static Enume field_signatures{
		jField<::javax::management::openmbean::SimpleType>("BIGDECIMAL"), //
		jField<::javax::management::openmbean::SimpleType>("BIGINTEGER"), //
		jField<::javax::management::openmbean::SimpleType>("BOOLEAN"), //
		jField<::javax::management::openmbean::SimpleType>("BYTE"), //
		jField<::javax::management::openmbean::SimpleType>("CHARACTER"), //
		jField<::javax::management::openmbean::SimpleType>("DATE"), //
		jField<::javax::management::openmbean::SimpleType>("DOUBLE"), //
		jField<::javax::management::openmbean::SimpleType>("FLOAT"), //
		jField<::javax::management::openmbean::SimpleType>("INTEGER"), //
		jField<::javax::management::openmbean::SimpleType>("LONG"), //
		jField<::javax::management::openmbean::SimpleType>("OBJECTNAME"), //
		jField<::javax::management::openmbean::SimpleType>("SHORT"), //
		jField<::javax::management::openmbean::SimpleType>("STRING"), //
		jField<::javax::management::openmbean::SimpleType>("VOID"), //
	};

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto BIGDECIMAL() {
		static_assert(field_signatures[jField<F>("BIGDECIMAL")] != -1);
		return sat<F>("BIGDECIMAL");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto BIGINTEGER() {
		static_assert(field_signatures[jField<F>("BIGINTEGER")] != -1);
		return sat<F>("BIGINTEGER");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto BOOLEAN() {
		static_assert(field_signatures[jField<F>("BOOLEAN")] != -1);
		return sat<F>("BOOLEAN");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto BYTE() {
		static_assert(field_signatures[jField<F>("BYTE")] != -1);
		return sat<F>("BYTE");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto CHARACTER() {
		static_assert(field_signatures[jField<F>("CHARACTER")] != -1);
		return sat<F>("CHARACTER");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto DATE() {
		static_assert(field_signatures[jField<F>("DATE")] != -1);
		return sat<F>("DATE");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto DOUBLE() {
		static_assert(field_signatures[jField<F>("DOUBLE")] != -1);
		return sat<F>("DOUBLE");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto FLOAT() {
		static_assert(field_signatures[jField<F>("FLOAT")] != -1);
		return sat<F>("FLOAT");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto INTEGER() {
		static_assert(field_signatures[jField<F>("INTEGER")] != -1);
		return sat<F>("INTEGER");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto LONG() {
		static_assert(field_signatures[jField<F>("LONG")] != -1);
		return sat<F>("LONG");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto OBJECTNAME() {
		static_assert(field_signatures[jField<F>("OBJECTNAME")] != -1);
		return sat<F>("OBJECTNAME");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto SHORT() {
		static_assert(field_signatures[jField<F>("SHORT")] != -1);
		return sat<F>("SHORT");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto STRING() {
		static_assert(field_signatures[jField<F>("STRING")] != -1);
		return sat<F>("STRING");
	}

	template<typename F = ::javax::management::openmbean::SimpleType>
	static auto VOID() {
		static_assert(field_signatures[jField<F>("VOID")] != -1);
		return sat<F>("VOID");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Object)>("isValue"), //
		jMethod<::java::lang::Object()>("readResolve"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValue")] != -1);
		return call<R>("isValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readResolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readResolve")] != -1);
		return call<R>("readResolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
