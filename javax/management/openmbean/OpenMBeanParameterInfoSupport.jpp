#ifndef javax_management_openmbean_OpenMBeanParameterInfoSupport_HPP
#define javax_management_openmbean_OpenMBeanParameterInfoSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::OpenMBeanParameterInfoSupport : public jObject<::javax::management::openmbean::OpenMBeanParameterInfoSupport, ::javax::management::MBeanParameterInfo> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "OpenMBeanParameterInfoSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenType)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenType, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenType, ::java::lang::Object, ::java::lang::Comparable, ::java::lang::Comparable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenType, ::java::lang::Object, ::java::lang::Object *)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenType, ::javax::management::Descriptor)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object()>("getDefaultValue"), //
		jMethod<::java::util::Set()>("getLegalValues"), //
		jMethod<::java::lang::Comparable()>("getMaxValue"), //
		jMethod<::java::lang::Comparable()>("getMinValue"), //
		jMethod<::javax::management::openmbean::OpenType()>("getOpenType"), //
		jMethod<::jboolean()>("hasDefaultValue"), //
		jMethod<::jboolean()>("hasLegalValues"), //
		jMethod<::jboolean()>("hasMaxValue"), //
		jMethod<::jboolean()>("hasMinValue"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Object)>("isValue"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getLegalValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLegalValues")] != -1);
		return call<R>("getLegalValues", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxValue")] != -1);
		return call<R>("getMaxValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Comparable, typename... Args>
	auto getMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinValue")] != -1);
		return call<R>("getMinValue", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::OpenType, typename... Args>
	auto getOpenType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOpenType")] != -1);
		return call<R>("getOpenType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasDefaultValue")] != -1);
		return call<R>("hasDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasLegalValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasLegalValues")] != -1);
		return call<R>("hasLegalValues", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasMaxValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasMaxValue")] != -1);
		return call<R>("hasMaxValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasMinValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasMinValue")] != -1);
		return call<R>("hasMinValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValue")] != -1);
		return call<R>("isValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
