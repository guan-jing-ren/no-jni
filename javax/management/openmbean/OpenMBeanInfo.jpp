#ifndef javax_management_openmbean_OpenMBeanInfo_HPP
#define javax_management_openmbean_OpenMBeanInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::OpenMBeanInfo : public jObject<::javax::management::openmbean::OpenMBeanInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "OpenMBeanInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::javax::management::MBeanAttributeInfo *()>("getAttributes"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::javax::management::MBeanConstructorInfo *()>("getConstructors"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotifications"), //
		jMethod<::javax::management::MBeanOperationInfo *()>("getOperations"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanAttributeInfo *, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanConstructorInfo *, typename... Args>
	auto getConstructors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstructors")] != -1);
		return call<R>("getConstructors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotifications(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifications")] != -1);
		return call<R>("getNotifications", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanOperationInfo *, typename... Args>
	auto getOperations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperations")] != -1);
		return call<R>("getOperations", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
