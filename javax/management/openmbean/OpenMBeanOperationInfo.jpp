#ifndef javax_management_openmbean_OpenMBeanOperationInfo_HPP
#define javax_management_openmbean_OpenMBeanOperationInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::OpenMBeanOperationInfo : public jObject<::javax::management::openmbean::OpenMBeanOperationInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "OpenMBeanOperationInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jint()>("getImpact"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::management::openmbean::OpenType()>("getReturnOpenType"), //
		jMethod<::java::lang::String()>("getReturnType"), //
		jMethod<::javax::management::MBeanParameterInfo *()>("getSignature"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getImpact(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getImpact")] != -1);
		return call<R>("getImpact", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::OpenType, typename... Args>
	auto getReturnOpenType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReturnOpenType")] != -1);
		return call<R>("getReturnOpenType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getReturnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReturnType")] != -1);
		return call<R>("getReturnType", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanParameterInfo *, typename... Args>
	auto getSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSignature")] != -1);
		return call<R>("getSignature", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
