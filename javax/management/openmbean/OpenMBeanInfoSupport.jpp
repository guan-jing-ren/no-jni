#ifndef javax_management_openmbean_OpenMBeanInfoSupport_HPP
#define javax_management_openmbean_OpenMBeanInfoSupport_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::openmbean::OpenMBeanInfoSupport : public jObject<::javax::management::openmbean::OpenMBeanInfoSupport, ::javax::management::MBeanInfo> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_openmbean / "OpenMBeanInfoSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenMBeanAttributeInfo *, ::javax::management::openmbean::OpenMBeanConstructorInfo *, ::javax::management::openmbean::OpenMBeanOperationInfo *, ::javax::management::MBeanNotificationInfo *)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::openmbean::OpenMBeanAttributeInfo *, ::javax::management::openmbean::OpenMBeanConstructorInfo *, ::javax::management::openmbean::OpenMBeanOperationInfo *, ::javax::management::MBeanNotificationInfo *, ::javax::management::Descriptor)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
