#ifndef javax_management_StringValueExp_HPP
#define javax_management_StringValueExp_HPP

#include "../../jfwd_decl.hpp"

class ::javax::management::StringValueExp : public jObject<::javax::management::StringValueExp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management / "StringValueExp";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::javax::management::ValueExp(::javax::management::ObjectName)>("apply"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jvoid(::javax::management::MBeanServer)>("setMBeanServer"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::management::ValueExp, typename... Args>
	auto apply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("apply")] != -1);
		return call<R>("apply", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMBeanServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMBeanServer")] != -1);
		return call<R>("setMBeanServer", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
