#ifndef javax_management_relation_RoleInfo_HPP
#define javax_management_relation_RoleInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::relation::RoleInfo : public jObject<::javax::management::relation::RoleInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_relation / "RoleInfo";

	constexpr static Enume field_signatures{
		jField<::jint>("ROLE_CARDINALITY_INFINITY"), //
	};

	template<typename F = ::jint>
	static auto ROLE_CARDINALITY_INFINITY() {
		static_assert(field_signatures[jField<F>("ROLE_CARDINALITY_INFINITY")] != -1);
		return sat<F>("ROLE_CARDINALITY_INFINITY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean, ::jboolean, ::jint, ::jint, ::java::lang::String)>(), //
		jConstructor<::jvoid(::javax::management::relation::RoleInfo)>(), //
		jMethod<::jboolean(::jint)>("checkMaxDegree"), //
		jMethod<::jboolean(::jint)>("checkMinDegree"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jint()>("getMaxDegree"), //
		jMethod<::jint()>("getMinDegree"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getRefMBeanClassName"), //
		jMethod<::jboolean()>("isReadable"), //
		jMethod<::jboolean()>("isWritable"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto checkMaxDegree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkMaxDegree")] != -1);
		return call<R>("checkMaxDegree", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkMinDegree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkMinDegree")] != -1);
		return call<R>("checkMinDegree", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxDegree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMaxDegree")] != -1);
		return call<R>("getMaxDegree", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinDegree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinDegree")] != -1);
		return call<R>("getMinDegree", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRefMBeanClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRefMBeanClassName")] != -1);
		return call<R>("getRefMBeanClassName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReadable")] != -1);
		return call<R>("isReadable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWritable")] != -1);
		return call<R>("isWritable", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
