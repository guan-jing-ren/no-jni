#ifndef javax_management_relation_RelationService_HPP
#define javax_management_relation_RelationService_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::relation::RelationService : public jObject<::javax::management::relation::RelationService, ::javax::management::NotificationBroadcasterSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_relation / "RelationService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jvoid(::javax::management::ObjectName)>("addRelation"), //
		jMethod<::jvoid(::javax::management::relation::RelationType)>("addRelationType"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String)>("checkRoleReading"), //
		jMethod<::java::lang::Integer(::javax::management::relation::Role, ::java::lang::String, ::java::lang::Boolean)>("checkRoleWriting"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::javax::management::relation::RoleList)>("createRelation"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::relation::RoleInfo *)>("createRelationType"), //
		jMethod<::java::util::Map(::javax::management::ObjectName, ::java::lang::String, ::java::lang::String)>("findAssociatedMBeans"), //
		jMethod<::java::util::Map(::javax::management::ObjectName, ::java::lang::String, ::java::lang::String)>("findReferencingRelations"), //
		jMethod<::java::util::List(::java::lang::String)>("findRelationsOfType"), //
		jMethod<::java::util::List()>("getAllRelationIds"), //
		jMethod<::java::util::List()>("getAllRelationTypeNames"), //
		jMethod<::javax::management::relation::RoleResult(::java::lang::String)>("getAllRoles"), //
		jMethod<::javax::management::MBeanNotificationInfo *()>("getNotificationInfo"), //
		jMethod<::jboolean()>("getPurgeFlag"), //
		jMethod<::java::util::Map(::java::lang::String)>("getReferencedMBeans"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRelationTypeName"), //
		jMethod<::java::util::List(::java::lang::String, ::java::lang::String)>("getRole"), //
		jMethod<::java::lang::Integer(::java::lang::String, ::java::lang::String)>("getRoleCardinality"), //
		jMethod<::javax::management::relation::RoleInfo(::java::lang::String, ::java::lang::String)>("getRoleInfo"), //
		jMethod<::java::util::List(::java::lang::String)>("getRoleInfos"), //
		jMethod<::javax::management::relation::RoleResult(::java::lang::String, ::java::lang::String *)>("getRoles"), //
		jMethod<::jvoid(::javax::management::Notification, ::java::lang::Object)>("handleNotification"), //
		jMethod<::java::lang::Boolean(::java::lang::String)>("hasRelation"), //
		jMethod<::jvoid()>("isActive"), //
		jMethod<::java::lang::String(::javax::management::ObjectName)>("isRelation"), //
		jMethod<::javax::management::ObjectName(::java::lang::String)>("isRelationMBean"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid()>("purgeRelations"), //
		jMethod<::jvoid(::java::lang::String)>("removeRelation"), //
		jMethod<::jvoid(::java::lang::String)>("removeRelationType"), //
		jMethod<::jvoid(::java::lang::String)>("sendRelationCreationNotification"), //
		jMethod<::jvoid(::java::lang::String, ::java::util::List)>("sendRelationRemovalNotification"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::relation::Role, ::java::util::List)>("sendRoleUpdateNotification"), //
		jMethod<::jvoid(::jboolean)>("setPurgeFlag"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::relation::Role)>("setRole"), //
		jMethod<::javax::management::relation::RoleResult(::java::lang::String, ::javax::management::relation::RoleList)>("setRoles"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::relation::Role, ::java::util::List)>("updateRoleMap"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRelation")] != -1);
		return call<R>("addRelation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addRelationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addRelationType")] != -1);
		return call<R>("addRelationType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto checkRoleReading(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkRoleReading")] != -1);
		return call<R>("checkRoleReading", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto checkRoleWriting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("checkRoleWriting")] != -1);
		return call<R>("checkRoleWriting", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createRelation")] != -1);
		return call<R>("createRelation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto createRelationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createRelationType")] != -1);
		return call<R>("createRelationType", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto findAssociatedMBeans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findAssociatedMBeans")] != -1);
		return call<R>("findAssociatedMBeans", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto findReferencingRelations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findReferencingRelations")] != -1);
		return call<R>("findReferencingRelations", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto findRelationsOfType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("findRelationsOfType")] != -1);
		return call<R>("findRelationsOfType", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAllRelationIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllRelationIds")] != -1);
		return call<R>("getAllRelationIds", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAllRelationTypeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllRelationTypeNames")] != -1);
		return call<R>("getAllRelationTypeNames", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleResult, typename... Args>
	auto getAllRoles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllRoles")] != -1);
		return call<R>("getAllRoles", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanNotificationInfo *, typename... Args>
	auto getNotificationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNotificationInfo")] != -1);
		return call<R>("getNotificationInfo", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPurgeFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPurgeFlag")] != -1);
		return call<R>("getPurgeFlag", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getReferencedMBeans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReferencedMBeans")] != -1);
		return call<R>("getReferencedMBeans", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRelationTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRelationTypeName")] != -1);
		return call<R>("getRelationTypeName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRole")] != -1);
		return call<R>("getRole", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getRoleCardinality(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleCardinality")] != -1);
		return call<R>("getRoleCardinality", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleInfo, typename... Args>
	auto getRoleInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleInfo")] != -1);
		return call<R>("getRoleInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRoleInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleInfos")] != -1);
		return call<R>("getRoleInfos", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleResult, typename... Args>
	auto getRoles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoles")] != -1);
		return call<R>("getRoles", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("handleNotification")] != -1);
		return call<R>("handleNotification", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Boolean, typename... Args>
	auto hasRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasRelation")] != -1);
		return call<R>("hasRelation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto isActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isActive")] != -1);
		return call<R>("isActive", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto isRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRelation")] != -1);
		return call<R>("isRelation", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto isRelationMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isRelationMBean")] != -1);
		return call<R>("isRelationMBean", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto purgeRelations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("purgeRelations")] != -1);
		return call<R>("purgeRelations", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRelation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeRelation")] != -1);
		return call<R>("removeRelation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRelationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeRelationType")] != -1);
		return call<R>("removeRelationType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendRelationCreationNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendRelationCreationNotification")] != -1);
		return call<R>("sendRelationCreationNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendRelationRemovalNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendRelationRemovalNotification")] != -1);
		return call<R>("sendRelationRemovalNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendRoleUpdateNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("sendRoleUpdateNotification")] != -1);
		return call<R>("sendRoleUpdateNotification", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPurgeFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPurgeFlag")] != -1);
		return call<R>("setPurgeFlag", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRole")] != -1);
		return call<R>("setRole", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleResult, typename... Args>
	auto setRoles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoles")] != -1);
		return call<R>("setRoles", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateRoleMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateRoleMap")] != -1);
		return call<R>("updateRoleMap", forward<Args>(args)...);
	}

};

#endif
