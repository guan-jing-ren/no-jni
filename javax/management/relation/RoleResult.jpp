#ifndef javax_management_relation_RoleResult_HPP
#define javax_management_relation_RoleResult_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::relation::RoleResult : public jObject<::javax::management::relation::RoleResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_relation / "RoleResult";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::management::relation::RoleList, ::javax::management::relation::RoleUnresolvedList)>(), //
		jMethod<::javax::management::relation::RoleList()>("getRoles"), //
		jMethod<::javax::management::relation::RoleUnresolvedList()>("getRolesUnresolved"), //
		jMethod<::jvoid(::javax::management::relation::RoleList)>("setRoles"), //
		jMethod<::jvoid(::javax::management::relation::RoleUnresolvedList)>("setRolesUnresolved"), //
	};

	template<typename R = ::javax::management::relation::RoleList, typename... Args>
	auto getRoles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoles")] != -1);
		return call<R>("getRoles", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleUnresolvedList, typename... Args>
	auto getRolesUnresolved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRolesUnresolved")] != -1);
		return call<R>("getRolesUnresolved", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoles(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoles")] != -1);
		return call<R>("setRoles", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRolesUnresolved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRolesUnresolved")] != -1);
		return call<R>("setRolesUnresolved", forward<Args>(args)...);
	}

};

#endif
