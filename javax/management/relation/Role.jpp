#ifndef javax_management_relation_Role_HPP
#define javax_management_relation_Role_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::relation::Role : public jObject<::javax::management::relation::Role, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_relation / "Role";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::util::List)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::java::lang::String()>("getRoleName"), //
		jMethod<::java::util::List()>("getRoleValue"), //
		jMethod<::java::lang::String(::java::util::List)>("roleValueToString"), //
		jMethod<::jvoid(::java::lang::String)>("setRoleName"), //
		jMethod<::jvoid(::java::util::List)>("setRoleValue"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRoleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleName")] != -1);
		return call<R>("getRoleName", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRoleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleValue")] != -1);
		return call<R>("getRoleValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto roleValueToString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("roleValueToString")] != -1);
		return scall<R>("roleValueToString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoleName")] != -1);
		return call<R>("setRoleName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRoleValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRoleValue")] != -1);
		return call<R>("setRoleValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
