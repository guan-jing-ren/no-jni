#ifndef javax_management_relation_RelationType_HPP
#define javax_management_relation_RelationType_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::management::relation::RelationType : public jObject<::javax::management::relation::RelationType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_management_relation / "RelationType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getRelationTypeName"), //
		jMethod<::javax::management::relation::RoleInfo(::java::lang::String)>("getRoleInfo"), //
		jMethod<::java::util::List()>("getRoleInfos"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getRelationTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRelationTypeName")] != -1);
		return call<R>("getRelationTypeName", forward<Args>(args)...);
	}

	template<typename R = ::javax::management::relation::RoleInfo, typename... Args>
	auto getRoleInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleInfo")] != -1);
		return call<R>("getRoleInfo", forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRoleInfos(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRoleInfos")] != -1);
		return call<R>("getRoleInfos", forward<Args>(args)...);
	}

};

#endif
