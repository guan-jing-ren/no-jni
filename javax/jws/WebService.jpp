#ifndef javax_jws_WebService_HPP
#define javax_jws_WebService_HPP

#include "../../jfwd_decl.hpp"

class ::javax::jws::WebService : public jObject<::javax::jws::WebService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_jws / "WebService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("annotationType"), //
		jMethod<::java::lang::String()>("endpointInterface"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::lang::String()>("portName"), //
		jMethod<::java::lang::String()>("serviceName"), //
		jMethod<::java::lang::String()>("targetNamespace"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String()>("wsdlLocation"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto annotationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("annotationType")] != -1);
		return call<R>("annotationType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto endpointInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endpointInterface")] != -1);
		return call<R>("endpointInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto portName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("portName")] != -1);
		return call<R>("portName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto serviceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serviceName")] != -1);
		return call<R>("serviceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto targetNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("targetNamespace")] != -1);
		return call<R>("targetNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto wsdlLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wsdlLocation")] != -1);
		return call<R>("wsdlLocation", std::forward<Args>(args)...);
	}

};

#endif
