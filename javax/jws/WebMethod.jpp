#ifndef javax_jws_WebMethod_HPP
#define javax_jws_WebMethod_HPP

#include "../../jfwd_decl.hpp"

class ::javax::jws::WebMethod : public jObject<::javax::jws::WebMethod, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_jws / "WebMethod";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("action"), //
		jMethod<::java::lang::Class()>("annotationType"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean()>("exclude"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("operationName"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto action(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("action")] != -1);
		return call<R>("action", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto annotationType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("annotationType")] != -1);
		return call<R>("annotationType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto exclude(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exclude")] != -1);
		return call<R>("exclude", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto operationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operationName")] != -1);
		return call<R>("operationName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
