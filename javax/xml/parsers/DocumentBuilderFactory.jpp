#ifndef javax_xml_parsers_DocumentBuilderFactory_HPP
#define javax_xml_parsers_DocumentBuilderFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::parsers::DocumentBuilderFactory : public jObject<::javax::xml::parsers::DocumentBuilderFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_parsers / "DocumentBuilderFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::jboolean(::java::lang::String)>("getFeature"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::jboolean()>("isCoalescing"), //
		jMethod<::jboolean()>("isExpandEntityReferences"), //
		jMethod<::jboolean()>("isIgnoringComments"), //
		jMethod<::jboolean()>("isIgnoringElementContentWhitespace"), //
		jMethod<::jboolean()>("isNamespaceAware"), //
		jMethod<::jboolean()>("isValidating"), //
		jMethod<::jboolean()>("isXIncludeAware"), //
		jMethod<::javax::xml::parsers::DocumentBuilder()>("newDocumentBuilder"), //
		jMethod<::javax::xml::parsers::DocumentBuilderFactory()>("newInstance"), //
		jMethod<::javax::xml::parsers::DocumentBuilderFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setAttribute"), //
		jMethod<::jvoid(::jboolean)>("setCoalescing"), //
		jMethod<::jvoid(::jboolean)>("setExpandEntityReferences"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setFeature"), //
		jMethod<::jvoid(::jboolean)>("setIgnoringComments"), //
		jMethod<::jvoid(::jboolean)>("setIgnoringElementContentWhitespace"), //
		jMethod<::jvoid(::jboolean)>("setNamespaceAware"), //
		jMethod<::jvoid(::javax::xml::validation::Schema)>("setSchema"), //
		jMethod<::jvoid(::jboolean)>("setValidating"), //
		jMethod<::jvoid(::jboolean)>("setXIncludeAware"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCoalescing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCoalescing")] != -1);
		return call<R>("isCoalescing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isExpandEntityReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isExpandEntityReferences")] != -1);
		return call<R>("isExpandEntityReferences", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIgnoringComments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIgnoringComments")] != -1);
		return call<R>("isIgnoringComments", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isIgnoringElementContentWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIgnoringElementContentWhitespace")] != -1);
		return call<R>("isIgnoringElementContentWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNamespaceAware")] != -1);
		return call<R>("isNamespaceAware", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidating")] != -1);
		return call<R>("isValidating", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isXIncludeAware")] != -1);
		return call<R>("isXIncludeAware", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::parsers::DocumentBuilder, typename... Args>
	auto newDocumentBuilder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDocumentBuilder")] != -1);
		return call<R>("newDocumentBuilder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::parsers::DocumentBuilderFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCoalescing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCoalescing")] != -1);
		return call<R>("setCoalescing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExpandEntityReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExpandEntityReferences")] != -1);
		return call<R>("setExpandEntityReferences", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFeature")] != -1);
		return call<R>("setFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIgnoringComments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIgnoringComments")] != -1);
		return call<R>("setIgnoringComments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIgnoringElementContentWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIgnoringElementContentWhitespace")] != -1);
		return call<R>("setIgnoringElementContentWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNamespaceAware")] != -1);
		return call<R>("setNamespaceAware", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSchema")] != -1);
		return call<R>("setSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValidating")] != -1);
		return call<R>("setValidating", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXIncludeAware")] != -1);
		return call<R>("setXIncludeAware", std::forward<Args>(args)...);
	}

};

#endif
