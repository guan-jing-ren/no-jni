#ifndef javax_xml_parsers_DocumentBuilder_HPP
#define javax_xml_parsers_DocumentBuilder_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::parsers::DocumentBuilder : public jObject<::javax::xml::parsers::DocumentBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_parsers / "DocumentBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::w3c::dom::DOMImplementation()>("getDOMImplementation"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::jboolean()>("isNamespaceAware"), //
		jMethod<::jboolean()>("isValidating"), //
		jMethod<::jboolean()>("isXIncludeAware"), //
		jMethod<::org::w3c::dom::Document()>("newDocument"), //
		jMethod<::org::w3c::dom::Document(::java::io::File)>("parse"), //
		jMethod<::org::w3c::dom::Document(::java::io::InputStream)>("parse"), //
		jMethod<::org::w3c::dom::Document(::java::io::InputStream, ::java::lang::String)>("parse"), //
		jMethod<::org::w3c::dom::Document(::java::lang::String)>("parse"), //
		jMethod<::org::w3c::dom::Document(::org::xml::sax::InputSource)>("parse"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::org::xml::sax::EntityResolver)>("setEntityResolver"), //
		jMethod<::jvoid(::org::xml::sax::ErrorHandler)>("setErrorHandler"), //
	};

	template<typename R = ::org::w3c::dom::DOMImplementation, typename... Args>
	auto getDOMImplementation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDOMImplementation")] != -1);
		return call<R>("getDOMImplementation", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNamespaceAware")] != -1);
		return call<R>("isNamespaceAware", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidating")] != -1);
		return call<R>("isValidating", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isXIncludeAware")] != -1);
		return call<R>("isXIncludeAware", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto newDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newDocument")] != -1);
		return call<R>("newDocument", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Document, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEntityResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEntityResolver")] != -1);
		return call<R>("setEntityResolver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setErrorHandler")] != -1);
		return call<R>("setErrorHandler", forward<Args>(args)...);
	}

};

#endif
