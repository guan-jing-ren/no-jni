#ifndef javax_xml_parsers_SAXParserFactory_HPP
#define javax_xml_parsers_SAXParserFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::parsers::SAXParserFactory : public jObject<::javax::xml::parsers::SAXParserFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_parsers / "SAXParserFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String)>("getFeature"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::jboolean()>("isNamespaceAware"), //
		jMethod<::jboolean()>("isValidating"), //
		jMethod<::jboolean()>("isXIncludeAware"), //
		jMethod<::javax::xml::parsers::SAXParserFactory()>("newInstance"), //
		jMethod<::javax::xml::parsers::SAXParserFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::javax::xml::parsers::SAXParser()>("newSAXParser"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setFeature"), //
		jMethod<::jvoid(::jboolean)>("setNamespaceAware"), //
		jMethod<::jvoid(::javax::xml::validation::Schema)>("setSchema"), //
		jMethod<::jvoid(::jboolean)>("setValidating"), //
		jMethod<::jvoid(::jboolean)>("setXIncludeAware"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNamespaceAware")] != -1);
		return call<R>("isNamespaceAware", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidating")] != -1);
		return call<R>("isValidating", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isXIncludeAware")] != -1);
		return call<R>("isXIncludeAware", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::parsers::SAXParserFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::parsers::SAXParser, typename... Args>
	auto newSAXParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newSAXParser")] != -1);
		return call<R>("newSAXParser", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFeature")] != -1);
		return call<R>("setFeature", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNamespaceAware")] != -1);
		return call<R>("setNamespaceAware", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSchema")] != -1);
		return call<R>("setSchema", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValidating")] != -1);
		return call<R>("setValidating", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setXIncludeAware")] != -1);
		return call<R>("setXIncludeAware", forward<Args>(args)...);
	}

};

#endif
