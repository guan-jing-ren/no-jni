#ifndef javax_xml_parsers_SAXParser_HPP
#define javax_xml_parsers_SAXParser_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::parsers::SAXParser : public jObject<::javax::xml::parsers::SAXParser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_parsers / "SAXParser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::xml::sax::Parser()>("getParser"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::org::xml::sax::XMLReader()>("getXMLReader"), //
		jMethod<::jboolean()>("isNamespaceAware"), //
		jMethod<::jboolean()>("isValidating"), //
		jMethod<::jboolean()>("isXIncludeAware"), //
		jMethod<::jvoid(::java::io::File, ::org::xml::sax::HandlerBase)>("parse"), //
		jMethod<::jvoid(::java::io::File, ::org::xml::sax::helpers::DefaultHandler)>("parse"), //
		jMethod<::jvoid(::java::io::InputStream, ::org::xml::sax::HandlerBase)>("parse"), //
		jMethod<::jvoid(::java::io::InputStream, ::org::xml::sax::HandlerBase, ::java::lang::String)>("parse"), //
		jMethod<::jvoid(::java::io::InputStream, ::org::xml::sax::helpers::DefaultHandler)>("parse"), //
		jMethod<::jvoid(::java::io::InputStream, ::org::xml::sax::helpers::DefaultHandler, ::java::lang::String)>("parse"), //
		jMethod<::jvoid(::java::lang::String, ::org::xml::sax::HandlerBase)>("parse"), //
		jMethod<::jvoid(::java::lang::String, ::org::xml::sax::helpers::DefaultHandler)>("parse"), //
		jMethod<::jvoid(::org::xml::sax::InputSource, ::org::xml::sax::HandlerBase)>("parse"), //
		jMethod<::jvoid(::org::xml::sax::InputSource, ::org::xml::sax::helpers::DefaultHandler)>("parse"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
	};

	template<typename R = ::org::xml::sax::Parser, typename... Args>
	auto getParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParser")] != -1);
		return call<R>("getParser", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::XMLReader, typename... Args>
	auto getXMLReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMLReader")] != -1);
		return call<R>("getXMLReader", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespaceAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNamespaceAware")] != -1);
		return call<R>("isNamespaceAware", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidating")] != -1);
		return call<R>("isValidating", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isXIncludeAware(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isXIncludeAware")] != -1);
		return call<R>("isXIncludeAware", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

};

#endif
