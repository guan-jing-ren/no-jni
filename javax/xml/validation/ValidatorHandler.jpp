#ifndef javax_xml_validation_ValidatorHandler_HPP
#define javax_xml_validation_ValidatorHandler_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::validation::ValidatorHandler : public jObject<::javax::xml::validation::ValidatorHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_validation / "ValidatorHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::xml::sax::ContentHandler()>("getContentHandler"), //
		jMethod<::org::xml::sax::ErrorHandler()>("getErrorHandler"), //
		jMethod<::jboolean(::java::lang::String)>("getFeature"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::org::w3c::dom::ls::LSResourceResolver()>("getResourceResolver"), //
		jMethod<::javax::xml::validation::TypeInfoProvider()>("getTypeInfoProvider"), //
		jMethod<::jvoid(::org::xml::sax::ContentHandler)>("setContentHandler"), //
		jMethod<::jvoid(::org::xml::sax::ErrorHandler)>("setErrorHandler"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setFeature"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::org::w3c::dom::ls::LSResourceResolver)>("setResourceResolver"), //
	};

	template<typename R = ::org::xml::sax::ContentHandler, typename... Args>
	auto getContentHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentHandler")] != -1);
		return call<R>("getContentHandler", forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::ErrorHandler, typename... Args>
	auto getErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getErrorHandler")] != -1);
		return call<R>("getErrorHandler", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::ls::LSResourceResolver, typename... Args>
	auto getResourceResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getResourceResolver")] != -1);
		return call<R>("getResourceResolver", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::TypeInfoProvider, typename... Args>
	auto getTypeInfoProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTypeInfoProvider")] != -1);
		return call<R>("getTypeInfoProvider", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentHandler")] != -1);
		return call<R>("setContentHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setErrorHandler")] != -1);
		return call<R>("setErrorHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFeature")] != -1);
		return call<R>("setFeature", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResourceResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResourceResolver")] != -1);
		return call<R>("setResourceResolver", forward<Args>(args)...);
	}

};

#endif
