#ifndef javax_xml_soap_SOAPFault_HPP
#define javax_xml_soap_SOAPFault_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPFault : public jObject<::javax::xml::soap::SOAPFault, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPFault";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::soap::Detail()>("addDetail"), //
		jMethod<::jvoid(::java::lang::String, ::java::util::Locale)>("addFaultReasonText"), //
		jMethod<::jvoid(::javax::xml::namespace_::QName)>("appendFaultSubcode"), //
		jMethod<::javax::xml::soap::Detail()>("getDetail"), //
		jMethod<::java::lang::String()>("getFaultActor"), //
		jMethod<::java::lang::String()>("getFaultCode"), //
		jMethod<::javax::xml::soap::Name()>("getFaultCodeAsName"), //
		jMethod<::javax::xml::namespace_::QName()>("getFaultCodeAsQName"), //
		jMethod<::java::lang::String()>("getFaultNode"), //
		jMethod<::java::util::Iterator()>("getFaultReasonLocales"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getFaultReasonText"), //
		jMethod<::java::util::Iterator()>("getFaultReasonTexts"), //
		jMethod<::java::lang::String()>("getFaultRole"), //
		jMethod<::java::lang::String()>("getFaultString"), //
		jMethod<::java::util::Locale()>("getFaultStringLocale"), //
		jMethod<::java::util::Iterator()>("getFaultSubcodes"), //
		jMethod<::jboolean()>("hasDetail"), //
		jMethod<::jvoid()>("removeAllFaultSubcodes"), //
		jMethod<::jvoid(::java::lang::String)>("setFaultActor"), //
		jMethod<::jvoid(::java::lang::String)>("setFaultCode"), //
		jMethod<::jvoid(::javax::xml::namespace_::QName)>("setFaultCode"), //
		jMethod<::jvoid(::javax::xml::soap::Name)>("setFaultCode"), //
		jMethod<::jvoid(::java::lang::String)>("setFaultNode"), //
		jMethod<::jvoid(::java::lang::String)>("setFaultRole"), //
		jMethod<::jvoid(::java::lang::String)>("setFaultString"), //
		jMethod<::jvoid(::java::lang::String, ::java::util::Locale)>("setFaultString"), //
	};

	template<typename R = ::javax::xml::soap::Detail, typename... Args>
	auto addDetail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addDetail")] != -1);
		return call<R>("addDetail", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addFaultReasonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addFaultReasonText")] != -1);
		return call<R>("addFaultReasonText", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto appendFaultSubcode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("appendFaultSubcode")] != -1);
		return call<R>("appendFaultSubcode", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::Detail, typename... Args>
	auto getDetail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDetail")] != -1);
		return call<R>("getDetail", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultActor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultActor")] != -1);
		return call<R>("getFaultActor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultCode")] != -1);
		return call<R>("getFaultCode", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::Name, typename... Args>
	auto getFaultCodeAsName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultCodeAsName")] != -1);
		return call<R>("getFaultCodeAsName", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getFaultCodeAsQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultCodeAsQName")] != -1);
		return call<R>("getFaultCodeAsQName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultNode")] != -1);
		return call<R>("getFaultNode", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getFaultReasonLocales(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultReasonLocales")] != -1);
		return call<R>("getFaultReasonLocales", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultReasonText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultReasonText")] != -1);
		return call<R>("getFaultReasonText", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getFaultReasonTexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultReasonTexts")] != -1);
		return call<R>("getFaultReasonTexts", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultRole")] != -1);
		return call<R>("getFaultRole", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFaultString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultString")] != -1);
		return call<R>("getFaultString", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Locale, typename... Args>
	auto getFaultStringLocale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultStringLocale")] != -1);
		return call<R>("getFaultStringLocale", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getFaultSubcodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getFaultSubcodes")] != -1);
		return call<R>("getFaultSubcodes", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasDetail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hasDetail")] != -1);
		return call<R>("hasDetail", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllFaultSubcodes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllFaultSubcodes")] != -1);
		return call<R>("removeAllFaultSubcodes", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFaultActor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFaultActor")] != -1);
		return call<R>("setFaultActor", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFaultCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFaultCode")] != -1);
		return call<R>("setFaultCode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFaultNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFaultNode")] != -1);
		return call<R>("setFaultNode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFaultRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFaultRole")] != -1);
		return call<R>("setFaultRole", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFaultString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setFaultString")] != -1);
		return call<R>("setFaultString", forward<Args>(args)...);
	}

};

#endif
