#ifndef javax_xml_soap_SOAPConstants_HPP
#define javax_xml_soap_SOAPConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPConstants : public jObject<::javax::xml::soap::SOAPConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPConstants";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_SOAP_PROTOCOL"), //
		jField<::java::lang::String>("DYNAMIC_SOAP_PROTOCOL"), //
		jField<::java::lang::String>("SOAP_1_1_CONTENT_TYPE"), //
		jField<::java::lang::String>("SOAP_1_1_PROTOCOL"), //
		jField<::java::lang::String>("SOAP_1_2_CONTENT_TYPE"), //
		jField<::java::lang::String>("SOAP_1_2_PROTOCOL"), //
		jField<::javax::xml::namespace_::QName>("SOAP_DATAENCODINGUNKNOWN_FAULT"), //
		jField<::java::lang::String>("SOAP_ENV_PREFIX"), //
		jField<::javax::xml::namespace_::QName>("SOAP_MUSTUNDERSTAND_FAULT"), //
		jField<::javax::xml::namespace_::QName>("SOAP_RECEIVER_FAULT"), //
		jField<::javax::xml::namespace_::QName>("SOAP_SENDER_FAULT"), //
		jField<::javax::xml::namespace_::QName>("SOAP_VERSIONMISMATCH_FAULT"), //
		jField<::java::lang::String>("URI_NS_SOAP_1_1_ENVELOPE"), //
		jField<::java::lang::String>("URI_NS_SOAP_1_2_ENCODING"), //
		jField<::java::lang::String>("URI_NS_SOAP_1_2_ENVELOPE"), //
		jField<::java::lang::String>("URI_NS_SOAP_ENCODING"), //
		jField<::java::lang::String>("URI_NS_SOAP_ENVELOPE"), //
		jField<::java::lang::String>("URI_SOAP_1_2_ROLE_NEXT"), //
		jField<::java::lang::String>("URI_SOAP_1_2_ROLE_NONE"), //
		jField<::java::lang::String>("URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER"), //
		jField<::java::lang::String>("URI_SOAP_ACTOR_NEXT"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_SOAP_PROTOCOL() {
		static_assert(field_signatures[jField<F>("DEFAULT_SOAP_PROTOCOL")] != -1);
		return sat<F>("DEFAULT_SOAP_PROTOCOL");
	}

	template<typename F = ::java::lang::String>
	static auto DYNAMIC_SOAP_PROTOCOL() {
		static_assert(field_signatures[jField<F>("DYNAMIC_SOAP_PROTOCOL")] != -1);
		return sat<F>("DYNAMIC_SOAP_PROTOCOL");
	}

	template<typename F = ::java::lang::String>
	static auto SOAP_1_1_CONTENT_TYPE() {
		static_assert(field_signatures[jField<F>("SOAP_1_1_CONTENT_TYPE")] != -1);
		return sat<F>("SOAP_1_1_CONTENT_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto SOAP_1_1_PROTOCOL() {
		static_assert(field_signatures[jField<F>("SOAP_1_1_PROTOCOL")] != -1);
		return sat<F>("SOAP_1_1_PROTOCOL");
	}

	template<typename F = ::java::lang::String>
	static auto SOAP_1_2_CONTENT_TYPE() {
		static_assert(field_signatures[jField<F>("SOAP_1_2_CONTENT_TYPE")] != -1);
		return sat<F>("SOAP_1_2_CONTENT_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto SOAP_1_2_PROTOCOL() {
		static_assert(field_signatures[jField<F>("SOAP_1_2_PROTOCOL")] != -1);
		return sat<F>("SOAP_1_2_PROTOCOL");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto SOAP_DATAENCODINGUNKNOWN_FAULT() {
		static_assert(field_signatures[jField<F>("SOAP_DATAENCODINGUNKNOWN_FAULT")] != -1);
		return sat<F>("SOAP_DATAENCODINGUNKNOWN_FAULT");
	}

	template<typename F = ::java::lang::String>
	static auto SOAP_ENV_PREFIX() {
		static_assert(field_signatures[jField<F>("SOAP_ENV_PREFIX")] != -1);
		return sat<F>("SOAP_ENV_PREFIX");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto SOAP_MUSTUNDERSTAND_FAULT() {
		static_assert(field_signatures[jField<F>("SOAP_MUSTUNDERSTAND_FAULT")] != -1);
		return sat<F>("SOAP_MUSTUNDERSTAND_FAULT");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto SOAP_RECEIVER_FAULT() {
		static_assert(field_signatures[jField<F>("SOAP_RECEIVER_FAULT")] != -1);
		return sat<F>("SOAP_RECEIVER_FAULT");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto SOAP_SENDER_FAULT() {
		static_assert(field_signatures[jField<F>("SOAP_SENDER_FAULT")] != -1);
		return sat<F>("SOAP_SENDER_FAULT");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto SOAP_VERSIONMISMATCH_FAULT() {
		static_assert(field_signatures[jField<F>("SOAP_VERSIONMISMATCH_FAULT")] != -1);
		return sat<F>("SOAP_VERSIONMISMATCH_FAULT");
	}

	template<typename F = ::java::lang::String>
	static auto URI_NS_SOAP_1_1_ENVELOPE() {
		static_assert(field_signatures[jField<F>("URI_NS_SOAP_1_1_ENVELOPE")] != -1);
		return sat<F>("URI_NS_SOAP_1_1_ENVELOPE");
	}

	template<typename F = ::java::lang::String>
	static auto URI_NS_SOAP_1_2_ENCODING() {
		static_assert(field_signatures[jField<F>("URI_NS_SOAP_1_2_ENCODING")] != -1);
		return sat<F>("URI_NS_SOAP_1_2_ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto URI_NS_SOAP_1_2_ENVELOPE() {
		static_assert(field_signatures[jField<F>("URI_NS_SOAP_1_2_ENVELOPE")] != -1);
		return sat<F>("URI_NS_SOAP_1_2_ENVELOPE");
	}

	template<typename F = ::java::lang::String>
	static auto URI_NS_SOAP_ENCODING() {
		static_assert(field_signatures[jField<F>("URI_NS_SOAP_ENCODING")] != -1);
		return sat<F>("URI_NS_SOAP_ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto URI_NS_SOAP_ENVELOPE() {
		static_assert(field_signatures[jField<F>("URI_NS_SOAP_ENVELOPE")] != -1);
		return sat<F>("URI_NS_SOAP_ENVELOPE");
	}

	template<typename F = ::java::lang::String>
	static auto URI_SOAP_1_2_ROLE_NEXT() {
		static_assert(field_signatures[jField<F>("URI_SOAP_1_2_ROLE_NEXT")] != -1);
		return sat<F>("URI_SOAP_1_2_ROLE_NEXT");
	}

	template<typename F = ::java::lang::String>
	static auto URI_SOAP_1_2_ROLE_NONE() {
		static_assert(field_signatures[jField<F>("URI_SOAP_1_2_ROLE_NONE")] != -1);
		return sat<F>("URI_SOAP_1_2_ROLE_NONE");
	}

	template<typename F = ::java::lang::String>
	static auto URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER() {
		static_assert(field_signatures[jField<F>("URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER")] != -1);
		return sat<F>("URI_SOAP_1_2_ROLE_ULTIMATE_RECEIVER");
	}

	template<typename F = ::java::lang::String>
	static auto URI_SOAP_ACTOR_NEXT() {
		static_assert(field_signatures[jField<F>("URI_SOAP_ACTOR_NEXT")] != -1);
		return sat<F>("URI_SOAP_ACTOR_NEXT");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
