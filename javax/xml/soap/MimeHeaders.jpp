#ifndef javax_xml_soap_MimeHeaders_HPP
#define javax_xml_soap_MimeHeaders_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::MimeHeaders : public jObject<::javax::xml::soap::MimeHeaders, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "MimeHeaders";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addHeader"), //
		jMethod<::java::util::Iterator()>("getAllHeaders"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getHeader"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getMatchingHeaders"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getNonMatchingHeaders"), //
		jMethod<::jvoid()>("removeAllHeaders"), //
		jMethod<::jvoid(::java::lang::String)>("removeHeader"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setHeader"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addHeader")] != -1);
		return call<R>("addHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAllHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllHeaders")] != -1);
		return call<R>("getAllHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeader")] != -1);
		return call<R>("getHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getMatchingHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMatchingHeaders")] != -1);
		return call<R>("getMatchingHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getNonMatchingHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNonMatchingHeaders")] != -1);
		return call<R>("getNonMatchingHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllHeaders")] != -1);
		return call<R>("removeAllHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeHeader")] != -1);
		return call<R>("removeHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeader")] != -1);
		return call<R>("setHeader", std::forward<Args>(args)...);
	}

};

#endif
