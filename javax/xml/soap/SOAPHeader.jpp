#ifndef javax_xml_soap_SOAPHeader_HPP
#define javax_xml_soap_SOAPHeader_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPHeader : public jObject<::javax::xml::soap::SOAPHeader, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPHeader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::soap::SOAPHeaderElement(::javax::xml::namespace_::QName)>("addHeaderElement"), //
		jMethod<::javax::xml::soap::SOAPHeaderElement(::javax::xml::soap::Name)>("addHeaderElement"), //
		jMethod<::javax::xml::soap::SOAPHeaderElement(::javax::xml::namespace_::QName)>("addNotUnderstoodHeaderElement"), //
		jMethod<::javax::xml::soap::SOAPHeaderElement(::java::lang::String)>("addUpgradeHeaderElement"), //
		jMethod<::javax::xml::soap::SOAPHeaderElement(::java::util::Iterator)>("addUpgradeHeaderElement"), //
		jMethod<::javax::xml::soap::SOAPHeaderElement(::java::lang::String *)>("addUpgradeHeaderElement"), //
		jMethod<::java::util::Iterator()>("examineAllHeaderElements"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("examineHeaderElements"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("examineMustUnderstandHeaderElements"), //
		jMethod<::java::util::Iterator()>("extractAllHeaderElements"), //
		jMethod<::java::util::Iterator(::java::lang::String)>("extractHeaderElements"), //
	};

	template<typename R = ::javax::xml::soap::SOAPHeaderElement, typename... Args>
	auto addHeaderElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addHeaderElement")] != -1);
		return call<R>("addHeaderElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPHeaderElement, typename... Args>
	auto addNotUnderstoodHeaderElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addNotUnderstoodHeaderElement")] != -1);
		return call<R>("addNotUnderstoodHeaderElement", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPHeaderElement, typename... Args>
	auto addUpgradeHeaderElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addUpgradeHeaderElement")] != -1);
		return call<R>("addUpgradeHeaderElement", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto examineAllHeaderElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("examineAllHeaderElements")] != -1);
		return call<R>("examineAllHeaderElements", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto examineHeaderElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("examineHeaderElements")] != -1);
		return call<R>("examineHeaderElements", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto examineMustUnderstandHeaderElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("examineMustUnderstandHeaderElements")] != -1);
		return call<R>("examineMustUnderstandHeaderElements", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto extractAllHeaderElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("extractAllHeaderElements")] != -1);
		return call<R>("extractAllHeaderElements", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto extractHeaderElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("extractHeaderElements")] != -1);
		return call<R>("extractHeaderElements", forward<Args>(args)...);
	}

};

#endif
