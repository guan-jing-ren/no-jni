#ifndef javax_xml_soap_SOAPPart_HPP
#define javax_xml_soap_SOAPPart_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPPart : public jObject<::javax::xml::soap::SOAPPart, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPPart";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addMimeHeader"), //
		jMethod<::java::util::Iterator()>("getAllMimeHeaders"), //
		jMethod<::javax::xml::transform::Source()>("getContent"), //
		jMethod<::java::lang::String()>("getContentId"), //
		jMethod<::java::lang::String()>("getContentLocation"), //
		jMethod<::javax::xml::soap::SOAPEnvelope()>("getEnvelope"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getMatchingMimeHeaders"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getMimeHeader"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getNonMatchingMimeHeaders"), //
		jMethod<::jvoid()>("removeAllMimeHeaders"), //
		jMethod<::jvoid(::java::lang::String)>("removeMimeHeader"), //
		jMethod<::jvoid(::javax::xml::transform::Source)>("setContent"), //
		jMethod<::jvoid(::java::lang::String)>("setContentId"), //
		jMethod<::jvoid(::java::lang::String)>("setContentLocation"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setMimeHeader"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addMimeHeader")] != -1);
		return call<R>("addMimeHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAllMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllMimeHeaders")] != -1);
		return call<R>("getAllMimeHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Source, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentId")] != -1);
		return call<R>("getContentId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentLocation")] != -1);
		return call<R>("getContentLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPEnvelope, typename... Args>
	auto getEnvelope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvelope")] != -1);
		return call<R>("getEnvelope", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getMatchingMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMatchingMimeHeaders")] != -1);
		return call<R>("getMatchingMimeHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMimeHeader")] != -1);
		return call<R>("getMimeHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getNonMatchingMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNonMatchingMimeHeaders")] != -1);
		return call<R>("getNonMatchingMimeHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllMimeHeaders")] != -1);
		return call<R>("removeAllMimeHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeMimeHeader")] != -1);
		return call<R>("removeMimeHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentId")] != -1);
		return call<R>("setContentId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentLocation")] != -1);
		return call<R>("setContentLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMimeHeader")] != -1);
		return call<R>("setMimeHeader", std::forward<Args>(args)...);
	}

};

#endif
