#ifndef javax_xml_soap_SOAPElement_HPP
#define javax_xml_soap_SOAPElement_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPElement : public jObject<::javax::xml::soap::SOAPElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::namespace_::QName, ::java::lang::String)>("addAttribute"), //
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::soap::Name, ::java::lang::String)>("addAttribute"), //
		jMethod<::javax::xml::soap::SOAPElement(::java::lang::String)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::java::lang::String, ::java::lang::String)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::java::lang::String, ::java::lang::String, ::java::lang::String)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::namespace_::QName)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::soap::Name)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::soap::SOAPElement)>("addChildElement"), //
		jMethod<::javax::xml::soap::SOAPElement(::java::lang::String, ::java::lang::String)>("addNamespaceDeclaration"), //
		jMethod<::javax::xml::soap::SOAPElement(::java::lang::String)>("addTextNode"), //
		jMethod<::javax::xml::namespace_::QName(::java::lang::String, ::java::lang::String)>("createQName"), //
		jMethod<::jvoid()>("detachNode"), //
		jMethod<::java::util::Iterator()>("getAllAttributes"), //
		jMethod<::java::util::Iterator()>("getAllAttributesAsQNames"), //
		jMethod<::java::lang::String(::java::lang::String)>("getAttribute"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String)>("getAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::java::lang::String, ::java::lang::String)>("getAttributeNodeNS"), //
		jMethod<::java::lang::String(::javax::xml::namespace_::QName)>("getAttributeValue"), //
		jMethod<::java::lang::String(::javax::xml::soap::Name)>("getAttributeValue"), //
		jMethod<::java::util::Iterator()>("getChildElements"), //
		jMethod<::java::util::Iterator(::javax::xml::namespace_::QName)>("getChildElements"), //
		jMethod<::java::util::Iterator(::javax::xml::soap::Name)>("getChildElements"), //
		jMethod<::javax::xml::soap::Name()>("getElementName"), //
		jMethod<::javax::xml::namespace_::QName()>("getElementQName"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String)>("getElementsByTagName"), //
		jMethod<::org::w3c::dom::NodeList(::java::lang::String, ::java::lang::String)>("getElementsByTagNameNS"), //
		jMethod<::java::lang::String()>("getEncodingStyle"), //
		jMethod<::java::util::Iterator()>("getNamespacePrefixes"), //
		jMethod<::java::lang::String(::java::lang::String)>("getNamespaceURI"), //
		jMethod<::javax::xml::soap::SOAPElement()>("getParentElement"), //
		jMethod<::org::w3c::dom::TypeInfo()>("getSchemaTypeInfo"), //
		jMethod<::java::lang::String()>("getTagName"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::java::util::Iterator()>("getVisibleNamespacePrefixes"), //
		jMethod<::jboolean(::java::lang::String)>("hasAttribute"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("hasAttributeNS"), //
		jMethod<::jvoid()>("recycleNode"), //
		jMethod<::jvoid(::java::lang::String)>("removeAttribute"), //
		jMethod<::jboolean(::javax::xml::namespace_::QName)>("removeAttribute"), //
		jMethod<::jboolean(::javax::xml::soap::Name)>("removeAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("removeAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("removeAttributeNode"), //
		jMethod<::jvoid()>("removeContents"), //
		jMethod<::jboolean(::java::lang::String)>("removeNamespaceDeclaration"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("setAttributeNS"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNode"), //
		jMethod<::org::w3c::dom::Attr(::org::w3c::dom::Attr)>("setAttributeNodeNS"), //
		jMethod<::javax::xml::soap::SOAPElement(::javax::xml::namespace_::QName)>("setElementQName"), //
		jMethod<::jvoid(::java::lang::String)>("setEncodingStyle"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setIdAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean)>("setIdAttributeNS"), //
		jMethod<::jvoid(::org::w3c::dom::Attr, ::jboolean)>("setIdAttributeNode"), //
		jMethod<::jvoid(::javax::xml::soap::SOAPElement)>("setParentElement"), //
		jMethod<::jvoid(::java::lang::String)>("setValue"), //
	};

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto addChildElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChildElement")] != -1);
		return call<R>("addChildElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto addNamespaceDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNamespaceDeclaration")] != -1);
		return call<R>("addNamespaceDeclaration", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto addTextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addTextNode")] != -1);
		return call<R>("addTextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto createQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createQName")] != -1);
		return call<R>("createQName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto detachNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("detachNode")] != -1);
		return call<R>("detachNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAllAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllAttributes")] != -1);
		return call<R>("getAllAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAllAttributesAsQNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllAttributesAsQNames")] != -1);
		return call<R>("getAllAttributesAsQNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNS")] != -1);
		return call<R>("getAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNode")] != -1);
		return call<R>("getAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto getAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNodeNS")] != -1);
		return call<R>("getAttributeNodeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeValue")] != -1);
		return call<R>("getAttributeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getChildElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildElements")] != -1);
		return call<R>("getChildElements", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::Name, typename... Args>
	auto getElementName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementName")] != -1);
		return call<R>("getElementName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getElementQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementQName")] != -1);
		return call<R>("getElementQName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagName")] != -1);
		return call<R>("getElementsByTagName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::NodeList, typename... Args>
	auto getElementsByTagNameNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementsByTagNameNS")] != -1);
		return call<R>("getElementsByTagNameNS", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncodingStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodingStyle")] != -1);
		return call<R>("getEncodingStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getNamespacePrefixes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespacePrefixes")] != -1);
		return call<R>("getNamespacePrefixes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceURI")] != -1);
		return call<R>("getNamespaceURI", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto getParentElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParentElement")] != -1);
		return call<R>("getParentElement", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::TypeInfo, typename... Args>
	auto getSchemaTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaTypeInfo")] != -1);
		return call<R>("getSchemaTypeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTagName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTagName")] != -1);
		return call<R>("getTagName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getVisibleNamespacePrefixes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVisibleNamespacePrefixes")] != -1);
		return call<R>("getVisibleNamespacePrefixes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasAttribute")] != -1);
		return call<R>("hasAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasAttributeNS")] != -1);
		return call<R>("hasAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto recycleNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recycleNode")] != -1);
		return call<R>("recycleNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttributeNS")] != -1);
		return call<R>("removeAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto removeAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttributeNode")] != -1);
		return call<R>("removeAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeContents")] != -1);
		return call<R>("removeContents", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removeNamespaceDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamespaceDeclaration")] != -1);
		return call<R>("removeNamespaceDeclaration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNS")] != -1);
		return call<R>("setAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNode")] != -1);
		return call<R>("setAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Attr, typename... Args>
	auto setAttributeNodeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributeNodeNS")] != -1);
		return call<R>("setAttributeNodeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPElement, typename... Args>
	auto setElementQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setElementQName")] != -1);
		return call<R>("setElementQName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncodingStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEncodingStyle")] != -1);
		return call<R>("setEncodingStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttribute")] != -1);
		return call<R>("setIdAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttributeNS")] != -1);
		return call<R>("setIdAttributeNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdAttributeNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdAttributeNode")] != -1);
		return call<R>("setIdAttributeNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParentElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParentElement")] != -1);
		return call<R>("setParentElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
