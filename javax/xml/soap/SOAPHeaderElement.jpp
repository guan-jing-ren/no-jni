#ifndef javax_xml_soap_SOAPHeaderElement_HPP
#define javax_xml_soap_SOAPHeaderElement_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPHeaderElement : public jObject<::javax::xml::soap::SOAPHeaderElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPHeaderElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getActor"), //
		jMethod<::jboolean()>("getMustUnderstand"), //
		jMethod<::jboolean()>("getRelay"), //
		jMethod<::java::lang::String()>("getRole"), //
		jMethod<::jvoid(::java::lang::String)>("setActor"), //
		jMethod<::jvoid(::jboolean)>("setMustUnderstand"), //
		jMethod<::jvoid(::jboolean)>("setRelay"), //
		jMethod<::jvoid(::java::lang::String)>("setRole"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getActor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActor")] != -1);
		return call<R>("getActor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMustUnderstand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMustUnderstand")] != -1);
		return call<R>("getMustUnderstand", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getRelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRelay")] != -1);
		return call<R>("getRelay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRole")] != -1);
		return call<R>("getRole", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setActor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setActor")] != -1);
		return call<R>("setActor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMustUnderstand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMustUnderstand")] != -1);
		return call<R>("setMustUnderstand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRelay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRelay")] != -1);
		return call<R>("setRelay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRole")] != -1);
		return call<R>("setRole", std::forward<Args>(args)...);
	}

};

#endif
