#ifndef javax_xml_soap_AttachmentPart_HPP
#define javax_xml_soap_AttachmentPart_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::AttachmentPart : public jObject<::javax::xml::soap::AttachmentPart, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "AttachmentPart";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addMimeHeader"), //
		jMethod<::jvoid()>("clearContent"), //
		jMethod<::java::util::Iterator()>("getAllMimeHeaders"), //
		jMethod<::java::io::InputStream()>("getBase64Content"), //
		jMethod<::java::lang::Object()>("getContent"), //
		jMethod<::java::lang::String()>("getContentId"), //
		jMethod<::java::lang::String()>("getContentLocation"), //
		jMethod<::java::lang::String()>("getContentType"), //
		jMethod<::javax::activation::DataHandler()>("getDataHandler"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getMatchingMimeHeaders"), //
		jMethod<::java::lang::String *(::java::lang::String)>("getMimeHeader"), //
		jMethod<::java::util::Iterator(::java::lang::String *)>("getNonMatchingMimeHeaders"), //
		jMethod<::java::io::InputStream()>("getRawContent"), //
		jMethod<::jbyte *()>("getRawContentBytes"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jvoid()>("removeAllMimeHeaders"), //
		jMethod<::jvoid(::java::lang::String)>("removeMimeHeader"), //
		jMethod<::jvoid(::java::io::InputStream, ::java::lang::String)>("setBase64Content"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("setContent"), //
		jMethod<::jvoid(::java::lang::String)>("setContentId"), //
		jMethod<::jvoid(::java::lang::String)>("setContentLocation"), //
		jMethod<::jvoid(::java::lang::String)>("setContentType"), //
		jMethod<::jvoid(::javax::activation::DataHandler)>("setDataHandler"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setMimeHeader"), //
		jMethod<::jvoid(::java::io::InputStream, ::java::lang::String)>("setRawContent"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint, ::java::lang::String)>("setRawContentBytes"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addMimeHeader")] != -1);
		return call<R>("addMimeHeader", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearContent")] != -1);
		return call<R>("clearContent", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAllMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAllMimeHeaders")] != -1);
		return call<R>("getAllMimeHeaders", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getBase64Content(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBase64Content")] != -1);
		return call<R>("getBase64Content", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContent")] != -1);
		return call<R>("getContent", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentId")] != -1);
		return call<R>("getContentId", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentLocation")] != -1);
		return call<R>("getContentLocation", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getContentType")] != -1);
		return call<R>("getContentType", forward<Args>(args)...);
	}

	template<typename R = ::javax::activation::DataHandler, typename... Args>
	auto getDataHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataHandler")] != -1);
		return call<R>("getDataHandler", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getMatchingMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMatchingMimeHeaders")] != -1);
		return call<R>("getMatchingMimeHeaders", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMimeHeader")] != -1);
		return call<R>("getMimeHeader", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getNonMatchingMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNonMatchingMimeHeaders")] != -1);
		return call<R>("getNonMatchingMimeHeaders", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getRawContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRawContent")] != -1);
		return call<R>("getRawContent", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getRawContentBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRawContentBytes")] != -1);
		return call<R>("getRawContentBytes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeAllMimeHeaders")] != -1);
		return call<R>("removeAllMimeHeaders", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removeMimeHeader")] != -1);
		return call<R>("removeMimeHeader", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBase64Content(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setBase64Content")] != -1);
		return call<R>("setBase64Content", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContent")] != -1);
		return call<R>("setContent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentId")] != -1);
		return call<R>("setContentId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentLocation")] != -1);
		return call<R>("setContentLocation", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setContentType")] != -1);
		return call<R>("setContentType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDataHandler")] != -1);
		return call<R>("setDataHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMimeHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMimeHeader")] != -1);
		return call<R>("setMimeHeader", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRawContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRawContent")] != -1);
		return call<R>("setRawContent", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRawContentBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setRawContentBytes")] != -1);
		return call<R>("setRawContentBytes", forward<Args>(args)...);
	}

};

#endif
