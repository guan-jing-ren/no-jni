#ifndef javax_xml_soap_SOAPMessage_HPP
#define javax_xml_soap_SOAPMessage_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::soap::SOAPMessage : public jObject<::javax::xml::soap::SOAPMessage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_soap / "SOAPMessage";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CHARACTER_SET_ENCODING"), //
		jField<::java::lang::String>("WRITE_XML_DECLARATION"), //
	};

	template<typename F = ::java::lang::String>
	static auto CHARACTER_SET_ENCODING() {
		static_assert(field_signatures[jField<F>("CHARACTER_SET_ENCODING")] != -1);
		return sat<F>("CHARACTER_SET_ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto WRITE_XML_DECLARATION() {
		static_assert(field_signatures[jField<F>("WRITE_XML_DECLARATION")] != -1);
		return sat<F>("WRITE_XML_DECLARATION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::xml::soap::AttachmentPart)>("addAttachmentPart"), //
		jMethod<::jint()>("countAttachments"), //
		jMethod<::javax::xml::soap::AttachmentPart()>("createAttachmentPart"), //
		jMethod<::javax::xml::soap::AttachmentPart(::java::lang::Object, ::java::lang::String)>("createAttachmentPart"), //
		jMethod<::javax::xml::soap::AttachmentPart(::javax::activation::DataHandler)>("createAttachmentPart"), //
		jMethod<::javax::xml::soap::AttachmentPart(::javax::xml::soap::SOAPElement)>("getAttachment"), //
		jMethod<::java::util::Iterator()>("getAttachments"), //
		jMethod<::java::util::Iterator(::javax::xml::soap::MimeHeaders)>("getAttachments"), //
		jMethod<::java::lang::String()>("getContentDescription"), //
		jMethod<::javax::xml::soap::MimeHeaders()>("getMimeHeaders"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::soap::SOAPBody()>("getSOAPBody"), //
		jMethod<::javax::xml::soap::SOAPHeader()>("getSOAPHeader"), //
		jMethod<::javax::xml::soap::SOAPPart()>("getSOAPPart"), //
		jMethod<::jvoid()>("removeAllAttachments"), //
		jMethod<::jvoid(::javax::xml::soap::MimeHeaders)>("removeAttachments"), //
		jMethod<::jvoid()>("saveChanges"), //
		jMethod<::jboolean()>("saveRequired"), //
		jMethod<::jvoid(::java::lang::String)>("setContentDescription"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::java::io::OutputStream)>("writeTo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttachmentPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttachmentPart")] != -1);
		return call<R>("addAttachmentPart", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto countAttachments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("countAttachments")] != -1);
		return call<R>("countAttachments", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::AttachmentPart, typename... Args>
	auto createAttachmentPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAttachmentPart")] != -1);
		return call<R>("createAttachmentPart", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::AttachmentPart, typename... Args>
	auto getAttachment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttachment")] != -1);
		return call<R>("getAttachment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getAttachments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttachments")] != -1);
		return call<R>("getAttachments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContentDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContentDescription")] != -1);
		return call<R>("getContentDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::MimeHeaders, typename... Args>
	auto getMimeHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMimeHeaders")] != -1);
		return call<R>("getMimeHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPBody, typename... Args>
	auto getSOAPBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSOAPBody")] != -1);
		return call<R>("getSOAPBody", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPHeader, typename... Args>
	auto getSOAPHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSOAPHeader")] != -1);
		return call<R>("getSOAPHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::soap::SOAPPart, typename... Args>
	auto getSOAPPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSOAPPart")] != -1);
		return call<R>("getSOAPPart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAllAttachments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAllAttachments")] != -1);
		return call<R>("removeAllAttachments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttachments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttachments")] != -1);
		return call<R>("removeAttachments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto saveChanges(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("saveChanges")] != -1);
		return call<R>("saveChanges", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto saveRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("saveRequired")] != -1);
		return call<R>("saveRequired", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContentDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContentDescription")] != -1);
		return call<R>("setContentDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeTo")] != -1);
		return call<R>("writeTo", std::forward<Args>(args)...);
	}

};

#endif
