#ifndef javax_xml_bind_annotation_XmlElementWrapper_HPP
#define javax_xml_bind_annotation_XmlElementWrapper_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::XmlElementWrapper : public jObject<::javax::xml::bind::annotation::XmlElementWrapper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation / "XmlElementWrapper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::lang::String()>("namespace"), //
		jMethod<::jboolean()>("nillable"), //
		jMethod<::jboolean()>("required"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("name")] != -1);
		return call<R>("name", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto namespace_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("namespace")] != -1);
		return call<R>("namespace", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto nillable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("nillable")] != -1);
		return call<R>("nillable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto required(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("required")] != -1);
		return call<R>("required", forward<Args>(args)...);
	}

};

#endif
