#ifndef javax_xml_bind_annotation_adapters_CollapsedStringAdapter_HPP
#define javax_xml_bind_annotation_adapters_CollapsedStringAdapter_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::adapters::CollapsedStringAdapter : public jObject<::javax::xml::bind::annotation::adapters::CollapsedStringAdapter, ::javax::xml::bind::annotation::adapters::XmlAdapter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation_adapters / "CollapsedStringAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::java::lang::Object)>("marshal"), //
		jMethod<::java::lang::String(::java::lang::String)>("marshal"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("unmarshal"), //
		jMethod<::java::lang::String(::java::lang::String)>("unmarshal"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto marshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("marshal")] != -1);
		return call<R>("marshal", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unmarshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unmarshal")] != -1);
		return call<R>("unmarshal", forward<Args>(args)...);
	}

};

#endif
