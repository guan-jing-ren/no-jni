#ifndef javax_xml_bind_annotation_XmlAccessOrder_HPP
#define javax_xml_bind_annotation_XmlAccessOrder_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::XmlAccessOrder : public jObject<::javax::xml::bind::annotation::XmlAccessOrder, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation / "XmlAccessOrder";

	constexpr static Enume field_signatures{
		jField<::javax::xml::bind::annotation::XmlAccessOrder>("ALPHABETICAL"), //
		jField<::javax::xml::bind::annotation::XmlAccessOrder>("UNDEFINED"), //
	};

	template<typename F = ::javax::xml::bind::annotation::XmlAccessOrder>
	static auto ALPHABETICAL() {
		static_assert(field_signatures[jField<F>("ALPHABETICAL")] != -1);
		return sat<F>("ALPHABETICAL");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlAccessOrder>
	static auto UNDEFINED() {
		static_assert(field_signatures[jField<F>("UNDEFINED")] != -1);
		return sat<F>("UNDEFINED");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::bind::annotation::XmlAccessOrder(::java::lang::String)>("valueOf"), //
		jMethod<::javax::xml::bind::annotation::XmlAccessOrder *()>("values"), //
	};

	template<typename R = ::javax::xml::bind::annotation::XmlAccessOrder, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::annotation::XmlAccessOrder *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
