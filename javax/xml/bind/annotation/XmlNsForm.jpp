#ifndef javax_xml_bind_annotation_XmlNsForm_HPP
#define javax_xml_bind_annotation_XmlNsForm_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::XmlNsForm : public jObject<::javax::xml::bind::annotation::XmlNsForm, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation / "XmlNsForm";

	constexpr static Enume field_signatures{
		jField<::javax::xml::bind::annotation::XmlNsForm>("QUALIFIED"), //
		jField<::javax::xml::bind::annotation::XmlNsForm>("UNQUALIFIED"), //
		jField<::javax::xml::bind::annotation::XmlNsForm>("UNSET"), //
	};

	template<typename F = ::javax::xml::bind::annotation::XmlNsForm>
	static auto QUALIFIED() {
		static_assert(field_signatures[jField<F>("QUALIFIED")] != -1);
		return sat<F>("QUALIFIED");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlNsForm>
	static auto UNQUALIFIED() {
		static_assert(field_signatures[jField<F>("UNQUALIFIED")] != -1);
		return sat<F>("UNQUALIFIED");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlNsForm>
	static auto UNSET() {
		static_assert(field_signatures[jField<F>("UNSET")] != -1);
		return sat<F>("UNSET");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::bind::annotation::XmlNsForm(::java::lang::String)>("valueOf"), //
		jMethod<::javax::xml::bind::annotation::XmlNsForm *()>("values"), //
	};

	template<typename R = ::javax::xml::bind::annotation::XmlNsForm, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::annotation::XmlNsForm *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
