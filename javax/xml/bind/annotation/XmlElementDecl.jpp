#ifndef javax_xml_bind_annotation_XmlElementDecl_HPP
#define javax_xml_bind_annotation_XmlElementDecl_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::XmlElementDecl : public jObject<::javax::xml::bind::annotation::XmlElementDecl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation / "XmlElementDecl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("defaultValue"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::lang::String()>("namespace"), //
		jMethod<::java::lang::Class()>("scope"), //
		jMethod<::java::lang::String()>("substitutionHeadName"), //
		jMethod<::java::lang::String()>("substitutionHeadNamespace"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto defaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("defaultValue")] != -1);
		return call<R>("defaultValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("name")] != -1);
		return call<R>("name", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto namespace_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("namespace")] != -1);
		return call<R>("namespace", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto scope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("scope")] != -1);
		return call<R>("scope", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto substitutionHeadName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("substitutionHeadName")] != -1);
		return call<R>("substitutionHeadName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto substitutionHeadNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("substitutionHeadNamespace")] != -1);
		return call<R>("substitutionHeadNamespace", forward<Args>(args)...);
	}

};

#endif
