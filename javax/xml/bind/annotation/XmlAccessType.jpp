#ifndef javax_xml_bind_annotation_XmlAccessType_HPP
#define javax_xml_bind_annotation_XmlAccessType_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::annotation::XmlAccessType : public jObject<::javax::xml::bind::annotation::XmlAccessType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_annotation / "XmlAccessType";

	constexpr static Enume field_signatures{
		jField<::javax::xml::bind::annotation::XmlAccessType>("FIELD"), //
		jField<::javax::xml::bind::annotation::XmlAccessType>("NONE"), //
		jField<::javax::xml::bind::annotation::XmlAccessType>("PROPERTY"), //
		jField<::javax::xml::bind::annotation::XmlAccessType>("PUBLIC_MEMBER"), //
	};

	template<typename F = ::javax::xml::bind::annotation::XmlAccessType>
	static auto FIELD() {
		static_assert(field_signatures[jField<F>("FIELD")] != -1);
		return sat<F>("FIELD");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlAccessType>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlAccessType>
	static auto PROPERTY() {
		static_assert(field_signatures[jField<F>("PROPERTY")] != -1);
		return sat<F>("PROPERTY");
	}

	template<typename F = ::javax::xml::bind::annotation::XmlAccessType>
	static auto PUBLIC_MEMBER() {
		static_assert(field_signatures[jField<F>("PUBLIC_MEMBER")] != -1);
		return sat<F>("PUBLIC_MEMBER");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::bind::annotation::XmlAccessType(::java::lang::String)>("valueOf"), //
		jMethod<::javax::xml::bind::annotation::XmlAccessType *()>("values"), //
	};

	template<typename R = ::javax::xml::bind::annotation::XmlAccessType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::annotation::XmlAccessType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", forward<Args>(args)...);
	}

};

#endif
