#ifndef javax_xml_bind_Marshaller_HPP
#define javax_xml_bind_Marshaller_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::Marshaller : public jObject<::javax::xml::bind::Marshaller, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "Marshaller";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("JAXB_ENCODING"), //
		jField<::java::lang::String>("JAXB_FORMATTED_OUTPUT"), //
		jField<::java::lang::String>("JAXB_FRAGMENT"), //
		jField<::java::lang::String>("JAXB_NO_NAMESPACE_SCHEMA_LOCATION"), //
		jField<::java::lang::String>("JAXB_SCHEMA_LOCATION"), //
	};

	template<typename F = ::java::lang::String>
	static auto JAXB_ENCODING() {
		static_assert(field_signatures[jField<F>("JAXB_ENCODING")] != -1);
		return sat<F>("JAXB_ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto JAXB_FORMATTED_OUTPUT() {
		static_assert(field_signatures[jField<F>("JAXB_FORMATTED_OUTPUT")] != -1);
		return sat<F>("JAXB_FORMATTED_OUTPUT");
	}

	template<typename F = ::java::lang::String>
	static auto JAXB_FRAGMENT() {
		static_assert(field_signatures[jField<F>("JAXB_FRAGMENT")] != -1);
		return sat<F>("JAXB_FRAGMENT");
	}

	template<typename F = ::java::lang::String>
	static auto JAXB_NO_NAMESPACE_SCHEMA_LOCATION() {
		static_assert(field_signatures[jField<F>("JAXB_NO_NAMESPACE_SCHEMA_LOCATION")] != -1);
		return sat<F>("JAXB_NO_NAMESPACE_SCHEMA_LOCATION");
	}

	template<typename F = ::java::lang::String>
	static auto JAXB_SCHEMA_LOCATION() {
		static_assert(field_signatures[jField<F>("JAXB_SCHEMA_LOCATION")] != -1);
		return sat<F>("JAXB_SCHEMA_LOCATION");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::bind::annotation::adapters::XmlAdapter(::java::lang::Class)>("getAdapter"), //
		jMethod<::javax::xml::bind::attachment::AttachmentMarshaller()>("getAttachmentMarshaller"), //
		jMethod<::javax::xml::bind::ValidationEventHandler()>("getEventHandler"), //
		jMethod<::javax::xml::bind::Marshaller$Listener()>("getListener"), //
		jMethod<::org::w3c::dom::Node(::java::lang::Object)>("getNode"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::jvoid(::java::lang::Object, ::java::io::File)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::java::io::OutputStream)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::java::io::Writer)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::xml::stream::XMLEventWriter)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::xml::stream::XMLStreamWriter)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::xml::transform::Result)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::org::w3c::dom::Node)>("marshal"), //
		jMethod<::jvoid(::java::lang::Object, ::org::xml::sax::ContentHandler)>("marshal"), //
		jMethod<::jvoid(::java::lang::Class, ::javax::xml::bind::annotation::adapters::XmlAdapter)>("setAdapter"), //
		jMethod<::jvoid(::javax::xml::bind::annotation::adapters::XmlAdapter)>("setAdapter"), //
		jMethod<::jvoid(::javax::xml::bind::attachment::AttachmentMarshaller)>("setAttachmentMarshaller"), //
		jMethod<::jvoid(::javax::xml::bind::ValidationEventHandler)>("setEventHandler"), //
		jMethod<::jvoid(::javax::xml::bind::Marshaller$Listener)>("setListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::javax::xml::validation::Schema)>("setSchema"), //
	};

	template<typename R = ::javax::xml::bind::annotation::adapters::XmlAdapter, typename... Args>
	auto getAdapter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapter")] != -1);
		return call<R>("getAdapter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::attachment::AttachmentMarshaller, typename... Args>
	auto getAttachmentMarshaller(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttachmentMarshaller")] != -1);
		return call<R>("getAttachmentMarshaller", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::ValidationEventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::Marshaller$Listener, typename... Args>
	auto getListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListener")] != -1);
		return call<R>("getListener", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNode")] != -1);
		return call<R>("getNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto marshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("marshal")] != -1);
		return call<R>("marshal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAdapter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAdapter")] != -1);
		return call<R>("setAdapter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttachmentMarshaller(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttachmentMarshaller")] != -1);
		return call<R>("setAttachmentMarshaller", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEventHandler")] != -1);
		return call<R>("setEventHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setListener")] != -1);
		return call<R>("setListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSchema")] != -1);
		return call<R>("setSchema", std::forward<Args>(args)...);
	}

};

#endif
