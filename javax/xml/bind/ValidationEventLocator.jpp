#ifndef javax_xml_bind_ValidationEventLocator_HPP
#define javax_xml_bind_ValidationEventLocator_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::ValidationEventLocator : public jObject<::javax::xml::bind::ValidationEventLocator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "ValidationEventLocator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getColumnNumber"), //
		jMethod<::jint()>("getLineNumber"), //
		jMethod<::org::w3c::dom::Node()>("getNode"), //
		jMethod<::java::lang::Object()>("getObject"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::java::net::URL()>("getURL"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getColumnNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnNumber")] != -1);
		return call<R>("getColumnNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineNumber")] != -1);
		return call<R>("getLineNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNode")] != -1);
		return call<R>("getNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

};

#endif
