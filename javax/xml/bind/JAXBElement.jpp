#ifndef javax_xml_bind_JAXBElement_HPP
#define javax_xml_bind_JAXBElement_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::JAXBElement : public jObject<::javax::xml::bind::JAXBElement, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "JAXBElement";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::xml::namespace_::QName, ::java::lang::Class, ::java::lang::Class, ::java::lang::Object)>(), //
		jConstructor<::jvoid(::javax::xml::namespace_::QName, ::java::lang::Class, ::java::lang::Object)>(), //
		jMethod<::java::lang::Class()>("getDeclaredType"), //
		jMethod<::javax::xml::namespace_::QName()>("getName"), //
		jMethod<::java::lang::Class()>("getScope"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jboolean()>("isGlobalScope"), //
		jMethod<::jboolean()>("isNil"), //
		jMethod<::jboolean()>("isTypeSubstituted"), //
		jMethod<::jvoid(::jboolean)>("setNil"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getDeclaredType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDeclaredType")] != -1);
		return call<R>("getDeclaredType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScope")] != -1);
		return call<R>("getScope", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isGlobalScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isGlobalScope")] != -1);
		return call<R>("isGlobalScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNil(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNil")] != -1);
		return call<R>("isNil", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTypeSubstituted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTypeSubstituted")] != -1);
		return call<R>("isTypeSubstituted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNil(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNil")] != -1);
		return call<R>("setNil", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
