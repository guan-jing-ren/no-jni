#ifndef javax_xml_bind_DatatypeConverterInterface_HPP
#define javax_xml_bind_DatatypeConverterInterface_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::DatatypeConverterInterface : public jObject<::javax::xml::bind::DatatypeConverterInterface, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "DatatypeConverterInterface";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::String)>("parseAnySimpleType"), //
		jMethod<::jbyte *(::java::lang::String)>("parseBase64Binary"), //
		jMethod<::jboolean(::java::lang::String)>("parseBoolean"), //
		jMethod<::jbyte(::java::lang::String)>("parseByte"), //
		jMethod<::java::util::Calendar(::java::lang::String)>("parseDate"), //
		jMethod<::java::util::Calendar(::java::lang::String)>("parseDateTime"), //
		jMethod<::java::math::BigDecimal(::java::lang::String)>("parseDecimal"), //
		jMethod<::jdouble(::java::lang::String)>("parseDouble"), //
		jMethod<::jfloat(::java::lang::String)>("parseFloat"), //
		jMethod<::jbyte *(::java::lang::String)>("parseHexBinary"), //
		jMethod<::jint(::java::lang::String)>("parseInt"), //
		jMethod<::java::math::BigInteger(::java::lang::String)>("parseInteger"), //
		jMethod<::jlong(::java::lang::String)>("parseLong"), //
		jMethod<::javax::xml::namespace_::QName(::java::lang::String, ::javax::xml::namespace_::NamespaceContext)>("parseQName"), //
		jMethod<::jshort(::java::lang::String)>("parseShort"), //
		jMethod<::java::lang::String(::java::lang::String)>("parseString"), //
		jMethod<::java::util::Calendar(::java::lang::String)>("parseTime"), //
		jMethod<::jlong(::java::lang::String)>("parseUnsignedInt"), //
		jMethod<::jint(::java::lang::String)>("parseUnsignedShort"), //
		jMethod<::java::lang::String(::java::lang::String)>("printAnySimpleType"), //
		jMethod<::java::lang::String(::jbyte *)>("printBase64Binary"), //
		jMethod<::java::lang::String(::jboolean)>("printBoolean"), //
		jMethod<::java::lang::String(::jbyte)>("printByte"), //
		jMethod<::java::lang::String(::java::util::Calendar)>("printDate"), //
		jMethod<::java::lang::String(::java::util::Calendar)>("printDateTime"), //
		jMethod<::java::lang::String(::java::math::BigDecimal)>("printDecimal"), //
		jMethod<::java::lang::String(::jdouble)>("printDouble"), //
		jMethod<::java::lang::String(::jfloat)>("printFloat"), //
		jMethod<::java::lang::String(::jbyte *)>("printHexBinary"), //
		jMethod<::java::lang::String(::jint)>("printInt"), //
		jMethod<::java::lang::String(::java::math::BigInteger)>("printInteger"), //
		jMethod<::java::lang::String(::jlong)>("printLong"), //
		jMethod<::java::lang::String(::javax::xml::namespace_::QName, ::javax::xml::namespace_::NamespaceContext)>("printQName"), //
		jMethod<::java::lang::String(::jshort)>("printShort"), //
		jMethod<::java::lang::String(::java::lang::String)>("printString"), //
		jMethod<::java::lang::String(::java::util::Calendar)>("printTime"), //
		jMethod<::java::lang::String(::jlong)>("printUnsignedInt"), //
		jMethod<::java::lang::String(::jint)>("printUnsignedShort"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto parseAnySimpleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseAnySimpleType")] != -1);
		return call<R>("parseAnySimpleType", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto parseBase64Binary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseBase64Binary")] != -1);
		return call<R>("parseBase64Binary", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto parseBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseBoolean")] != -1);
		return call<R>("parseBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto parseByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseByte")] != -1);
		return call<R>("parseByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar, typename... Args>
	auto parseDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDate")] != -1);
		return call<R>("parseDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar, typename... Args>
	auto parseDateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDateTime")] != -1);
		return call<R>("parseDateTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigDecimal, typename... Args>
	auto parseDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDecimal")] != -1);
		return call<R>("parseDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto parseDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseDouble")] != -1);
		return call<R>("parseDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto parseFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseFloat")] != -1);
		return call<R>("parseFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto parseHexBinary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseHexBinary")] != -1);
		return call<R>("parseHexBinary", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto parseInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseInt")] != -1);
		return call<R>("parseInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto parseInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseInteger")] != -1);
		return call<R>("parseInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto parseLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseLong")] != -1);
		return call<R>("parseLong", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto parseQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseQName")] != -1);
		return call<R>("parseQName", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto parseShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseShort")] != -1);
		return call<R>("parseShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto parseString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseString")] != -1);
		return call<R>("parseString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Calendar, typename... Args>
	auto parseTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseTime")] != -1);
		return call<R>("parseTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto parseUnsignedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseUnsignedInt")] != -1);
		return call<R>("parseUnsignedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto parseUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseUnsignedShort")] != -1);
		return call<R>("parseUnsignedShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printAnySimpleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printAnySimpleType")] != -1);
		return call<R>("printAnySimpleType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printBase64Binary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printBase64Binary")] != -1);
		return call<R>("printBase64Binary", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printBoolean")] != -1);
		return call<R>("printBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printByte")] != -1);
		return call<R>("printByte", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDate")] != -1);
		return call<R>("printDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printDateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDateTime")] != -1);
		return call<R>("printDateTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDecimal")] != -1);
		return call<R>("printDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printDouble")] != -1);
		return call<R>("printDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printFloat")] != -1);
		return call<R>("printFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printHexBinary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printHexBinary")] != -1);
		return call<R>("printHexBinary", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printInt")] != -1);
		return call<R>("printInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printInteger")] != -1);
		return call<R>("printInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printLong")] != -1);
		return call<R>("printLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printQName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printQName")] != -1);
		return call<R>("printQName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printShort")] != -1);
		return call<R>("printShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printString")] != -1);
		return call<R>("printString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printTime")] != -1);
		return call<R>("printTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printUnsignedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printUnsignedInt")] != -1);
		return call<R>("printUnsignedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto printUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printUnsignedShort")] != -1);
		return call<R>("printUnsignedShort", std::forward<Args>(args)...);
	}

};

#endif
