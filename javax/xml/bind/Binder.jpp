#ifndef javax_xml_bind_Binder_HPP
#define javax_xml_bind_Binder_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::Binder : public jObject<::javax::xml::bind::Binder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "Binder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::xml::bind::ValidationEventHandler()>("getEventHandler"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getJAXBNode"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getXMLNode"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("marshal"), //
		jMethod<::jvoid(::javax::xml::bind::ValidationEventHandler)>("setEventHandler"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::javax::xml::validation::Schema)>("setSchema"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("unmarshal"), //
		jMethod<::javax::xml::bind::JAXBElement(::java::lang::Object, ::java::lang::Class)>("unmarshal"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("updateJAXB"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("updateXML"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("updateXML"), //
	};

	template<typename R = ::javax::xml::bind::ValidationEventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getJAXBNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getJAXBNode")] != -1);
		return call<R>("getJAXBNode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getXMLNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXMLNode")] != -1);
		return call<R>("getXMLNode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto marshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("marshal")] != -1);
		return call<R>("marshal", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEventHandler")] != -1);
		return call<R>("setEventHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSchema")] != -1);
		return call<R>("setSchema", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unmarshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unmarshal")] != -1);
		return call<R>("unmarshal", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto updateJAXB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateJAXB")] != -1);
		return call<R>("updateJAXB", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto updateXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("updateXML")] != -1);
		return call<R>("updateXML", forward<Args>(args)...);
	}

};

#endif
