#ifndef javax_xml_bind_Unmarshaller_HPP
#define javax_xml_bind_Unmarshaller_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::bind::Unmarshaller : public jObject<::javax::xml::bind::Unmarshaller, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind / "Unmarshaller";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::bind::annotation::adapters::XmlAdapter(::java::lang::Class)>("getAdapter"), //
		jMethod<::javax::xml::bind::attachment::AttachmentUnmarshaller()>("getAttachmentUnmarshaller"), //
		jMethod<::javax::xml::bind::ValidationEventHandler()>("getEventHandler"), //
		jMethod<::javax::xml::bind::Unmarshaller$Listener()>("getListener"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::validation::Schema()>("getSchema"), //
		jMethod<::javax::xml::bind::UnmarshallerHandler()>("getUnmarshallerHandler"), //
		jMethod<::jboolean()>("isValidating"), //
		jMethod<::jvoid(::java::lang::Class, ::javax::xml::bind::annotation::adapters::XmlAdapter)>("setAdapter"), //
		jMethod<::jvoid(::javax::xml::bind::annotation::adapters::XmlAdapter)>("setAdapter"), //
		jMethod<::jvoid(::javax::xml::bind::attachment::AttachmentUnmarshaller)>("setAttachmentUnmarshaller"), //
		jMethod<::jvoid(::javax::xml::bind::ValidationEventHandler)>("setEventHandler"), //
		jMethod<::jvoid(::javax::xml::bind::Unmarshaller$Listener)>("setListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::javax::xml::validation::Schema)>("setSchema"), //
		jMethod<::jvoid(::jboolean)>("setValidating"), //
		jMethod<::java::lang::Object(::java::io::File)>("unmarshal"), //
		jMethod<::java::lang::Object(::java::io::InputStream)>("unmarshal"), //
		jMethod<::java::lang::Object(::java::io::Reader)>("unmarshal"), //
		jMethod<::java::lang::Object(::java::net::URL)>("unmarshal"), //
		jMethod<::java::lang::Object(::javax::xml::stream::XMLEventReader)>("unmarshal"), //
		jMethod<::javax::xml::bind::JAXBElement(::javax::xml::stream::XMLEventReader, ::java::lang::Class)>("unmarshal"), //
		jMethod<::java::lang::Object(::javax::xml::stream::XMLStreamReader)>("unmarshal"), //
		jMethod<::javax::xml::bind::JAXBElement(::javax::xml::stream::XMLStreamReader, ::java::lang::Class)>("unmarshal"), //
		jMethod<::java::lang::Object(::javax::xml::transform::Source)>("unmarshal"), //
		jMethod<::javax::xml::bind::JAXBElement(::javax::xml::transform::Source, ::java::lang::Class)>("unmarshal"), //
		jMethod<::java::lang::Object(::org::w3c::dom::Node)>("unmarshal"), //
		jMethod<::javax::xml::bind::JAXBElement(::org::w3c::dom::Node, ::java::lang::Class)>("unmarshal"), //
		jMethod<::java::lang::Object(::org::xml::sax::InputSource)>("unmarshal"), //
	};

	template<typename R = ::javax::xml::bind::annotation::adapters::XmlAdapter, typename... Args>
	auto getAdapter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAdapter")] != -1);
		return call<R>("getAdapter", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::attachment::AttachmentUnmarshaller, typename... Args>
	auto getAttachmentUnmarshaller(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttachmentUnmarshaller")] != -1);
		return call<R>("getAttachmentUnmarshaller", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::ValidationEventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::Unmarshaller$Listener, typename... Args>
	auto getListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getListener")] != -1);
		return call<R>("getListener", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::validation::Schema, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::UnmarshallerHandler, typename... Args>
	auto getUnmarshallerHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnmarshallerHandler")] != -1);
		return call<R>("getUnmarshallerHandler", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isValidating")] != -1);
		return call<R>("isValidating", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAdapter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAdapter")] != -1);
		return call<R>("setAdapter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttachmentUnmarshaller(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAttachmentUnmarshaller")] != -1);
		return call<R>("setAttachmentUnmarshaller", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEventHandler")] != -1);
		return call<R>("setEventHandler", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setListener")] != -1);
		return call<R>("setListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSchema")] != -1);
		return call<R>("setSchema", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValidating(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setValidating")] != -1);
		return call<R>("setValidating", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unmarshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unmarshal")] != -1);
		return call<R>("unmarshal", forward<Args>(args)...);
	}

};

#endif
