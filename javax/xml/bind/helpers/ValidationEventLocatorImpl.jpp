#ifndef javax_xml_bind_helpers_ValidationEventLocatorImpl_HPP
#define javax_xml_bind_helpers_ValidationEventLocatorImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::helpers::ValidationEventLocatorImpl : public jObject<::javax::xml::bind::helpers::ValidationEventLocatorImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_helpers / "ValidationEventLocatorImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::Object)>(), //
		jConstructor<::jvoid(::org::w3c::dom::Node)>(), //
		jConstructor<::jvoid(::org::xml::sax::Locator)>(), //
		jConstructor<::jvoid(::org::xml::sax::SAXParseException)>(), //
		jMethod<::jint()>("getColumnNumber"), //
		jMethod<::jint()>("getLineNumber"), //
		jMethod<::org::w3c::dom::Node()>("getNode"), //
		jMethod<::java::lang::Object()>("getObject"), //
		jMethod<::jint()>("getOffset"), //
		jMethod<::java::net::URL()>("getURL"), //
		jMethod<::jvoid(::jint)>("setColumnNumber"), //
		jMethod<::jvoid(::jint)>("setLineNumber"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setNode"), //
		jMethod<::jvoid(::java::lang::Object)>("setObject"), //
		jMethod<::jvoid(::jint)>("setOffset"), //
		jMethod<::jvoid(::java::net::URL)>("setURL"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getColumnNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getColumnNumber")] != -1);
		return call<R>("getColumnNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineNumber")] != -1);
		return call<R>("getLineNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNode")] != -1);
		return call<R>("getNode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOffset")] != -1);
		return call<R>("getOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURL")] != -1);
		return call<R>("getURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnNumber")] != -1);
		return call<R>("setColumnNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLineNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLineNumber")] != -1);
		return call<R>("setLineNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNode")] != -1);
		return call<R>("setNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObject")] != -1);
		return call<R>("setObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOffset")] != -1);
		return call<R>("setOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURL")] != -1);
		return call<R>("setURL", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
