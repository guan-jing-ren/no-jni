#ifndef javax_xml_bind_helpers_ValidationEventImpl_HPP
#define javax_xml_bind_helpers_ValidationEventImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::bind::helpers::ValidationEventImpl : public jObject<::javax::xml::bind::helpers::ValidationEventImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_bind_helpers / "ValidationEventImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::java::lang::String, ::javax::xml::bind::ValidationEventLocator)>(), //
		jConstructor<::jvoid(::jint, ::java::lang::String, ::javax::xml::bind::ValidationEventLocator, ::java::lang::Throwable)>(), //
		jMethod<::java::lang::Throwable()>("getLinkedException"), //
		jMethod<::javax::xml::bind::ValidationEventLocator()>("getLocator"), //
		jMethod<::java::lang::String()>("getMessage"), //
		jMethod<::jint()>("getSeverity"), //
		jMethod<::jvoid(::java::lang::Throwable)>("setLinkedException"), //
		jMethod<::jvoid(::javax::xml::bind::ValidationEventLocator)>("setLocator"), //
		jMethod<::jvoid(::java::lang::String)>("setMessage"), //
		jMethod<::jvoid(::jint)>("setSeverity"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getLinkedException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLinkedException")] != -1);
		return call<R>("getLinkedException", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::bind::ValidationEventLocator, typename... Args>
	auto getLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getLocator")] != -1);
		return call<R>("getLocator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSeverity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeverity")] != -1);
		return call<R>("getSeverity", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLinkedException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLinkedException")] != -1);
		return call<R>("setLinkedException", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setLocator")] != -1);
		return call<R>("setLocator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setMessage")] != -1);
		return call<R>("setMessage", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSeverity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSeverity")] != -1);
		return call<R>("setSeverity", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
