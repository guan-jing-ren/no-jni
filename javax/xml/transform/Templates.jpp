#ifndef javax_xml_transform_Templates_HPP
#define javax_xml_transform_Templates_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::transform::Templates : public jObject<::javax::xml::transform::Templates, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform / "Templates";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Properties()>("getOutputProperties"), //
		jMethod<::javax::xml::transform::Transformer()>("newTransformer"), //
	};

	template<typename R = ::java::util::Properties, typename... Args>
	auto getOutputProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputProperties")] != -1);
		return call<R>("getOutputProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Transformer, typename... Args>
	auto newTransformer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newTransformer")] != -1);
		return call<R>("newTransformer", std::forward<Args>(args)...);
	}

};

#endif
