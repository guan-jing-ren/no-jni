#ifndef javax_xml_transform_dom_DOMResult_HPP
#define javax_xml_transform_dom_DOMResult_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::dom::DOMResult : public jObject<::javax::xml::transform::dom::DOMResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_dom / "DOMResult";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FEATURE"), //
	};

	template<typename F = ::java::lang::String>
	static auto FEATURE() {
		static_assert(field_signatures[jField<F>("FEATURE")] != -1);
		return sat<F>("FEATURE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::w3c::dom::Node)>(), //
		jConstructor<::jvoid(::org::w3c::dom::Node, ::java::lang::String)>(), //
		jConstructor<::jvoid(::org::w3c::dom::Node, ::org::w3c::dom::Node)>(), //
		jConstructor<::jvoid(::org::w3c::dom::Node, ::org::w3c::dom::Node, ::java::lang::String)>(), //
		jMethod<::org::w3c::dom::Node()>("getNextSibling"), //
		jMethod<::org::w3c::dom::Node()>("getNode"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setNextSibling"), //
		jMethod<::jvoid(::org::w3c::dom::Node)>("setNode"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNextSibling")] != -1);
		return call<R>("getNextSibling", forward<Args>(args)...);
	}

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNode")] != -1);
		return call<R>("getNode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNextSibling(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNextSibling")] != -1);
		return call<R>("setNextSibling", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNode")] != -1);
		return call<R>("setNode", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", forward<Args>(args)...);
	}

};

#endif
