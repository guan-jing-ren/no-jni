#ifndef javax_xml_transform_TransformerFactory_HPP
#define javax_xml_transform_TransformerFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::transform::TransformerFactory : public jObject<::javax::xml::transform::TransformerFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform / "TransformerFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::transform::Source(::javax::xml::transform::Source, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("getAssociatedStylesheet"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::xml::transform::ErrorListener()>("getErrorListener"), //
		jMethod<::jboolean(::java::lang::String)>("getFeature"), //
		jMethod<::javax::xml::transform::URIResolver()>("getURIResolver"), //
		jMethod<::javax::xml::transform::TransformerFactory()>("newInstance"), //
		jMethod<::javax::xml::transform::TransformerFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::javax::xml::transform::Templates(::javax::xml::transform::Source)>("newTemplates"), //
		jMethod<::javax::xml::transform::Transformer()>("newTransformer"), //
		jMethod<::javax::xml::transform::Transformer(::javax::xml::transform::Source)>("newTransformer"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setAttribute"), //
		jMethod<::jvoid(::javax::xml::transform::ErrorListener)>("setErrorListener"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setFeature"), //
		jMethod<::jvoid(::javax::xml::transform::URIResolver)>("setURIResolver"), //
	};

	template<typename R = ::javax::xml::transform::Source, typename... Args>
	auto getAssociatedStylesheet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAssociatedStylesheet")] != -1);
		return call<R>("getAssociatedStylesheet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::ErrorListener, typename... Args>
	auto getErrorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getErrorListener")] != -1);
		return call<R>("getErrorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeature")] != -1);
		return call<R>("getFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::URIResolver, typename... Args>
	auto getURIResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURIResolver")] != -1);
		return call<R>("getURIResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::TransformerFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Templates, typename... Args>
	auto newTemplates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newTemplates")] != -1);
		return call<R>("newTemplates", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Transformer, typename... Args>
	auto newTransformer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newTransformer")] != -1);
		return call<R>("newTransformer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setErrorListener")] != -1);
		return call<R>("setErrorListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFeature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFeature")] != -1);
		return call<R>("setFeature", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURIResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURIResolver")] != -1);
		return call<R>("setURIResolver", std::forward<Args>(args)...);
	}

};

#endif
