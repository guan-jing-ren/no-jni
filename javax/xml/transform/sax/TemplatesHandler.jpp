#ifndef javax_xml_transform_sax_TemplatesHandler_HPP
#define javax_xml_transform_sax_TemplatesHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::sax::TemplatesHandler : public jObject<::javax::xml::transform::sax::TemplatesHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_sax / "TemplatesHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid()>("endDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("endElement"), //
		jMethod<::jvoid(::java::lang::String)>("endPrefixMapping"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::javax::xml::transform::Templates()>("getTemplates"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("ignorableWhitespace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("processingInstruction"), //
		jMethod<::jvoid(::org::xml::sax::Locator)>("setDocumentLocator"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
		jMethod<::jvoid(::java::lang::String)>("skippedEntity"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::xml::sax::Attributes)>("startElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("startPrefixMapping"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDocument")] != -1);
		return call<R>("endDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endPrefixMapping")] != -1);
		return call<R>("endPrefixMapping", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Templates, typename... Args>
	auto getTemplates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTemplates")] != -1);
		return call<R>("getTemplates", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ignorableWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ignorableWhitespace")] != -1);
		return call<R>("ignorableWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processingInstruction")] != -1);
		return call<R>("processingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentLocator")] != -1);
		return call<R>("setDocumentLocator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skippedEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skippedEntity")] != -1);
		return call<R>("skippedEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startPrefixMapping")] != -1);
		return call<R>("startPrefixMapping", std::forward<Args>(args)...);
	}

};

#endif
