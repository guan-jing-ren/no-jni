#ifndef javax_xml_transform_sax_TransformerHandler_HPP
#define javax_xml_transform_sax_TransformerHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::sax::TransformerHandler : public jObject<::javax::xml::transform::sax::TransformerHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_sax / "TransformerHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("comment"), //
		jMethod<::jvoid()>("endCDATA"), //
		jMethod<::jvoid()>("endDTD"), //
		jMethod<::jvoid()>("endDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("endElement"), //
		jMethod<::jvoid(::java::lang::String)>("endEntity"), //
		jMethod<::jvoid(::java::lang::String)>("endPrefixMapping"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::javax::xml::transform::Transformer()>("getTransformer"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("ignorableWhitespace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("notationDecl"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("processingInstruction"), //
		jMethod<::jvoid(::org::xml::sax::Locator)>("setDocumentLocator"), //
		jMethod<::jvoid(::javax::xml::transform::Result)>("setResult"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
		jMethod<::jvoid(::java::lang::String)>("skippedEntity"), //
		jMethod<::jvoid()>("startCDATA"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("startDTD"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::xml::sax::Attributes)>("startElement"), //
		jMethod<::jvoid(::java::lang::String)>("startEntity"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("startPrefixMapping"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("unparsedEntityDecl"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto comment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("comment")] != -1);
		return call<R>("comment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endCDATA")] != -1);
		return call<R>("endCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDTD")] != -1);
		return call<R>("endDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endDocument")] != -1);
		return call<R>("endDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endEntity")] != -1);
		return call<R>("endEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endPrefixMapping")] != -1);
		return call<R>("endPrefixMapping", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Transformer, typename... Args>
	auto getTransformer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransformer")] != -1);
		return call<R>("getTransformer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto ignorableWhitespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ignorableWhitespace")] != -1);
		return call<R>("ignorableWhitespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto notationDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notationDecl")] != -1);
		return call<R>("notationDecl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processingInstruction")] != -1);
		return call<R>("processingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDocumentLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDocumentLocator")] != -1);
		return call<R>("setDocumentLocator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResult")] != -1);
		return call<R>("setResult", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto skippedEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skippedEntity")] != -1);
		return call<R>("skippedEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startCDATA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startCDATA")] != -1);
		return call<R>("startCDATA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDTD")] != -1);
		return call<R>("startDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startEntity")] != -1);
		return call<R>("startEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startPrefixMapping(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startPrefixMapping")] != -1);
		return call<R>("startPrefixMapping", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unparsedEntityDecl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unparsedEntityDecl")] != -1);
		return call<R>("unparsedEntityDecl", std::forward<Args>(args)...);
	}

};

#endif
