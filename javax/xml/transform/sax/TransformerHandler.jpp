#ifndef javax_xml_transform_sax_TransformerHandler_HPP
#define javax_xml_transform_sax_TransformerHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::sax::TransformerHandler : public jObject<::javax::xml::transform::sax::TransformerHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_sax / "TransformerHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::javax::xml::transform::Transformer()>("getTransformer"), //
		jMethod<::jvoid(::javax::xml::transform::Result)>("setResult"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::Transformer, typename... Args>
	auto getTransformer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTransformer")] != -1);
		return call<R>("getTransformer", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setResult")] != -1);
		return call<R>("setResult", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", forward<Args>(args)...);
	}

};

#endif
