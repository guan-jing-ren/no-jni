#ifndef javax_xml_transform_TransformerException_HPP
#define javax_xml_transform_TransformerException_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::transform::TransformerException : public jObject<::javax::xml::transform::TransformerException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform / "TransformerException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::xml::transform::SourceLocator)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::xml::transform::SourceLocator, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::Throwable)>(), //
		jMethod<::java::lang::Throwable()>("getCause"), //
		jMethod<::java::lang::Throwable()>("getException"), //
		jMethod<::java::lang::String()>("getLocationAsString"), //
		jMethod<::javax::xml::transform::SourceLocator()>("getLocator"), //
		jMethod<::java::lang::String()>("getMessageAndLocation"), //
		jMethod<::java::lang::Throwable(::java::lang::Throwable)>("initCause"), //
		jMethod<::jvoid()>("printStackTrace"), //
		jMethod<::jvoid(::java::io::PrintStream)>("printStackTrace"), //
		jMethod<::jvoid(::java::io::PrintWriter)>("printStackTrace"), //
		jMethod<::jvoid(::javax::xml::transform::SourceLocator)>("setLocator"), //
	};

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return call<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getException")] != -1);
		return call<R>("getException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocationAsString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocationAsString")] != -1);
		return call<R>("getLocationAsString", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::SourceLocator, typename... Args>
	auto getLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocator")] != -1);
		return call<R>("getLocator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMessageAndLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageAndLocation")] != -1);
		return call<R>("getMessageAndLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto initCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initCause")] != -1);
		return call<R>("initCause", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printStackTrace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printStackTrace")] != -1);
		return call<R>("printStackTrace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocator")] != -1);
		return call<R>("setLocator", std::forward<Args>(args)...);
	}

};

#endif
