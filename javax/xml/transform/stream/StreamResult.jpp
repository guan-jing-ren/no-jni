#ifndef javax_xml_transform_stream_StreamResult_HPP
#define javax_xml_transform_stream_StreamResult_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::stream::StreamResult : public jObject<::javax::xml::transform::stream::StreamResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_stream / "StreamResult";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FEATURE"), //
		jField<::java::lang::String>("PI_DISABLE_OUTPUT_ESCAPING"), //
		jField<::java::lang::String>("PI_ENABLE_OUTPUT_ESCAPING"), //
	};

	template<typename F = ::java::lang::String>
	static auto FEATURE() {
		static_assert(field_signatures[jField<F>("FEATURE")] != -1);
		return sat<F>("FEATURE");
	}

	template<typename F = ::java::lang::String>
	static auto PI_DISABLE_OUTPUT_ESCAPING() {
		static_assert(field_signatures[jField<F>("PI_DISABLE_OUTPUT_ESCAPING")] != -1);
		return sat<F>("PI_DISABLE_OUTPUT_ESCAPING");
	}

	template<typename F = ::java::lang::String>
	static auto PI_ENABLE_OUTPUT_ESCAPING() {
		static_assert(field_signatures[jField<F>("PI_ENABLE_OUTPUT_ESCAPING")] != -1);
		return sat<F>("PI_ENABLE_OUTPUT_ESCAPING");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::OutputStream)>(), //
		jConstructor<::jvoid(::java::io::Writer)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::io::OutputStream()>("getOutputStream"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::java::io::Writer()>("getWriter"), //
		jMethod<::jvoid(::java::io::OutputStream)>("setOutputStream"), //
		jMethod<::jvoid(::java::io::File)>("setSystemId"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
		jMethod<::jvoid(::java::io::Writer)>("setWriter"), //
	};

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputStream")] != -1);
		return call<R>("getOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Writer, typename... Args>
	auto getWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWriter")] != -1);
		return call<R>("getWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputStream")] != -1);
		return call<R>("setOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWriter")] != -1);
		return call<R>("setWriter", std::forward<Args>(args)...);
	}

};

#endif
