#ifndef javax_xml_transform_stream_StreamSource_HPP
#define javax_xml_transform_stream_StreamSource_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::stream::StreamSource : public jObject<::javax::xml::transform::stream::StreamSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_stream / "StreamSource";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FEATURE"), //
	};

	template<typename F = ::java::lang::String>
	static auto FEATURE() {
		static_assert(field_signatures[jField<F>("FEATURE")] != -1);
		return sat<F>("FEATURE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::io::InputStream, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::io::Reader)>(), //
		jConstructor<::jvoid(::java::io::Reader, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::java::lang::String()>("getPublicId"), //
		jMethod<::java::io::Reader()>("getReader"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::jvoid(::java::io::InputStream)>("setInputStream"), //
		jMethod<::jvoid(::java::lang::String)>("setPublicId"), //
		jMethod<::jvoid(::java::io::Reader)>("setReader"), //
		jMethod<::jvoid(::java::io::File)>("setSystemId"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPublicId")] != -1);
		return call<R>("getPublicId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReader")] != -1);
		return call<R>("getReader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputStream")] != -1);
		return call<R>("setInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPublicId")] != -1);
		return call<R>("setPublicId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReader")] != -1);
		return call<R>("setReader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", std::forward<Args>(args)...);
	}

};

#endif
