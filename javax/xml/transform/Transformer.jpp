#ifndef javax_xml_transform_Transformer_HPP
#define javax_xml_transform_Transformer_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::transform::Transformer : public jObject<::javax::xml::transform::Transformer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform / "Transformer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clearParameters"), //
		jMethod<::javax::xml::transform::ErrorListener()>("getErrorListener"), //
		jMethod<::java::util::Properties()>("getOutputProperties"), //
		jMethod<::java::lang::String(::java::lang::String)>("getOutputProperty"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getParameter"), //
		jMethod<::javax::xml::transform::URIResolver()>("getURIResolver"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::javax::xml::transform::ErrorListener)>("setErrorListener"), //
		jMethod<::jvoid(::java::util::Properties)>("setOutputProperties"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setOutputProperty"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setParameter"), //
		jMethod<::jvoid(::javax::xml::transform::URIResolver)>("setURIResolver"), //
		jMethod<::jvoid(::javax::xml::transform::Source, ::javax::xml::transform::Result)>("transform"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clearParameters")] != -1);
		return call<R>("clearParameters", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::ErrorListener, typename... Args>
	auto getErrorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getErrorListener")] != -1);
		return call<R>("getErrorListener", forward<Args>(args)...);
	}

	template<typename R = ::java::util::Properties, typename... Args>
	auto getOutputProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputProperties")] != -1);
		return call<R>("getOutputProperties", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutputProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputProperty")] != -1);
		return call<R>("getOutputProperty", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getParameter")] != -1);
		return call<R>("getParameter", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::transform::URIResolver, typename... Args>
	auto getURIResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getURIResolver")] != -1);
		return call<R>("getURIResolver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setErrorListener")] != -1);
		return call<R>("setErrorListener", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOutputProperties")] != -1);
		return call<R>("setOutputProperties", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setOutputProperty")] != -1);
		return call<R>("setOutputProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setParameter")] != -1);
		return call<R>("setParameter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURIResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setURIResolver")] != -1);
		return call<R>("setURIResolver", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", forward<Args>(args)...);
	}

};

#endif
