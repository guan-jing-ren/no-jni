#ifndef javax_xml_transform_OutputKeys_HPP
#define javax_xml_transform_OutputKeys_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::transform::OutputKeys : public jObject<::javax::xml::transform::OutputKeys, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform / "OutputKeys";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CDATA_SECTION_ELEMENTS"), //
		jField<::java::lang::String>("DOCTYPE_PUBLIC"), //
		jField<::java::lang::String>("DOCTYPE_SYSTEM"), //
		jField<::java::lang::String>("ENCODING"), //
		jField<::java::lang::String>("INDENT"), //
		jField<::java::lang::String>("MEDIA_TYPE"), //
		jField<::java::lang::String>("METHOD"), //
		jField<::java::lang::String>("OMIT_XML_DECLARATION"), //
		jField<::java::lang::String>("STANDALONE"), //
		jField<::java::lang::String>("VERSION"), //
	};

	template<typename F = ::java::lang::String>
	static auto CDATA_SECTION_ELEMENTS() {
		static_assert(field_signatures[jField<F>("CDATA_SECTION_ELEMENTS")] != -1);
		return sat<F>("CDATA_SECTION_ELEMENTS");
	}

	template<typename F = ::java::lang::String>
	static auto DOCTYPE_PUBLIC() {
		static_assert(field_signatures[jField<F>("DOCTYPE_PUBLIC")] != -1);
		return sat<F>("DOCTYPE_PUBLIC");
	}

	template<typename F = ::java::lang::String>
	static auto DOCTYPE_SYSTEM() {
		static_assert(field_signatures[jField<F>("DOCTYPE_SYSTEM")] != -1);
		return sat<F>("DOCTYPE_SYSTEM");
	}

	template<typename F = ::java::lang::String>
	static auto ENCODING() {
		static_assert(field_signatures[jField<F>("ENCODING")] != -1);
		return sat<F>("ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto INDENT() {
		static_assert(field_signatures[jField<F>("INDENT")] != -1);
		return sat<F>("INDENT");
	}

	template<typename F = ::java::lang::String>
	static auto MEDIA_TYPE() {
		static_assert(field_signatures[jField<F>("MEDIA_TYPE")] != -1);
		return sat<F>("MEDIA_TYPE");
	}

	template<typename F = ::java::lang::String>
	static auto METHOD() {
		static_assert(field_signatures[jField<F>("METHOD")] != -1);
		return sat<F>("METHOD");
	}

	template<typename F = ::java::lang::String>
	static auto OMIT_XML_DECLARATION() {
		static_assert(field_signatures[jField<F>("OMIT_XML_DECLARATION")] != -1);
		return sat<F>("OMIT_XML_DECLARATION");
	}

	template<typename F = ::java::lang::String>
	static auto STANDALONE() {
		static_assert(field_signatures[jField<F>("STANDALONE")] != -1);
		return sat<F>("STANDALONE");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION() {
		static_assert(field_signatures[jField<F>("VERSION")] != -1);
		return sat<F>("VERSION");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
