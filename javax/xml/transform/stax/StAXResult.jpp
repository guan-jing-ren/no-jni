#ifndef javax_xml_transform_stax_StAXResult_HPP
#define javax_xml_transform_stax_StAXResult_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::transform::stax::StAXResult : public jObject<::javax::xml::transform::stax::StAXResult, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_transform_stax / "StAXResult";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FEATURE"), //
	};

	template<typename F = ::java::lang::String>
	static auto FEATURE() {
		static_assert(field_signatures[jField<F>("FEATURE")] != -1);
		return sat<F>("FEATURE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::xml::stream::XMLEventWriter)>(), //
		jConstructor<::jvoid(::javax::xml::stream::XMLStreamWriter)>(), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::javax::xml::stream::XMLEventWriter()>("getXMLEventWriter"), //
		jMethod<::javax::xml::stream::XMLStreamWriter()>("getXMLStreamWriter"), //
		jMethod<::jvoid(::java::lang::String)>("setSystemId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLEventWriter, typename... Args>
	auto getXMLEventWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMLEventWriter")] != -1);
		return call<R>("getXMLEventWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLStreamWriter, typename... Args>
	auto getXMLStreamWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMLStreamWriter")] != -1);
		return call<R>("getXMLStreamWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSystemId")] != -1);
		return call<R>("setSystemId", std::forward<Args>(args)...);
	}

};

#endif
