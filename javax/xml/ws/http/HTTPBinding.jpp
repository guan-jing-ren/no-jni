#ifndef javax_xml_ws_http_HTTPBinding_HPP
#define javax_xml_ws_http_HTTPBinding_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::http::HTTPBinding : public jObject<::javax::xml::ws::http::HTTPBinding, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_http / "HTTPBinding";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("HTTP_BINDING"), //
	};

	template<typename F = ::java::lang::String>
	static auto HTTP_BINDING() {
		static_assert(field_signatures[jField<F>("HTTP_BINDING")] != -1);
		return sat<F>("HTTP_BINDING");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getBindingID"), //
		jMethod<::java::util::List()>("getHandlerChain"), //
		jMethod<::jvoid(::java::util::List)>("setHandlerChain"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBindingID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBindingID")] != -1);
		return call<R>("getBindingID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getHandlerChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandlerChain")] != -1);
		return call<R>("getHandlerChain", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHandlerChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHandlerChain")] != -1);
		return call<R>("setHandlerChain", std::forward<Args>(args)...);
	}

};

#endif
