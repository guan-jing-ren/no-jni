#ifndef javax_xml_ws_spi_ServiceDelegate_HPP
#define javax_xml_ws_spi_ServiceDelegate_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::spi::ServiceDelegate : public jObject<::javax::xml::ws::spi::ServiceDelegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_spi / "ServiceDelegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::xml::namespace_::QName, ::java::lang::String, ::java::lang::String)>("addPort"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::namespace_::QName, ::java::lang::Class, ::javax::xml::ws::Service$Mode)>("createDispatch"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::namespace_::QName, ::java::lang::Class, ::javax::xml::ws::Service$Mode, ::javax::xml::ws::WebServiceFeature *)>("createDispatch"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::namespace_::QName, ::javax::xml::bind::JAXBContext, ::javax::xml::ws::Service$Mode)>("createDispatch"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::namespace_::QName, ::javax::xml::bind::JAXBContext, ::javax::xml::ws::Service$Mode, ::javax::xml::ws::WebServiceFeature *)>("createDispatch"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::ws::EndpointReference, ::java::lang::Class, ::javax::xml::ws::Service$Mode, ::javax::xml::ws::WebServiceFeature *)>("createDispatch"), //
		jMethod<::javax::xml::ws::Dispatch(::javax::xml::ws::EndpointReference, ::javax::xml::bind::JAXBContext, ::javax::xml::ws::Service$Mode, ::javax::xml::ws::WebServiceFeature *)>("createDispatch"), //
		jMethod<::java::util::concurrent::Executor()>("getExecutor"), //
		jMethod<::javax::xml::ws::handler::HandlerResolver()>("getHandlerResolver"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("getPort"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::javax::xml::ws::WebServiceFeature *)>("getPort"), //
		jMethod<::java::lang::Object(::javax::xml::namespace_::QName, ::java::lang::Class)>("getPort"), //
		jMethod<::java::lang::Object(::javax::xml::namespace_::QName, ::java::lang::Class, ::javax::xml::ws::WebServiceFeature *)>("getPort"), //
		jMethod<::java::lang::Object(::javax::xml::ws::EndpointReference, ::java::lang::Class, ::javax::xml::ws::WebServiceFeature *)>("getPort"), //
		jMethod<::java::util::Iterator()>("getPorts"), //
		jMethod<::javax::xml::namespace_::QName()>("getServiceName"), //
		jMethod<::java::net::URL()>("getWSDLDocumentLocation"), //
		jMethod<::jvoid(::java::util::concurrent::Executor)>("setExecutor"), //
		jMethod<::jvoid(::javax::xml::ws::handler::HandlerResolver)>("setHandlerResolver"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPort")] != -1);
		return call<R>("addPort", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::Dispatch, typename... Args>
	auto createDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDispatch")] != -1);
		return call<R>("createDispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::concurrent::Executor, typename... Args>
	auto getExecutor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExecutor")] != -1);
		return call<R>("getExecutor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::handler::HandlerResolver, typename... Args>
	auto getHandlerResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandlerResolver")] != -1);
		return call<R>("getHandlerResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getPorts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPorts")] != -1);
		return call<R>("getPorts", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getServiceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceName")] != -1);
		return call<R>("getServiceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto getWSDLDocumentLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWSDLDocumentLocation")] != -1);
		return call<R>("getWSDLDocumentLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExecutor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExecutor")] != -1);
		return call<R>("setExecutor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHandlerResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHandlerResolver")] != -1);
		return call<R>("setHandlerResolver", std::forward<Args>(args)...);
	}

};

#endif
