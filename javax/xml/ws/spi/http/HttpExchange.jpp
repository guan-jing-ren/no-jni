#ifndef javax_xml_ws_spi_http_HttpExchange_HPP
#define javax_xml_ws_spi_http_HttpExchange_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::xml::ws::spi::http::HttpExchange : public jObject<::javax::xml::ws::spi::http::HttpExchange, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_spi_http / "HttpExchange";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("REQUEST_CIPHER_SUITE"), //
		jField<::java::lang::String>("REQUEST_KEY_SIZE"), //
		jField<::java::lang::String>("REQUEST_X509CERTIFICATE"), //
	};

	template<typename F = ::java::lang::String>
	static auto REQUEST_CIPHER_SUITE() {
		static_assert(field_signatures[jField<F>("REQUEST_CIPHER_SUITE")] != -1);
		return sat<F>("REQUEST_CIPHER_SUITE");
	}

	template<typename F = ::java::lang::String>
	static auto REQUEST_KEY_SIZE() {
		static_assert(field_signatures[jField<F>("REQUEST_KEY_SIZE")] != -1);
		return sat<F>("REQUEST_KEY_SIZE");
	}

	template<typename F = ::java::lang::String>
	static auto REQUEST_X509CERTIFICATE() {
		static_assert(field_signatures[jField<F>("REQUEST_X509CERTIFICATE")] != -1);
		return sat<F>("REQUEST_X509CERTIFICATE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("addResponseHeader"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::java::util::Set()>("getAttributeNames"), //
		jMethod<::java::lang::String()>("getContextPath"), //
		jMethod<::javax::xml::ws::spi::http::HttpContext()>("getHttpContext"), //
		jMethod<::java::net::InetSocketAddress()>("getLocalAddress"), //
		jMethod<::java::lang::String()>("getPathInfo"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::lang::String()>("getQueryString"), //
		jMethod<::java::net::InetSocketAddress()>("getRemoteAddress"), //
		jMethod<::java::io::InputStream()>("getRequestBody"), //
		jMethod<::java::lang::String(::java::lang::String)>("getRequestHeader"), //
		jMethod<::java::util::Map()>("getRequestHeaders"), //
		jMethod<::java::lang::String()>("getRequestMethod"), //
		jMethod<::java::lang::String()>("getRequestURI"), //
		jMethod<::java::io::OutputStream()>("getResponseBody"), //
		jMethod<::java::util::Map()>("getResponseHeaders"), //
		jMethod<::java::lang::String()>("getScheme"), //
		jMethod<::java::security::Principal()>("getUserPrincipal"), //
		jMethod<::jboolean(::java::lang::String)>("isUserInRole"), //
		jMethod<::jvoid(::jint)>("setStatus"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addResponseHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addResponseHeader")] != -1);
		return call<R>("addResponseHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getAttributeNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNames")] != -1);
		return call<R>("getAttributeNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getContextPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContextPath")] != -1);
		return call<R>("getContextPath", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::spi::http::HttpContext, typename... Args>
	auto getHttpContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHttpContext")] != -1);
		return call<R>("getHttpContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPathInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPathInfo")] != -1);
		return call<R>("getPathInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getQueryString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueryString")] != -1);
		return call<R>("getQueryString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto getRemoteAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoteAddress")] != -1);
		return call<R>("getRemoteAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getRequestBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestBody")] != -1);
		return call<R>("getRequestBody", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestHeader")] != -1);
		return call<R>("getRequestHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getRequestHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestHeaders")] != -1);
		return call<R>("getRequestHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestMethod")] != -1);
		return call<R>("getRequestMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestURI")] != -1);
		return call<R>("getRequestURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getResponseBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseBody")] != -1);
		return call<R>("getResponseBody", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getResponseHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseHeaders")] != -1);
		return call<R>("getResponseHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScheme(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScheme")] != -1);
		return call<R>("getScheme", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Principal, typename... Args>
	auto getUserPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserPrincipal")] != -1);
		return call<R>("getUserPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUserInRole(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUserInRole")] != -1);
		return call<R>("isUserInRole", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStatus")] != -1);
		return call<R>("setStatus", std::forward<Args>(args)...);
	}

};

#endif
