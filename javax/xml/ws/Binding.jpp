#ifndef javax_xml_ws_Binding_HPP
#define javax_xml_ws_Binding_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::ws::Binding : public jObject<::javax::xml::ws::Binding, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws / "Binding";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getBindingID"), //
		jMethod<::java::util::List()>("getHandlerChain"), //
		jMethod<::jvoid(::java::util::List)>("setHandlerChain"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBindingID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBindingID")] != -1);
		return call<R>("getBindingID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getHandlerChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandlerChain")] != -1);
		return call<R>("getHandlerChain", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHandlerChain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHandlerChain")] != -1);
		return call<R>("setHandlerChain", std::forward<Args>(args)...);
	}

};

#endif
