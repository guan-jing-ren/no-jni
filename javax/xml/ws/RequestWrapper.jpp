#ifndef javax_xml_ws_RequestWrapper_HPP
#define javax_xml_ws_RequestWrapper_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::ws::RequestWrapper : public jObject<::javax::xml::ws::RequestWrapper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws / "RequestWrapper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("className"), //
		jMethod<::java::lang::String()>("localName"), //
		jMethod<::java::lang::String()>("partName"), //
		jMethod<::java::lang::String()>("targetNamespace"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto className(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("className")] != -1);
		return call<R>("className", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto localName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("localName")] != -1);
		return call<R>("localName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto partName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("partName")] != -1);
		return call<R>("partName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto targetNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("targetNamespace")] != -1);
		return call<R>("targetNamespace", forward<Args>(args)...);
	}

};

#endif
