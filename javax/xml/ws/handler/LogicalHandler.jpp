#ifndef javax_xml_ws_handler_LogicalHandler_HPP
#define javax_xml_ws_handler_LogicalHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::handler::LogicalHandler : public jObject<::javax::xml::ws::handler::LogicalHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_handler / "LogicalHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::xml::ws::handler::MessageContext)>("close"), //
		jMethod<::jboolean(::javax::xml::ws::handler::MessageContext)>("handleFault"), //
		jMethod<::jboolean(::javax::xml::ws::handler::MessageContext)>("handleMessage"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handleFault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleFault")] != -1);
		return call<R>("handleFault", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto handleMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMessage")] != -1);
		return call<R>("handleMessage", std::forward<Args>(args)...);
	}

};

#endif
