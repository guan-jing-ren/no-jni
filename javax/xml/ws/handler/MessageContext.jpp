#ifndef javax_xml_ws_handler_MessageContext_HPP
#define javax_xml_ws_handler_MessageContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::handler::MessageContext : public jObject<::javax::xml::ws::handler::MessageContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_handler / "MessageContext";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("HTTP_REQUEST_HEADERS"), //
		jField<::java::lang::String>("HTTP_REQUEST_METHOD"), //
		jField<::java::lang::String>("HTTP_RESPONSE_CODE"), //
		jField<::java::lang::String>("HTTP_RESPONSE_HEADERS"), //
		jField<::java::lang::String>("INBOUND_MESSAGE_ATTACHMENTS"), //
		jField<::java::lang::String>("MESSAGE_OUTBOUND_PROPERTY"), //
		jField<::java::lang::String>("OUTBOUND_MESSAGE_ATTACHMENTS"), //
		jField<::java::lang::String>("PATH_INFO"), //
		jField<::java::lang::String>("QUERY_STRING"), //
		jField<::java::lang::String>("REFERENCE_PARAMETERS"), //
		jField<::java::lang::String>("SERVLET_CONTEXT"), //
		jField<::java::lang::String>("SERVLET_REQUEST"), //
		jField<::java::lang::String>("SERVLET_RESPONSE"), //
		jField<::java::lang::String>("WSDL_DESCRIPTION"), //
		jField<::java::lang::String>("WSDL_INTERFACE"), //
		jField<::java::lang::String>("WSDL_OPERATION"), //
		jField<::java::lang::String>("WSDL_PORT"), //
		jField<::java::lang::String>("WSDL_SERVICE"), //
	};

	template<typename F = ::java::lang::String>
	static auto HTTP_REQUEST_HEADERS() {
		static_assert(field_signatures[jField<F>("HTTP_REQUEST_HEADERS")] != -1);
		return sat<F>("HTTP_REQUEST_HEADERS");
	}

	template<typename F = ::java::lang::String>
	static auto HTTP_REQUEST_METHOD() {
		static_assert(field_signatures[jField<F>("HTTP_REQUEST_METHOD")] != -1);
		return sat<F>("HTTP_REQUEST_METHOD");
	}

	template<typename F = ::java::lang::String>
	static auto HTTP_RESPONSE_CODE() {
		static_assert(field_signatures[jField<F>("HTTP_RESPONSE_CODE")] != -1);
		return sat<F>("HTTP_RESPONSE_CODE");
	}

	template<typename F = ::java::lang::String>
	static auto HTTP_RESPONSE_HEADERS() {
		static_assert(field_signatures[jField<F>("HTTP_RESPONSE_HEADERS")] != -1);
		return sat<F>("HTTP_RESPONSE_HEADERS");
	}

	template<typename F = ::java::lang::String>
	static auto INBOUND_MESSAGE_ATTACHMENTS() {
		static_assert(field_signatures[jField<F>("INBOUND_MESSAGE_ATTACHMENTS")] != -1);
		return sat<F>("INBOUND_MESSAGE_ATTACHMENTS");
	}

	template<typename F = ::java::lang::String>
	static auto MESSAGE_OUTBOUND_PROPERTY() {
		static_assert(field_signatures[jField<F>("MESSAGE_OUTBOUND_PROPERTY")] != -1);
		return sat<F>("MESSAGE_OUTBOUND_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto OUTBOUND_MESSAGE_ATTACHMENTS() {
		static_assert(field_signatures[jField<F>("OUTBOUND_MESSAGE_ATTACHMENTS")] != -1);
		return sat<F>("OUTBOUND_MESSAGE_ATTACHMENTS");
	}

	template<typename F = ::java::lang::String>
	static auto PATH_INFO() {
		static_assert(field_signatures[jField<F>("PATH_INFO")] != -1);
		return sat<F>("PATH_INFO");
	}

	template<typename F = ::java::lang::String>
	static auto QUERY_STRING() {
		static_assert(field_signatures[jField<F>("QUERY_STRING")] != -1);
		return sat<F>("QUERY_STRING");
	}

	template<typename F = ::java::lang::String>
	static auto REFERENCE_PARAMETERS() {
		static_assert(field_signatures[jField<F>("REFERENCE_PARAMETERS")] != -1);
		return sat<F>("REFERENCE_PARAMETERS");
	}

	template<typename F = ::java::lang::String>
	static auto SERVLET_CONTEXT() {
		static_assert(field_signatures[jField<F>("SERVLET_CONTEXT")] != -1);
		return sat<F>("SERVLET_CONTEXT");
	}

	template<typename F = ::java::lang::String>
	static auto SERVLET_REQUEST() {
		static_assert(field_signatures[jField<F>("SERVLET_REQUEST")] != -1);
		return sat<F>("SERVLET_REQUEST");
	}

	template<typename F = ::java::lang::String>
	static auto SERVLET_RESPONSE() {
		static_assert(field_signatures[jField<F>("SERVLET_RESPONSE")] != -1);
		return sat<F>("SERVLET_RESPONSE");
	}

	template<typename F = ::java::lang::String>
	static auto WSDL_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("WSDL_DESCRIPTION")] != -1);
		return sat<F>("WSDL_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto WSDL_INTERFACE() {
		static_assert(field_signatures[jField<F>("WSDL_INTERFACE")] != -1);
		return sat<F>("WSDL_INTERFACE");
	}

	template<typename F = ::java::lang::String>
	static auto WSDL_OPERATION() {
		static_assert(field_signatures[jField<F>("WSDL_OPERATION")] != -1);
		return sat<F>("WSDL_OPERATION");
	}

	template<typename F = ::java::lang::String>
	static auto WSDL_PORT() {
		static_assert(field_signatures[jField<F>("WSDL_PORT")] != -1);
		return sat<F>("WSDL_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto WSDL_SERVICE() {
		static_assert(field_signatures[jField<F>("WSDL_SERVICE")] != -1);
		return sat<F>("WSDL_SERVICE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("compute"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::Function)>("computeIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::util::function::BiFunction)>("computeIfPresent"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::java::util::function::BiConsumer)>("forEach"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("getOrDefault"), //
		jMethod<::javax::xml::ws::handler::MessageContext$Scope(::java::lang::String)>("getScope"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object, ::java::util::function::BiFunction)>("merge"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("putIfAbsent"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object)>("remove"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jboolean(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("replace"), //
		jMethod<::jvoid(::java::util::function::BiFunction)>("replaceAll"), //
		jMethod<::jvoid(::java::lang::String, ::javax::xml::ws::handler::MessageContext$Scope)>("setScope"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto compute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compute")] != -1);
		return call<R>("compute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfAbsent")] != -1);
		return call<R>("computeIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto computeIfPresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeIfPresent")] != -1);
		return call<R>("computeIfPresent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto forEach(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forEach")] != -1);
		return call<R>("forEach", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrDefault")] != -1);
		return call<R>("getOrDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::handler::MessageContext$Scope, typename... Args>
	auto getScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScope")] != -1);
		return call<R>("getScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto merge(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("merge")] != -1);
		return call<R>("merge", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto putIfAbsent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putIfAbsent")] != -1);
		return call<R>("putIfAbsent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto replace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replace")] != -1);
		return call<R>("replace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto replaceAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replaceAll")] != -1);
		return call<R>("replaceAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScope")] != -1);
		return call<R>("setScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
