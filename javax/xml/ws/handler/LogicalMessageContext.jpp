#ifndef javax_xml_ws_handler_LogicalMessageContext_HPP
#define javax_xml_ws_handler_LogicalMessageContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::handler::LogicalMessageContext : public jObject<::javax::xml::ws::handler::LogicalMessageContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_handler / "LogicalMessageContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clear"), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::java::util::Set()>("entrySet"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::javax::xml::ws::LogicalMessage()>("getMessage"), //
		jMethod<::javax::xml::ws::handler::MessageContext$Scope(::java::lang::String)>("getScope"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::jvoid(::java::util::Map)>("putAll"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("remove"), //
		jMethod<::jvoid(::java::lang::String, ::javax::xml::ws::handler::MessageContext$Scope)>("setScope"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto entrySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entrySet")] != -1);
		return call<R>("entrySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::LogicalMessage, typename... Args>
	auto getMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessage")] != -1);
		return call<R>("getMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::handler::MessageContext$Scope, typename... Args>
	auto getScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScope")] != -1);
		return call<R>("getScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putAll")] != -1);
		return call<R>("putAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScope")] != -1);
		return call<R>("setScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
