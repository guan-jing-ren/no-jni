#ifndef javax_xml_ws_soap_Addressing_HPP
#define javax_xml_ws_soap_Addressing_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::ws::soap::Addressing : public jObject<::javax::xml::ws::soap::Addressing, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_ws_soap / "Addressing";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("enabled"), //
		jMethod<::jboolean()>("required"), //
		jMethod<::javax::xml::ws::soap::AddressingFeature$Responses()>("responses"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto enabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enabled")] != -1);
		return call<R>("enabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto required(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("required")] != -1);
		return call<R>("required", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::ws::soap::AddressingFeature$Responses, typename... Args>
	auto responses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("responses")] != -1);
		return call<R>("responses", std::forward<Args>(args)...);
	}

};

#endif
