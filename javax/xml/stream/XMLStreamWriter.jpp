#ifndef javax_xml_stream_XMLStreamWriter_HPP
#define javax_xml_stream_XMLStreamWriter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLStreamWriter : public jObject<::javax::xml::stream::XMLStreamWriter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLStreamWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::javax::xml::namespace_::NamespaceContext()>("getNamespaceContext"), //
		jMethod<::java::lang::String(::java::lang::String)>("getPrefix"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::jvoid(::java::lang::String)>("setDefaultNamespace"), //
		jMethod<::jvoid(::javax::xml::namespace_::NamespaceContext)>("setNamespaceContext"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setPrefix"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("writeAttribute"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("writeAttribute"), //
		jMethod<::jvoid(::java::lang::String)>("writeCData"), //
		jMethod<::jvoid(::java::lang::String)>("writeCharacters"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("writeCharacters"), //
		jMethod<::jvoid(::java::lang::String)>("writeComment"), //
		jMethod<::jvoid(::java::lang::String)>("writeDTD"), //
		jMethod<::jvoid(::java::lang::String)>("writeDefaultNamespace"), //
		jMethod<::jvoid(::java::lang::String)>("writeEmptyElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeEmptyElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("writeEmptyElement"), //
		jMethod<::jvoid()>("writeEndDocument"), //
		jMethod<::jvoid()>("writeEndElement"), //
		jMethod<::jvoid(::java::lang::String)>("writeEntityRef"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeNamespace"), //
		jMethod<::jvoid(::java::lang::String)>("writeProcessingInstruction"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeProcessingInstruction"), //
		jMethod<::jvoid()>("writeStartDocument"), //
		jMethod<::jvoid(::java::lang::String)>("writeStartDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeStartDocument"), //
		jMethod<::jvoid(::java::lang::String)>("writeStartElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("writeStartElement"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("writeStartElement"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::NamespaceContext, typename... Args>
	auto getNamespaceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceContext")] != -1);
		return call<R>("getNamespaceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultNamespace")] != -1);
		return call<R>("setDefaultNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNamespaceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNamespaceContext")] != -1);
		return call<R>("setNamespaceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrefix")] != -1);
		return call<R>("setPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeAttribute")] != -1);
		return call<R>("writeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeCData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeCData")] != -1);
		return call<R>("writeCData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeCharacters")] != -1);
		return call<R>("writeCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeComment")] != -1);
		return call<R>("writeComment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeDTD")] != -1);
		return call<R>("writeDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeDefaultNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeDefaultNamespace")] != -1);
		return call<R>("writeDefaultNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeEmptyElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeEmptyElement")] != -1);
		return call<R>("writeEmptyElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeEndDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeEndDocument")] != -1);
		return call<R>("writeEndDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeEndElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeEndElement")] != -1);
		return call<R>("writeEndElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeEntityRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeEntityRef")] != -1);
		return call<R>("writeEntityRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeNamespace")] != -1);
		return call<R>("writeNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeProcessingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeProcessingInstruction")] != -1);
		return call<R>("writeProcessingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeStartDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeStartDocument")] != -1);
		return call<R>("writeStartDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeStartElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeStartElement")] != -1);
		return call<R>("writeStartElement", std::forward<Args>(args)...);
	}

};

#endif
