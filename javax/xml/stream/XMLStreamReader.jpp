#ifndef javax_xml_stream_XMLStreamReader_HPP
#define javax_xml_stream_XMLStreamReader_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLStreamReader : public jObject<::javax::xml::stream::XMLStreamReader, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLStreamReader";

	constexpr static Enume field_signatures{
		jField<::jint>("ATTRIBUTE"), //
		jField<::jint>("CDATA"), //
		jField<::jint>("CHARACTERS"), //
		jField<::jint>("COMMENT"), //
		jField<::jint>("DTD"), //
		jField<::jint>("END_DOCUMENT"), //
		jField<::jint>("END_ELEMENT"), //
		jField<::jint>("ENTITY_DECLARATION"), //
		jField<::jint>("ENTITY_REFERENCE"), //
		jField<::jint>("NAMESPACE"), //
		jField<::jint>("NOTATION_DECLARATION"), //
		jField<::jint>("PROCESSING_INSTRUCTION"), //
		jField<::jint>("SPACE"), //
		jField<::jint>("START_DOCUMENT"), //
		jField<::jint>("START_ELEMENT"), //
	};

	template<typename F = ::jint>
	static auto ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("ATTRIBUTE")] != -1);
		return sat<F>("ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto CDATA() {
		static_assert(field_signatures[jField<F>("CDATA")] != -1);
		return sat<F>("CDATA");
	}

	template<typename F = ::jint>
	static auto CHARACTERS() {
		static_assert(field_signatures[jField<F>("CHARACTERS")] != -1);
		return sat<F>("CHARACTERS");
	}

	template<typename F = ::jint>
	static auto COMMENT() {
		static_assert(field_signatures[jField<F>("COMMENT")] != -1);
		return sat<F>("COMMENT");
	}

	template<typename F = ::jint>
	static auto DTD() {
		static_assert(field_signatures[jField<F>("DTD")] != -1);
		return sat<F>("DTD");
	}

	template<typename F = ::jint>
	static auto END_DOCUMENT() {
		static_assert(field_signatures[jField<F>("END_DOCUMENT")] != -1);
		return sat<F>("END_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto END_ELEMENT() {
		static_assert(field_signatures[jField<F>("END_ELEMENT")] != -1);
		return sat<F>("END_ELEMENT");
	}

	template<typename F = ::jint>
	static auto ENTITY_DECLARATION() {
		static_assert(field_signatures[jField<F>("ENTITY_DECLARATION")] != -1);
		return sat<F>("ENTITY_DECLARATION");
	}

	template<typename F = ::jint>
	static auto ENTITY_REFERENCE() {
		static_assert(field_signatures[jField<F>("ENTITY_REFERENCE")] != -1);
		return sat<F>("ENTITY_REFERENCE");
	}

	template<typename F = ::jint>
	static auto NAMESPACE() {
		static_assert(field_signatures[jField<F>("NAMESPACE")] != -1);
		return sat<F>("NAMESPACE");
	}

	template<typename F = ::jint>
	static auto NOTATION_DECLARATION() {
		static_assert(field_signatures[jField<F>("NOTATION_DECLARATION")] != -1);
		return sat<F>("NOTATION_DECLARATION");
	}

	template<typename F = ::jint>
	static auto PROCESSING_INSTRUCTION() {
		static_assert(field_signatures[jField<F>("PROCESSING_INSTRUCTION")] != -1);
		return sat<F>("PROCESSING_INSTRUCTION");
	}

	template<typename F = ::jint>
	static auto SPACE() {
		static_assert(field_signatures[jField<F>("SPACE")] != -1);
		return sat<F>("SPACE");
	}

	template<typename F = ::jint>
	static auto START_DOCUMENT() {
		static_assert(field_signatures[jField<F>("START_DOCUMENT")] != -1);
		return sat<F>("START_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto START_ELEMENT() {
		static_assert(field_signatures[jField<F>("START_ELEMENT")] != -1);
		return sat<F>("START_ELEMENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("getAttributeCount"), //
		jMethod<::java::lang::String(::jint)>("getAttributeLocalName"), //
		jMethod<::javax::xml::namespace_::QName(::jint)>("getAttributeName"), //
		jMethod<::java::lang::String(::jint)>("getAttributeNamespace"), //
		jMethod<::java::lang::String(::jint)>("getAttributePrefix"), //
		jMethod<::java::lang::String(::jint)>("getAttributeType"), //
		jMethod<::java::lang::String(::jint)>("getAttributeValue"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getAttributeValue"), //
		jMethod<::java::lang::String()>("getCharacterEncodingScheme"), //
		jMethod<::java::lang::String()>("getElementText"), //
		jMethod<::java::lang::String()>("getEncoding"), //
		jMethod<::jint()>("getEventType"), //
		jMethod<::java::lang::String()>("getLocalName"), //
		jMethod<::javax::xml::stream::Location()>("getLocation"), //
		jMethod<::javax::xml::namespace_::QName()>("getName"), //
		jMethod<::javax::xml::namespace_::NamespaceContext()>("getNamespaceContext"), //
		jMethod<::jint()>("getNamespaceCount"), //
		jMethod<::java::lang::String(::jint)>("getNamespacePrefix"), //
		jMethod<::java::lang::String()>("getNamespaceURI"), //
		jMethod<::java::lang::String(::jint)>("getNamespaceURI"), //
		jMethod<::java::lang::String(::java::lang::String)>("getNamespaceURI"), //
		jMethod<::java::lang::String()>("getPIData"), //
		jMethod<::java::lang::String()>("getPITarget"), //
		jMethod<::java::lang::String()>("getPrefix"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::java::lang::String()>("getText"), //
		jMethod<::jchar *()>("getTextCharacters"), //
		jMethod<::jint(::jint, ::jchar *, ::jint, ::jint)>("getTextCharacters"), //
		jMethod<::jint()>("getTextLength"), //
		jMethod<::jint()>("getTextStart"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::jboolean()>("hasName"), //
		jMethod<::jboolean()>("hasNext"), //
		jMethod<::jboolean()>("hasText"), //
		jMethod<::jboolean(::jint)>("isAttributeSpecified"), //
		jMethod<::jboolean()>("isCharacters"), //
		jMethod<::jboolean()>("isEndElement"), //
		jMethod<::jboolean()>("isStandalone"), //
		jMethod<::jboolean()>("isStartElement"), //
		jMethod<::jboolean()>("isWhiteSpace"), //
		jMethod<::jint()>("next"), //
		jMethod<::jint()>("nextTag"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::java::lang::String)>("require"), //
		jMethod<::jboolean()>("standaloneSet"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAttributeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeCount")] != -1);
		return call<R>("getAttributeCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeLocalName")] != -1);
		return call<R>("getAttributeLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getAttributeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeName")] != -1);
		return call<R>("getAttributeName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeNamespace")] != -1);
		return call<R>("getAttributeNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributePrefix")] != -1);
		return call<R>("getAttributePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeType")] != -1);
		return call<R>("getAttributeType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeValue")] != -1);
		return call<R>("getAttributeValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCharacterEncodingScheme(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharacterEncodingScheme")] != -1);
		return call<R>("getCharacterEncodingScheme", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getElementText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementText")] != -1);
		return call<R>("getElementText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncoding")] != -1);
		return call<R>("getEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEventType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventType")] != -1);
		return call<R>("getEventType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getLocalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalName")] != -1);
		return call<R>("getLocalName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::Location, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::NamespaceContext, typename... Args>
	auto getNamespaceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceContext")] != -1);
		return call<R>("getNamespaceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNamespaceCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceCount")] != -1);
		return call<R>("getNamespaceCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespacePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespacePrefix")] != -1);
		return call<R>("getNamespacePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceURI")] != -1);
		return call<R>("getNamespaceURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPIData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPIData")] != -1);
		return call<R>("getPIData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPITarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPITarget")] != -1);
		return call<R>("getPITarget", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getText")] != -1);
		return call<R>("getText", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getTextCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextCharacters")] != -1);
		return call<R>("getTextCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextLength")] != -1);
		return call<R>("getTextLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTextStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTextStart")] != -1);
		return call<R>("getTextStart", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasName")] != -1);
		return call<R>("hasName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasText")] != -1);
		return call<R>("hasText", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttributeSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAttributeSpecified")] != -1);
		return call<R>("isAttributeSpecified", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCharacters")] != -1);
		return call<R>("isCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEndElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEndElement")] != -1);
		return call<R>("isEndElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandalone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStandalone")] != -1);
		return call<R>("isStandalone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStartElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStartElement")] != -1);
		return call<R>("isStartElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWhiteSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWhiteSpace")] != -1);
		return call<R>("isWhiteSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto nextTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTag")] != -1);
		return call<R>("nextTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto require(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("require")] != -1);
		return call<R>("require", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto standaloneSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("standaloneSet")] != -1);
		return call<R>("standaloneSet", std::forward<Args>(args)...);
	}

};

#endif
