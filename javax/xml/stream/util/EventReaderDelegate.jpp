#ifndef javax_xml_stream_util_EventReaderDelegate_HPP
#define javax_xml_stream_util_EventReaderDelegate_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::util::EventReaderDelegate : public jObject<::javax::xml::stream::util::EventReaderDelegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_util / "EventReaderDelegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::xml::stream::XMLEventReader)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::String()>("getElementText"), //
		jMethod<::javax::xml::stream::XMLEventReader()>("getParent"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::jboolean()>("hasNext"), //
		jMethod<::java::lang::Object()>("next"), //
		jMethod<::javax::xml::stream::events::XMLEvent()>("nextEvent"), //
		jMethod<::javax::xml::stream::events::XMLEvent()>("nextTag"), //
		jMethod<::javax::xml::stream::events::XMLEvent()>("peek"), //
		jMethod<::jvoid()>("remove"), //
		jMethod<::jvoid(::javax::xml::stream::XMLEventReader)>("setParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getElementText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementText")] != -1);
		return call<R>("getElementText", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLEventReader, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::XMLEvent, typename... Args>
	auto nextEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextEvent")] != -1);
		return call<R>("nextEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::XMLEvent, typename... Args>
	auto nextTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextTag")] != -1);
		return call<R>("nextTag", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::XMLEvent, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

};

#endif
