#ifndef javax_xml_stream_XMLEventWriter_HPP
#define javax_xml_stream_XMLEventWriter_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLEventWriter : public jObject<::javax::xml::stream::XMLEventWriter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLEventWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::xml::stream::XMLEventReader)>("add"), //
		jMethod<::jvoid(::javax::xml::stream::events::XMLEvent)>("add"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::javax::xml::namespace_::NamespaceContext()>("getNamespaceContext"), //
		jMethod<::java::lang::String(::java::lang::String)>("getPrefix"), //
		jMethod<::jvoid(::java::lang::String)>("setDefaultNamespace"), //
		jMethod<::jvoid(::javax::xml::namespace_::NamespaceContext)>("setNamespaceContext"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setPrefix"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::NamespaceContext, typename... Args>
	auto getNamespaceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceContext")] != -1);
		return call<R>("getNamespaceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultNamespace")] != -1);
		return call<R>("setDefaultNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNamespaceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNamespaceContext")] != -1);
		return call<R>("setNamespaceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrefix")] != -1);
		return call<R>("setPrefix", std::forward<Args>(args)...);
	}

};

#endif
