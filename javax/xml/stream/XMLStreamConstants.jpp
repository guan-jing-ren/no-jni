#ifndef javax_xml_stream_XMLStreamConstants_HPP
#define javax_xml_stream_XMLStreamConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLStreamConstants : public jObject<::javax::xml::stream::XMLStreamConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLStreamConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("ATTRIBUTE"), //
		jField<::jint>("CDATA"), //
		jField<::jint>("CHARACTERS"), //
		jField<::jint>("COMMENT"), //
		jField<::jint>("DTD"), //
		jField<::jint>("END_DOCUMENT"), //
		jField<::jint>("END_ELEMENT"), //
		jField<::jint>("ENTITY_DECLARATION"), //
		jField<::jint>("ENTITY_REFERENCE"), //
		jField<::jint>("NAMESPACE"), //
		jField<::jint>("NOTATION_DECLARATION"), //
		jField<::jint>("PROCESSING_INSTRUCTION"), //
		jField<::jint>("SPACE"), //
		jField<::jint>("START_DOCUMENT"), //
		jField<::jint>("START_ELEMENT"), //
	};

	template<typename F = ::jint>
	static auto ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("ATTRIBUTE")] != -1);
		return sat<F>("ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto CDATA() {
		static_assert(field_signatures[jField<F>("CDATA")] != -1);
		return sat<F>("CDATA");
	}

	template<typename F = ::jint>
	static auto CHARACTERS() {
		static_assert(field_signatures[jField<F>("CHARACTERS")] != -1);
		return sat<F>("CHARACTERS");
	}

	template<typename F = ::jint>
	static auto COMMENT() {
		static_assert(field_signatures[jField<F>("COMMENT")] != -1);
		return sat<F>("COMMENT");
	}

	template<typename F = ::jint>
	static auto DTD() {
		static_assert(field_signatures[jField<F>("DTD")] != -1);
		return sat<F>("DTD");
	}

	template<typename F = ::jint>
	static auto END_DOCUMENT() {
		static_assert(field_signatures[jField<F>("END_DOCUMENT")] != -1);
		return sat<F>("END_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto END_ELEMENT() {
		static_assert(field_signatures[jField<F>("END_ELEMENT")] != -1);
		return sat<F>("END_ELEMENT");
	}

	template<typename F = ::jint>
	static auto ENTITY_DECLARATION() {
		static_assert(field_signatures[jField<F>("ENTITY_DECLARATION")] != -1);
		return sat<F>("ENTITY_DECLARATION");
	}

	template<typename F = ::jint>
	static auto ENTITY_REFERENCE() {
		static_assert(field_signatures[jField<F>("ENTITY_REFERENCE")] != -1);
		return sat<F>("ENTITY_REFERENCE");
	}

	template<typename F = ::jint>
	static auto NAMESPACE() {
		static_assert(field_signatures[jField<F>("NAMESPACE")] != -1);
		return sat<F>("NAMESPACE");
	}

	template<typename F = ::jint>
	static auto NOTATION_DECLARATION() {
		static_assert(field_signatures[jField<F>("NOTATION_DECLARATION")] != -1);
		return sat<F>("NOTATION_DECLARATION");
	}

	template<typename F = ::jint>
	static auto PROCESSING_INSTRUCTION() {
		static_assert(field_signatures[jField<F>("PROCESSING_INSTRUCTION")] != -1);
		return sat<F>("PROCESSING_INSTRUCTION");
	}

	template<typename F = ::jint>
	static auto SPACE() {
		static_assert(field_signatures[jField<F>("SPACE")] != -1);
		return sat<F>("SPACE");
	}

	template<typename F = ::jint>
	static auto START_DOCUMENT() {
		static_assert(field_signatures[jField<F>("START_DOCUMENT")] != -1);
		return sat<F>("START_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto START_ELEMENT() {
		static_assert(field_signatures[jField<F>("START_ELEMENT")] != -1);
		return sat<F>("START_ELEMENT");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
