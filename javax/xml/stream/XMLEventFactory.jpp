#ifndef javax_xml_stream_XMLEventFactory_HPP
#define javax_xml_stream_XMLEventFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLEventFactory : public jObject<::javax::xml::stream::XMLEventFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLEventFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::stream::events::Attribute(::java::lang::String, ::java::lang::String)>("createAttribute"), //
		jMethod<::javax::xml::stream::events::Attribute(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>("createAttribute"), //
		jMethod<::javax::xml::stream::events::Attribute(::javax::xml::namespace_::QName, ::java::lang::String)>("createAttribute"), //
		jMethod<::javax::xml::stream::events::Characters(::java::lang::String)>("createCData"), //
		jMethod<::javax::xml::stream::events::Characters(::java::lang::String)>("createCharacters"), //
		jMethod<::javax::xml::stream::events::Comment(::java::lang::String)>("createComment"), //
		jMethod<::javax::xml::stream::events::DTD(::java::lang::String)>("createDTD"), //
		jMethod<::javax::xml::stream::events::EndDocument()>("createEndDocument"), //
		jMethod<::javax::xml::stream::events::EndElement(::java::lang::String, ::java::lang::String, ::java::lang::String)>("createEndElement"), //
		jMethod<::javax::xml::stream::events::EndElement(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::util::Iterator)>("createEndElement"), //
		jMethod<::javax::xml::stream::events::EndElement(::javax::xml::namespace_::QName, ::java::util::Iterator)>("createEndElement"), //
		jMethod<::javax::xml::stream::events::EntityReference(::java::lang::String, ::javax::xml::stream::events::EntityDeclaration)>("createEntityReference"), //
		jMethod<::javax::xml::stream::events::Characters(::java::lang::String)>("createIgnorableSpace"), //
		jMethod<::javax::xml::stream::events::Namespace(::java::lang::String)>("createNamespace"), //
		jMethod<::javax::xml::stream::events::Namespace(::java::lang::String, ::java::lang::String)>("createNamespace"), //
		jMethod<::javax::xml::stream::events::ProcessingInstruction(::java::lang::String, ::java::lang::String)>("createProcessingInstruction"), //
		jMethod<::javax::xml::stream::events::Characters(::java::lang::String)>("createSpace"), //
		jMethod<::javax::xml::stream::events::StartDocument()>("createStartDocument"), //
		jMethod<::javax::xml::stream::events::StartDocument(::java::lang::String)>("createStartDocument"), //
		jMethod<::javax::xml::stream::events::StartDocument(::java::lang::String, ::java::lang::String)>("createStartDocument"), //
		jMethod<::javax::xml::stream::events::StartDocument(::java::lang::String, ::java::lang::String, ::jboolean)>("createStartDocument"), //
		jMethod<::javax::xml::stream::events::StartElement(::java::lang::String, ::java::lang::String, ::java::lang::String)>("createStartElement"), //
		jMethod<::javax::xml::stream::events::StartElement(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::util::Iterator, ::java::util::Iterator)>("createStartElement"), //
		jMethod<::javax::xml::stream::events::StartElement(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::util::Iterator, ::java::util::Iterator, ::javax::xml::namespace_::NamespaceContext)>("createStartElement"), //
		jMethod<::javax::xml::stream::events::StartElement(::javax::xml::namespace_::QName, ::java::util::Iterator, ::java::util::Iterator)>("createStartElement"), //
		jMethod<::javax::xml::stream::XMLEventFactory()>("newFactory"), //
		jMethod<::javax::xml::stream::XMLEventFactory(::java::lang::String, ::java::lang::ClassLoader)>("newFactory"), //
		jMethod<::javax::xml::stream::XMLEventFactory()>("newInstance"), //
		jMethod<::javax::xml::stream::XMLEventFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::jvoid(::javax::xml::stream::Location)>("setLocation"), //
	};

	template<typename R = ::javax::xml::stream::events::Attribute, typename... Args>
	auto createAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createAttribute")] != -1);
		return call<R>("createAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Characters, typename... Args>
	auto createCData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCData")] != -1);
		return call<R>("createCData", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Characters, typename... Args>
	auto createCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCharacters")] != -1);
		return call<R>("createCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Comment, typename... Args>
	auto createComment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createComment")] != -1);
		return call<R>("createComment", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::DTD, typename... Args>
	auto createDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createDTD")] != -1);
		return call<R>("createDTD", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::EndDocument, typename... Args>
	auto createEndDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createEndDocument")] != -1);
		return call<R>("createEndDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::EndElement, typename... Args>
	auto createEndElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createEndElement")] != -1);
		return call<R>("createEndElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::EntityReference, typename... Args>
	auto createEntityReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createEntityReference")] != -1);
		return call<R>("createEntityReference", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Characters, typename... Args>
	auto createIgnorableSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIgnorableSpace")] != -1);
		return call<R>("createIgnorableSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Namespace, typename... Args>
	auto createNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createNamespace")] != -1);
		return call<R>("createNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::ProcessingInstruction, typename... Args>
	auto createProcessingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createProcessingInstruction")] != -1);
		return call<R>("createProcessingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::Characters, typename... Args>
	auto createSpace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSpace")] != -1);
		return call<R>("createSpace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::StartDocument, typename... Args>
	auto createStartDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createStartDocument")] != -1);
		return call<R>("createStartDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::StartElement, typename... Args>
	auto createStartElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createStartElement")] != -1);
		return call<R>("createStartElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLEventFactory, typename... Args>
	static auto newFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newFactory")] != -1);
		return scall<R>("newFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLEventFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocation")] != -1);
		return call<R>("setLocation", std::forward<Args>(args)...);
	}

};

#endif
