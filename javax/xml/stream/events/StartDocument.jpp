#ifndef javax_xml_stream_events_StartDocument_HPP
#define javax_xml_stream_events_StartDocument_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::events::StartDocument : public jObject<::javax::xml::stream::events::StartDocument, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_events / "StartDocument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("encodingSet"), //
		jMethod<::java::lang::String()>("getCharacterEncodingScheme"), //
		jMethod<::java::lang::String()>("getSystemId"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::jboolean()>("isStandalone"), //
		jMethod<::jboolean()>("standaloneSet"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto encodingSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("encodingSet")] != -1);
		return call<R>("encodingSet", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCharacterEncodingScheme(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterEncodingScheme")] != -1);
		return call<R>("getCharacterEncodingScheme", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStandalone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isStandalone")] != -1);
		return call<R>("isStandalone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto standaloneSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("standaloneSet")] != -1);
		return call<R>("standaloneSet", forward<Args>(args)...);
	}

};

#endif
