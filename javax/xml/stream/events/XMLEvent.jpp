#ifndef javax_xml_stream_events_XMLEvent_HPP
#define javax_xml_stream_events_XMLEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::events::XMLEvent : public jObject<::javax::xml::stream::events::XMLEvent, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_events / "XMLEvent";

	constexpr static Enume field_signatures{
		jField<::jint>("ATTRIBUTE"), //
		jField<::jint>("CDATA"), //
		jField<::jint>("CHARACTERS"), //
		jField<::jint>("COMMENT"), //
		jField<::jint>("DTD"), //
		jField<::jint>("END_DOCUMENT"), //
		jField<::jint>("END_ELEMENT"), //
		jField<::jint>("ENTITY_DECLARATION"), //
		jField<::jint>("ENTITY_REFERENCE"), //
		jField<::jint>("NAMESPACE"), //
		jField<::jint>("NOTATION_DECLARATION"), //
		jField<::jint>("PROCESSING_INSTRUCTION"), //
		jField<::jint>("SPACE"), //
		jField<::jint>("START_DOCUMENT"), //
		jField<::jint>("START_ELEMENT"), //
	};

	template<typename F = ::jint>
	static auto ATTRIBUTE() {
		static_assert(field_signatures[jField<F>("ATTRIBUTE")] != -1);
		return sat<F>("ATTRIBUTE");
	}

	template<typename F = ::jint>
	static auto CDATA() {
		static_assert(field_signatures[jField<F>("CDATA")] != -1);
		return sat<F>("CDATA");
	}

	template<typename F = ::jint>
	static auto CHARACTERS() {
		static_assert(field_signatures[jField<F>("CHARACTERS")] != -1);
		return sat<F>("CHARACTERS");
	}

	template<typename F = ::jint>
	static auto COMMENT() {
		static_assert(field_signatures[jField<F>("COMMENT")] != -1);
		return sat<F>("COMMENT");
	}

	template<typename F = ::jint>
	static auto DTD() {
		static_assert(field_signatures[jField<F>("DTD")] != -1);
		return sat<F>("DTD");
	}

	template<typename F = ::jint>
	static auto END_DOCUMENT() {
		static_assert(field_signatures[jField<F>("END_DOCUMENT")] != -1);
		return sat<F>("END_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto END_ELEMENT() {
		static_assert(field_signatures[jField<F>("END_ELEMENT")] != -1);
		return sat<F>("END_ELEMENT");
	}

	template<typename F = ::jint>
	static auto ENTITY_DECLARATION() {
		static_assert(field_signatures[jField<F>("ENTITY_DECLARATION")] != -1);
		return sat<F>("ENTITY_DECLARATION");
	}

	template<typename F = ::jint>
	static auto ENTITY_REFERENCE() {
		static_assert(field_signatures[jField<F>("ENTITY_REFERENCE")] != -1);
		return sat<F>("ENTITY_REFERENCE");
	}

	template<typename F = ::jint>
	static auto NAMESPACE() {
		static_assert(field_signatures[jField<F>("NAMESPACE")] != -1);
		return sat<F>("NAMESPACE");
	}

	template<typename F = ::jint>
	static auto NOTATION_DECLARATION() {
		static_assert(field_signatures[jField<F>("NOTATION_DECLARATION")] != -1);
		return sat<F>("NOTATION_DECLARATION");
	}

	template<typename F = ::jint>
	static auto PROCESSING_INSTRUCTION() {
		static_assert(field_signatures[jField<F>("PROCESSING_INSTRUCTION")] != -1);
		return sat<F>("PROCESSING_INSTRUCTION");
	}

	template<typename F = ::jint>
	static auto SPACE() {
		static_assert(field_signatures[jField<F>("SPACE")] != -1);
		return sat<F>("SPACE");
	}

	template<typename F = ::jint>
	static auto START_DOCUMENT() {
		static_assert(field_signatures[jField<F>("START_DOCUMENT")] != -1);
		return sat<F>("START_DOCUMENT");
	}

	template<typename F = ::jint>
	static auto START_ELEMENT() {
		static_assert(field_signatures[jField<F>("START_ELEMENT")] != -1);
		return sat<F>("START_ELEMENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::stream::events::Characters()>("asCharacters"), //
		jMethod<::javax::xml::stream::events::EndElement()>("asEndElement"), //
		jMethod<::javax::xml::stream::events::StartElement()>("asStartElement"), //
		jMethod<::jint()>("getEventType"), //
		jMethod<::javax::xml::stream::Location()>("getLocation"), //
		jMethod<::javax::xml::namespace_::QName()>("getSchemaType"), //
		jMethod<::jboolean()>("isAttribute"), //
		jMethod<::jboolean()>("isCharacters"), //
		jMethod<::jboolean()>("isEndDocument"), //
		jMethod<::jboolean()>("isEndElement"), //
		jMethod<::jboolean()>("isEntityReference"), //
		jMethod<::jboolean()>("isNamespace"), //
		jMethod<::jboolean()>("isProcessingInstruction"), //
		jMethod<::jboolean()>("isStartDocument"), //
		jMethod<::jboolean()>("isStartElement"), //
		jMethod<::jvoid(::java::io::Writer)>("writeAsEncodedUnicode"), //
	};

	template<typename R = ::javax::xml::stream::events::Characters, typename... Args>
	auto asCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asCharacters")] != -1);
		return call<R>("asCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::EndElement, typename... Args>
	auto asEndElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asEndElement")] != -1);
		return call<R>("asEndElement", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::events::StartElement, typename... Args>
	auto asStartElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asStartElement")] != -1);
		return call<R>("asStartElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEventType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventType")] != -1);
		return call<R>("getEventType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::Location, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getSchemaType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaType")] != -1);
		return call<R>("getSchemaType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAttribute")] != -1);
		return call<R>("isAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCharacters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCharacters")] != -1);
		return call<R>("isCharacters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEndDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEndDocument")] != -1);
		return call<R>("isEndDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEndElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEndElement")] != -1);
		return call<R>("isEndElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEntityReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEntityReference")] != -1);
		return call<R>("isEntityReference", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNamespace")] != -1);
		return call<R>("isNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isProcessingInstruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isProcessingInstruction")] != -1);
		return call<R>("isProcessingInstruction", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStartDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStartDocument")] != -1);
		return call<R>("isStartDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStartElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStartElement")] != -1);
		return call<R>("isStartElement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeAsEncodedUnicode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeAsEncodedUnicode")] != -1);
		return call<R>("writeAsEncodedUnicode", std::forward<Args>(args)...);
	}

};

#endif
