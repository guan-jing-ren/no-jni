#ifndef javax_xml_stream_events_EntityDeclaration_HPP
#define javax_xml_stream_events_EntityDeclaration_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::events::EntityDeclaration : public jObject<::javax::xml::stream::events::EntityDeclaration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_events / "EntityDeclaration";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getBaseURI"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getNotationName"), //
		jMethod<::java::lang::String()>("getPublicId"), //
		jMethod<::java::lang::String()>("getReplacementText"), //
		jMethod<::java::lang::String()>("getSystemId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseURI")] != -1);
		return call<R>("getBaseURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNotationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotationName")] != -1);
		return call<R>("getNotationName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPublicId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPublicId")] != -1);
		return call<R>("getPublicId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getReplacementText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplacementText")] != -1);
		return call<R>("getReplacementText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemId")] != -1);
		return call<R>("getSystemId", std::forward<Args>(args)...);
	}

};

#endif
