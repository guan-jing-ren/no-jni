#ifndef javax_xml_stream_events_Namespace_HPP
#define javax_xml_stream_events_Namespace_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::events::Namespace : public jObject<::javax::xml::stream::events::Namespace, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_events / "Namespace";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDTDType"), //
		jMethod<::javax::xml::namespace_::QName()>("getName"), //
		jMethod<::java::lang::String()>("getNamespaceURI"), //
		jMethod<::java::lang::String()>("getPrefix"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jboolean()>("isDefaultNamespaceDeclaration"), //
		jMethod<::jboolean()>("isSpecified"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDTDType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDTDType")] != -1);
		return call<R>("getDTDType", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespaceURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespaceURI")] != -1);
		return call<R>("getNamespaceURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefaultNamespaceDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDefaultNamespaceDeclaration")] != -1);
		return call<R>("isDefaultNamespaceDeclaration", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSpecified")] != -1);
		return call<R>("isSpecified", std::forward<Args>(args)...);
	}

};

#endif
