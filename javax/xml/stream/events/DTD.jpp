#ifndef javax_xml_stream_events_DTD_HPP
#define javax_xml_stream_events_DTD_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::stream::events::DTD : public jObject<::javax::xml::stream::events::DTD, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream_events / "DTD";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDocumentTypeDeclaration"), //
		jMethod<::java::util::List()>("getEntities"), //
		jMethod<::java::util::List()>("getNotations"), //
		jMethod<::java::lang::Object()>("getProcessedDTD"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDocumentTypeDeclaration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDocumentTypeDeclaration")] != -1);
		return call<R>("getDocumentTypeDeclaration", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getEntities(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntities")] != -1);
		return call<R>("getEntities", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getNotations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotations")] != -1);
		return call<R>("getNotations", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProcessedDTD(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProcessedDTD")] != -1);
		return call<R>("getProcessedDTD", std::forward<Args>(args)...);
	}

};

#endif
