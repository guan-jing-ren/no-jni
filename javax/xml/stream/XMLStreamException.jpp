#ifndef javax_xml_stream_XMLStreamException_HPP
#define javax_xml_stream_XMLStreamException_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLStreamException : public jObject<::javax::xml::stream::XMLStreamException, ::java::lang::Exception> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLStreamException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::xml::stream::Location)>(), //
		jConstructor<::jvoid(::java::lang::String, ::javax::xml::stream::Location, ::java::lang::Throwable)>(), //
		jConstructor<::jvoid(::java::lang::Throwable)>(), //
		jMethod<::javax::xml::stream::Location()>("getLocation"), //
		jMethod<::java::lang::Throwable()>("getNestedException"), //
	};

	template<typename R = ::javax::xml::stream::Location, typename... Args>
	auto getLocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocation")] != -1);
		return call<R>("getLocation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	auto getNestedException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNestedException")] != -1);
		return call<R>("getNestedException", std::forward<Args>(args)...);
	}

};

#endif
