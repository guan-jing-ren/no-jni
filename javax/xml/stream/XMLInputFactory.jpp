#ifndef javax_xml_stream_XMLInputFactory_HPP
#define javax_xml_stream_XMLInputFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::stream::XMLInputFactory : public jObject<::javax::xml::stream::XMLInputFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_stream / "XMLInputFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ALLOCATOR"), //
		jField<::java::lang::String>("IS_COALESCING"), //
		jField<::java::lang::String>("IS_NAMESPACE_AWARE"), //
		jField<::java::lang::String>("IS_REPLACING_ENTITY_REFERENCES"), //
		jField<::java::lang::String>("IS_SUPPORTING_EXTERNAL_ENTITIES"), //
		jField<::java::lang::String>("IS_VALIDATING"), //
		jField<::java::lang::String>("REPORTER"), //
		jField<::java::lang::String>("RESOLVER"), //
		jField<::java::lang::String>("SUPPORT_DTD"), //
	};

	template<typename F = ::java::lang::String>
	static auto ALLOCATOR() {
		static_assert(field_signatures[jField<F>("ALLOCATOR")] != -1);
		return sat<F>("ALLOCATOR");
	}

	template<typename F = ::java::lang::String>
	static auto IS_COALESCING() {
		static_assert(field_signatures[jField<F>("IS_COALESCING")] != -1);
		return sat<F>("IS_COALESCING");
	}

	template<typename F = ::java::lang::String>
	static auto IS_NAMESPACE_AWARE() {
		static_assert(field_signatures[jField<F>("IS_NAMESPACE_AWARE")] != -1);
		return sat<F>("IS_NAMESPACE_AWARE");
	}

	template<typename F = ::java::lang::String>
	static auto IS_REPLACING_ENTITY_REFERENCES() {
		static_assert(field_signatures[jField<F>("IS_REPLACING_ENTITY_REFERENCES")] != -1);
		return sat<F>("IS_REPLACING_ENTITY_REFERENCES");
	}

	template<typename F = ::java::lang::String>
	static auto IS_SUPPORTING_EXTERNAL_ENTITIES() {
		static_assert(field_signatures[jField<F>("IS_SUPPORTING_EXTERNAL_ENTITIES")] != -1);
		return sat<F>("IS_SUPPORTING_EXTERNAL_ENTITIES");
	}

	template<typename F = ::java::lang::String>
	static auto IS_VALIDATING() {
		static_assert(field_signatures[jField<F>("IS_VALIDATING")] != -1);
		return sat<F>("IS_VALIDATING");
	}

	template<typename F = ::java::lang::String>
	static auto REPORTER() {
		static_assert(field_signatures[jField<F>("REPORTER")] != -1);
		return sat<F>("REPORTER");
	}

	template<typename F = ::java::lang::String>
	static auto RESOLVER() {
		static_assert(field_signatures[jField<F>("RESOLVER")] != -1);
		return sat<F>("RESOLVER");
	}

	template<typename F = ::java::lang::String>
	static auto SUPPORT_DTD() {
		static_assert(field_signatures[jField<F>("SUPPORT_DTD")] != -1);
		return sat<F>("SUPPORT_DTD");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::stream::XMLEventReader(::javax::xml::stream::XMLEventReader, ::javax::xml::stream::EventFilter)>("createFilteredReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::javax::xml::stream::XMLStreamReader, ::javax::xml::stream::StreamFilter)>("createFilteredReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::java::io::InputStream)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::java::io::InputStream, ::java::lang::String)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::java::io::Reader)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::java::lang::String, ::java::io::InputStream)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::java::lang::String, ::java::io::Reader)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::javax::xml::stream::XMLStreamReader)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLEventReader(::javax::xml::transform::Source)>("createXMLEventReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::java::io::InputStream)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::java::io::InputStream, ::java::lang::String)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::java::io::Reader)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::java::lang::String, ::java::io::InputStream)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::java::lang::String, ::java::io::Reader)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::XMLStreamReader(::javax::xml::transform::Source)>("createXMLStreamReader"), //
		jMethod<::javax::xml::stream::util::XMLEventAllocator()>("getEventAllocator"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::stream::XMLReporter()>("getXMLReporter"), //
		jMethod<::javax::xml::stream::XMLResolver()>("getXMLResolver"), //
		jMethod<::jboolean(::java::lang::String)>("isPropertySupported"), //
		jMethod<::javax::xml::stream::XMLInputFactory()>("newFactory"), //
		jMethod<::javax::xml::stream::XMLInputFactory(::java::lang::String, ::java::lang::ClassLoader)>("newFactory"), //
		jMethod<::javax::xml::stream::XMLInputFactory()>("newInstance"), //
		jMethod<::javax::xml::stream::XMLInputFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::jvoid(::javax::xml::stream::util::XMLEventAllocator)>("setEventAllocator"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::javax::xml::stream::XMLReporter)>("setXMLReporter"), //
		jMethod<::jvoid(::javax::xml::stream::XMLResolver)>("setXMLResolver"), //
	};

	template<typename R = ::javax::xml::stream::XMLEventReader, typename... Args>
	auto createFilteredReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createFilteredReader")] != -1);
		return call<R>("createFilteredReader", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLEventReader, typename... Args>
	auto createXMLEventReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createXMLEventReader")] != -1);
		return call<R>("createXMLEventReader", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLStreamReader, typename... Args>
	auto createXMLStreamReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createXMLStreamReader")] != -1);
		return call<R>("createXMLStreamReader", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::util::XMLEventAllocator, typename... Args>
	auto getEventAllocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getEventAllocator")] != -1);
		return call<R>("getEventAllocator", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLReporter, typename... Args>
	auto getXMLReporter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXMLReporter")] != -1);
		return call<R>("getXMLReporter", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLResolver, typename... Args>
	auto getXMLResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXMLResolver")] != -1);
		return call<R>("getXMLResolver", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPropertySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isPropertySupported")] != -1);
		return call<R>("isPropertySupported", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLInputFactory, typename... Args>
	static auto newFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newFactory")] != -1);
		return scall<R>("newFactory", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::stream::XMLInputFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEventAllocator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setEventAllocator")] != -1);
		return call<R>("setEventAllocator", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXMLReporter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setXMLReporter")] != -1);
		return call<R>("setXMLReporter", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXMLResolver(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setXMLResolver")] != -1);
		return call<R>("setXMLResolver", forward<Args>(args)...);
	}

};

#endif
