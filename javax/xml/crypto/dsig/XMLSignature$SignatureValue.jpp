#ifndef javax_xml_crypto_dsig_XMLSignature$SignatureValue_HPP
#define javax_xml_crypto_dsig_XMLSignature$SignatureValue_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::crypto::dsig::XMLSignature$SignatureValue : public jObject<::javax::xml::crypto::dsig::XMLSignature$SignatureValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto_dsig / "XMLSignature$SignatureValue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::jbyte *()>("getValue"), //
		jMethod<::jboolean(::javax::xml::crypto::dsig::XMLValidateContext)>("validate"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto validate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("validate")] != -1);
		return call<R>("validate", forward<Args>(args)...);
	}

};

#endif
