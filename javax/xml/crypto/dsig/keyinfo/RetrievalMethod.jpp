#ifndef javax_xml_crypto_dsig_keyinfo_RetrievalMethod_HPP
#define javax_xml_crypto_dsig_keyinfo_RetrievalMethod_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::xml::crypto::dsig::keyinfo::RetrievalMethod : public jObject<::javax::xml::crypto::dsig::keyinfo::RetrievalMethod, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto_dsig_keyinfo / "RetrievalMethod";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::crypto::Data(::javax::xml::crypto::XMLCryptoContext)>("dereference"), //
		jMethod<::java::util::List()>("getTransforms"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::java::lang::String()>("getURI"), //
		jMethod<::jboolean(::java::lang::String)>("isFeatureSupported"), //
	};

	template<typename R = ::javax::xml::crypto::Data, typename... Args>
	auto dereference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dereference")] != -1);
		return call<R>("dereference", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getTransforms(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransforms")] != -1);
		return call<R>("getTransforms", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURI")] != -1);
		return call<R>("getURI", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFeatureSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFeatureSupported")] != -1);
		return call<R>("isFeatureSupported", std::forward<Args>(args)...);
	}

};

#endif
