#ifndef javax_xml_crypto_dsig_keyinfo_KeyInfoFactory_HPP
#define javax_xml_crypto_dsig_keyinfo_KeyInfoFactory_HPP

#include "../../../../../jfwd_decl.hpp"

class ::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory : public jObject<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto_dsig_keyinfo / "KeyInfoFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory()>("getInstance"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory(::java::lang::String)>("getInstance"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory(::java::lang::String, ::java::lang::String)>("getInstance"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory(::java::lang::String, ::java::security::Provider)>("getInstance"), //
		jMethod<::java::lang::String()>("getMechanismType"), //
		jMethod<::java::security::Provider()>("getProvider"), //
		jMethod<::javax::xml::crypto::URIDereferencer()>("getURIDereferencer"), //
		jMethod<::jboolean(::java::lang::String)>("isFeatureSupported"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfo(::java::util::List)>("newKeyInfo"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfo(::java::util::List, ::java::lang::String)>("newKeyInfo"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyName(::java::lang::String)>("newKeyName"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyValue(::java::security::PublicKey)>("newKeyValue"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::PGPData(::jbyte *)>("newPGPData"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::PGPData(::jbyte *, ::java::util::List)>("newPGPData"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::PGPData(::jbyte *, ::jbyte *, ::java::util::List)>("newPGPData"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::RetrievalMethod(::java::lang::String)>("newRetrievalMethod"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::RetrievalMethod(::java::lang::String, ::java::lang::String, ::java::util::List)>("newRetrievalMethod"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::X509Data(::java::util::List)>("newX509Data"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::X509IssuerSerial(::java::lang::String, ::java::math::BigInteger)>("newX509IssuerSerial"), //
		jMethod<::javax::xml::crypto::dsig::keyinfo::KeyInfo(::javax::xml::crypto::XMLStructure)>("unmarshalKeyInfo"), //
	};

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::KeyInfoFactory, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMechanismType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanismType")] != -1);
		return call<R>("getMechanismType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::Provider, typename... Args>
	auto getProvider(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProvider")] != -1);
		return call<R>("getProvider", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::URIDereferencer, typename... Args>
	auto getURIDereferencer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURIDereferencer")] != -1);
		return call<R>("getURIDereferencer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFeatureSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFeatureSupported")] != -1);
		return call<R>("isFeatureSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::KeyInfo, typename... Args>
	auto newKeyInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newKeyInfo")] != -1);
		return call<R>("newKeyInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::KeyName, typename... Args>
	auto newKeyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newKeyName")] != -1);
		return call<R>("newKeyName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::KeyValue, typename... Args>
	auto newKeyValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newKeyValue")] != -1);
		return call<R>("newKeyValue", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::PGPData, typename... Args>
	auto newPGPData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newPGPData")] != -1);
		return call<R>("newPGPData", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::RetrievalMethod, typename... Args>
	auto newRetrievalMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newRetrievalMethod")] != -1);
		return call<R>("newRetrievalMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::X509Data, typename... Args>
	auto newX509Data(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newX509Data")] != -1);
		return call<R>("newX509Data", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::X509IssuerSerial, typename... Args>
	auto newX509IssuerSerial(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newX509IssuerSerial")] != -1);
		return call<R>("newX509IssuerSerial", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::dsig::keyinfo::KeyInfo, typename... Args>
	auto unmarshalKeyInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmarshalKeyInfo")] != -1);
		return call<R>("unmarshalKeyInfo", std::forward<Args>(args)...);
	}

};

#endif
