#ifndef javax_xml_crypto_dsig_Manifest_HPP
#define javax_xml_crypto_dsig_Manifest_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::crypto::dsig::Manifest : public jObject<::javax::xml::crypto::dsig::Manifest, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto_dsig / "Manifest";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("TYPE"), //
	};

	template<typename F = ::java::lang::String>
	static auto TYPE() {
		static_assert(field_signatures[jField<F>("TYPE")] != -1);
		return sat<F>("TYPE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getId"), //
		jMethod<::java::util::List()>("getReferences"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReferences")] != -1);
		return call<R>("getReferences", std::forward<Args>(args)...);
	}

};

#endif
