#ifndef javax_xml_crypto_dom_DOMStructure_HPP
#define javax_xml_crypto_dom_DOMStructure_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::xml::crypto::dom::DOMStructure : public jObject<::javax::xml::crypto::dom::DOMStructure, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto_dom / "DOMStructure";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::w3c::dom::Node)>(), //
		jMethod<::org::w3c::dom::Node()>("getNode"), //
		jMethod<::jboolean(::java::lang::String)>("isFeatureSupported"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNode")] != -1);
		return call<R>("getNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFeatureSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFeatureSupported")] != -1);
		return call<R>("isFeatureSupported", std::forward<Args>(args)...);
	}

};

#endif
