#ifndef javax_xml_crypto_OctetStreamData_HPP
#define javax_xml_crypto_OctetStreamData_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::crypto::OctetStreamData : public jObject<::javax::xml::crypto::OctetStreamData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto / "OctetStreamData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::io::InputStream, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getMimeType"), //
		jMethod<::java::io::InputStream()>("getOctetStream"), //
		jMethod<::java::lang::String()>("getURI"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getMimeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMimeType")] != -1);
		return call<R>("getMimeType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getOctetStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOctetStream")] != -1);
		return call<R>("getOctetStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURI")] != -1);
		return call<R>("getURI", std::forward<Args>(args)...);
	}

};

#endif
