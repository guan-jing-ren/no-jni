#ifndef javax_xml_crypto_XMLCryptoContext_HPP
#define javax_xml_crypto_XMLCryptoContext_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::crypto::XMLCryptoContext : public jObject<::javax::xml::crypto::XMLCryptoContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_crypto / "XMLCryptoContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::Object)>("get"), //
		jMethod<::java::lang::String()>("getBaseURI"), //
		jMethod<::java::lang::String()>("getDefaultNamespacePrefix"), //
		jMethod<::javax::xml::crypto::KeySelector()>("getKeySelector"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("getNamespacePrefix"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getProperty"), //
		jMethod<::javax::xml::crypto::URIDereferencer()>("getURIDereferencer"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Object)>("put"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("putNamespacePrefix"), //
		jMethod<::jvoid(::java::lang::String)>("setBaseURI"), //
		jMethod<::jvoid(::java::lang::String)>("setDefaultNamespacePrefix"), //
		jMethod<::jvoid(::javax::xml::crypto::KeySelector)>("setKeySelector"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("setProperty"), //
		jMethod<::jvoid(::javax::xml::crypto::URIDereferencer)>("setURIDereferencer"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseURI")] != -1);
		return call<R>("getBaseURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultNamespacePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultNamespacePrefix")] != -1);
		return call<R>("getDefaultNamespacePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::KeySelector, typename... Args>
	auto getKeySelector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeySelector")] != -1);
		return call<R>("getKeySelector", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNamespacePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNamespacePrefix")] != -1);
		return call<R>("getNamespacePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperty")] != -1);
		return call<R>("getProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::crypto::URIDereferencer, typename... Args>
	auto getURIDereferencer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getURIDereferencer")] != -1);
		return call<R>("getURIDereferencer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto putNamespacePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putNamespacePrefix")] != -1);
		return call<R>("putNamespacePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBaseURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBaseURI")] != -1);
		return call<R>("setBaseURI", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultNamespacePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultNamespacePrefix")] != -1);
		return call<R>("setDefaultNamespacePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeySelector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeySelector")] != -1);
		return call<R>("setKeySelector", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto setProperty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProperty")] != -1);
		return call<R>("setProperty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURIDereferencer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURIDereferencer")] != -1);
		return call<R>("setURIDereferencer", std::forward<Args>(args)...);
	}

};

#endif
