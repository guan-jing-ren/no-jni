#ifndef javax_xml_datatype_Duration_HPP
#define javax_xml_datatype_Duration_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::datatype::Duration : public jObject<::javax::xml::datatype::Duration, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_datatype / "Duration";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::xml::datatype::Duration(::javax::xml::datatype::Duration)>("add"), //
		jMethod<::jvoid(::java::util::Calendar)>("addTo"), //
		jMethod<::jvoid(::java::util::Date)>("addTo"), //
		jMethod<::jint(::javax::xml::datatype::Duration)>("compare"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getDays"), //
		jMethod<::java::lang::Number(::javax::xml::datatype::DatatypeConstants$Field)>("getField"), //
		jMethod<::jint()>("getHours"), //
		jMethod<::jint()>("getMinutes"), //
		jMethod<::jint()>("getMonths"), //
		jMethod<::jint()>("getSeconds"), //
		jMethod<::jint()>("getSign"), //
		jMethod<::jlong(::java::util::Calendar)>("getTimeInMillis"), //
		jMethod<::jlong(::java::util::Date)>("getTimeInMillis"), //
		jMethod<::javax::xml::namespace_::QName()>("getXMLSchemaType"), //
		jMethod<::jint()>("getYears"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::javax::xml::datatype::Duration)>("isLongerThan"), //
		jMethod<::jboolean(::javax::xml::datatype::DatatypeConstants$Field)>("isSet"), //
		jMethod<::jboolean(::javax::xml::datatype::Duration)>("isShorterThan"), //
		jMethod<::javax::xml::datatype::Duration(::jint)>("multiply"), //
		jMethod<::javax::xml::datatype::Duration(::java::math::BigDecimal)>("multiply"), //
		jMethod<::javax::xml::datatype::Duration()>("negate"), //
		jMethod<::javax::xml::datatype::Duration(::java::util::Calendar)>("normalizeWith"), //
		jMethod<::javax::xml::datatype::Duration(::javax::xml::datatype::Duration)>("subtract"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("add")] != -1);
		return call<R>("add", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addTo")] != -1);
		return call<R>("addTo", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("compare")] != -1);
		return call<R>("compare", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDays(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDays")] != -1);
		return call<R>("getDays", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Number, typename... Args>
	auto getField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getField")] != -1);
		return call<R>("getField", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHours(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHours")] != -1);
		return call<R>("getHours", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinutes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMinutes")] != -1);
		return call<R>("getMinutes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonths(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getMonths")] != -1);
		return call<R>("getMonths", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSeconds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSeconds")] != -1);
		return call<R>("getSeconds", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSign")] != -1);
		return call<R>("getSign", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeInMillis(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTimeInMillis")] != -1);
		return call<R>("getTimeInMillis", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getXMLSchemaType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getXMLSchemaType")] != -1);
		return call<R>("getXMLSchemaType", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYears(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getYears")] != -1);
		return call<R>("getYears", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLongerThan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isLongerThan")] != -1);
		return call<R>("isLongerThan", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSet")] != -1);
		return call<R>("isSet", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isShorterThan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isShorterThan")] != -1);
		return call<R>("isShorterThan", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto multiply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("multiply")] != -1);
		return call<R>("multiply", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto negate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("negate")] != -1);
		return call<R>("negate", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto normalizeWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("normalizeWith")] != -1);
		return call<R>("normalizeWith", forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto subtract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("subtract")] != -1);
		return call<R>("subtract", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
