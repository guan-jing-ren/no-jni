#ifndef javax_xml_datatype_DatatypeFactory_HPP
#define javax_xml_datatype_DatatypeFactory_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::datatype::DatatypeFactory : public jObject<::javax::xml::datatype::DatatypeFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_datatype / "DatatypeFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DATATYPEFACTORY_IMPLEMENTATION_CLASS"), //
		jField<::java::lang::String>("DATATYPEFACTORY_PROPERTY"), //
	};

	template<typename F = ::java::lang::String>
	static auto DATATYPEFACTORY_IMPLEMENTATION_CLASS() {
		static_assert(field_signatures[jField<F>("DATATYPEFACTORY_IMPLEMENTATION_CLASS")] != -1);
		return sat<F>("DATATYPEFACTORY_IMPLEMENTATION_CLASS");
	}

	template<typename F = ::java::lang::String>
	static auto DATATYPEFACTORY_PROPERTY() {
		static_assert(field_signatures[jField<F>("DATATYPEFACTORY_PROPERTY")] != -1);
		return sat<F>("DATATYPEFACTORY_PROPERTY");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::xml::datatype::Duration(::jlong)>("newDuration"), //
		jMethod<::javax::xml::datatype::Duration(::java::lang::String)>("newDuration"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("newDuration"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigDecimal)>("newDuration"), //
		jMethod<::javax::xml::datatype::Duration(::jlong)>("newDurationDayTime"), //
		jMethod<::javax::xml::datatype::Duration(::java::lang::String)>("newDurationDayTime"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::jint, ::jint, ::jint, ::jint)>("newDurationDayTime"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger, ::java::math::BigInteger)>("newDurationDayTime"), //
		jMethod<::javax::xml::datatype::Duration(::jlong)>("newDurationYearMonth"), //
		jMethod<::javax::xml::datatype::Duration(::java::lang::String)>("newDurationYearMonth"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::jint, ::jint)>("newDurationYearMonth"), //
		jMethod<::javax::xml::datatype::Duration(::jboolean, ::java::math::BigInteger, ::java::math::BigInteger)>("newDurationYearMonth"), //
		jMethod<::javax::xml::datatype::DatatypeFactory()>("newInstance"), //
		jMethod<::javax::xml::datatype::DatatypeFactory(::java::lang::String, ::java::lang::ClassLoader)>("newInstance"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar()>("newXMLGregorianCalendar"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint, ::jint)>("newXMLGregorianCalendar"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::java::lang::String)>("newXMLGregorianCalendar"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::java::math::BigInteger, ::jint, ::jint, ::jint, ::jint, ::jint, ::java::math::BigDecimal, ::jint)>("newXMLGregorianCalendar"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::java::util::GregorianCalendar)>("newXMLGregorianCalendar"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::jint, ::jint, ::jint, ::jint)>("newXMLGregorianCalendarDate"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::jint, ::jint, ::jint, ::jint)>("newXMLGregorianCalendarTime"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::jint, ::jint, ::jint, ::jint, ::jint)>("newXMLGregorianCalendarTime"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar(::jint, ::jint, ::jint, ::java::math::BigDecimal, ::jint)>("newXMLGregorianCalendarTime"), //
	};

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto newDuration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDuration")] != -1);
		return call<R>("newDuration", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto newDurationDayTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDurationDayTime")] != -1);
		return call<R>("newDurationDayTime", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::Duration, typename... Args>
	auto newDurationYearMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newDurationYearMonth")] != -1);
		return call<R>("newDurationYearMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::DatatypeFactory, typename... Args>
	static auto newInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return scall<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::XMLGregorianCalendar, typename... Args>
	auto newXMLGregorianCalendar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newXMLGregorianCalendar")] != -1);
		return call<R>("newXMLGregorianCalendar", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::XMLGregorianCalendar, typename... Args>
	auto newXMLGregorianCalendarDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newXMLGregorianCalendarDate")] != -1);
		return call<R>("newXMLGregorianCalendarDate", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::XMLGregorianCalendar, typename... Args>
	auto newXMLGregorianCalendarTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newXMLGregorianCalendarTime")] != -1);
		return call<R>("newXMLGregorianCalendarTime", std::forward<Args>(args)...);
	}

};

#endif
