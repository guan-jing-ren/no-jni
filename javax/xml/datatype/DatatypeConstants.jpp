#ifndef javax_xml_datatype_DatatypeConstants_HPP
#define javax_xml_datatype_DatatypeConstants_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::datatype::DatatypeConstants : public jObject<::javax::xml::datatype::DatatypeConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_datatype / "DatatypeConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("APRIL"), //
		jField<::jint>("AUGUST"), //
		jField<::javax::xml::namespace_::QName>("DATE"), //
		jField<::javax::xml::namespace_::QName>("DATETIME"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("DAYS"), //
		jField<::jint>("DECEMBER"), //
		jField<::javax::xml::namespace_::QName>("DURATION"), //
		jField<::javax::xml::namespace_::QName>("DURATION_DAYTIME"), //
		jField<::javax::xml::namespace_::QName>("DURATION_YEARMONTH"), //
		jField<::jint>("EQUAL"), //
		jField<::jint>("FEBRUARY"), //
		jField<::jint>("FIELD_UNDEFINED"), //
		jField<::javax::xml::namespace_::QName>("GDAY"), //
		jField<::javax::xml::namespace_::QName>("GMONTH"), //
		jField<::javax::xml::namespace_::QName>("GMONTHDAY"), //
		jField<::jint>("GREATER"), //
		jField<::javax::xml::namespace_::QName>("GYEAR"), //
		jField<::javax::xml::namespace_::QName>("GYEARMONTH"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("HOURS"), //
		jField<::jint>("INDETERMINATE"), //
		jField<::jint>("JANUARY"), //
		jField<::jint>("JULY"), //
		jField<::jint>("JUNE"), //
		jField<::jint>("LESSER"), //
		jField<::jint>("MARCH"), //
		jField<::jint>("MAX_TIMEZONE_OFFSET"), //
		jField<::jint>("MAY"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("MINUTES"), //
		jField<::jint>("MIN_TIMEZONE_OFFSET"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("MONTHS"), //
		jField<::jint>("NOVEMBER"), //
		jField<::jint>("OCTOBER"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("SECONDS"), //
		jField<::jint>("SEPTEMBER"), //
		jField<::javax::xml::namespace_::QName>("TIME"), //
		jField<::javax::xml::datatype::DatatypeConstants$Field>("YEARS"), //
	};

	template<typename F = ::jint>
	static auto APRIL() {
		static_assert(field_signatures[jField<F>("APRIL")] != -1);
		return sat<F>("APRIL");
	}

	template<typename F = ::jint>
	static auto AUGUST() {
		static_assert(field_signatures[jField<F>("AUGUST")] != -1);
		return sat<F>("AUGUST");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto DATE() {
		static_assert(field_signatures[jField<F>("DATE")] != -1);
		return sat<F>("DATE");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto DATETIME() {
		static_assert(field_signatures[jField<F>("DATETIME")] != -1);
		return sat<F>("DATETIME");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto DAYS() {
		static_assert(field_signatures[jField<F>("DAYS")] != -1);
		return sat<F>("DAYS");
	}

	template<typename F = ::jint>
	static auto DECEMBER() {
		static_assert(field_signatures[jField<F>("DECEMBER")] != -1);
		return sat<F>("DECEMBER");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto DURATION() {
		static_assert(field_signatures[jField<F>("DURATION")] != -1);
		return sat<F>("DURATION");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto DURATION_DAYTIME() {
		static_assert(field_signatures[jField<F>("DURATION_DAYTIME")] != -1);
		return sat<F>("DURATION_DAYTIME");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto DURATION_YEARMONTH() {
		static_assert(field_signatures[jField<F>("DURATION_YEARMONTH")] != -1);
		return sat<F>("DURATION_YEARMONTH");
	}

	template<typename F = ::jint>
	static auto EQUAL() {
		static_assert(field_signatures[jField<F>("EQUAL")] != -1);
		return sat<F>("EQUAL");
	}

	template<typename F = ::jint>
	static auto FEBRUARY() {
		static_assert(field_signatures[jField<F>("FEBRUARY")] != -1);
		return sat<F>("FEBRUARY");
	}

	template<typename F = ::jint>
	static auto FIELD_UNDEFINED() {
		static_assert(field_signatures[jField<F>("FIELD_UNDEFINED")] != -1);
		return sat<F>("FIELD_UNDEFINED");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto GDAY() {
		static_assert(field_signatures[jField<F>("GDAY")] != -1);
		return sat<F>("GDAY");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto GMONTH() {
		static_assert(field_signatures[jField<F>("GMONTH")] != -1);
		return sat<F>("GMONTH");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto GMONTHDAY() {
		static_assert(field_signatures[jField<F>("GMONTHDAY")] != -1);
		return sat<F>("GMONTHDAY");
	}

	template<typename F = ::jint>
	static auto GREATER() {
		static_assert(field_signatures[jField<F>("GREATER")] != -1);
		return sat<F>("GREATER");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto GYEAR() {
		static_assert(field_signatures[jField<F>("GYEAR")] != -1);
		return sat<F>("GYEAR");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto GYEARMONTH() {
		static_assert(field_signatures[jField<F>("GYEARMONTH")] != -1);
		return sat<F>("GYEARMONTH");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto HOURS() {
		static_assert(field_signatures[jField<F>("HOURS")] != -1);
		return sat<F>("HOURS");
	}

	template<typename F = ::jint>
	static auto INDETERMINATE() {
		static_assert(field_signatures[jField<F>("INDETERMINATE")] != -1);
		return sat<F>("INDETERMINATE");
	}

	template<typename F = ::jint>
	static auto JANUARY() {
		static_assert(field_signatures[jField<F>("JANUARY")] != -1);
		return sat<F>("JANUARY");
	}

	template<typename F = ::jint>
	static auto JULY() {
		static_assert(field_signatures[jField<F>("JULY")] != -1);
		return sat<F>("JULY");
	}

	template<typename F = ::jint>
	static auto JUNE() {
		static_assert(field_signatures[jField<F>("JUNE")] != -1);
		return sat<F>("JUNE");
	}

	template<typename F = ::jint>
	static auto LESSER() {
		static_assert(field_signatures[jField<F>("LESSER")] != -1);
		return sat<F>("LESSER");
	}

	template<typename F = ::jint>
	static auto MARCH() {
		static_assert(field_signatures[jField<F>("MARCH")] != -1);
		return sat<F>("MARCH");
	}

	template<typename F = ::jint>
	static auto MAX_TIMEZONE_OFFSET() {
		static_assert(field_signatures[jField<F>("MAX_TIMEZONE_OFFSET")] != -1);
		return sat<F>("MAX_TIMEZONE_OFFSET");
	}

	template<typename F = ::jint>
	static auto MAY() {
		static_assert(field_signatures[jField<F>("MAY")] != -1);
		return sat<F>("MAY");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto MINUTES() {
		static_assert(field_signatures[jField<F>("MINUTES")] != -1);
		return sat<F>("MINUTES");
	}

	template<typename F = ::jint>
	static auto MIN_TIMEZONE_OFFSET() {
		static_assert(field_signatures[jField<F>("MIN_TIMEZONE_OFFSET")] != -1);
		return sat<F>("MIN_TIMEZONE_OFFSET");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto MONTHS() {
		static_assert(field_signatures[jField<F>("MONTHS")] != -1);
		return sat<F>("MONTHS");
	}

	template<typename F = ::jint>
	static auto NOVEMBER() {
		static_assert(field_signatures[jField<F>("NOVEMBER")] != -1);
		return sat<F>("NOVEMBER");
	}

	template<typename F = ::jint>
	static auto OCTOBER() {
		static_assert(field_signatures[jField<F>("OCTOBER")] != -1);
		return sat<F>("OCTOBER");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto SECONDS() {
		static_assert(field_signatures[jField<F>("SECONDS")] != -1);
		return sat<F>("SECONDS");
	}

	template<typename F = ::jint>
	static auto SEPTEMBER() {
		static_assert(field_signatures[jField<F>("SEPTEMBER")] != -1);
		return sat<F>("SEPTEMBER");
	}

	template<typename F = ::javax::xml::namespace_::QName>
	static auto TIME() {
		static_assert(field_signatures[jField<F>("TIME")] != -1);
		return sat<F>("TIME");
	}

	template<typename F = ::javax::xml::datatype::DatatypeConstants$Field>
	static auto YEARS() {
		static_assert(field_signatures[jField<F>("YEARS")] != -1);
		return sat<F>("YEARS");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
