#ifndef javax_xml_datatype_XMLGregorianCalendar_HPP
#define javax_xml_datatype_XMLGregorianCalendar_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::xml::datatype::XMLGregorianCalendar : public jObject<::javax::xml::datatype::XMLGregorianCalendar, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_xml_datatype / "XMLGregorianCalendar";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::xml::datatype::Duration)>("add"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint(::javax::xml::datatype::XMLGregorianCalendar)>("compare"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getDay"), //
		jMethod<::java::math::BigInteger()>("getEon"), //
		jMethod<::java::math::BigInteger()>("getEonAndYear"), //
		jMethod<::java::math::BigDecimal()>("getFractionalSecond"), //
		jMethod<::jint()>("getHour"), //
		jMethod<::jint()>("getMillisecond"), //
		jMethod<::jint()>("getMinute"), //
		jMethod<::jint()>("getMonth"), //
		jMethod<::jint()>("getSecond"), //
		jMethod<::java::util::TimeZone(::jint)>("getTimeZone"), //
		jMethod<::jint()>("getTimezone"), //
		jMethod<::javax::xml::namespace_::QName()>("getXMLSchemaType"), //
		jMethod<::jint()>("getYear"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isValid"), //
		jMethod<::javax::xml::datatype::XMLGregorianCalendar()>("normalize"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("setDay"), //
		jMethod<::jvoid(::java::math::BigDecimal)>("setFractionalSecond"), //
		jMethod<::jvoid(::jint)>("setHour"), //
		jMethod<::jvoid(::jint)>("setMillisecond"), //
		jMethod<::jvoid(::jint)>("setMinute"), //
		jMethod<::jvoid(::jint)>("setMonth"), //
		jMethod<::jvoid(::jint)>("setSecond"), //
		jMethod<::jvoid(::jint, ::jint, ::jint)>("setTime"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("setTime"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::java::math::BigDecimal)>("setTime"), //
		jMethod<::jvoid(::jint)>("setTimezone"), //
		jMethod<::jvoid(::jint)>("setYear"), //
		jMethod<::jvoid(::java::math::BigInteger)>("setYear"), //
		jMethod<::java::util::GregorianCalendar()>("toGregorianCalendar"), //
		jMethod<::java::util::GregorianCalendar(::java::util::TimeZone, ::java::util::Locale, ::javax::xml::datatype::XMLGregorianCalendar)>("toGregorianCalendar"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String()>("toXMLFormat"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compare(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compare")] != -1);
		return call<R>("compare", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDay")] != -1);
		return call<R>("getDay", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getEon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEon")] != -1);
		return call<R>("getEon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigInteger, typename... Args>
	auto getEonAndYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEonAndYear")] != -1);
		return call<R>("getEonAndYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigDecimal, typename... Args>
	auto getFractionalSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFractionalSecond")] != -1);
		return call<R>("getFractionalSecond", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHour(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHour")] != -1);
		return call<R>("getHour", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMillisecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMillisecond")] != -1);
		return call<R>("getMillisecond", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinute")] != -1);
		return call<R>("getMinute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonth")] != -1);
		return call<R>("getMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSecond")] != -1);
		return call<R>("getSecond", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::TimeZone, typename... Args>
	auto getTimeZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeZone")] != -1);
		return call<R>("getTimeZone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTimezone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimezone")] != -1);
		return call<R>("getTimezone", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::namespace_::QName, typename... Args>
	auto getXMLSchemaType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXMLSchemaType")] != -1);
		return call<R>("getXMLSchemaType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getYear")] != -1);
		return call<R>("getYear", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isValid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValid")] != -1);
		return call<R>("isValid", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::xml::datatype::XMLGregorianCalendar, typename... Args>
	auto normalize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return call<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDay")] != -1);
		return call<R>("setDay", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFractionalSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFractionalSecond")] != -1);
		return call<R>("setFractionalSecond", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHour(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHour")] != -1);
		return call<R>("setHour", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMillisecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMillisecond")] != -1);
		return call<R>("setMillisecond", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinute")] != -1);
		return call<R>("setMinute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMonth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMonth")] != -1);
		return call<R>("setMonth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSecond(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSecond")] != -1);
		return call<R>("setSecond", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimezone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimezone")] != -1);
		return call<R>("setTimezone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setYear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setYear")] != -1);
		return call<R>("setYear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::GregorianCalendar, typename... Args>
	auto toGregorianCalendar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toGregorianCalendar")] != -1);
		return call<R>("toGregorianCalendar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toXMLFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toXMLFormat")] != -1);
		return call<R>("toXMLFormat", std::forward<Args>(args)...);
	}

};

#endif
