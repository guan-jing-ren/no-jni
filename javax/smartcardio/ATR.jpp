#ifndef javax_smartcardio_ATR_HPP
#define javax_smartcardio_ATR_HPP

#include "../../jfwd_decl.hpp"

class ::javax::smartcardio::ATR : public jObject<::javax::smartcardio::ATR, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_smartcardio / "ATR";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::jbyte *()>("getHistoricalBytes"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getHistoricalBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getHistoricalBytes")] != -1);
		return call<R>("getHistoricalBytes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
