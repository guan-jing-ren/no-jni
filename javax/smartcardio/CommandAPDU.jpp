#ifndef javax_smartcardio_CommandAPDU_HPP
#define javax_smartcardio_CommandAPDU_HPP

#include "../../jfwd_decl.hpp"

class ::javax::smartcardio::CommandAPDU : public jObject<::javax::smartcardio::CommandAPDU, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_smartcardio / "CommandAPDU";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jbyte *)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jbyte *, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jbyte *, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jbyte *, ::jint, ::jint, ::jint)>(), //
		jConstructor<::jvoid(::java::nio::ByteBuffer)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::jint()>("getCLA"), //
		jMethod<::jbyte *()>("getData"), //
		jMethod<::jint()>("getINS"), //
		jMethod<::jint()>("getNc"), //
		jMethod<::jint()>("getNe"), //
		jMethod<::jint()>("getP1"), //
		jMethod<::jint()>("getP2"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCLA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCLA")] != -1);
		return call<R>("getCLA", forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getINS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getINS")] != -1);
		return call<R>("getINS", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNc")] != -1);
		return call<R>("getNc", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getNe")] != -1);
		return call<R>("getNe", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getP1")] != -1);
		return call<R>("getP1", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getP2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getP2")] != -1);
		return call<R>("getP2", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
