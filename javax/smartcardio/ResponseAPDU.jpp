#ifndef javax_smartcardio_ResponseAPDU_HPP
#define javax_smartcardio_ResponseAPDU_HPP

#include "../../jfwd_decl.hpp"

class ::javax::smartcardio::ResponseAPDU : public jObject<::javax::smartcardio::ResponseAPDU, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_smartcardio / "ResponseAPDU";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::jbyte *()>("getData"), //
		jMethod<::jint()>("getNr"), //
		jMethod<::jint()>("getSW"), //
		jMethod<::jint()>("getSW1"), //
		jMethod<::jint()>("getSW2"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNr")] != -1);
		return call<R>("getNr", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSW(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSW")] != -1);
		return call<R>("getSW", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSW1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSW1")] != -1);
		return call<R>("getSW1", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSW2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSW2")] != -1);
		return call<R>("getSW2", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
