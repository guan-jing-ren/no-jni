#ifndef javax_smartcardio_CardTerminals$State_HPP
#define javax_smartcardio_CardTerminals$State_HPP

#include "../../jfwd_decl.hpp"

class ::javax::smartcardio::CardTerminals$State : public jObject<::javax::smartcardio::CardTerminals$State, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_smartcardio / "CardTerminals$State";

	constexpr static Enume field_signatures{
		jField<::javax::smartcardio::CardTerminals$State>("ALL"), //
		jField<::javax::smartcardio::CardTerminals$State>("CARD_ABSENT"), //
		jField<::javax::smartcardio::CardTerminals$State>("CARD_INSERTION"), //
		jField<::javax::smartcardio::CardTerminals$State>("CARD_PRESENT"), //
		jField<::javax::smartcardio::CardTerminals$State>("CARD_REMOVAL"), //
	};

	template<typename F = ::javax::smartcardio::CardTerminals$State>
	static auto ALL() {
		static_assert(field_signatures[jField<F>("ALL")] != -1);
		return sat<F>("ALL");
	}

	template<typename F = ::javax::smartcardio::CardTerminals$State>
	static auto CARD_ABSENT() {
		static_assert(field_signatures[jField<F>("CARD_ABSENT")] != -1);
		return sat<F>("CARD_ABSENT");
	}

	template<typename F = ::javax::smartcardio::CardTerminals$State>
	static auto CARD_INSERTION() {
		static_assert(field_signatures[jField<F>("CARD_INSERTION")] != -1);
		return sat<F>("CARD_INSERTION");
	}

	template<typename F = ::javax::smartcardio::CardTerminals$State>
	static auto CARD_PRESENT() {
		static_assert(field_signatures[jField<F>("CARD_PRESENT")] != -1);
		return sat<F>("CARD_PRESENT");
	}

	template<typename F = ::javax::smartcardio::CardTerminals$State>
	static auto CARD_REMOVAL() {
		static_assert(field_signatures[jField<F>("CARD_REMOVAL")] != -1);
		return sat<F>("CARD_REMOVAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::javax::smartcardio::CardTerminals$State(::java::lang::String)>("valueOf"), //
		jMethod<::javax::smartcardio::CardTerminals$State *()>("values"), //
	};

	template<typename R = ::javax::smartcardio::CardTerminals$State, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::smartcardio::CardTerminals$State *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
