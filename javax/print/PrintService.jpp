#ifndef javax_print_PrintService_HPP
#define javax_print_PrintService_HPP

#include "../../jfwd_decl.hpp"

class ::javax::print::PrintService : public jObject<::javax::print::PrintService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print / "PrintService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::print::event::PrintServiceAttributeListener)>("addPrintServiceAttributeListener"), //
		jMethod<::javax::print::DocPrintJob()>("createPrintJob"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::javax::print::attribute::PrintServiceAttribute(::java::lang::Class)>("getAttribute"), //
		jMethod<::javax::print::attribute::PrintServiceAttributeSet()>("getAttributes"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("getDefaultAttributeValue"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::print::ServiceUIFactory()>("getServiceUIFactory"), //
		jMethod<::java::lang::Class *()>("getSupportedAttributeCategories"), //
		jMethod<::java::lang::Object(::java::lang::Class, ::javax::print::DocFlavor, ::javax::print::attribute::AttributeSet)>("getSupportedAttributeValues"), //
		jMethod<::javax::print::DocFlavor *()>("getSupportedDocFlavors"), //
		jMethod<::javax::print::attribute::AttributeSet(::javax::print::DocFlavor, ::javax::print::attribute::AttributeSet)>("getUnsupportedAttributes"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::java::lang::Class)>("isAttributeCategorySupported"), //
		jMethod<::jboolean(::javax::print::attribute::Attribute, ::javax::print::DocFlavor, ::javax::print::attribute::AttributeSet)>("isAttributeValueSupported"), //
		jMethod<::jboolean(::javax::print::DocFlavor)>("isDocFlavorSupported"), //
		jMethod<::jvoid(::javax::print::event::PrintServiceAttributeListener)>("removePrintServiceAttributeListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPrintServiceAttributeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("addPrintServiceAttributeListener")] != -1);
		return call<R>("addPrintServiceAttributeListener", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::DocPrintJob, typename... Args>
	auto createPrintJob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("createPrintJob")] != -1);
		return call<R>("createPrintJob", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::attribute::PrintServiceAttribute, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::attribute::PrintServiceAttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDefaultAttributeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDefaultAttributeValue")] != -1);
		return call<R>("getDefaultAttributeValue", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::ServiceUIFactory, typename... Args>
	auto getServiceUIFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getServiceUIFactory")] != -1);
		return call<R>("getServiceUIFactory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getSupportedAttributeCategories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedAttributeCategories")] != -1);
		return call<R>("getSupportedAttributeCategories", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getSupportedAttributeValues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedAttributeValues")] != -1);
		return call<R>("getSupportedAttributeValues", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::DocFlavor *, typename... Args>
	auto getSupportedDocFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedDocFlavors")] != -1);
		return call<R>("getSupportedDocFlavors", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::attribute::AttributeSet, typename... Args>
	auto getUnsupportedAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getUnsupportedAttributes")] != -1);
		return call<R>("getUnsupportedAttributes", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttributeCategorySupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAttributeCategorySupported")] != -1);
		return call<R>("isAttributeCategorySupported", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAttributeValueSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAttributeValueSupported")] != -1);
		return call<R>("isAttributeValueSupported", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDocFlavorSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDocFlavorSupported")] != -1);
		return call<R>("isDocFlavorSupported", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePrintServiceAttributeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("removePrintServiceAttributeListener")] != -1);
		return call<R>("removePrintServiceAttributeListener", forward<Args>(args)...);
	}

};

#endif
