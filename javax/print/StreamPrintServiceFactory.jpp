#ifndef javax_print_StreamPrintServiceFactory_HPP
#define javax_print_StreamPrintServiceFactory_HPP

#include "../../jfwd_decl.hpp"

class ::javax::print::StreamPrintServiceFactory : public jObject<::javax::print::StreamPrintServiceFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print / "StreamPrintServiceFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getOutputFormat"), //
		jMethod<::javax::print::StreamPrintService(::java::io::OutputStream)>("getPrintService"), //
		jMethod<::javax::print::DocFlavor *()>("getSupportedDocFlavors"), //
		jMethod<::javax::print::StreamPrintServiceFactory *(::javax::print::DocFlavor, ::java::lang::String)>("lookupStreamPrintServiceFactories"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getOutputFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getOutputFormat")] != -1);
		return call<R>("getOutputFormat", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::StreamPrintService, typename... Args>
	auto getPrintService(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrintService")] != -1);
		return call<R>("getPrintService", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::DocFlavor *, typename... Args>
	auto getSupportedDocFlavors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSupportedDocFlavors")] != -1);
		return call<R>("getSupportedDocFlavors", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::StreamPrintServiceFactory *, typename... Args>
	static auto lookupStreamPrintServiceFactories(Args &&...args) {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("lookupStreamPrintServiceFactories")] != -1);
		return scall<R>("lookupStreamPrintServiceFactories", forward<Args>(args)...);
	}

};

#endif
