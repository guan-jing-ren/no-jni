#ifndef javax_print_DocFlavor$SERVICE_FORMATTED_HPP
#define javax_print_DocFlavor$SERVICE_FORMATTED_HPP

#include "../../jfwd_decl.hpp"

class ::javax::print::DocFlavor$SERVICE_FORMATTED : public jObject<::javax::print::DocFlavor$SERVICE_FORMATTED, ::javax::print::DocFlavor> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print / "DocFlavor$SERVICE_FORMATTED";

	constexpr static Enume field_signatures{
		jField<::javax::print::DocFlavor$SERVICE_FORMATTED>("PAGEABLE"), //
		jField<::javax::print::DocFlavor$SERVICE_FORMATTED>("PRINTABLE"), //
		jField<::javax::print::DocFlavor$SERVICE_FORMATTED>("RENDERABLE_IMAGE"), //
	};

	template<typename F = ::javax::print::DocFlavor$SERVICE_FORMATTED>
	static auto PAGEABLE() {
		static_assert(field_signatures[jField<F>("PAGEABLE")] != -1);
		return sat<F>("PAGEABLE");
	}

	template<typename F = ::javax::print::DocFlavor$SERVICE_FORMATTED>
	static auto PRINTABLE() {
		static_assert(field_signatures[jField<F>("PRINTABLE")] != -1);
		return sat<F>("PRINTABLE");
	}

	template<typename F = ::javax::print::DocFlavor$SERVICE_FORMATTED>
	static auto RENDERABLE_IMAGE() {
		static_assert(field_signatures[jField<F>("RENDERABLE_IMAGE")] != -1);
		return sat<F>("RENDERABLE_IMAGE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
	};

};

#endif
