#ifndef javax_print_SimpleDoc_HPP
#define javax_print_SimpleDoc_HPP

#include "../../jfwd_decl.hpp"

class ::javax::print::SimpleDoc : public jObject<::javax::print::SimpleDoc, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print / "SimpleDoc";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::javax::print::DocFlavor, ::javax::print::attribute::DocAttributeSet)>(), //
		jMethod<::javax::print::attribute::DocAttributeSet()>("getAttributes"), //
		jMethod<::javax::print::DocFlavor()>("getDocFlavor"), //
		jMethod<::java::lang::Object()>("getPrintData"), //
		jMethod<::java::io::Reader()>("getReaderForText"), //
		jMethod<::java::io::InputStream()>("getStreamForBytes"), //
	};

	template<typename R = ::javax::print::attribute::DocAttributeSet, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::javax::print::DocFlavor, typename... Args>
	auto getDocFlavor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDocFlavor")] != -1);
		return call<R>("getDocFlavor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getPrintData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrintData")] != -1);
		return call<R>("getPrintData", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getReaderForText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getReaderForText")] != -1);
		return call<R>("getReaderForText", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getStreamForBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getStreamForBytes")] != -1);
		return call<R>("getStreamForBytes", forward<Args>(args)...);
	}

};

#endif
