#ifndef javax_print_attribute_HashDocAttributeSet_HPP
#define javax_print_attribute_HashDocAttributeSet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::print::attribute::HashDocAttributeSet : public jObject<::javax::print::attribute::HashDocAttributeSet, ::javax::print::attribute::HashAttributeSet> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute / "HashDocAttributeSet";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::print::attribute::DocAttribute)>(), //
		jConstructor<::jvoid(::javax::print::attribute::DocAttributeSet)>(), //
		jConstructor<::jvoid(::javax::print::attribute::DocAttribute *)>(), //
		jMethod<::jboolean(::javax::print::attribute::Attribute)>("add"), //
		jMethod<::jboolean(::javax::print::attribute::AttributeSet)>("addAll"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", std::forward<Args>(args)...);
	}

};

#endif
