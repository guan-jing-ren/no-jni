#ifndef javax_print_attribute_ResolutionSyntax_HPP
#define javax_print_attribute_ResolutionSyntax_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::print::attribute::ResolutionSyntax : public jObject<::javax::print::attribute::ResolutionSyntax, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute / "ResolutionSyntax";

	constexpr static Enume field_signatures{
		jField<::jint>("DPCM"), //
		jField<::jint>("DPI"), //
	};

	template<typename F = ::jint>
	static auto DPCM() {
		static_assert(field_signatures[jField<F>("DPCM")] != -1);
		return sat<F>("DPCM");
	}

	template<typename F = ::jint>
	static auto DPI() {
		static_assert(field_signatures[jField<F>("DPI")] != -1);
		return sat<F>("DPI");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint(::jint)>("getCrossFeedResolution"), //
		jMethod<::jint(::jint)>("getFeedResolution"), //
		jMethod<::jint *(::jint)>("getResolution"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::javax::print::attribute::ResolutionSyntax)>("lessThanOrEquals"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint, ::java::lang::String)>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCrossFeedResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCrossFeedResolution")] != -1);
		return call<R>("getCrossFeedResolution", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFeedResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFeedResolution")] != -1);
		return call<R>("getFeedResolution", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getResolution(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResolution")] != -1);
		return call<R>("getResolution", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto lessThanOrEquals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lessThanOrEquals")] != -1);
		return call<R>("lessThanOrEquals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
