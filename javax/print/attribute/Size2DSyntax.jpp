#ifndef javax_print_attribute_Size2DSyntax_HPP
#define javax_print_attribute_Size2DSyntax_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::print::attribute::Size2DSyntax : public jObject<::javax::print::attribute::Size2DSyntax, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute / "Size2DSyntax";

	constexpr static Enume field_signatures{
		jField<::jint>("INCH"), //
		jField<::jint>("MM"), //
	};

	template<typename F = ::jint>
	static auto INCH() {
		static_assert(field_signatures[jField<F>("INCH")] != -1);
		return sat<F>("INCH");
	}

	template<typename F = ::jint>
	static auto MM() {
		static_assert(field_signatures[jField<F>("MM")] != -1);
		return sat<F>("MM");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jfloat *(::jint)>("getSize"), //
		jMethod<::jfloat(::jint)>("getX"), //
		jMethod<::jfloat(::jint)>("getY"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint, ::java::lang::String)>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", forward<Args>(args)...);
	}

};

#endif
