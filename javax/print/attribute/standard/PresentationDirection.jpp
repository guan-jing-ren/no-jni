#ifndef javax_print_attribute_standard_PresentationDirection_HPP
#define javax_print_attribute_standard_PresentationDirection_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::PresentationDirection : public jObject<::javax::print::attribute::standard::PresentationDirection, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "PresentationDirection";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::PresentationDirection>("TOBOTTOM_TOLEFT"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TOBOTTOM_TORIGHT"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TOLEFT_TOBOTTOM"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TOLEFT_TOTOP"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TORIGHT_TOBOTTOM"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TORIGHT_TOTOP"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TOTOP_TOLEFT"), //
		jField<::javax::print::attribute::standard::PresentationDirection>("TOTOP_TORIGHT"), //
	};

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOBOTTOM_TOLEFT() {
		static_assert(field_signatures[jField<F>("TOBOTTOM_TOLEFT")] != -1);
		return sat<F>("TOBOTTOM_TOLEFT");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOBOTTOM_TORIGHT() {
		static_assert(field_signatures[jField<F>("TOBOTTOM_TORIGHT")] != -1);
		return sat<F>("TOBOTTOM_TORIGHT");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOLEFT_TOBOTTOM() {
		static_assert(field_signatures[jField<F>("TOLEFT_TOBOTTOM")] != -1);
		return sat<F>("TOLEFT_TOBOTTOM");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOLEFT_TOTOP() {
		static_assert(field_signatures[jField<F>("TOLEFT_TOTOP")] != -1);
		return sat<F>("TOLEFT_TOTOP");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TORIGHT_TOBOTTOM() {
		static_assert(field_signatures[jField<F>("TORIGHT_TOBOTTOM")] != -1);
		return sat<F>("TORIGHT_TOBOTTOM");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TORIGHT_TOTOP() {
		static_assert(field_signatures[jField<F>("TORIGHT_TOTOP")] != -1);
		return sat<F>("TORIGHT_TOTOP");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOTOP_TOLEFT() {
		static_assert(field_signatures[jField<F>("TOTOP_TOLEFT")] != -1);
		return sat<F>("TOTOP_TOLEFT");
	}

	template<typename F = ::javax::print::attribute::standard::PresentationDirection>
	static auto TOTOP_TORIGHT() {
		static_assert(field_signatures[jField<F>("TOTOP_TORIGHT")] != -1);
		return sat<F>("TOTOP_TORIGHT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
