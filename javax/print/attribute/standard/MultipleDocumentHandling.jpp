#ifndef javax_print_attribute_standard_MultipleDocumentHandling_HPP
#define javax_print_attribute_standard_MultipleDocumentHandling_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::MultipleDocumentHandling : public jObject<::javax::print::attribute::standard::MultipleDocumentHandling, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "MultipleDocumentHandling";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::MultipleDocumentHandling>("SEPARATE_DOCUMENTS_COLLATED_COPIES"), //
		jField<::javax::print::attribute::standard::MultipleDocumentHandling>("SEPARATE_DOCUMENTS_UNCOLLATED_COPIES"), //
		jField<::javax::print::attribute::standard::MultipleDocumentHandling>("SINGLE_DOCUMENT"), //
		jField<::javax::print::attribute::standard::MultipleDocumentHandling>("SINGLE_DOCUMENT_NEW_SHEET"), //
	};

	template<typename F = ::javax::print::attribute::standard::MultipleDocumentHandling>
	static auto SEPARATE_DOCUMENTS_COLLATED_COPIES() {
		static_assert(field_signatures[jField<F>("SEPARATE_DOCUMENTS_COLLATED_COPIES")] != -1);
		return sat<F>("SEPARATE_DOCUMENTS_COLLATED_COPIES");
	}

	template<typename F = ::javax::print::attribute::standard::MultipleDocumentHandling>
	static auto SEPARATE_DOCUMENTS_UNCOLLATED_COPIES() {
		static_assert(field_signatures[jField<F>("SEPARATE_DOCUMENTS_UNCOLLATED_COPIES")] != -1);
		return sat<F>("SEPARATE_DOCUMENTS_UNCOLLATED_COPIES");
	}

	template<typename F = ::javax::print::attribute::standard::MultipleDocumentHandling>
	static auto SINGLE_DOCUMENT() {
		static_assert(field_signatures[jField<F>("SINGLE_DOCUMENT")] != -1);
		return sat<F>("SINGLE_DOCUMENT");
	}

	template<typename F = ::javax::print::attribute::standard::MultipleDocumentHandling>
	static auto SINGLE_DOCUMENT_NEW_SHEET() {
		static_assert(field_signatures[jField<F>("SINGLE_DOCUMENT_NEW_SHEET")] != -1);
		return sat<F>("SINGLE_DOCUMENT_NEW_SHEET");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

};

#endif
