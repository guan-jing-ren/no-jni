#ifndef javax_print_attribute_standard_MediaName_HPP
#define javax_print_attribute_standard_MediaName_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::MediaName : public jObject<::javax::print::attribute::standard::MediaName, ::javax::print::attribute::standard::Media> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "MediaName";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::MediaName>("ISO_A4_TRANSPARENT"), //
		jField<::javax::print::attribute::standard::MediaName>("ISO_A4_WHITE"), //
		jField<::javax::print::attribute::standard::MediaName>("NA_LETTER_TRANSPARENT"), //
		jField<::javax::print::attribute::standard::MediaName>("NA_LETTER_WHITE"), //
	};

	template<typename F = ::javax::print::attribute::standard::MediaName>
	static auto ISO_A4_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("ISO_A4_TRANSPARENT")] != -1);
		return sat<F>("ISO_A4_TRANSPARENT");
	}

	template<typename F = ::javax::print::attribute::standard::MediaName>
	static auto ISO_A4_WHITE() {
		static_assert(field_signatures[jField<F>("ISO_A4_WHITE")] != -1);
		return sat<F>("ISO_A4_WHITE");
	}

	template<typename F = ::javax::print::attribute::standard::MediaName>
	static auto NA_LETTER_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("NA_LETTER_TRANSPARENT")] != -1);
		return sat<F>("NA_LETTER_TRANSPARENT");
	}

	template<typename F = ::javax::print::attribute::standard::MediaName>
	static auto NA_LETTER_WHITE() {
		static_assert(field_signatures[jField<F>("NA_LETTER_WHITE")] != -1);
		return sat<F>("NA_LETTER_WHITE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
