#ifndef javax_print_attribute_standard_MediaTray_HPP
#define javax_print_attribute_standard_MediaTray_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::MediaTray : public jObject<::javax::print::attribute::standard::MediaTray, ::javax::print::attribute::standard::Media> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "MediaTray";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::MediaTray>("BOTTOM"), //
		jField<::javax::print::attribute::standard::MediaTray>("ENVELOPE"), //
		jField<::javax::print::attribute::standard::MediaTray>("LARGE_CAPACITY"), //
		jField<::javax::print::attribute::standard::MediaTray>("MAIN"), //
		jField<::javax::print::attribute::standard::MediaTray>("MANUAL"), //
		jField<::javax::print::attribute::standard::MediaTray>("MIDDLE"), //
		jField<::javax::print::attribute::standard::MediaTray>("SIDE"), //
		jField<::javax::print::attribute::standard::MediaTray>("TOP"), //
	};

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto BOTTOM() {
		static_assert(field_signatures[jField<F>("BOTTOM")] != -1);
		return sat<F>("BOTTOM");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto ENVELOPE() {
		static_assert(field_signatures[jField<F>("ENVELOPE")] != -1);
		return sat<F>("ENVELOPE");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto LARGE_CAPACITY() {
		static_assert(field_signatures[jField<F>("LARGE_CAPACITY")] != -1);
		return sat<F>("LARGE_CAPACITY");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto MAIN() {
		static_assert(field_signatures[jField<F>("MAIN")] != -1);
		return sat<F>("MAIN");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto MANUAL() {
		static_assert(field_signatures[jField<F>("MANUAL")] != -1);
		return sat<F>("MANUAL");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto MIDDLE() {
		static_assert(field_signatures[jField<F>("MIDDLE")] != -1);
		return sat<F>("MIDDLE");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto SIDE() {
		static_assert(field_signatures[jField<F>("SIDE")] != -1);
		return sat<F>("SIDE");
	}

	template<typename F = ::javax::print::attribute::standard::MediaTray>
	static auto TOP() {
		static_assert(field_signatures[jField<F>("TOP")] != -1);
		return sat<F>("TOP");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
