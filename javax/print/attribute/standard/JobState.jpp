#ifndef javax_print_attribute_standard_JobState_HPP
#define javax_print_attribute_standard_JobState_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::JobState : public jObject<::javax::print::attribute::standard::JobState, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "JobState";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::JobState>("ABORTED"), //
		jField<::javax::print::attribute::standard::JobState>("CANCELED"), //
		jField<::javax::print::attribute::standard::JobState>("COMPLETED"), //
		jField<::javax::print::attribute::standard::JobState>("PENDING"), //
		jField<::javax::print::attribute::standard::JobState>("PENDING_HELD"), //
		jField<::javax::print::attribute::standard::JobState>("PROCESSING"), //
		jField<::javax::print::attribute::standard::JobState>("PROCESSING_STOPPED"), //
		jField<::javax::print::attribute::standard::JobState>("UNKNOWN"), //
	};

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto ABORTED() {
		static_assert(field_signatures[jField<F>("ABORTED")] != -1);
		return sat<F>("ABORTED");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto CANCELED() {
		static_assert(field_signatures[jField<F>("CANCELED")] != -1);
		return sat<F>("CANCELED");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto COMPLETED() {
		static_assert(field_signatures[jField<F>("COMPLETED")] != -1);
		return sat<F>("COMPLETED");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto PENDING() {
		static_assert(field_signatures[jField<F>("PENDING")] != -1);
		return sat<F>("PENDING");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto PENDING_HELD() {
		static_assert(field_signatures[jField<F>("PENDING_HELD")] != -1);
		return sat<F>("PENDING_HELD");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto PROCESSING() {
		static_assert(field_signatures[jField<F>("PROCESSING")] != -1);
		return sat<F>("PROCESSING");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto PROCESSING_STOPPED() {
		static_assert(field_signatures[jField<F>("PROCESSING_STOPPED")] != -1);
		return sat<F>("PROCESSING_STOPPED");
	}

	template<typename F = ::javax::print::attribute::standard::JobState>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

};

#endif
