#ifndef javax_print_attribute_standard_JobStateReason_HPP
#define javax_print_attribute_standard_JobStateReason_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::JobStateReason : public jObject<::javax::print::attribute::standard::JobStateReason, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "JobStateReason";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::JobStateReason>("ABORTED_BY_SYSTEM"), //
		jField<::javax::print::attribute::standard::JobStateReason>("COMPRESSION_ERROR"), //
		jField<::javax::print::attribute::standard::JobStateReason>("DOCUMENT_ACCESS_ERROR"), //
		jField<::javax::print::attribute::standard::JobStateReason>("DOCUMENT_FORMAT_ERROR"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_CANCELED_AT_DEVICE"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_CANCELED_BY_OPERATOR"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_CANCELED_BY_USER"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_COMPLETED_SUCCESSFULLY"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_COMPLETED_WITH_ERRORS"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_COMPLETED_WITH_WARNINGS"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_DATA_INSUFFICIENT"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_HOLD_UNTIL_SPECIFIED"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_INCOMING"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_INTERPRETING"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_OUTGOING"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_PRINTING"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_QUEUED"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_QUEUED_FOR_MARKER"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_RESTARTABLE"), //
		jField<::javax::print::attribute::standard::JobStateReason>("JOB_TRANSFORMING"), //
		jField<::javax::print::attribute::standard::JobStateReason>("PRINTER_STOPPED"), //
		jField<::javax::print::attribute::standard::JobStateReason>("PRINTER_STOPPED_PARTLY"), //
		jField<::javax::print::attribute::standard::JobStateReason>("PROCESSING_TO_STOP_POINT"), //
		jField<::javax::print::attribute::standard::JobStateReason>("QUEUED_IN_DEVICE"), //
		jField<::javax::print::attribute::standard::JobStateReason>("RESOURCES_ARE_NOT_READY"), //
		jField<::javax::print::attribute::standard::JobStateReason>("SERVICE_OFF_LINE"), //
		jField<::javax::print::attribute::standard::JobStateReason>("SUBMISSION_INTERRUPTED"), //
		jField<::javax::print::attribute::standard::JobStateReason>("UNSUPPORTED_COMPRESSION"), //
		jField<::javax::print::attribute::standard::JobStateReason>("UNSUPPORTED_DOCUMENT_FORMAT"), //
	};

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto ABORTED_BY_SYSTEM() {
		static_assert(field_signatures[jField<F>("ABORTED_BY_SYSTEM")] != -1);
		return sat<F>("ABORTED_BY_SYSTEM");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto COMPRESSION_ERROR() {
		static_assert(field_signatures[jField<F>("COMPRESSION_ERROR")] != -1);
		return sat<F>("COMPRESSION_ERROR");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto DOCUMENT_ACCESS_ERROR() {
		static_assert(field_signatures[jField<F>("DOCUMENT_ACCESS_ERROR")] != -1);
		return sat<F>("DOCUMENT_ACCESS_ERROR");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto DOCUMENT_FORMAT_ERROR() {
		static_assert(field_signatures[jField<F>("DOCUMENT_FORMAT_ERROR")] != -1);
		return sat<F>("DOCUMENT_FORMAT_ERROR");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_CANCELED_AT_DEVICE() {
		static_assert(field_signatures[jField<F>("JOB_CANCELED_AT_DEVICE")] != -1);
		return sat<F>("JOB_CANCELED_AT_DEVICE");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_CANCELED_BY_OPERATOR() {
		static_assert(field_signatures[jField<F>("JOB_CANCELED_BY_OPERATOR")] != -1);
		return sat<F>("JOB_CANCELED_BY_OPERATOR");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_CANCELED_BY_USER() {
		static_assert(field_signatures[jField<F>("JOB_CANCELED_BY_USER")] != -1);
		return sat<F>("JOB_CANCELED_BY_USER");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_COMPLETED_SUCCESSFULLY() {
		static_assert(field_signatures[jField<F>("JOB_COMPLETED_SUCCESSFULLY")] != -1);
		return sat<F>("JOB_COMPLETED_SUCCESSFULLY");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_COMPLETED_WITH_ERRORS() {
		static_assert(field_signatures[jField<F>("JOB_COMPLETED_WITH_ERRORS")] != -1);
		return sat<F>("JOB_COMPLETED_WITH_ERRORS");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_COMPLETED_WITH_WARNINGS() {
		static_assert(field_signatures[jField<F>("JOB_COMPLETED_WITH_WARNINGS")] != -1);
		return sat<F>("JOB_COMPLETED_WITH_WARNINGS");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_DATA_INSUFFICIENT() {
		static_assert(field_signatures[jField<F>("JOB_DATA_INSUFFICIENT")] != -1);
		return sat<F>("JOB_DATA_INSUFFICIENT");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_HOLD_UNTIL_SPECIFIED() {
		static_assert(field_signatures[jField<F>("JOB_HOLD_UNTIL_SPECIFIED")] != -1);
		return sat<F>("JOB_HOLD_UNTIL_SPECIFIED");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_INCOMING() {
		static_assert(field_signatures[jField<F>("JOB_INCOMING")] != -1);
		return sat<F>("JOB_INCOMING");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_INTERPRETING() {
		static_assert(field_signatures[jField<F>("JOB_INTERPRETING")] != -1);
		return sat<F>("JOB_INTERPRETING");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_OUTGOING() {
		static_assert(field_signatures[jField<F>("JOB_OUTGOING")] != -1);
		return sat<F>("JOB_OUTGOING");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_PRINTING() {
		static_assert(field_signatures[jField<F>("JOB_PRINTING")] != -1);
		return sat<F>("JOB_PRINTING");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_QUEUED() {
		static_assert(field_signatures[jField<F>("JOB_QUEUED")] != -1);
		return sat<F>("JOB_QUEUED");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_QUEUED_FOR_MARKER() {
		static_assert(field_signatures[jField<F>("JOB_QUEUED_FOR_MARKER")] != -1);
		return sat<F>("JOB_QUEUED_FOR_MARKER");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_RESTARTABLE() {
		static_assert(field_signatures[jField<F>("JOB_RESTARTABLE")] != -1);
		return sat<F>("JOB_RESTARTABLE");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto JOB_TRANSFORMING() {
		static_assert(field_signatures[jField<F>("JOB_TRANSFORMING")] != -1);
		return sat<F>("JOB_TRANSFORMING");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto PRINTER_STOPPED() {
		static_assert(field_signatures[jField<F>("PRINTER_STOPPED")] != -1);
		return sat<F>("PRINTER_STOPPED");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto PRINTER_STOPPED_PARTLY() {
		static_assert(field_signatures[jField<F>("PRINTER_STOPPED_PARTLY")] != -1);
		return sat<F>("PRINTER_STOPPED_PARTLY");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto PROCESSING_TO_STOP_POINT() {
		static_assert(field_signatures[jField<F>("PROCESSING_TO_STOP_POINT")] != -1);
		return sat<F>("PROCESSING_TO_STOP_POINT");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto QUEUED_IN_DEVICE() {
		static_assert(field_signatures[jField<F>("QUEUED_IN_DEVICE")] != -1);
		return sat<F>("QUEUED_IN_DEVICE");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto RESOURCES_ARE_NOT_READY() {
		static_assert(field_signatures[jField<F>("RESOURCES_ARE_NOT_READY")] != -1);
		return sat<F>("RESOURCES_ARE_NOT_READY");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto SERVICE_OFF_LINE() {
		static_assert(field_signatures[jField<F>("SERVICE_OFF_LINE")] != -1);
		return sat<F>("SERVICE_OFF_LINE");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto SUBMISSION_INTERRUPTED() {
		static_assert(field_signatures[jField<F>("SUBMISSION_INTERRUPTED")] != -1);
		return sat<F>("SUBMISSION_INTERRUPTED");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto UNSUPPORTED_COMPRESSION() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_COMPRESSION")] != -1);
		return sat<F>("UNSUPPORTED_COMPRESSION");
	}

	template<typename F = ::javax::print::attribute::standard::JobStateReason>
	static auto UNSUPPORTED_DOCUMENT_FORMAT() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_DOCUMENT_FORMAT")] != -1);
		return sat<F>("UNSUPPORTED_DOCUMENT_FORMAT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

};

#endif
