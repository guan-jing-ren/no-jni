#ifndef javax_print_attribute_standard_MediaPrintableArea_HPP
#define javax_print_attribute_standard_MediaPrintableArea_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::MediaPrintableArea : public jObject<::javax::print::attribute::standard::MediaPrintableArea, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "MediaPrintableArea";

	constexpr static Enume field_signatures{
		jField<::jint>("INCH"), //
		jField<::jint>("MM"), //
	};

	template<typename F = ::jint>
	static auto INCH() {
		static_assert(field_signatures[jField<F>("INCH")] != -1);
		return sat<F>("INCH");
	}

	template<typename F = ::jint>
	static auto MM() {
		static_assert(field_signatures[jField<F>("MM")] != -1);
		return sat<F>("MM");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat, ::jfloat, ::jfloat, ::jfloat, ::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint, ::jint, ::jint, ::jint)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::jfloat(::jint)>("getHeight"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jfloat *(::jint)>("getPrintableArea"), //
		jMethod<::jfloat(::jint)>("getWidth"), //
		jMethod<::jfloat(::jint)>("getX"), //
		jMethod<::jfloat(::jint)>("getY"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jint, ::java::lang::String)>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto getPrintableArea(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrintableArea")] != -1);
		return call<R>("getPrintableArea", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getX")] != -1);
		return call<R>("getX", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getY(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getY")] != -1);
		return call<R>("getY", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
