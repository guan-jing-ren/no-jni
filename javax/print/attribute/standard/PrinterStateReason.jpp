#ifndef javax_print_attribute_standard_PrinterStateReason_HPP
#define javax_print_attribute_standard_PrinterStateReason_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::PrinterStateReason : public jObject<::javax::print::attribute::standard::PrinterStateReason, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "PrinterStateReason";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::PrinterStateReason>("CONNECTING_TO_DEVICE"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("COVER_OPEN"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("DEVELOPER_EMPTY"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("DEVELOPER_LOW"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("DOOR_OPEN"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("FUSER_OVER_TEMP"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("FUSER_UNDER_TEMP"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("INPUT_TRAY_MISSING"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("INTERLOCK_OPEN"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("INTERPRETER_RESOURCE_UNAVAILABLE"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MARKER_SUPPLY_EMPTY"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MARKER_SUPPLY_LOW"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MARKER_WASTE_ALMOST_FULL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MARKER_WASTE_FULL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MEDIA_EMPTY"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MEDIA_JAM"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MEDIA_LOW"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MEDIA_NEEDED"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("MOVING_TO_PAUSED"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OPC_LIFE_OVER"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OPC_NEAR_EOL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OTHER"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OUTPUT_AREA_ALMOST_FULL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OUTPUT_AREA_FULL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("OUTPUT_TRAY_MISSING"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("PAUSED"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("SHUTDOWN"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("SPOOL_AREA_FULL"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("STOPPED_PARTLY"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("STOPPING"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("TIMED_OUT"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("TONER_EMPTY"), //
		jField<::javax::print::attribute::standard::PrinterStateReason>("TONER_LOW"), //
	};

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto CONNECTING_TO_DEVICE() {
		static_assert(field_signatures[jField<F>("CONNECTING_TO_DEVICE")] != -1);
		return sat<F>("CONNECTING_TO_DEVICE");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto COVER_OPEN() {
		static_assert(field_signatures[jField<F>("COVER_OPEN")] != -1);
		return sat<F>("COVER_OPEN");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto DEVELOPER_EMPTY() {
		static_assert(field_signatures[jField<F>("DEVELOPER_EMPTY")] != -1);
		return sat<F>("DEVELOPER_EMPTY");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto DEVELOPER_LOW() {
		static_assert(field_signatures[jField<F>("DEVELOPER_LOW")] != -1);
		return sat<F>("DEVELOPER_LOW");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto DOOR_OPEN() {
		static_assert(field_signatures[jField<F>("DOOR_OPEN")] != -1);
		return sat<F>("DOOR_OPEN");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto FUSER_OVER_TEMP() {
		static_assert(field_signatures[jField<F>("FUSER_OVER_TEMP")] != -1);
		return sat<F>("FUSER_OVER_TEMP");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto FUSER_UNDER_TEMP() {
		static_assert(field_signatures[jField<F>("FUSER_UNDER_TEMP")] != -1);
		return sat<F>("FUSER_UNDER_TEMP");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto INPUT_TRAY_MISSING() {
		static_assert(field_signatures[jField<F>("INPUT_TRAY_MISSING")] != -1);
		return sat<F>("INPUT_TRAY_MISSING");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto INTERLOCK_OPEN() {
		static_assert(field_signatures[jField<F>("INTERLOCK_OPEN")] != -1);
		return sat<F>("INTERLOCK_OPEN");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto INTERPRETER_RESOURCE_UNAVAILABLE() {
		static_assert(field_signatures[jField<F>("INTERPRETER_RESOURCE_UNAVAILABLE")] != -1);
		return sat<F>("INTERPRETER_RESOURCE_UNAVAILABLE");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MARKER_SUPPLY_EMPTY() {
		static_assert(field_signatures[jField<F>("MARKER_SUPPLY_EMPTY")] != -1);
		return sat<F>("MARKER_SUPPLY_EMPTY");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MARKER_SUPPLY_LOW() {
		static_assert(field_signatures[jField<F>("MARKER_SUPPLY_LOW")] != -1);
		return sat<F>("MARKER_SUPPLY_LOW");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MARKER_WASTE_ALMOST_FULL() {
		static_assert(field_signatures[jField<F>("MARKER_WASTE_ALMOST_FULL")] != -1);
		return sat<F>("MARKER_WASTE_ALMOST_FULL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MARKER_WASTE_FULL() {
		static_assert(field_signatures[jField<F>("MARKER_WASTE_FULL")] != -1);
		return sat<F>("MARKER_WASTE_FULL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MEDIA_EMPTY() {
		static_assert(field_signatures[jField<F>("MEDIA_EMPTY")] != -1);
		return sat<F>("MEDIA_EMPTY");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MEDIA_JAM() {
		static_assert(field_signatures[jField<F>("MEDIA_JAM")] != -1);
		return sat<F>("MEDIA_JAM");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MEDIA_LOW() {
		static_assert(field_signatures[jField<F>("MEDIA_LOW")] != -1);
		return sat<F>("MEDIA_LOW");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MEDIA_NEEDED() {
		static_assert(field_signatures[jField<F>("MEDIA_NEEDED")] != -1);
		return sat<F>("MEDIA_NEEDED");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto MOVING_TO_PAUSED() {
		static_assert(field_signatures[jField<F>("MOVING_TO_PAUSED")] != -1);
		return sat<F>("MOVING_TO_PAUSED");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OPC_LIFE_OVER() {
		static_assert(field_signatures[jField<F>("OPC_LIFE_OVER")] != -1);
		return sat<F>("OPC_LIFE_OVER");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OPC_NEAR_EOL() {
		static_assert(field_signatures[jField<F>("OPC_NEAR_EOL")] != -1);
		return sat<F>("OPC_NEAR_EOL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OUTPUT_AREA_ALMOST_FULL() {
		static_assert(field_signatures[jField<F>("OUTPUT_AREA_ALMOST_FULL")] != -1);
		return sat<F>("OUTPUT_AREA_ALMOST_FULL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OUTPUT_AREA_FULL() {
		static_assert(field_signatures[jField<F>("OUTPUT_AREA_FULL")] != -1);
		return sat<F>("OUTPUT_AREA_FULL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto OUTPUT_TRAY_MISSING() {
		static_assert(field_signatures[jField<F>("OUTPUT_TRAY_MISSING")] != -1);
		return sat<F>("OUTPUT_TRAY_MISSING");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto PAUSED() {
		static_assert(field_signatures[jField<F>("PAUSED")] != -1);
		return sat<F>("PAUSED");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto SHUTDOWN() {
		static_assert(field_signatures[jField<F>("SHUTDOWN")] != -1);
		return sat<F>("SHUTDOWN");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto SPOOL_AREA_FULL() {
		static_assert(field_signatures[jField<F>("SPOOL_AREA_FULL")] != -1);
		return sat<F>("SPOOL_AREA_FULL");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto STOPPED_PARTLY() {
		static_assert(field_signatures[jField<F>("STOPPED_PARTLY")] != -1);
		return sat<F>("STOPPED_PARTLY");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto STOPPING() {
		static_assert(field_signatures[jField<F>("STOPPING")] != -1);
		return sat<F>("STOPPING");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto TIMED_OUT() {
		static_assert(field_signatures[jField<F>("TIMED_OUT")] != -1);
		return sat<F>("TIMED_OUT");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto TONER_EMPTY() {
		static_assert(field_signatures[jField<F>("TONER_EMPTY")] != -1);
		return sat<F>("TONER_EMPTY");
	}

	template<typename F = ::javax::print::attribute::standard::PrinterStateReason>
	static auto TONER_LOW() {
		static_assert(field_signatures[jField<F>("TONER_LOW")] != -1);
		return sat<F>("TONER_LOW");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
