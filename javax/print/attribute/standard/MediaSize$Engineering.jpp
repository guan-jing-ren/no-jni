#ifndef javax_print_attribute_standard_MediaSize$Engineering_HPP
#define javax_print_attribute_standard_MediaSize$Engineering_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::MediaSize$Engineering : public jObject<::javax::print::attribute::standard::MediaSize$Engineering, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "MediaSize$Engineering";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::MediaSize>("A"), //
		jField<::javax::print::attribute::standard::MediaSize>("B"), //
		jField<::javax::print::attribute::standard::MediaSize>("C"), //
		jField<::javax::print::attribute::standard::MediaSize>("D"), //
		jField<::javax::print::attribute::standard::MediaSize>("E"), //
	};

	template<typename F = ::javax::print::attribute::standard::MediaSize>
	static auto A() {
		static_assert(field_signatures[jField<F>("A")] != -1);
		return sat<F>("A");
	}

	template<typename F = ::javax::print::attribute::standard::MediaSize>
	static auto B() {
		static_assert(field_signatures[jField<F>("B")] != -1);
		return sat<F>("B");
	}

	template<typename F = ::javax::print::attribute::standard::MediaSize>
	static auto C() {
		static_assert(field_signatures[jField<F>("C")] != -1);
		return sat<F>("C");
	}

	template<typename F = ::javax::print::attribute::standard::MediaSize>
	static auto D() {
		static_assert(field_signatures[jField<F>("D")] != -1);
		return sat<F>("D");
	}

	template<typename F = ::javax::print::attribute::standard::MediaSize>
	static auto E() {
		static_assert(field_signatures[jField<F>("E")] != -1);
		return sat<F>("E");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
