#ifndef javax_print_attribute_standard_Fidelity_HPP
#define javax_print_attribute_standard_Fidelity_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::Fidelity : public jObject<::javax::print::attribute::standard::Fidelity, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "Fidelity";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::Fidelity>("FIDELITY_FALSE"), //
		jField<::javax::print::attribute::standard::Fidelity>("FIDELITY_TRUE"), //
	};

	template<typename F = ::javax::print::attribute::standard::Fidelity>
	static auto FIDELITY_FALSE() {
		static_assert(field_signatures[jField<F>("FIDELITY_FALSE")] != -1);
		return sat<F>("FIDELITY_FALSE");
	}

	template<typename F = ::javax::print::attribute::standard::Fidelity>
	static auto FIDELITY_TRUE() {
		static_assert(field_signatures[jField<F>("FIDELITY_TRUE")] != -1);
		return sat<F>("FIDELITY_TRUE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

};

#endif
