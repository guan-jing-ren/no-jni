#ifndef javax_print_attribute_standard_ReferenceUriSchemesSupported_HPP
#define javax_print_attribute_standard_ReferenceUriSchemesSupported_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::ReferenceUriSchemesSupported : public jObject<::javax::print::attribute::standard::ReferenceUriSchemesSupported, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "ReferenceUriSchemesSupported";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("FILE"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("FTP"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("GOPHER"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("HTTP"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("HTTPS"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("NEWS"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("NNTP"), //
		jField<::javax::print::attribute::standard::ReferenceUriSchemesSupported>("WAIS"), //
	};

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto FILE() {
		static_assert(field_signatures[jField<F>("FILE")] != -1);
		return sat<F>("FILE");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto FTP() {
		static_assert(field_signatures[jField<F>("FTP")] != -1);
		return sat<F>("FTP");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto GOPHER() {
		static_assert(field_signatures[jField<F>("GOPHER")] != -1);
		return sat<F>("GOPHER");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto HTTP() {
		static_assert(field_signatures[jField<F>("HTTP")] != -1);
		return sat<F>("HTTP");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto HTTPS() {
		static_assert(field_signatures[jField<F>("HTTPS")] != -1);
		return sat<F>("HTTPS");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto NEWS() {
		static_assert(field_signatures[jField<F>("NEWS")] != -1);
		return sat<F>("NEWS");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto NNTP() {
		static_assert(field_signatures[jField<F>("NNTP")] != -1);
		return sat<F>("NNTP");
	}

	template<typename F = ::javax::print::attribute::standard::ReferenceUriSchemesSupported>
	static auto WAIS() {
		static_assert(field_signatures[jField<F>("WAIS")] != -1);
		return sat<F>("WAIS");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

};

#endif
