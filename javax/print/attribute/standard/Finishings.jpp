#ifndef javax_print_attribute_standard_Finishings_HPP
#define javax_print_attribute_standard_Finishings_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::print::attribute::standard::Finishings : public jObject<::javax::print::attribute::standard::Finishings, ::javax::print::attribute::EnumSyntax> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_print_attribute_standard / "Finishings";

	constexpr static Enume field_signatures{
		jField<::javax::print::attribute::standard::Finishings>("BIND"), //
		jField<::javax::print::attribute::standard::Finishings>("COVER"), //
		jField<::javax::print::attribute::standard::Finishings>("EDGE_STITCH"), //
		jField<::javax::print::attribute::standard::Finishings>("EDGE_STITCH_BOTTOM"), //
		jField<::javax::print::attribute::standard::Finishings>("EDGE_STITCH_LEFT"), //
		jField<::javax::print::attribute::standard::Finishings>("EDGE_STITCH_RIGHT"), //
		jField<::javax::print::attribute::standard::Finishings>("EDGE_STITCH_TOP"), //
		jField<::javax::print::attribute::standard::Finishings>("NONE"), //
		jField<::javax::print::attribute::standard::Finishings>("SADDLE_STITCH"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_BOTTOM_LEFT"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_BOTTOM_RIGHT"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_DUAL_BOTTOM"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_DUAL_LEFT"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_DUAL_RIGHT"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_DUAL_TOP"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_TOP_LEFT"), //
		jField<::javax::print::attribute::standard::Finishings>("STAPLE_TOP_RIGHT"), //
	};

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto BIND() {
		static_assert(field_signatures[jField<F>("BIND")] != -1);
		return sat<F>("BIND");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto COVER() {
		static_assert(field_signatures[jField<F>("COVER")] != -1);
		return sat<F>("COVER");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto EDGE_STITCH() {
		static_assert(field_signatures[jField<F>("EDGE_STITCH")] != -1);
		return sat<F>("EDGE_STITCH");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto EDGE_STITCH_BOTTOM() {
		static_assert(field_signatures[jField<F>("EDGE_STITCH_BOTTOM")] != -1);
		return sat<F>("EDGE_STITCH_BOTTOM");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto EDGE_STITCH_LEFT() {
		static_assert(field_signatures[jField<F>("EDGE_STITCH_LEFT")] != -1);
		return sat<F>("EDGE_STITCH_LEFT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto EDGE_STITCH_RIGHT() {
		static_assert(field_signatures[jField<F>("EDGE_STITCH_RIGHT")] != -1);
		return sat<F>("EDGE_STITCH_RIGHT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto EDGE_STITCH_TOP() {
		static_assert(field_signatures[jField<F>("EDGE_STITCH_TOP")] != -1);
		return sat<F>("EDGE_STITCH_TOP");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto SADDLE_STITCH() {
		static_assert(field_signatures[jField<F>("SADDLE_STITCH")] != -1);
		return sat<F>("SADDLE_STITCH");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE() {
		static_assert(field_signatures[jField<F>("STAPLE")] != -1);
		return sat<F>("STAPLE");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_BOTTOM_LEFT() {
		static_assert(field_signatures[jField<F>("STAPLE_BOTTOM_LEFT")] != -1);
		return sat<F>("STAPLE_BOTTOM_LEFT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_BOTTOM_RIGHT() {
		static_assert(field_signatures[jField<F>("STAPLE_BOTTOM_RIGHT")] != -1);
		return sat<F>("STAPLE_BOTTOM_RIGHT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_DUAL_BOTTOM() {
		static_assert(field_signatures[jField<F>("STAPLE_DUAL_BOTTOM")] != -1);
		return sat<F>("STAPLE_DUAL_BOTTOM");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_DUAL_LEFT() {
		static_assert(field_signatures[jField<F>("STAPLE_DUAL_LEFT")] != -1);
		return sat<F>("STAPLE_DUAL_LEFT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_DUAL_RIGHT() {
		static_assert(field_signatures[jField<F>("STAPLE_DUAL_RIGHT")] != -1);
		return sat<F>("STAPLE_DUAL_RIGHT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_DUAL_TOP() {
		static_assert(field_signatures[jField<F>("STAPLE_DUAL_TOP")] != -1);
		return sat<F>("STAPLE_DUAL_TOP");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_TOP_LEFT() {
		static_assert(field_signatures[jField<F>("STAPLE_TOP_LEFT")] != -1);
		return sat<F>("STAPLE_TOP_LEFT");
	}

	template<typename F = ::javax::print::attribute::standard::Finishings>
	static auto STAPLE_TOP_RIGHT() {
		static_assert(field_signatures[jField<F>("STAPLE_TOP_RIGHT")] != -1);
		return sat<F>("STAPLE_TOP_RIGHT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("getCategory"), //
		jMethod<::java::lang::String()>("getName"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getCategory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCategory")] != -1);
		return call<R>("getCategory", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", forward<Args>(args)...);
	}

};

#endif
