#ifndef javax_sql_XAConnection_HPP
#define javax_sql_XAConnection_HPP

#include "../../jfwd_decl.hpp"

class ::javax::sql::XAConnection : public jObject<::javax::sql::XAConnection, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql / "XAConnection";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::sql::ConnectionEventListener)>("addConnectionEventListener"), //
		jMethod<::jvoid(::javax::sql::StatementEventListener)>("addStatementEventListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::sql::Connection()>("getConnection"), //
		jMethod<::javax::transaction::xa::XAResource()>("getXAResource"), //
		jMethod<::jvoid(::javax::sql::ConnectionEventListener)>("removeConnectionEventListener"), //
		jMethod<::jvoid(::javax::sql::StatementEventListener)>("removeStatementEventListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addConnectionEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addConnectionEventListener")] != -1);
		return call<R>("addConnectionEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addStatementEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addStatementEventListener")] != -1);
		return call<R>("addStatementEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::transaction::xa::XAResource, typename... Args>
	auto getXAResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXAResource")] != -1);
		return call<R>("getXAResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeConnectionEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeConnectionEventListener")] != -1);
		return call<R>("removeConnectionEventListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeStatementEventListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeStatementEventListener")] != -1);
		return call<R>("removeStatementEventListener", std::forward<Args>(args)...);
	}

};

#endif
