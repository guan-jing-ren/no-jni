#ifndef javax_sql_RowSetMetaData_HPP
#define javax_sql_RowSetMetaData_HPP

#include "../../jfwd_decl.hpp"

class ::javax::sql::RowSetMetaData : public jObject<::javax::sql::RowSetMetaData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql / "RowSetMetaData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jboolean)>("setAutoIncrement"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setCaseSensitive"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setCatalogName"), //
		jMethod<::jvoid(::jint)>("setColumnCount"), //
		jMethod<::jvoid(::jint, ::jint)>("setColumnDisplaySize"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnLabel"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnName"), //
		jMethod<::jvoid(::jint, ::jint)>("setColumnType"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnTypeName"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setCurrency"), //
		jMethod<::jvoid(::jint, ::jint)>("setNullable"), //
		jMethod<::jvoid(::jint, ::jint)>("setPrecision"), //
		jMethod<::jvoid(::jint, ::jint)>("setScale"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setSchemaName"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setSearchable"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setSigned"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setTableName"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto setAutoIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAutoIncrement")] != -1);
		return call<R>("setAutoIncrement", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseSensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseSensitive")] != -1);
		return call<R>("setCaseSensitive", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCatalogName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCatalogName")] != -1);
		return call<R>("setCatalogName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnCount")] != -1);
		return call<R>("setColumnCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnDisplaySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnDisplaySize")] != -1);
		return call<R>("setColumnDisplaySize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnLabel")] != -1);
		return call<R>("setColumnLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnName")] != -1);
		return call<R>("setColumnName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnType")] != -1);
		return call<R>("setColumnType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setColumnTypeName")] != -1);
		return call<R>("setColumnTypeName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrency")] != -1);
		return call<R>("setCurrency", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNullable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNullable")] != -1);
		return call<R>("setNullable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrecision(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPrecision")] != -1);
		return call<R>("setPrecision", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScale")] != -1);
		return call<R>("setScale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchemaName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSchemaName")] != -1);
		return call<R>("setSchemaName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSearchable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSearchable")] != -1);
		return call<R>("setSearchable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSigned")] != -1);
		return call<R>("setSigned", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTableName")] != -1);
		return call<R>("setTableName", std::forward<Args>(args)...);
	}

};

#endif
