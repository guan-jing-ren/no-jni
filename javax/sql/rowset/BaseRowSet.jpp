#ifndef javax_sql_rowset_BaseRowSet_HPP
#define javax_sql_rowset_BaseRowSet_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sql::rowset::BaseRowSet : public jObject<::javax::sql::rowset::BaseRowSet, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset / "BaseRowSet";

	constexpr static Enume field_signatures{
		jField<::jint>("ASCII_STREAM_PARAM"), //
		jField<::jint>("BINARY_STREAM_PARAM"), //
		jField<::jint>("UNICODE_STREAM_PARAM"), //
	};

	template<typename F = ::jint>
	static auto ASCII_STREAM_PARAM() {
		static_assert(field_signatures[jField<F>("ASCII_STREAM_PARAM")] != -1);
		return sat<F>("ASCII_STREAM_PARAM");
	}

	template<typename F = ::jint>
	static auto BINARY_STREAM_PARAM() {
		static_assert(field_signatures[jField<F>("BINARY_STREAM_PARAM")] != -1);
		return sat<F>("BINARY_STREAM_PARAM");
	}

	template<typename F = ::jint>
	static auto UNICODE_STREAM_PARAM() {
		static_assert(field_signatures[jField<F>("UNICODE_STREAM_PARAM")] != -1);
		return sat<F>("UNICODE_STREAM_PARAM");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::sql::RowSetListener)>("addRowSetListener"), //
		jMethod<::jvoid()>("clearParameters"), //
		jMethod<::java::lang::String()>("getCommand"), //
		jMethod<::jint()>("getConcurrency"), //
		jMethod<::java::lang::String()>("getDataSourceName"), //
		jMethod<::jboolean()>("getEscapeProcessing"), //
		jMethod<::jint()>("getFetchDirection"), //
		jMethod<::jint()>("getFetchSize"), //
		jMethod<::jint()>("getMaxFieldSize"), //
		jMethod<::jint()>("getMaxRows"), //
		jMethod<::java::lang::Object *()>("getParams"), //
		jMethod<::java::lang::String()>("getPassword"), //
		jMethod<::jint()>("getQueryTimeout"), //
		jMethod<::jboolean()>("getShowDeleted"), //
		jMethod<::jint()>("getTransactionIsolation"), //
		jMethod<::jint()>("getType"), //
		jMethod<::java::util::Map()>("getTypeMap"), //
		jMethod<::java::lang::String()>("getUrl"), //
		jMethod<::java::lang::String()>("getUsername"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jvoid(::javax::sql::RowSetListener)>("removeRowSetListener"), //
		jMethod<::jvoid(::jint, ::java::sql::Array)>("setArray"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("setAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("setAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::math::BigDecimal)>("setBigDecimal"), //
		jMethod<::jvoid(::java::lang::String, ::java::math::BigDecimal)>("setBigDecimal"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("setBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("setBinaryStream"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream)>("setBlob"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jlong)>("setBlob"), //
		jMethod<::jvoid(::jint, ::java::sql::Blob)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jlong)>("setBlob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Blob)>("setBlob"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("setBoolean"), //
		jMethod<::jvoid(::jint, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte)>("setByte"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("setBytes"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *)>("setBytes"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jint)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jint)>("setCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setClob"), //
		jMethod<::jvoid(::jint, ::java::sql::Clob)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Clob)>("setClob"), //
		jMethod<::jvoid(::java::lang::String)>("setCommand"), //
		jMethod<::jvoid(::jint)>("setConcurrency"), //
		jMethod<::jvoid(::java::lang::String)>("setDataSourceName"), //
		jMethod<::jvoid(::jint, ::java::sql::Date)>("setDate"), //
		jMethod<::jvoid(::jint, ::java::sql::Date, ::java::util::Calendar)>("setDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date)>("setDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date, ::java::util::Calendar)>("setDate"), //
		jMethod<::jvoid(::jint, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble)>("setDouble"), //
		jMethod<::jvoid(::jboolean)>("setEscapeProcessing"), //
		jMethod<::jvoid(::jint)>("setFetchDirection"), //
		jMethod<::jvoid(::jint)>("setFetchSize"), //
		jMethod<::jvoid(::jint, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat)>("setFloat"), //
		jMethod<::jvoid(::jint, ::jint)>("setInt"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("setInt"), //
		jMethod<::jvoid(::jint, ::jlong)>("setLong"), //
		jMethod<::jvoid(::java::lang::String, ::jlong)>("setLong"), //
		jMethod<::jvoid(::jint)>("setMaxFieldSize"), //
		jMethod<::jvoid(::jint)>("setMaxRows"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setNCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setNCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::io::Reader)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jlong)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::sql::NClob)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jlong)>("setNClob"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::NClob)>("setNClob"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setNString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setNString"), //
		jMethod<::jvoid(::jint, ::jint)>("setNull"), //
		jMethod<::jvoid(::jint, ::jint, ::java::lang::String)>("setNull"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("setNull"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>("setNull"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("setObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint)>("setObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint, ::jint)>("setObject"), //
		jMethod<::jvoid(::java::lang::String)>("setPassword"), //
		jMethod<::jvoid(::jint)>("setQueryTimeout"), //
		jMethod<::jvoid(::jboolean)>("setReadOnly"), //
		jMethod<::jvoid(::jint, ::java::sql::Ref)>("setRef"), //
		jMethod<::jvoid(::jint, ::java::sql::RowId)>("setRowId"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::RowId)>("setRowId"), //
		jMethod<::jvoid(::jint, ::java::sql::SQLXML)>("setSQLXML"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::SQLXML)>("setSQLXML"), //
		jMethod<::jvoid(::jint, ::jshort)>("setShort"), //
		jMethod<::jvoid(::java::lang::String, ::jshort)>("setShort"), //
		jMethod<::jvoid(::jboolean)>("setShowDeleted"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("setString"), //
		jMethod<::jvoid(::jint, ::java::sql::Time)>("setTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Time, ::java::util::Calendar)>("setTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time)>("setTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time, ::java::util::Calendar)>("setTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp)>("setTimestamp"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp, ::java::util::Calendar)>("setTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp)>("setTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp, ::java::util::Calendar)>("setTimestamp"), //
		jMethod<::jvoid(::jint)>("setTransactionIsolation"), //
		jMethod<::jvoid(::jint)>("setType"), //
		jMethod<::jvoid(::java::util::Map)>("setTypeMap"), //
		jMethod<::jvoid(::jint, ::java::net::URL)>("setURL"), //
		jMethod<::jvoid(::java::lang::String)>("setUrl"), //
		jMethod<::jvoid(::java::lang::String)>("setUsername"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addRowSetListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addRowSetListener")] != -1);
		return call<R>("addRowSetListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearParameters")] != -1);
		return call<R>("clearParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommand")] != -1);
		return call<R>("getCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConcurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConcurrency")] != -1);
		return call<R>("getConcurrency", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDataSourceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSourceName")] != -1);
		return call<R>("getDataSourceName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getEscapeProcessing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEscapeProcessing")] != -1);
		return call<R>("getEscapeProcessing", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchDirection")] != -1);
		return call<R>("getFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchSize")] != -1);
		return call<R>("getFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxFieldSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxFieldSize")] != -1);
		return call<R>("getMaxFieldSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxRows")] != -1);
		return call<R>("getMaxRows", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getParams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParams")] != -1);
		return call<R>("getParams", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassword")] != -1);
		return call<R>("getPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getQueryTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getQueryTimeout")] != -1);
		return call<R>("getQueryTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getShowDeleted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShowDeleted")] != -1);
		return call<R>("getShowDeleted", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransactionIsolation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransactionIsolation")] != -1);
		return call<R>("getTransactionIsolation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getTypeMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeMap")] != -1);
		return call<R>("getTypeMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUrl")] != -1);
		return call<R>("getUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUsername(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUsername")] != -1);
		return call<R>("getUsername", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeRowSetListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeRowSetListener")] != -1);
		return call<R>("removeRowSetListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setArray")] != -1);
		return call<R>("setArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAsciiStream")] != -1);
		return call<R>("setAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBigDecimal")] != -1);
		return call<R>("setBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBinaryStream")] != -1);
		return call<R>("setBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBlob")] != -1);
		return call<R>("setBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBoolean")] != -1);
		return call<R>("setBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setByte")] != -1);
		return call<R>("setByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBytes")] != -1);
		return call<R>("setBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClob")] != -1);
		return call<R>("setClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCommand")] != -1);
		return call<R>("setCommand", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConcurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConcurrency")] != -1);
		return call<R>("setConcurrency", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataSourceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataSourceName")] != -1);
		return call<R>("setDataSourceName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDate")] != -1);
		return call<R>("setDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDouble")] != -1);
		return call<R>("setDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEscapeProcessing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEscapeProcessing")] != -1);
		return call<R>("setEscapeProcessing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchDirection")] != -1);
		return call<R>("setFetchDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFetchSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFetchSize")] != -1);
		return call<R>("setFetchSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFloat")] != -1);
		return call<R>("setFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInt")] != -1);
		return call<R>("setInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLong")] != -1);
		return call<R>("setLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxFieldSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxFieldSize")] != -1);
		return call<R>("setMaxFieldSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMaxRows(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMaxRows")] != -1);
		return call<R>("setMaxRows", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNCharacterStream")] != -1);
		return call<R>("setNCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNClob")] != -1);
		return call<R>("setNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNString")] != -1);
		return call<R>("setNString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNull")] != -1);
		return call<R>("setNull", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObject")] != -1);
		return call<R>("setObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPassword")] != -1);
		return call<R>("setPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setQueryTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setQueryTimeout")] != -1);
		return call<R>("setQueryTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadOnly")] != -1);
		return call<R>("setReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRef")] != -1);
		return call<R>("setRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRowId")] != -1);
		return call<R>("setRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSQLXML")] != -1);
		return call<R>("setSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShort")] != -1);
		return call<R>("setShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setShowDeleted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setShowDeleted")] != -1);
		return call<R>("setShowDeleted", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setString")] != -1);
		return call<R>("setString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTime")] != -1);
		return call<R>("setTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimestamp")] != -1);
		return call<R>("setTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransactionIsolation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransactionIsolation")] != -1);
		return call<R>("setTransactionIsolation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setType")] != -1);
		return call<R>("setType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTypeMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTypeMap")] != -1);
		return call<R>("setTypeMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setURL")] != -1);
		return call<R>("setURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUrl")] != -1);
		return call<R>("setUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUsername(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUsername")] != -1);
		return call<R>("setUsername", std::forward<Args>(args)...);
	}

};

#endif
