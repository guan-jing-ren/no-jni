#ifndef javax_sql_rowset_RowSetMetaDataImpl_HPP
#define javax_sql_rowset_RowSetMetaDataImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::javax::sql::rowset::RowSetMetaDataImpl : public jObject<::javax::sql::rowset::RowSetMetaDataImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset / "RowSetMetaDataImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String(::jint)>("getCatalogName"), //
		jMethod<::java::lang::String(::jint)>("getColumnClassName"), //
		jMethod<::jint()>("getColumnCount"), //
		jMethod<::jint(::jint)>("getColumnDisplaySize"), //
		jMethod<::java::lang::String(::jint)>("getColumnLabel"), //
		jMethod<::java::lang::String(::jint)>("getColumnName"), //
		jMethod<::jint(::jint)>("getColumnType"), //
		jMethod<::java::lang::String(::jint)>("getColumnTypeName"), //
		jMethod<::jint(::jint)>("getPrecision"), //
		jMethod<::jint(::jint)>("getScale"), //
		jMethod<::java::lang::String(::jint)>("getSchemaName"), //
		jMethod<::java::lang::String(::jint)>("getTableName"), //
		jMethod<::jboolean(::jint)>("isAutoIncrement"), //
		jMethod<::jboolean(::jint)>("isCaseSensitive"), //
		jMethod<::jboolean(::jint)>("isCurrency"), //
		jMethod<::jboolean(::jint)>("isDefinitelyWritable"), //
		jMethod<::jint(::jint)>("isNullable"), //
		jMethod<::jboolean(::jint)>("isReadOnly"), //
		jMethod<::jboolean(::jint)>("isSearchable"), //
		jMethod<::jboolean(::jint)>("isSigned"), //
		jMethod<::jboolean(::java::lang::Class)>("isWrapperFor"), //
		jMethod<::jboolean(::jint)>("isWritable"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setAutoIncrement"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setCaseSensitive"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setCatalogName"), //
		jMethod<::jvoid(::jint)>("setColumnCount"), //
		jMethod<::jvoid(::jint, ::jint)>("setColumnDisplaySize"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnLabel"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnName"), //
		jMethod<::jvoid(::jint, ::jint)>("setColumnType"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setColumnTypeName"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setCurrency"), //
		jMethod<::jvoid(::jint, ::jint)>("setNullable"), //
		jMethod<::jvoid(::jint, ::jint)>("setPrecision"), //
		jMethod<::jvoid(::jint, ::jint)>("setScale"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setSchemaName"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setSearchable"), //
		jMethod<::jvoid(::jint, ::jboolean)>("setSigned"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("setTableName"), //
		jMethod<::java::lang::Object(::java::lang::Class)>("unwrap"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCatalogName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCatalogName")] != -1);
		return call<R>("getCatalogName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnClassName")] != -1);
		return call<R>("getColumnClassName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnCount")] != -1);
		return call<R>("getColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnDisplaySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnDisplaySize")] != -1);
		return call<R>("getColumnDisplaySize", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnLabel")] != -1);
		return call<R>("getColumnLabel", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnName")] != -1);
		return call<R>("getColumnName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getColumnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnType")] != -1);
		return call<R>("getColumnType", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getColumnTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getColumnTypeName")] != -1);
		return call<R>("getColumnTypeName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPrecision(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getPrecision")] != -1);
		return call<R>("getPrecision", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getScale")] != -1);
		return call<R>("getScale", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSchemaName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSchemaName")] != -1);
		return call<R>("getSchemaName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getTableName")] != -1);
		return call<R>("getTableName", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAutoIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isAutoIncrement")] != -1);
		return call<R>("isAutoIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCaseSensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCaseSensitive")] != -1);
		return call<R>("isCaseSensitive", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isCurrency")] != -1);
		return call<R>("isCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDefinitelyWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isDefinitelyWritable")] != -1);
		return call<R>("isDefinitelyWritable", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto isNullable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isNullable")] != -1);
		return call<R>("isNullable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSearchable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSearchable")] != -1);
		return call<R>("isSearchable", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isSigned")] != -1);
		return call<R>("isSigned", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWrapperFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWrapperFor")] != -1);
		return call<R>("isWrapperFor", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("isWritable")] != -1);
		return call<R>("isWritable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAutoIncrement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAutoIncrement")] != -1);
		return call<R>("setAutoIncrement", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseSensitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCaseSensitive")] != -1);
		return call<R>("setCaseSensitive", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCatalogName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCatalogName")] != -1);
		return call<R>("setCatalogName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnCount")] != -1);
		return call<R>("setColumnCount", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnDisplaySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnDisplaySize")] != -1);
		return call<R>("setColumnDisplaySize", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnLabel")] != -1);
		return call<R>("setColumnLabel", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnName")] != -1);
		return call<R>("setColumnName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnType")] != -1);
		return call<R>("setColumnType", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setColumnTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setColumnTypeName")] != -1);
		return call<R>("setColumnTypeName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCurrency")] != -1);
		return call<R>("setCurrency", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNullable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setNullable")] != -1);
		return call<R>("setNullable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPrecision(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setPrecision")] != -1);
		return call<R>("setPrecision", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setScale")] != -1);
		return call<R>("setScale", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSchemaName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSchemaName")] != -1);
		return call<R>("setSchemaName", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSearchable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSearchable")] != -1);
		return call<R>("setSearchable", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSigned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setSigned")] != -1);
		return call<R>("setSigned", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTableName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setTableName")] != -1);
		return call<R>("setTableName", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unwrap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("unwrap")] != -1);
		return call<R>("unwrap", forward<Args>(args)...);
	}

};

#endif
