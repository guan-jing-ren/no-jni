#ifndef javax_sql_rowset_serial_SerialStruct_HPP
#define javax_sql_rowset_serial_SerialStruct_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::sql::rowset::serial::SerialStruct : public jObject<::javax::sql::rowset::serial::SerialStruct, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset_serial / "SerialStruct";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::sql::SQLData, ::java::util::Map)>(), //
		jConstructor<::jvoid(::java::sql::Struct, ::java::util::Map)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object *()>("getAttributes"), //
		jMethod<::java::lang::Object *(::java::util::Map)>("getAttributes"), //
		jMethod<::java::lang::String()>("getSQLTypeName"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSQLTypeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSQLTypeName")] != -1);
		return call<R>("getSQLTypeName", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

};

#endif
