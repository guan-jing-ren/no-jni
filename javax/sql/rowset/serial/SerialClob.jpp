#ifndef javax_sql_rowset_serial_SerialClob_HPP
#define javax_sql_rowset_serial_SerialClob_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::sql::rowset::serial::SerialClob : public jObject<::javax::sql::rowset::serial::SerialClob, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset_serial / "SerialClob";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::sql::Clob)>(), //
		jConstructor<::jvoid(::jchar *)>(), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid()>("free"), //
		jMethod<::java::io::InputStream()>("getAsciiStream"), //
		jMethod<::java::io::Reader()>("getCharacterStream"), //
		jMethod<::java::io::Reader(::jlong, ::jlong)>("getCharacterStream"), //
		jMethod<::java::lang::String(::jlong, ::jint)>("getSubString"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jlong()>("length"), //
		jMethod<::jlong(::java::lang::String, ::jlong)>("position"), //
		jMethod<::jlong(::java::sql::Clob, ::jlong)>("position"), //
		jMethod<::java::io::OutputStream(::jlong)>("setAsciiStream"), //
		jMethod<::java::io::Writer(::jlong)>("setCharacterStream"), //
		jMethod<::jint(::jlong, ::java::lang::String)>("setString"), //
		jMethod<::jint(::jlong, ::java::lang::String, ::jint, ::jint)>("setString"), //
		jMethod<::jvoid(::jlong)>("truncate"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto free(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("free")] != -1);
		return call<R>("free", forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getAsciiStream")] != -1);
		return call<R>("getAsciiStream", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto getCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getCharacterStream")] != -1);
		return call<R>("getCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSubString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getSubString")] != -1);
		return call<R>("getSubString", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto length(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("length")] != -1);
		return call<R>("length", forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto position(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("position")] != -1);
		return call<R>("position", forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto setAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setAsciiStream")] != -1);
		return call<R>("setAsciiStream", forward<Args>(args)...);
	}

	template<typename R = ::java::io::Writer, typename... Args>
	auto setCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setCharacterStream")] != -1);
		return call<R>("setCharacterStream", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto setString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setString")] != -1);
		return call<R>("setString", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto truncate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("truncate")] != -1);
		return call<R>("truncate", forward<Args>(args)...);
	}

};

#endif
