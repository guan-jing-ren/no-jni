#ifndef javax_sql_rowset_serial_SQLInputImpl_HPP
#define javax_sql_rowset_serial_SQLInputImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::sql::rowset::serial::SQLInputImpl : public jObject<::javax::sql::rowset::serial::SQLInputImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset_serial / "SQLInputImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object *, ::java::util::Map)>(), //
		jMethod<::java::sql::Array()>("readArray"), //
		jMethod<::java::io::InputStream()>("readAsciiStream"), //
		jMethod<::java::math::BigDecimal()>("readBigDecimal"), //
		jMethod<::java::io::InputStream()>("readBinaryStream"), //
		jMethod<::java::sql::Blob()>("readBlob"), //
		jMethod<::jboolean()>("readBoolean"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jbyte *()>("readBytes"), //
		jMethod<::java::io::Reader()>("readCharacterStream"), //
		jMethod<::java::sql::Clob()>("readClob"), //
		jMethod<::java::sql::Date()>("readDate"), //
		jMethod<::jdouble()>("readDouble"), //
		jMethod<::jfloat()>("readFloat"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::java::sql::NClob()>("readNClob"), //
		jMethod<::java::lang::String()>("readNString"), //
		jMethod<::java::lang::Object()>("readObject"), //
		jMethod<::java::sql::Ref()>("readRef"), //
		jMethod<::java::sql::RowId()>("readRowId"), //
		jMethod<::java::sql::SQLXML()>("readSQLXML"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String()>("readString"), //
		jMethod<::java::sql::Time()>("readTime"), //
		jMethod<::java::sql::Timestamp()>("readTimestamp"), //
		jMethod<::java::net::URL()>("readURL"), //
		jMethod<::jboolean()>("wasNull"), //
	};

	template<typename R = ::java::sql::Array, typename... Args>
	auto readArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readArray")] != -1);
		return call<R>("readArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto readAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAsciiStream")] != -1);
		return call<R>("readAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::math::BigDecimal, typename... Args>
	auto readBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBigDecimal")] != -1);
		return call<R>("readBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto readBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBinaryStream")] != -1);
		return call<R>("readBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Blob, typename... Args>
	auto readBlob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBlob")] != -1);
		return call<R>("readBlob", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBoolean")] != -1);
		return call<R>("readBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto readBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBytes")] != -1);
		return call<R>("readBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Reader, typename... Args>
	auto readCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readCharacterStream")] != -1);
		return call<R>("readCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Clob, typename... Args>
	auto readClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readClob")] != -1);
		return call<R>("readClob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Date, typename... Args>
	auto readDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readDate")] != -1);
		return call<R>("readDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto readDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readDouble")] != -1);
		return call<R>("readDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto readFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFloat")] != -1);
		return call<R>("readFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::NClob, typename... Args>
	auto readNClob(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readNClob")] != -1);
		return call<R>("readNClob", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readNString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readNString")] != -1);
		return call<R>("readNString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObject")] != -1);
		return call<R>("readObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Ref, typename... Args>
	auto readRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readRef")] != -1);
		return call<R>("readRef", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::RowId, typename... Args>
	auto readRowId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readRowId")] != -1);
		return call<R>("readRowId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::SQLXML, typename... Args>
	auto readSQLXML(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readSQLXML")] != -1);
		return call<R>("readSQLXML", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readString")] != -1);
		return call<R>("readString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Time, typename... Args>
	auto readTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readTime")] != -1);
		return call<R>("readTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::sql::Timestamp, typename... Args>
	auto readTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readTimestamp")] != -1);
		return call<R>("readTimestamp", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URL, typename... Args>
	auto readURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readURL")] != -1);
		return call<R>("readURL", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto wasNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wasNull")] != -1);
		return call<R>("wasNull", std::forward<Args>(args)...);
	}

};

#endif
