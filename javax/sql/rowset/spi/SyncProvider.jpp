#ifndef javax_sql_rowset_spi_SyncProvider_HPP
#define javax_sql_rowset_spi_SyncProvider_HPP

#include "../../../../jfwd_decl.hpp"

class ::javax::sql::rowset::spi::SyncProvider : public jObject<::javax::sql::rowset::spi::SyncProvider, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::javax_sql_rowset_spi / "SyncProvider";

	constexpr static Enume field_signatures{
		jField<::jint>("DATASOURCE_DB_LOCK"), //
		jField<::jint>("DATASOURCE_NO_LOCK"), //
		jField<::jint>("DATASOURCE_ROW_LOCK"), //
		jField<::jint>("DATASOURCE_TABLE_LOCK"), //
		jField<::jint>("GRADE_CHECK_ALL_AT_COMMIT"), //
		jField<::jint>("GRADE_CHECK_MODIFIED_AT_COMMIT"), //
		jField<::jint>("GRADE_LOCK_WHEN_LOADED"), //
		jField<::jint>("GRADE_LOCK_WHEN_MODIFIED"), //
		jField<::jint>("GRADE_NONE"), //
		jField<::jint>("NONUPDATABLE_VIEW_SYNC"), //
		jField<::jint>("UPDATABLE_VIEW_SYNC"), //
	};

	template<typename F = ::jint>
	static auto DATASOURCE_DB_LOCK() {
		static_assert(field_signatures[jField<F>("DATASOURCE_DB_LOCK")] != -1);
		return sat<F>("DATASOURCE_DB_LOCK");
	}

	template<typename F = ::jint>
	static auto DATASOURCE_NO_LOCK() {
		static_assert(field_signatures[jField<F>("DATASOURCE_NO_LOCK")] != -1);
		return sat<F>("DATASOURCE_NO_LOCK");
	}

	template<typename F = ::jint>
	static auto DATASOURCE_ROW_LOCK() {
		static_assert(field_signatures[jField<F>("DATASOURCE_ROW_LOCK")] != -1);
		return sat<F>("DATASOURCE_ROW_LOCK");
	}

	template<typename F = ::jint>
	static auto DATASOURCE_TABLE_LOCK() {
		static_assert(field_signatures[jField<F>("DATASOURCE_TABLE_LOCK")] != -1);
		return sat<F>("DATASOURCE_TABLE_LOCK");
	}

	template<typename F = ::jint>
	static auto GRADE_CHECK_ALL_AT_COMMIT() {
		static_assert(field_signatures[jField<F>("GRADE_CHECK_ALL_AT_COMMIT")] != -1);
		return sat<F>("GRADE_CHECK_ALL_AT_COMMIT");
	}

	template<typename F = ::jint>
	static auto GRADE_CHECK_MODIFIED_AT_COMMIT() {
		static_assert(field_signatures[jField<F>("GRADE_CHECK_MODIFIED_AT_COMMIT")] != -1);
		return sat<F>("GRADE_CHECK_MODIFIED_AT_COMMIT");
	}

	template<typename F = ::jint>
	static auto GRADE_LOCK_WHEN_LOADED() {
		static_assert(field_signatures[jField<F>("GRADE_LOCK_WHEN_LOADED")] != -1);
		return sat<F>("GRADE_LOCK_WHEN_LOADED");
	}

	template<typename F = ::jint>
	static auto GRADE_LOCK_WHEN_MODIFIED() {
		static_assert(field_signatures[jField<F>("GRADE_LOCK_WHEN_MODIFIED")] != -1);
		return sat<F>("GRADE_LOCK_WHEN_MODIFIED");
	}

	template<typename F = ::jint>
	static auto GRADE_NONE() {
		static_assert(field_signatures[jField<F>("GRADE_NONE")] != -1);
		return sat<F>("GRADE_NONE");
	}

	template<typename F = ::jint>
	static auto NONUPDATABLE_VIEW_SYNC() {
		static_assert(field_signatures[jField<F>("NONUPDATABLE_VIEW_SYNC")] != -1);
		return sat<F>("NONUPDATABLE_VIEW_SYNC");
	}

	template<typename F = ::jint>
	static auto UPDATABLE_VIEW_SYNC() {
		static_assert(field_signatures[jField<F>("UPDATABLE_VIEW_SYNC")] != -1);
		return sat<F>("UPDATABLE_VIEW_SYNC");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getDataSourceLock"), //
		jMethod<::jint()>("getProviderGrade"), //
		jMethod<::java::lang::String()>("getProviderID"), //
		jMethod<::javax::sql::RowSetReader()>("getRowSetReader"), //
		jMethod<::javax::sql::RowSetWriter()>("getRowSetWriter"), //
		jMethod<::java::lang::String()>("getVendor"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::jvoid(::jint)>("setDataSourceLock"), //
		jMethod<::jint()>("supportsUpdatableView"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDataSourceLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getDataSourceLock")] != -1);
		return call<R>("getDataSourceLock", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProviderGrade(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProviderGrade")] != -1);
		return call<R>("getProviderGrade", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProviderID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getProviderID")] != -1);
		return call<R>("getProviderID", forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::RowSetReader, typename... Args>
	auto getRowSetReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowSetReader")] != -1);
		return call<R>("getRowSetReader", forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::RowSetWriter, typename... Args>
	auto getRowSetWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getRowSetWriter")] != -1);
		return call<R>("getRowSetWriter", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVendor")] != -1);
		return call<R>("getVendor", forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataSourceLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("setDataSourceLock")] != -1);
		return call<R>("setDataSourceLock", forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto supportsUpdatableView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(decay_t<Args>...)>("supportsUpdatableView")] != -1);
		return call<R>("supportsUpdatableView", forward<Args>(args)...);
	}

};

#endif
