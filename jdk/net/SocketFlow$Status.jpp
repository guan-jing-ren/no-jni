#ifndef jdk_net_SocketFlow$Status_HPP
#define jdk_net_SocketFlow$Status_HPP

#include "../../jfwd_decl.hpp"

class ::jdk::net::SocketFlow$Status : public jObject<::jdk::net::SocketFlow$Status, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::jdk_net / "SocketFlow$Status";

	constexpr static Enume field_signatures{
		jField<::jdk::net::SocketFlow$Status>("ALREADY_CREATED"), //
		jField<::jdk::net::SocketFlow$Status>("IN_PROGRESS"), //
		jField<::jdk::net::SocketFlow$Status>("NOT_CONNECTED"), //
		jField<::jdk::net::SocketFlow$Status>("NOT_SUPPORTED"), //
		jField<::jdk::net::SocketFlow$Status>("NO_PERMISSION"), //
		jField<::jdk::net::SocketFlow$Status>("NO_STATUS"), //
		jField<::jdk::net::SocketFlow$Status>("OK"), //
		jField<::jdk::net::SocketFlow$Status>("OTHER"), //
	};

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto ALREADY_CREATED() {
		static_assert(field_signatures[jField<F>("ALREADY_CREATED")] != -1);
		return sat<F>("ALREADY_CREATED");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto IN_PROGRESS() {
		static_assert(field_signatures[jField<F>("IN_PROGRESS")] != -1);
		return sat<F>("IN_PROGRESS");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto NOT_CONNECTED() {
		static_assert(field_signatures[jField<F>("NOT_CONNECTED")] != -1);
		return sat<F>("NOT_CONNECTED");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("NOT_SUPPORTED")] != -1);
		return sat<F>("NOT_SUPPORTED");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto NO_PERMISSION() {
		static_assert(field_signatures[jField<F>("NO_PERMISSION")] != -1);
		return sat<F>("NO_PERMISSION");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto NO_STATUS() {
		static_assert(field_signatures[jField<F>("NO_STATUS")] != -1);
		return sat<F>("NO_STATUS");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	template<typename F = ::jdk::net::SocketFlow$Status>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	constexpr static Enume method_signatures{
		jMethod<::jdk::net::SocketFlow$Status(::java::lang::String)>("valueOf"), //
		jMethod<::jdk::net::SocketFlow$Status *()>("values"), //
	};

	template<typename R = ::jdk::net::SocketFlow$Status, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jdk::net::SocketFlow$Status *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
