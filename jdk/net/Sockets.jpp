#ifndef jdk_net_Sockets_HPP
#define jdk_net_Sockets_HPP

#include "../../jfwd_decl.hpp"

class ::jdk::net::Sockets : public jObject<::jdk::net::Sockets, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::jdk_net / "Sockets";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::net::DatagramSocket, ::java::net::SocketOption)>("getOption"), //
		jMethod<::java::lang::Object(::java::net::ServerSocket, ::java::net::SocketOption)>("getOption"), //
		jMethod<::java::lang::Object(::java::net::Socket, ::java::net::SocketOption)>("getOption"), //
		jMethod<::jvoid(::java::net::DatagramSocket, ::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::jvoid(::java::net::ServerSocket, ::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::jvoid(::java::net::Socket, ::java::net::SocketOption, ::java::lang::Object)>("setOption"), //
		jMethod<::java::util::Set(::java::lang::Class)>("supportedOptions"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto getOption(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return scall<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setOption(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return scall<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	static auto supportedOptions(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportedOptions")] != -1);
		return scall<R>("supportedOptions", std::forward<Args>(args)...);
	}

};

#endif
