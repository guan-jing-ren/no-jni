#ifndef com_sun_beans_decoder_DocumentHandler_HPP
#define com_sun_beans_decoder_DocumentHandler_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::beans::decoder::DocumentHandler : public jObject<::com::sun::beans::decoder::DocumentHandler, ::org::xml::sax::helpers::DefaultHandler> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_beans_decoder / "DocumentHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("characters"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String)>("endElement"), //
		jMethod<::java::lang::Class(::java::lang::String)>("findClass"), //
		jMethod<::java::lang::ClassLoader()>("getClassLoader"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getElementHandler"), //
		jMethod<::java::beans::ExceptionListener()>("getExceptionListener"), //
		jMethod<::java::lang::Object *()>("getObjects"), //
		jMethod<::java::lang::Object()>("getOwner"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getVariable"), //
		jMethod<::jvoid(::java::lang::Exception)>("handleException"), //
		jMethod<::jboolean(::java::lang::String)>("hasVariable"), //
		jMethod<::jvoid(::org::xml::sax::InputSource)>("parse"), //
		jMethod<::org::xml::sax::InputSource(::java::lang::String, ::java::lang::String)>("resolveEntity"), //
		jMethod<::jvoid(::java::lang::ClassLoader)>("setClassLoader"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Class)>("setElementHandler"), //
		jMethod<::jvoid(::java::beans::ExceptionListener)>("setExceptionListener"), //
		jMethod<::jvoid(::java::lang::Object)>("setOwner"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setVariable"), //
		jMethod<::jvoid()>("startDocument"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::xml::sax::Attributes)>("startElement"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto characters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characters")] != -1);
		return call<R>("characters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endElement")] != -1);
		return call<R>("endElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto findClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findClass")] != -1);
		return call<R>("findClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoader")] != -1);
		return call<R>("getClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getElementHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementHandler")] != -1);
		return call<R>("getElementHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::beans::ExceptionListener, typename... Args>
	auto getExceptionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExceptionListener")] != -1);
		return call<R>("getExceptionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getObjects(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjects")] != -1);
		return call<R>("getObjects", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOwner")] != -1);
		return call<R>("getOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVariable")] != -1);
		return call<R>("getVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleException")] != -1);
		return call<R>("handleException", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasVariable")] != -1);
		return call<R>("hasVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::org::xml::sax::InputSource, typename... Args>
	auto resolveEntity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveEntity")] != -1);
		return call<R>("resolveEntity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClassLoader")] != -1);
		return call<R>("setClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setElementHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setElementHandler")] != -1);
		return call<R>("setElementHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExceptionListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExceptionListener")] != -1);
		return call<R>("setExceptionListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOwner(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOwner")] != -1);
		return call<R>("setOwner", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVariable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVariable")] != -1);
		return call<R>("setVariable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startDocument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startDocument")] != -1);
		return call<R>("startDocument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto startElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startElement")] != -1);
		return call<R>("startElement", std::forward<Args>(args)...);
	}

};

#endif
