#ifndef com_sun_beans_finder_ClassFinder_HPP
#define com_sun_beans_finder_ClassFinder_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::beans::finder::ClassFinder : public jObject<::com::sun::beans::finder::ClassFinder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_beans_finder / "ClassFinder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class(::java::lang::String)>("findClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::ClassLoader)>("findClass"), //
		jMethod<::java::lang::Class(::java::lang::String)>("resolveClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::ClassLoader)>("resolveClass"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	static auto findClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findClass")] != -1);
		return scall<R>("findClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto resolveClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveClass")] != -1);
		return scall<R>("resolveClass", std::forward<Args>(args)...);
	}

};

#endif
