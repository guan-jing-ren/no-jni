#ifndef com_sun_beans_editors_ColorEditor_HPP
#define com_sun_beans_editors_ColorEditor_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::beans::editors::ColorEditor : public jObject<::com::sun::beans::editors::ColorEditor, ::java::awt::Panel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_beans_editors / "ColorEditor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::java::awt::Event, ::java::lang::Object)>("action"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("addPropertyChangeListener"), //
		jMethod<::java::lang::String()>("getAsText"), //
		jMethod<::java::awt::Component()>("getCustomEditor"), //
		jMethod<::java::lang::String()>("getJavaInitializationString"), //
		jMethod<::java::lang::String *()>("getTags"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jboolean()>("isPaintable"), //
		jMethod<::jboolean(::java::awt::Event, ::jint)>("keyUp"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::awt::Rectangle)>("paintValue"), //
		jMethod<::java::awt::Dimension()>("preferredSize"), //
		jMethod<::jvoid(::java::beans::PropertyChangeListener)>("removePropertyChangeListener"), //
		jMethod<::jvoid(::java::lang::String)>("setAsText"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
		jMethod<::jboolean()>("supportsCustomEditor"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto action(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("action")] != -1);
		return call<R>("action", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addPropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPropertyChangeListener")] != -1);
		return call<R>("addPropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAsText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsText")] != -1);
		return call<R>("getAsText", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Component, typename... Args>
	auto getCustomEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCustomEditor")] != -1);
		return call<R>("getCustomEditor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getJavaInitializationString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaInitializationString")] != -1);
		return call<R>("getJavaInitializationString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTags")] != -1);
		return call<R>("getTags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPaintable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPaintable")] != -1);
		return call<R>("isPaintable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto keyUp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keyUp")] != -1);
		return call<R>("keyUp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintValue")] != -1);
		return call<R>("paintValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredSize")] != -1);
		return call<R>("preferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePropertyChangeListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePropertyChangeListener")] != -1);
		return call<R>("removePropertyChangeListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAsText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAsText")] != -1);
		return call<R>("setAsText", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsCustomEditor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsCustomEditor")] != -1);
		return call<R>("supportsCustomEditor", std::forward<Args>(args)...);
	}

};

#endif
