#ifndef com_sun_awt_AWTUtilities$Translucency_HPP
#define com_sun_awt_AWTUtilities$Translucency_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::awt::AWTUtilities$Translucency : public jObject<::com::sun::awt::AWTUtilities$Translucency, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_awt / "AWTUtilities$Translucency";

	constexpr static Enume field_signatures{
		jField<::com::sun::awt::AWTUtilities$Translucency>("PERPIXEL_TRANSLUCENT"), //
		jField<::com::sun::awt::AWTUtilities$Translucency>("PERPIXEL_TRANSPARENT"), //
		jField<::com::sun::awt::AWTUtilities$Translucency>("TRANSLUCENT"), //
	};

	template<typename F = ::com::sun::awt::AWTUtilities$Translucency>
	static auto PERPIXEL_TRANSLUCENT() {
		static_assert(field_signatures[jField<F>("PERPIXEL_TRANSLUCENT")] != -1);
		return sat<F>("PERPIXEL_TRANSLUCENT");
	}

	template<typename F = ::com::sun::awt::AWTUtilities$Translucency>
	static auto PERPIXEL_TRANSPARENT() {
		static_assert(field_signatures[jField<F>("PERPIXEL_TRANSPARENT")] != -1);
		return sat<F>("PERPIXEL_TRANSPARENT");
	}

	template<typename F = ::com::sun::awt::AWTUtilities$Translucency>
	static auto TRANSLUCENT() {
		static_assert(field_signatures[jField<F>("TRANSLUCENT")] != -1);
		return sat<F>("TRANSLUCENT");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::awt::AWTUtilities$Translucency(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::awt::AWTUtilities$Translucency *()>("values"), //
	};

	template<typename R = ::com::sun::awt::AWTUtilities$Translucency, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::awt::AWTUtilities$Translucency *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
