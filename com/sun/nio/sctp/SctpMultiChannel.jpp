#ifndef com_sun_nio_sctp_SctpMultiChannel_HPP
#define com_sun_nio_sctp_SctpMultiChannel_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::SctpMultiChannel : public jObject<::com::sun::nio::sctp::SctpMultiChannel, ::java::nio::channels::spi::AbstractSelectableChannel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "SctpMultiChannel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Set()>("associations"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::java::net::SocketAddress)>("bind"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::java::net::SocketAddress, ::jint)>("bind"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::java::net::InetAddress)>("bindAddress"), //
		jMethod<::com::sun::nio::sctp::SctpChannel(::com::sun::nio::sctp::Association)>("branch"), //
		jMethod<::java::util::Set()>("getAllLocalAddresses"), //
		jMethod<::java::lang::Object(::com::sun::nio::sctp::SctpSocketOption, ::com::sun::nio::sctp::Association)>("getOption"), //
		jMethod<::java::util::Set(::com::sun::nio::sctp::Association)>("getRemoteAddresses"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel()>("open"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::java::nio::ByteBuffer, ::java::lang::Object, ::com::sun::nio::sctp::NotificationHandler)>("receive"), //
		jMethod<::jint(::java::nio::ByteBuffer, ::com::sun::nio::sctp::MessageInfo)>("send"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::com::sun::nio::sctp::SctpSocketOption, ::java::lang::Object, ::com::sun::nio::sctp::Association)>("setOption"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::com::sun::nio::sctp::Association)>("shutdown"), //
		jMethod<::java::util::Set()>("supportedOptions"), //
		jMethod<::com::sun::nio::sctp::SctpMultiChannel(::java::net::InetAddress)>("unbindAddress"), //
		jMethod<::jint()>("validOps"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto associations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("associations")] != -1);
		return call<R>("associations", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	auto bindAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bindAddress")] != -1);
		return call<R>("bindAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpChannel, typename... Args>
	auto branch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("branch")] != -1);
		return call<R>("branch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getAllLocalAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAllLocalAddresses")] != -1);
		return call<R>("getAllLocalAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOption")] != -1);
		return call<R>("getOption", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getRemoteAddresses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoteAddresses")] != -1);
		return call<R>("getRemoteAddresses", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	static auto open(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return scall<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::MessageInfo, typename... Args>
	auto receive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("receive")] != -1);
		return call<R>("receive", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto send(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("send")] != -1);
		return call<R>("send", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	auto setOption(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOption")] != -1);
		return call<R>("setOption", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto supportedOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportedOptions")] != -1);
		return call<R>("supportedOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::SctpMultiChannel, typename... Args>
	auto unbindAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbindAddress")] != -1);
		return call<R>("unbindAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto validOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("validOps")] != -1);
		return call<R>("validOps", std::forward<Args>(args)...);
	}

};

#endif
