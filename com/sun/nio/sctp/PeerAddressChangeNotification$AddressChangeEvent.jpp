#ifndef com_sun_nio_sctp_PeerAddressChangeNotification$AddressChangeEvent_HPP
#define com_sun_nio_sctp_PeerAddressChangeNotification$AddressChangeEvent_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent : public jObject<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "PeerAddressChangeNotification$AddressChangeEvent";

	constexpr static Enume field_signatures{
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_ADDED"), //
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_AVAILABLE"), //
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_CONFIRMED"), //
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_MADE_PRIMARY"), //
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_REMOVED"), //
		jField<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>("ADDR_UNREACHABLE"), //
	};

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_ADDED() {
		static_assert(field_signatures[jField<F>("ADDR_ADDED")] != -1);
		return sat<F>("ADDR_ADDED");
	}

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_AVAILABLE() {
		static_assert(field_signatures[jField<F>("ADDR_AVAILABLE")] != -1);
		return sat<F>("ADDR_AVAILABLE");
	}

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_CONFIRMED() {
		static_assert(field_signatures[jField<F>("ADDR_CONFIRMED")] != -1);
		return sat<F>("ADDR_CONFIRMED");
	}

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_MADE_PRIMARY() {
		static_assert(field_signatures[jField<F>("ADDR_MADE_PRIMARY")] != -1);
		return sat<F>("ADDR_MADE_PRIMARY");
	}

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_REMOVED() {
		static_assert(field_signatures[jField<F>("ADDR_REMOVED")] != -1);
		return sat<F>("ADDR_REMOVED");
	}

	template<typename F = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent>
	static auto ADDR_UNREACHABLE() {
		static_assert(field_signatures[jField<F>("ADDR_UNREACHABLE")] != -1);
		return sat<F>("ADDR_UNREACHABLE");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent *()>("values"), //
	};

	template<typename R = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
