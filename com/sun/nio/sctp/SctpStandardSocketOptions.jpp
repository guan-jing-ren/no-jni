#ifndef com_sun_nio_sctp_SctpStandardSocketOptions_HPP
#define com_sun_nio_sctp_SctpStandardSocketOptions_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::SctpStandardSocketOptions : public jObject<::com::sun::nio::sctp::SctpStandardSocketOptions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "SctpStandardSocketOptions";

	constexpr static Enume field_signatures{
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_DISABLE_FRAGMENTS"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_EXPLICIT_COMPLETE"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_FRAGMENT_INTERLEAVE"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_INIT_MAXSTREAMS"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_NODELAY"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_PRIMARY_ADDR"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SCTP_SET_PEER_PRIMARY_ADDR"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SO_LINGER"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SO_RCVBUF"), //
		jField<::com::sun::nio::sctp::SctpSocketOption>("SO_SNDBUF"), //
	};

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_DISABLE_FRAGMENTS() {
		static_assert(field_signatures[jField<F>("SCTP_DISABLE_FRAGMENTS")] != -1);
		return sat<F>("SCTP_DISABLE_FRAGMENTS");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_EXPLICIT_COMPLETE() {
		static_assert(field_signatures[jField<F>("SCTP_EXPLICIT_COMPLETE")] != -1);
		return sat<F>("SCTP_EXPLICIT_COMPLETE");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_FRAGMENT_INTERLEAVE() {
		static_assert(field_signatures[jField<F>("SCTP_FRAGMENT_INTERLEAVE")] != -1);
		return sat<F>("SCTP_FRAGMENT_INTERLEAVE");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_INIT_MAXSTREAMS() {
		static_assert(field_signatures[jField<F>("SCTP_INIT_MAXSTREAMS")] != -1);
		return sat<F>("SCTP_INIT_MAXSTREAMS");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_NODELAY() {
		static_assert(field_signatures[jField<F>("SCTP_NODELAY")] != -1);
		return sat<F>("SCTP_NODELAY");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_PRIMARY_ADDR() {
		static_assert(field_signatures[jField<F>("SCTP_PRIMARY_ADDR")] != -1);
		return sat<F>("SCTP_PRIMARY_ADDR");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SCTP_SET_PEER_PRIMARY_ADDR() {
		static_assert(field_signatures[jField<F>("SCTP_SET_PEER_PRIMARY_ADDR")] != -1);
		return sat<F>("SCTP_SET_PEER_PRIMARY_ADDR");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SO_LINGER() {
		static_assert(field_signatures[jField<F>("SO_LINGER")] != -1);
		return sat<F>("SO_LINGER");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SO_RCVBUF() {
		static_assert(field_signatures[jField<F>("SO_RCVBUF")] != -1);
		return sat<F>("SO_RCVBUF");
	}

	template<typename F = ::com::sun::nio::sctp::SctpSocketOption>
	static auto SO_SNDBUF() {
		static_assert(field_signatures[jField<F>("SO_SNDBUF")] != -1);
		return sat<F>("SO_SNDBUF");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
