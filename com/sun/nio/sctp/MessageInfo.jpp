#ifndef com_sun_nio_sctp_MessageInfo_HPP
#define com_sun_nio_sctp_MessageInfo_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::MessageInfo : public jObject<::com::sun::nio::sctp::MessageInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "MessageInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::net::SocketAddress()>("address"), //
		jMethod<::com::sun::nio::sctp::Association()>("association"), //
		jMethod<::jint()>("bytes"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::jboolean)>("complete"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::com::sun::nio::sctp::Association, ::java::net::SocketAddress, ::jint)>("createOutgoing"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::java::net::SocketAddress, ::jint)>("createOutgoing"), //
		jMethod<::jboolean()>("isComplete"), //
		jMethod<::jboolean()>("isUnordered"), //
		jMethod<::jint()>("payloadProtocolID"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::jint)>("payloadProtocolID"), //
		jMethod<::jint()>("streamNumber"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::jint)>("streamNumber"), //
		jMethod<::jlong()>("timeToLive"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::jlong)>("timeToLive"), //
		jMethod<::com::sun::nio::sctp::MessageInfo(::jboolean)>("unordered"), //
	};

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto address(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("address")] != -1);
		return call<R>("address", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::Association, typename... Args>
	auto association(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("association")] != -1);
		return call<R>("association", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto bytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bytes")] != -1);
		return call<R>("bytes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::MessageInfo, typename... Args>
	auto complete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("complete")] != -1);
		return call<R>("complete", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::MessageInfo, typename... Args>
	static auto createOutgoing(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutgoing")] != -1);
		return scall<R>("createOutgoing", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isComplete")] != -1);
		return call<R>("isComplete", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUnordered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUnordered")] != -1);
		return call<R>("isUnordered", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto payloadProtocolID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("payloadProtocolID")] != -1);
		return call<R>("payloadProtocolID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto streamNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("streamNumber")] != -1);
		return call<R>("streamNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto timeToLive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("timeToLive")] != -1);
		return call<R>("timeToLive", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::MessageInfo, typename... Args>
	auto unordered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unordered")] != -1);
		return call<R>("unordered", std::forward<Args>(args)...);
	}

};

#endif
