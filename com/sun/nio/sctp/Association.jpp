#ifndef com_sun_nio_sctp_Association_HPP
#define com_sun_nio_sctp_Association_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::Association : public jObject<::com::sun::nio::sctp::Association, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "Association";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("associationID"), //
		jMethod<::jint()>("maxInboundStreams"), //
		jMethod<::jint()>("maxOutboundStreams"), //
	};

	template<typename R = ::jint, typename... Args>
	auto associationID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("associationID")] != -1);
		return call<R>("associationID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maxInboundStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxInboundStreams")] != -1);
		return call<R>("maxInboundStreams", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maxOutboundStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxOutboundStreams")] != -1);
		return call<R>("maxOutboundStreams", std::forward<Args>(args)...);
	}

};

#endif
