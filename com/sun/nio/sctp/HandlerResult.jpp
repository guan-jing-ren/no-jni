#ifndef com_sun_nio_sctp_HandlerResult_HPP
#define com_sun_nio_sctp_HandlerResult_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::HandlerResult : public jObject<::com::sun::nio::sctp::HandlerResult, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "HandlerResult";

	constexpr static Enume field_signatures{
		jField<::com::sun::nio::sctp::HandlerResult>("CONTINUE"), //
		jField<::com::sun::nio::sctp::HandlerResult>("RETURN"), //
	};

	template<typename F = ::com::sun::nio::sctp::HandlerResult>
	static auto CONTINUE() {
		static_assert(field_signatures[jField<F>("CONTINUE")] != -1);
		return sat<F>("CONTINUE");
	}

	template<typename F = ::com::sun::nio::sctp::HandlerResult>
	static auto RETURN() {
		static_assert(field_signatures[jField<F>("RETURN")] != -1);
		return sat<F>("RETURN");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::nio::sctp::HandlerResult(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::nio::sctp::HandlerResult *()>("values"), //
	};

	template<typename R = ::com::sun::nio::sctp::HandlerResult, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::HandlerResult *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
