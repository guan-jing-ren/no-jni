#ifndef com_sun_nio_sctp_SctpStandardSocketOptions$InitMaxStreams_HPP
#define com_sun_nio_sctp_SctpStandardSocketOptions$InitMaxStreams_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::SctpStandardSocketOptions$InitMaxStreams : public jObject<::com::sun::nio::sctp::SctpStandardSocketOptions$InitMaxStreams, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "SctpStandardSocketOptions$InitMaxStreams";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::nio::sctp::SctpStandardSocketOptions$InitMaxStreams(::jint, ::jint)>("create"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("maxInStreams"), //
		jMethod<::jint()>("maxOutStreams"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::nio::sctp::SctpStandardSocketOptions$InitMaxStreams, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maxInStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxInStreams")] != -1);
		return call<R>("maxInStreams", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maxOutStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maxOutStreams")] != -1);
		return call<R>("maxOutStreams", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
