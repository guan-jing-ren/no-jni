#ifndef com_sun_nio_sctp_PeerAddressChangeNotification_HPP
#define com_sun_nio_sctp_PeerAddressChangeNotification_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::sctp::PeerAddressChangeNotification : public jObject<::com::sun::nio::sctp::PeerAddressChangeNotification, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_sctp / "PeerAddressChangeNotification";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::net::SocketAddress()>("address"), //
		jMethod<::com::sun::nio::sctp::Association()>("association"), //
		jMethod<::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent()>("event"), //
	};

	template<typename R = ::java::net::SocketAddress, typename... Args>
	auto address(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("address")] != -1);
		return call<R>("address", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::Association, typename... Args>
	auto association(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("association")] != -1);
		return call<R>("association", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::sctp::PeerAddressChangeNotification$AddressChangeEvent, typename... Args>
	auto event(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("event")] != -1);
		return call<R>("event", std::forward<Args>(args)...);
	}

};

#endif
