#ifndef com_sun_nio_file_ExtendedCopyOption_HPP
#define com_sun_nio_file_ExtendedCopyOption_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::nio::file::ExtendedCopyOption : public jObject<::com::sun::nio::file::ExtendedCopyOption, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_nio_file / "ExtendedCopyOption";

	constexpr static Enume field_signatures{
		jField<::com::sun::nio::file::ExtendedCopyOption>("INTERRUPTIBLE"), //
	};

	template<typename F = ::com::sun::nio::file::ExtendedCopyOption>
	static auto INTERRUPTIBLE() {
		static_assert(field_signatures[jField<F>("INTERRUPTIBLE")] != -1);
		return sat<F>("INTERRUPTIBLE");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::nio::file::ExtendedCopyOption(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::nio::file::ExtendedCopyOption *()>("values"), //
	};

	template<typename R = ::com::sun::nio::file::ExtendedCopyOption, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::nio::file::ExtendedCopyOption *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
