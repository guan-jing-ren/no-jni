#ifndef com_sun_net_ssl_X509TrustManager_HPP
#define com_sun_net_ssl_X509TrustManager_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::ssl::X509TrustManager : public jObject<::com::sun::net::ssl::X509TrustManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_ssl / "X509TrustManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::security::cert::X509Certificate *()>("getAcceptedIssuers"), //
		jMethod<::jboolean(::java::security::cert::X509Certificate *)>("isClientTrusted"), //
		jMethod<::jboolean(::java::security::cert::X509Certificate *)>("isServerTrusted"), //
	};

	template<typename R = ::java::security::cert::X509Certificate *, typename... Args>
	auto getAcceptedIssuers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptedIssuers")] != -1);
		return call<R>("getAcceptedIssuers", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClientTrusted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClientTrusted")] != -1);
		return call<R>("isClientTrusted", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isServerTrusted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isServerTrusted")] != -1);
		return call<R>("isServerTrusted", std::forward<Args>(args)...);
	}

};

#endif
