#ifndef com_sun_net_httpserver_HttpsConfigurator_HPP
#define com_sun_net_httpserver_HttpsConfigurator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::HttpsConfigurator : public jObject<::com::sun::net::httpserver::HttpsConfigurator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "HttpsConfigurator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::net::ssl::SSLContext)>(), //
		jMethod<::jvoid(::com::sun::net::httpserver::HttpsParameters)>("configure"), //
		jMethod<::javax::net::ssl::SSLContext()>("getSSLContext"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto configure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("configure")] != -1);
		return call<R>("configure", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::net::ssl::SSLContext, typename... Args>
	auto getSSLContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSSLContext")] != -1);
		return call<R>("getSSLContext", std::forward<Args>(args)...);
	}

};

#endif
