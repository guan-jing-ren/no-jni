#ifndef com_sun_net_httpserver_HttpsParameters_HPP
#define com_sun_net_httpserver_HttpsParameters_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::HttpsParameters : public jObject<::com::sun::net::httpserver::HttpsParameters, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "HttpsParameters";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String *()>("getCipherSuites"), //
		jMethod<::java::net::InetSocketAddress()>("getClientAddress"), //
		jMethod<::com::sun::net::httpserver::HttpsConfigurator()>("getHttpsConfigurator"), //
		jMethod<::jboolean()>("getNeedClientAuth"), //
		jMethod<::java::lang::String *()>("getProtocols"), //
		jMethod<::jboolean()>("getWantClientAuth"), //
		jMethod<::jvoid(::java::lang::String *)>("setCipherSuites"), //
		jMethod<::jvoid(::jboolean)>("setNeedClientAuth"), //
		jMethod<::jvoid(::java::lang::String *)>("setProtocols"), //
		jMethod<::jvoid(::javax::net::ssl::SSLParameters)>("setSSLParameters"), //
		jMethod<::jvoid(::jboolean)>("setWantClientAuth"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto getCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCipherSuites")] != -1);
		return call<R>("getCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto getClientAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientAddress")] != -1);
		return call<R>("getClientAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpsConfigurator, typename... Args>
	auto getHttpsConfigurator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHttpsConfigurator")] != -1);
		return call<R>("getHttpsConfigurator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNeedClientAuth")] != -1);
		return call<R>("getNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocols")] != -1);
		return call<R>("getProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWantClientAuth")] != -1);
		return call<R>("getWantClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCipherSuites(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCipherSuites")] != -1);
		return call<R>("setCipherSuites", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNeedClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNeedClientAuth")] != -1);
		return call<R>("setNeedClientAuth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProtocols(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProtocols")] != -1);
		return call<R>("setProtocols", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSSLParameters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSSLParameters")] != -1);
		return call<R>("setSSLParameters", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWantClientAuth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWantClientAuth")] != -1);
		return call<R>("setWantClientAuth", std::forward<Args>(args)...);
	}

};

#endif
