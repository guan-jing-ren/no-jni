#ifndef com_sun_net_httpserver_spi_HttpServerProvider_HPP
#define com_sun_net_httpserver_spi_HttpServerProvider_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::spi::HttpServerProvider : public jObject<::com::sun::net::httpserver::spi::HttpServerProvider, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver_spi / "HttpServerProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::net::httpserver::HttpServer(::java::net::InetSocketAddress, ::jint)>("createHttpServer"), //
		jMethod<::com::sun::net::httpserver::HttpsServer(::java::net::InetSocketAddress, ::jint)>("createHttpsServer"), //
		jMethod<::com::sun::net::httpserver::spi::HttpServerProvider()>("provider"), //
	};

	template<typename R = ::com::sun::net::httpserver::HttpServer, typename... Args>
	auto createHttpServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHttpServer")] != -1);
		return call<R>("createHttpServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpsServer, typename... Args>
	auto createHttpsServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createHttpsServer")] != -1);
		return call<R>("createHttpsServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::spi::HttpServerProvider, typename... Args>
	static auto provider(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("provider")] != -1);
		return scall<R>("provider", std::forward<Args>(args)...);
	}

};

#endif
