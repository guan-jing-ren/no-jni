#ifndef com_sun_net_httpserver_HttpExchange_HPP
#define com_sun_net_httpserver_HttpExchange_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::HttpExchange : public jObject<::com::sun::net::httpserver::HttpExchange, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "HttpExchange";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::com::sun::net::httpserver::HttpContext()>("getHttpContext"), //
		jMethod<::java::net::InetSocketAddress()>("getLocalAddress"), //
		jMethod<::com::sun::net::httpserver::HttpPrincipal()>("getPrincipal"), //
		jMethod<::java::lang::String()>("getProtocol"), //
		jMethod<::java::net::InetSocketAddress()>("getRemoteAddress"), //
		jMethod<::java::io::InputStream()>("getRequestBody"), //
		jMethod<::com::sun::net::httpserver::Headers()>("getRequestHeaders"), //
		jMethod<::java::lang::String()>("getRequestMethod"), //
		jMethod<::java::net::URI()>("getRequestURI"), //
		jMethod<::java::io::OutputStream()>("getResponseBody"), //
		jMethod<::jint()>("getResponseCode"), //
		jMethod<::com::sun::net::httpserver::Headers()>("getResponseHeaders"), //
		jMethod<::jvoid(::jint, ::jlong)>("sendResponseHeaders"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setAttribute"), //
		jMethod<::jvoid(::java::io::InputStream, ::java::io::OutputStream)>("setStreams"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpContext, typename... Args>
	auto getHttpContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHttpContext")] != -1);
		return call<R>("getHttpContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto getLocalAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalAddress")] != -1);
		return call<R>("getLocalAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpPrincipal, typename... Args>
	auto getPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipal")] != -1);
		return call<R>("getPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProtocol(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocol")] != -1);
		return call<R>("getProtocol", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::InetSocketAddress, typename... Args>
	auto getRemoteAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRemoteAddress")] != -1);
		return call<R>("getRemoteAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getRequestBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestBody")] != -1);
		return call<R>("getRequestBody", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::Headers, typename... Args>
	auto getRequestHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestHeaders")] != -1);
		return call<R>("getRequestHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRequestMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestMethod")] != -1);
		return call<R>("getRequestMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::URI, typename... Args>
	auto getRequestURI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestURI")] != -1);
		return call<R>("getRequestURI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::OutputStream, typename... Args>
	auto getResponseBody(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseBody")] != -1);
		return call<R>("getResponseBody", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getResponseCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseCode")] != -1);
		return call<R>("getResponseCode", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::Headers, typename... Args>
	auto getResponseHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseHeaders")] != -1);
		return call<R>("getResponseHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendResponseHeaders(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendResponseHeaders")] != -1);
		return call<R>("sendResponseHeaders", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStreams(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStreams")] != -1);
		return call<R>("setStreams", std::forward<Args>(args)...);
	}

};

#endif
