#ifndef com_sun_net_httpserver_HttpsServer_HPP
#define com_sun_net_httpserver_HttpsServer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::HttpsServer : public jObject<::com::sun::net::httpserver::HttpsServer, ::com::sun::net::httpserver::HttpServer> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "HttpsServer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::net::httpserver::HttpsServer()>("create"), //
		jMethod<::com::sun::net::httpserver::HttpsServer(::java::net::InetSocketAddress, ::jint)>("create"), //
		jMethod<::com::sun::net::httpserver::HttpsConfigurator()>("getHttpsConfigurator"), //
		jMethod<::jvoid(::com::sun::net::httpserver::HttpsConfigurator)>("setHttpsConfigurator"), //
	};

	template<typename R = ::com::sun::net::httpserver::HttpsServer, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpsConfigurator, typename... Args>
	auto getHttpsConfigurator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHttpsConfigurator")] != -1);
		return call<R>("getHttpsConfigurator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHttpsConfigurator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHttpsConfigurator")] != -1);
		return call<R>("setHttpsConfigurator", std::forward<Args>(args)...);
	}

};

#endif
