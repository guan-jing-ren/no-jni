#ifndef com_sun_net_httpserver_HttpContext_HPP
#define com_sun_net_httpserver_HttpContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::HttpContext : public jObject<::com::sun::net::httpserver::HttpContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "HttpContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Map()>("getAttributes"), //
		jMethod<::com::sun::net::httpserver::Authenticator()>("getAuthenticator"), //
		jMethod<::java::util::List()>("getFilters"), //
		jMethod<::com::sun::net::httpserver::HttpHandler()>("getHandler"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::com::sun::net::httpserver::HttpServer()>("getServer"), //
		jMethod<::com::sun::net::httpserver::Authenticator(::com::sun::net::httpserver::Authenticator)>("setAuthenticator"), //
		jMethod<::jvoid(::com::sun::net::httpserver::HttpHandler)>("setHandler"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::Authenticator, typename... Args>
	auto getAuthenticator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAuthenticator")] != -1);
		return call<R>("getAuthenticator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getFilters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilters")] != -1);
		return call<R>("getFilters", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpHandler, typename... Args>
	auto getHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHandler")] != -1);
		return call<R>("getHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::HttpServer, typename... Args>
	auto getServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServer")] != -1);
		return call<R>("getServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::net::httpserver::Authenticator, typename... Args>
	auto setAuthenticator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAuthenticator")] != -1);
		return call<R>("setAuthenticator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHandler")] != -1);
		return call<R>("setHandler", std::forward<Args>(args)...);
	}

};

#endif
