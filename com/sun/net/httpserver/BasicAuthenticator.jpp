#ifndef com_sun_net_httpserver_BasicAuthenticator_HPP
#define com_sun_net_httpserver_BasicAuthenticator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::net::httpserver::BasicAuthenticator : public jObject<::com::sun::net::httpserver::BasicAuthenticator, ::com::sun::net::httpserver::Authenticator> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_net_httpserver / "BasicAuthenticator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::com::sun::net::httpserver::Authenticator$Result(::com::sun::net::httpserver::HttpExchange)>("authenticate"), //
		jMethod<::jboolean(::java::lang::String, ::java::lang::String)>("checkCredentials"), //
		jMethod<::java::lang::String()>("getRealm"), //
	};

	template<typename R = ::com::sun::net::httpserver::Authenticator$Result, typename... Args>
	auto authenticate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("authenticate")] != -1);
		return call<R>("authenticate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto checkCredentials(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkCredentials")] != -1);
		return call<R>("checkCredentials", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRealm(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealm")] != -1);
		return call<R>("getRealm", std::forward<Args>(args)...);
	}

};

#endif
