#ifndef com_sun_security_auth_module_JndiLoginModule_HPP
#define com_sun_security_auth_module_JndiLoginModule_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::security::auth::module::JndiLoginModule : public jObject<::com::sun::security::auth::module::JndiLoginModule, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_auth_module / "JndiLoginModule";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("GROUP_PROVIDER"), //
		jField<::java::lang::String>("USER_PROVIDER"), //
	};

	template<typename F = ::java::lang::String>
	auto GROUP_PROVIDER() const {
		static_assert(field_signatures[jField<F>("GROUP_PROVIDER")] != -1);
		return at<F>("GROUP_PROVIDER");
	}

	template<typename F = ::java::lang::String>
	auto USER_PROVIDER() const {
		static_assert(field_signatures[jField<F>("USER_PROVIDER")] != -1);
		return at<F>("USER_PROVIDER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("abort"), //
		jMethod<::jboolean()>("commit"), //
		jMethod<::jvoid(::javax::security::auth::Subject, ::javax::security::auth::callback::CallbackHandler, ::java::util::Map, ::java::util::Map)>("initialize"), //
		jMethod<::jboolean()>("login"), //
		jMethod<::jboolean()>("logout"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto abort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("abort")] != -1);
		return call<R>("abort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto commit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("commit")] != -1);
		return call<R>("commit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto login(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("login")] != -1);
		return call<R>("login", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto logout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("logout")] != -1);
		return call<R>("logout", std::forward<Args>(args)...);
	}

};

#endif
