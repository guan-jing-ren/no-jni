#ifndef com_sun_security_ntlm_Server_HPP
#define com_sun_security_ntlm_Server_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::security::ntlm::Server : public jObject<::com::sun::security::ntlm::Server, ::com::sun::security::ntlm::NTLM> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_ntlm / "Server";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object *)>("debug"), //
		jMethod<::jvoid(::jbyte *)>("debug"), //
		jMethod<::jchar *(::java::lang::String, ::java::lang::String)>("getPassword"), //
		jMethod<::jbyte *(::jbyte *, ::jbyte *)>("type2"), //
		jMethod<::java::lang::String *(::jbyte *, ::jbyte *)>("verify"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto debug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("debug")] != -1);
		return call<R>("debug", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar *, typename... Args>
	auto getPassword(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPassword")] != -1);
		return call<R>("getPassword", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto type2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type2")] != -1);
		return call<R>("type2", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto verify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("verify")] != -1);
		return call<R>("verify", std::forward<Args>(args)...);
	}

};

#endif
