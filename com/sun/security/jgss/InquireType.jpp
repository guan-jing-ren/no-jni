#ifndef com_sun_security_jgss_InquireType_HPP
#define com_sun_security_jgss_InquireType_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::security::jgss::InquireType : public jObject<::com::sun::security::jgss::InquireType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_jgss / "InquireType";

	constexpr static Enume field_signatures{
		jField<::com::sun::security::jgss::InquireType>("KRB5_GET_AUTHTIME"), //
		jField<::com::sun::security::jgss::InquireType>("KRB5_GET_AUTHZ_DATA"), //
		jField<::com::sun::security::jgss::InquireType>("KRB5_GET_SESSION_KEY"), //
		jField<::com::sun::security::jgss::InquireType>("KRB5_GET_TKT_FLAGS"), //
	};

	template<typename F = ::com::sun::security::jgss::InquireType>
	static auto KRB5_GET_AUTHTIME() {
		static_assert(field_signatures[jField<F>("KRB5_GET_AUTHTIME")] != -1);
		return sat<F>("KRB5_GET_AUTHTIME");
	}

	template<typename F = ::com::sun::security::jgss::InquireType>
	static auto KRB5_GET_AUTHZ_DATA() {
		static_assert(field_signatures[jField<F>("KRB5_GET_AUTHZ_DATA")] != -1);
		return sat<F>("KRB5_GET_AUTHZ_DATA");
	}

	template<typename F = ::com::sun::security::jgss::InquireType>
	static auto KRB5_GET_SESSION_KEY() {
		static_assert(field_signatures[jField<F>("KRB5_GET_SESSION_KEY")] != -1);
		return sat<F>("KRB5_GET_SESSION_KEY");
	}

	template<typename F = ::com::sun::security::jgss::InquireType>
	static auto KRB5_GET_TKT_FLAGS() {
		static_assert(field_signatures[jField<F>("KRB5_GET_TKT_FLAGS")] != -1);
		return sat<F>("KRB5_GET_TKT_FLAGS");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::security::jgss::InquireType(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::security::jgss::InquireType *()>("values"), //
	};

	template<typename R = ::com::sun::security::jgss::InquireType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::security::jgss::InquireType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
