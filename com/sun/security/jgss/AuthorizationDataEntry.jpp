#ifndef com_sun_security_jgss_AuthorizationDataEntry_HPP
#define com_sun_security_jgss_AuthorizationDataEntry_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::security::jgss::AuthorizationDataEntry : public jObject<::com::sun::security::jgss::AuthorizationDataEntry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_jgss / "AuthorizationDataEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jbyte *)>(), //
		jMethod<::jbyte *()>("getData"), //
		jMethod<::jint()>("getType"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
