#ifndef com_sun_security_jgss_ExtendedGSSContext_HPP
#define com_sun_security_jgss_ExtendedGSSContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::security::jgss::ExtendedGSSContext : public jObject<::com::sun::security::jgss::ExtendedGSSContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_jgss / "ExtendedGSSContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("getDelegPolicyState"), //
		jMethod<::java::lang::Object(::com::sun::security::jgss::InquireType)>("inquireSecContext"), //
		jMethod<::jvoid(::jboolean)>("requestDelegPolicy"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getDelegPolicyState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegPolicyState")] != -1);
		return call<R>("getDelegPolicyState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto inquireSecContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("inquireSecContext")] != -1);
		return call<R>("inquireSecContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto requestDelegPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestDelegPolicy")] != -1);
		return call<R>("requestDelegPolicy", std::forward<Args>(args)...);
	}

};

#endif
