#ifndef com_sun_security_sasl_ClientFactoryImpl_HPP
#define com_sun_security_sasl_ClientFactoryImpl_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::security::sasl::ClientFactoryImpl : public jObject<::com::sun::security::sasl::ClientFactoryImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_security_sasl / "ClientFactoryImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::security::sasl::SaslClient(::java::lang::String *, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::util::Map, ::javax::security::auth::callback::CallbackHandler)>("createSaslClient"), //
		jMethod<::java::lang::String *(::java::util::Map)>("getMechanismNames"), //
	};

	template<typename R = ::javax::security::sasl::SaslClient, typename... Args>
	auto createSaslClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSaslClient")] != -1);
		return call<R>("createSaslClient", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getMechanismNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMechanismNames")] != -1);
		return call<R>("getMechanismNames", std::forward<Args>(args)...);
	}

};

#endif
