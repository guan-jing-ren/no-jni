#ifndef com_sun_jndi_rmi_registry_ReferenceWrapper_HPP
#define com_sun_jndi_rmi_registry_ReferenceWrapper_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::rmi::registry::ReferenceWrapper : public jObject<::com::sun::jndi::rmi::registry::ReferenceWrapper, ::java::rmi::server::UnicastRemoteObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_rmi_registry / "ReferenceWrapper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::naming::Reference)>(), //
		jMethod<::javax::naming::Reference()>("getReference"), //
	};

	template<typename R = ::javax::naming::Reference, typename... Args>
	auto getReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReference")] != -1);
		return call<R>("getReference", std::forward<Args>(args)...);
	}

};

#endif
