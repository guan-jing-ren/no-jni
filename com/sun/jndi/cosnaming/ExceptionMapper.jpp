#ifndef com_sun_jndi_cosnaming_ExceptionMapper_HPP
#define com_sun_jndi_cosnaming_ExceptionMapper_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::cosnaming::ExceptionMapper : public jObject<::com::sun::jndi::cosnaming::ExceptionMapper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_cosnaming / "ExceptionMapper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::naming::NamingException(::java::lang::Exception, ::com::sun::jndi::cosnaming::CNCtx, ::org::omg::CosNaming::NameComponent *)>("mapException"), //
	};

	template<typename R = ::javax::naming::NamingException, typename... Args>
	static auto mapException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapException")] != -1);
		return scall<R>("mapException", std::forward<Args>(args)...);
	}

};

#endif
