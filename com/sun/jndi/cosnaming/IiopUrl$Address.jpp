#ifndef com_sun_jndi_cosnaming_IiopUrl$Address_HPP
#define com_sun_jndi_cosnaming_IiopUrl$Address_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::cosnaming::IiopUrl$Address : public jObject<::com::sun::jndi::cosnaming::IiopUrl$Address, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_cosnaming / "IiopUrl$Address";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("host"), //
		jField<::jint>("major"), //
		jField<::jint>("minor"), //
		jField<::jint>("port"), //
	};

	template<typename F = ::java::lang::String>
	auto host() const {
		static_assert(field_signatures[jField<F>("host")] != -1);
		return at<F>("host");
	}

	template<typename F = ::jint>
	auto major() const {
		static_assert(field_signatures[jField<F>("major")] != -1);
		return at<F>("major");
	}

	template<typename F = ::jint>
	auto minor() const {
		static_assert(field_signatures[jField<F>("minor")] != -1);
		return at<F>("minor");
	}

	template<typename F = ::jint>
	auto port() const {
		static_assert(field_signatures[jField<F>("port")] != -1);
		return at<F>("port");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jboolean)>(), //
	};

};

#endif
