#ifndef com_sun_jndi_ldap_pool_PoolCallback_HPP
#define com_sun_jndi_ldap_pool_PoolCallback_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::pool::PoolCallback : public jObject<::com::sun::jndi::ldap::pool::PoolCallback, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap_pool / "PoolCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::com::sun::jndi::ldap::pool::PooledConnection)>("releasePooledConnection"), //
		jMethod<::jboolean(::com::sun::jndi::ldap::pool::PooledConnection)>("removePooledConnection"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto releasePooledConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releasePooledConnection")] != -1);
		return call<R>("releasePooledConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto removePooledConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePooledConnection")] != -1);
		return call<R>("removePooledConnection", std::forward<Args>(args)...);
	}

};

#endif
