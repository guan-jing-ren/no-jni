#ifndef com_sun_jndi_ldap_pool_Pool_HPP
#define com_sun_jndi_ldap_pool_Pool_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::pool::Pool : public jObject<::com::sun::jndi::ldap::pool::Pool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap_pool / "Pool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jint)>(), //
		jMethod<::jvoid(::jlong)>("expire"), //
		jMethod<::com::sun::jndi::ldap::pool::PooledConnection(::java::lang::Object, ::jlong, ::com::sun::jndi::ldap::pool::PooledConnectionFactory)>("getPooledConnection"), //
		jMethod<::jvoid(::java::io::PrintStream)>("showStats"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto expire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("expire")] != -1);
		return call<R>("expire", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::jndi::ldap::pool::PooledConnection, typename... Args>
	auto getPooledConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPooledConnection")] != -1);
		return call<R>("getPooledConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto showStats(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("showStats")] != -1);
		return call<R>("showStats", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
