#ifndef com_sun_jndi_ldap_BerEncoder_HPP
#define com_sun_jndi_ldap_BerEncoder_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::BerEncoder : public jObject<::com::sun::jndi::ldap::BerEncoder, ::com::sun::jndi::ldap::Ber> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "BerEncoder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jvoid(::jint)>("beginSeq"), //
		jMethod<::jvoid(::jboolean)>("encodeBoolean"), //
		jMethod<::jvoid(::jboolean, ::jint)>("encodeBoolean"), //
		jMethod<::jvoid(::jint)>("encodeByte"), //
		jMethod<::jvoid(::jint)>("encodeInt"), //
		jMethod<::jvoid(::jint, ::jint)>("encodeInt"), //
		jMethod<::jvoid(::jbyte *, ::jint)>("encodeOctetString"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint, ::jint)>("encodeOctetString"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::jboolean)>("encodeString"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("encodeString"), //
		jMethod<::jvoid(::java::lang::String *, ::jboolean)>("encodeStringArray"), //
		jMethod<::jvoid()>("endSeq"), //
		jMethod<::jbyte *()>("getBuf"), //
		jMethod<::jint()>("getDataLen"), //
		jMethod<::jbyte *()>("getTrimmedBuf"), //
		jMethod<::jvoid()>("reset"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto beginSeq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginSeq")] != -1);
		return call<R>("beginSeq", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeBoolean")] != -1);
		return call<R>("encodeBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeByte")] != -1);
		return call<R>("encodeByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeInt")] != -1);
		return call<R>("encodeInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeOctetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeOctetString")] != -1);
		return call<R>("encodeOctetString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeString")] != -1);
		return call<R>("encodeString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto encodeStringArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeStringArray")] != -1);
		return call<R>("encodeStringArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endSeq(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endSeq")] != -1);
		return call<R>("endSeq", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBuf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBuf")] != -1);
		return call<R>("getBuf", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDataLen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataLen")] != -1);
		return call<R>("getDataLen", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getTrimmedBuf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTrimmedBuf")] != -1);
		return call<R>("getTrimmedBuf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
