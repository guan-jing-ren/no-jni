#ifndef com_sun_jndi_ldap_BasicControl_HPP
#define com_sun_jndi_ldap_BasicControl_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::BasicControl : public jObject<::com::sun::jndi::ldap::BasicControl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "BasicControl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::jbyte *)>(), //
		jMethod<::jbyte *()>("getEncodedValue"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::jboolean()>("isCritical"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getEncodedValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodedValue")] != -1);
		return call<R>("getEncodedValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCritical(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCritical")] != -1);
		return call<R>("isCritical", std::forward<Args>(args)...);
	}

};

#endif
