#ifndef com_sun_jndi_ldap_EntryChangeResponseControl_HPP
#define com_sun_jndi_ldap_EntryChangeResponseControl_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::EntryChangeResponseControl : public jObject<::com::sun::jndi::ldap::EntryChangeResponseControl, ::com::sun::jndi::ldap::BasicControl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "EntryChangeResponseControl";

	constexpr static Enume field_signatures{
		jField<::jint>("ADD"), //
		jField<::jint>("DELETE"), //
		jField<::jint>("MODIFY"), //
		jField<::java::lang::String>("OID"), //
		jField<::jint>("RENAME"), //
	};

	template<typename F = ::jint>
	static auto ADD() {
		static_assert(field_signatures[jField<F>("ADD")] != -1);
		return sat<F>("ADD");
	}

	template<typename F = ::jint>
	static auto DELETE() {
		static_assert(field_signatures[jField<F>("DELETE")] != -1);
		return sat<F>("DELETE");
	}

	template<typename F = ::jint>
	static auto MODIFY() {
		static_assert(field_signatures[jField<F>("MODIFY")] != -1);
		return sat<F>("MODIFY");
	}

	template<typename F = ::java::lang::String>
	static auto OID() {
		static_assert(field_signatures[jField<F>("OID")] != -1);
		return sat<F>("OID");
	}

	template<typename F = ::jint>
	static auto RENAME() {
		static_assert(field_signatures[jField<F>("RENAME")] != -1);
		return sat<F>("RENAME");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::jbyte *)>(), //
		jMethod<::jlong()>("getChangeNumber"), //
		jMethod<::jint()>("getChangeType"), //
		jMethod<::java::lang::String()>("getPreviousDN"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getChangeNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeNumber")] != -1);
		return call<R>("getChangeNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChangeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChangeType")] != -1);
		return call<R>("getChangeType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPreviousDN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreviousDN")] != -1);
		return call<R>("getPreviousDN", std::forward<Args>(args)...);
	}

};

#endif
