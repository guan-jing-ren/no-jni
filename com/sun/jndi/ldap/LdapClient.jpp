#ifndef com_sun_jndi_ldap_LdapClient_HPP
#define com_sun_jndi_ldap_LdapClient_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::LdapClient : public jObject<::com::sun::jndi::ldap::LdapClient, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "LdapClient";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("closeConnection"), //
		jMethod<::com::sun::jndi::ldap::LdapResult(::java::lang::String, ::jbyte *, ::javax::naming::ldap::Control *, ::java::lang::String, ::jboolean)>("ldapBind"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto closeConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeConnection")] != -1);
		return call<R>("closeConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::jndi::ldap::LdapResult, typename... Args>
	auto ldapBind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ldapBind")] != -1);
		return call<R>("ldapBind", std::forward<Args>(args)...);
	}

};

#endif
