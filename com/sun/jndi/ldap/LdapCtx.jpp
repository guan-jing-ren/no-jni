#ifndef com_sun_jndi_ldap_LdapCtx_HPP
#define com_sun_jndi_ldap_LdapCtx_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::LdapCtx : public jObject<::com::sun::jndi::ldap::LdapCtx, ::com::sun::jndi::toolkit::ctx::ComponentDirContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "LdapCtx";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DEFAULT_HOST"), //
		jField<::jint>("DEFAULT_PORT"), //
		jField<::jint>("DEFAULT_SSL_PORT"), //
	};

	template<typename F = ::java::lang::String>
	static auto DEFAULT_HOST() {
		static_assert(field_signatures[jField<F>("DEFAULT_HOST")] != -1);
		return sat<F>("DEFAULT_HOST");
	}

	template<typename F = ::jint>
	static auto DEFAULT_PORT() {
		static_assert(field_signatures[jField<F>("DEFAULT_PORT")] != -1);
		return sat<F>("DEFAULT_PORT");
	}

	template<typename F = ::jint>
	static auto DEFAULT_SSL_PORT() {
		static_assert(field_signatures[jField<F>("DEFAULT_SSL_PORT")] != -1);
		return sat<F>("DEFAULT_SSL_PORT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint, ::java::util::Hashtable, ::jboolean)>(), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::String, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls, ::javax::naming::event::NamingListener)>("addNamingListener"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("addToEnvironment"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::naming::Name(::javax::naming::Name, ::javax::naming::Name)>("composeName"), //
		jMethod<::javax::naming::ldap::ExtendedResponse(::javax::naming::ldap::ExtendedRequest)>("extendedOperation"), //
		jMethod<::javax::naming::ldap::Control *()>("getConnectControls"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::javax::naming::ldap::Control *()>("getRequestControls"), //
		jMethod<::javax::naming::ldap::Control *()>("getResponseControls"), //
		jMethod<::javax::naming::NamingException(::jint, ::java::lang::String)>("mapErrorCode"), //
		jMethod<::javax::naming::ldap::LdapContext(::javax::naming::ldap::Control *)>("newInstance"), //
		jMethod<::jvoid(::javax::naming::ldap::Control *)>("reconnect"), //
		jMethod<::java::lang::Object(::java::lang::String)>("removeFromEnvironment"), //
		jMethod<::jvoid(::javax::naming::event::NamingListener)>("removeNamingListener"), //
		jMethod<::jvoid(::javax::naming::ldap::Control *)>("setRequestControls"), //
		jMethod<::jboolean()>("targetMustExist"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNamingListener")] != -1);
		return call<R>("addNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto addToEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToEnvironment")] != -1);
		return call<R>("addToEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto composeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("composeName")] != -1);
		return call<R>("composeName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::ldap::ExtendedResponse, typename... Args>
	auto extendedOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extendedOperation")] != -1);
		return call<R>("extendedOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::ldap::Control *, typename... Args>
	auto getConnectControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectControls")] != -1);
		return call<R>("getConnectControls", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::ldap::Control *, typename... Args>
	auto getRequestControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestControls")] != -1);
		return call<R>("getRequestControls", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::ldap::Control *, typename... Args>
	auto getResponseControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseControls")] != -1);
		return call<R>("getResponseControls", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingException, typename... Args>
	static auto mapErrorCode(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapErrorCode")] != -1);
		return scall<R>("mapErrorCode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::ldap::LdapContext, typename... Args>
	auto newInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstance")] != -1);
		return call<R>("newInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reconnect")] != -1);
		return call<R>("reconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFromEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromEnvironment")] != -1);
		return call<R>("removeFromEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNamingListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNamingListener")] != -1);
		return call<R>("removeNamingListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRequestControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRequestControls")] != -1);
		return call<R>("setRequestControls", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto targetMustExist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("targetMustExist")] != -1);
		return call<R>("targetMustExist", std::forward<Args>(args)...);
	}

};

#endif
