#ifndef com_sun_jndi_ldap_sasl_SaslInputStream_HPP
#define com_sun_jndi_ldap_sasl_SaslInputStream_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::sasl::SaslInputStream : public jObject<::com::sun::jndi::ldap::sasl::SaslInputStream, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap_sasl / "SaslInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

};

#endif
