#ifndef com_sun_jndi_ldap_LdapURL_HPP
#define com_sun_jndi_ldap_LdapURL_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::ldap::LdapURL : public jObject<::com::sun::jndi::ldap::LdapURL, ::com::sun::jndi::toolkit::url::Uri> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_ldap / "LdapURL";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String *(::java::lang::String)>("fromList"), //
		jMethod<::java::lang::String()>("getAttributes"), //
		jMethod<::java::lang::String()>("getDN"), //
		jMethod<::java::lang::String()>("getExtensions"), //
		jMethod<::java::lang::String()>("getFilter"), //
		jMethod<::java::lang::String()>("getScope"), //
		jMethod<::jboolean(::java::lang::String)>("hasQueryComponents"), //
		jMethod<::jboolean()>("useSsl"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	static auto fromList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromList")] != -1);
		return scall<R>("fromList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDN(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDN")] != -1);
		return call<R>("getDN", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getExtensions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExtensions")] != -1);
		return call<R>("getExtensions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getScope(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScope")] != -1);
		return call<R>("getScope", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto hasQueryComponents(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasQueryComponents")] != -1);
		return scall<R>("hasQueryComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useSsl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useSsl")] != -1);
		return call<R>("useSsl", std::forward<Args>(args)...);
	}

};

#endif
