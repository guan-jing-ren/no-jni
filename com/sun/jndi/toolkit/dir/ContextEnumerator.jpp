#ifndef com_sun_jndi_toolkit_dir_ContextEnumerator_HPP
#define com_sun_jndi_toolkit_dir_ContextEnumerator_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::dir::ContextEnumerator : public jObject<::com::sun::jndi::toolkit::dir::ContextEnumerator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_dir / "ContextEnumerator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::naming::Context)>(), //
		jConstructor<::jvoid(::javax::naming::Context, ::jint)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean()>("hasMore"), //
		jMethod<::jboolean()>("hasMoreElements"), //
		jMethod<::java::lang::Object()>("next"), //
		jMethod<::javax::naming::Binding()>("next"), //
		jMethod<::java::lang::Object()>("nextElement"), //
		jMethod<::javax::naming::Binding()>("nextElement"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasMore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasMore")] != -1);
		return call<R>("hasMore", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasMoreElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasMoreElements")] != -1);
		return call<R>("hasMoreElements", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto nextElement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextElement")] != -1);
		return call<R>("nextElement", std::forward<Args>(args)...);
	}

};

#endif
