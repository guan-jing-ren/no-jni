#ifndef com_sun_jndi_toolkit_dir_DirSearch_HPP
#define com_sun_jndi_toolkit_dir_DirSearch_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::dir::DirSearch : public jObject<::com::sun::jndi::toolkit::dir::DirSearch, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_dir / "DirSearch";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::directory::DirContext, ::java::lang::String, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::directory::DirContext, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::directory::DirContext, ::javax::naming::directory::Attributes, ::java::lang::String *)>("search"), //
	};

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	static auto search(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("search")] != -1);
		return scall<R>("search", std::forward<Args>(args)...);
	}

};

#endif
