#ifndef com_sun_jndi_toolkit_dir_HierMemDirCtx_HPP
#define com_sun_jndi_toolkit_dir_HierMemDirCtx_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::dir::HierMemDirCtx : public jObject<::com::sun::jndi::toolkit::dir::HierMemDirCtx, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_dir / "HierMemDirCtx";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Hashtable, ::jboolean)>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("addToEnvironment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::javax::naming::directory::Attributes)>("bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes)>("bind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("composeName"), //
		jMethod<::javax::naming::Name(::javax::naming::Name, ::javax::naming::Name)>("composeName"), //
		jMethod<::javax::naming::Context(::java::lang::String)>("createSubcontext"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String, ::javax::naming::directory::Attributes)>("createSubcontext"), //
		jMethod<::javax::naming::Context(::javax::naming::Name)>("createSubcontext"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name, ::javax::naming::directory::Attributes)>("createSubcontext"), //
		jMethod<::jvoid(::java::lang::String)>("destroySubcontext"), //
		jMethod<::jvoid(::javax::naming::Name)>("destroySubcontext"), //
		jMethod<::java::lang::Object(::javax::naming::Name, ::jboolean)>("doLookup"), //
		jMethod<::javax::naming::directory::Attributes(::java::lang::String)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::java::lang::String, ::java::lang::String *)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::javax::naming::Name)>("getAttributes"), //
		jMethod<::javax::naming::directory::Attributes(::javax::naming::Name, ::java::lang::String *)>("getAttributes"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::javax::naming::NameParser(::java::lang::String)>("getNameParser"), //
		jMethod<::javax::naming::NameParser(::javax::naming::Name)>("getNameParser"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String)>("getSchema"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name)>("getSchema"), //
		jMethod<::javax::naming::directory::DirContext(::java::lang::String)>("getSchemaClassDefinition"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name)>("getSchemaClassDefinition"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("list"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String)>("listBindings"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name)>("listBindings"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookup"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookup"), //
		jMethod<::java::lang::Object(::java::lang::String)>("lookupLink"), //
		jMethod<::java::lang::Object(::javax::naming::Name)>("lookupLink"), //
		jMethod<::jvoid(::java::lang::String, ::jint, ::javax::naming::directory::Attributes)>("modifyAttributes"), //
		jMethod<::jvoid(::java::lang::String, ::javax::naming::directory::ModificationItem *)>("modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::directory::Attributes)>("modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::directory::ModificationItem *)>("modifyAttributes"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("rebind"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::javax::naming::directory::Attributes)>("rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object)>("rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes)>("rebind"), //
		jMethod<::java::lang::Object(::java::lang::String)>("removeFromEnvironment"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("rename"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::Name)>("rename"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::java::lang::String, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::javax::naming::directory::Attributes)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::java::lang::String, ::javax::naming::directory::Attributes, ::java::lang::String *)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::javax::naming::directory::Attributes)>("search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::javax::naming::directory::Attributes, ::java::lang::String *)>("search"), //
		jMethod<::jvoid(::jboolean)>("setIgnoreCase"), //
		jMethod<::jvoid(::javax::naming::NameParser)>("setNameParser"), //
		jMethod<::jvoid(::javax::naming::NamingException)>("setReadOnly"), //
		jMethod<::jvoid(::java::lang::String)>("unbind"), //
		jMethod<::jvoid(::javax::naming::Name)>("unbind"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto addToEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToEnvironment")] != -1);
		return call<R>("addToEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bind")] != -1);
		return call<R>("bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto composeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("composeName")] != -1);
		return call<R>("composeName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto createSubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSubcontext")] != -1);
		return call<R>("createSubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroySubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroySubcontext")] != -1);
		return call<R>("destroySubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto doLookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doLookup")] != -1);
		return call<R>("doLookup", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attributes, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NameParser, typename... Args>
	auto getNameParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameParser")] != -1);
		return call<R>("getNameParser", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchema")] != -1);
		return call<R>("getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto getSchemaClassDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSchemaClassDefinition")] != -1);
		return call<R>("getSchemaClassDefinition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto listBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listBindings")] != -1);
		return call<R>("listBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookup")] != -1);
		return call<R>("lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto lookupLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupLink")] != -1);
		return call<R>("lookupLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto modifyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("modifyAttributes")] != -1);
		return call<R>("modifyAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rebind")] != -1);
		return call<R>("rebind", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFromEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromEnvironment")] != -1);
		return call<R>("removeFromEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto rename(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rename")] != -1);
		return call<R>("rename", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto search(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("search")] != -1);
		return call<R>("search", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIgnoreCase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIgnoreCase")] != -1);
		return call<R>("setIgnoreCase", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNameParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNameParser")] != -1);
		return call<R>("setNameParser", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReadOnly")] != -1);
		return call<R>("setReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbind")] != -1);
		return call<R>("unbind", std::forward<Args>(args)...);
	}

};

#endif
