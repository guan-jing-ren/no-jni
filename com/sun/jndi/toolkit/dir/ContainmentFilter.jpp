#ifndef com_sun_jndi_toolkit_dir_ContainmentFilter_HPP
#define com_sun_jndi_toolkit_dir_ContainmentFilter_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::dir::ContainmentFilter : public jObject<::com::sun::jndi::toolkit::dir::ContainmentFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_dir / "ContainmentFilter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::naming::directory::Attributes)>(), //
		jMethod<::jboolean(::javax::naming::directory::Attributes)>("check"), //
		jMethod<::jboolean(::javax::naming::directory::Attributes, ::javax::naming::directory::Attributes)>("contains"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto check(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("check")] != -1);
		return call<R>("check", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto contains(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return scall<R>("contains", std::forward<Args>(args)...);
	}

};

#endif
