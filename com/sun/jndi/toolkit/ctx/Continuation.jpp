#ifndef com_sun_jndi_toolkit_ctx_Continuation_HPP
#define com_sun_jndi_toolkit_ctx_Continuation_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::ctx::Continuation : public jObject<::com::sun::jndi::toolkit::ctx::Continuation, ::javax::naming::spi::ResolveResult> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_ctx / "Continuation";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::naming::Name, ::java::util::Hashtable)>(), //
		jMethod<::javax::naming::NamingException(::javax::naming::NamingException)>("fillInException"), //
		jMethod<::jboolean()>("isContinue"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("setContinue"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String, ::javax::naming::Context, ::java::lang::String)>("setContinue"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::naming::Name, ::javax::naming::Context)>("setContinue"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::naming::Name, ::javax::naming::Context, ::javax::naming::Name)>("setContinue"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String, ::javax::naming::Context)>("setContinueNNS"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::naming::Name, ::javax::naming::Context)>("setContinueNNS"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("setError"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::naming::Name)>("setError"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("setErrorNNS"), //
		jMethod<::jvoid(::java::lang::Object, ::javax::naming::Name)>("setErrorNNS"), //
		jMethod<::jvoid()>("setSuccess"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::jboolean)>("toString"), //
	};

	template<typename R = ::javax::naming::NamingException, typename... Args>
	auto fillInException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fillInException")] != -1);
		return call<R>("fillInException", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isContinue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isContinue")] != -1);
		return call<R>("isContinue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContinue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContinue")] != -1);
		return call<R>("setContinue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContinueNNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContinueNNS")] != -1);
		return call<R>("setContinueNNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setError")] != -1);
		return call<R>("setError", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setErrorNNS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setErrorNNS")] != -1);
		return call<R>("setErrorNNS", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSuccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSuccess")] != -1);
		return call<R>("setSuccess", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
