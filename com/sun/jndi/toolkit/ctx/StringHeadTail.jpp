#ifndef com_sun_jndi_toolkit_ctx_StringHeadTail_HPP
#define com_sun_jndi_toolkit_ctx_StringHeadTail_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jndi::toolkit::ctx::StringHeadTail : public jObject<::com::sun::jndi::toolkit::ctx::StringHeadTail, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_toolkit_ctx / "StringHeadTail";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jint)>(), //
		jMethod<::java::lang::String()>("getHead"), //
		jMethod<::jint()>("getStatus"), //
		jMethod<::java::lang::String()>("getTail"), //
		jMethod<::jvoid(::jint)>("setStatus"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHead")] != -1);
		return call<R>("getHead", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatus")] != -1);
		return call<R>("getStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTail")] != -1);
		return call<R>("getTail", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStatus")] != -1);
		return call<R>("setStatus", std::forward<Args>(args)...);
	}

};

#endif
