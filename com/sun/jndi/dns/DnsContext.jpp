#ifndef com_sun_jndi_dns_DnsContext_HPP
#define com_sun_jndi_dns_DnsContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::dns::DnsContext : public jObject<::com::sun::jndi::dns::DnsContext, ::com::sun::jndi::toolkit::ctx::ComponentDirContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_dns / "DnsContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String *, ::java::util::Hashtable)>(), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object)>("addToEnvironment"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_bind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_bind"), //
		jMethod<::javax::naming::Context(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_createSubcontext"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name, ::javax::naming::directory::Attributes, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_createSubcontext"), //
		jMethod<::jvoid(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_destroySubcontext"), //
		jMethod<::javax::naming::directory::Attributes(::javax::naming::Name, ::java::lang::String *, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_getAttributes"), //
		jMethod<::javax::naming::NameParser(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_getNameParser"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_getSchema"), //
		jMethod<::javax::naming::directory::DirContext(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_getSchemaClassDefinition"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_list"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_listBindings"), //
		jMethod<::java::lang::Object(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_lookup"), //
		jMethod<::java::lang::Object(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_lookupLink"), //
		jMethod<::jvoid(::javax::naming::Name, ::jint, ::javax::naming::directory::Attributes, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::directory::ModificationItem *, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_modifyAttributes"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::java::lang::Object, ::javax::naming::directory::Attributes, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_rebind"), //
		jMethod<::jvoid(::javax::naming::Name, ::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_rename"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::javax::naming::directory::SearchControls, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::java::lang::String, ::java::lang::Object *, ::javax::naming::directory::SearchControls, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_search"), //
		jMethod<::javax::naming::NamingEnumeration(::javax::naming::Name, ::javax::naming::directory::Attributes, ::java::lang::String *, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_search"), //
		jMethod<::jvoid(::javax::naming::Name, ::com::sun::jndi::toolkit::ctx::Continuation)>("c_unbind"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::naming::Name(::javax::naming::Name, ::javax::naming::Name)>("composeName"), //
		jMethod<::java::util::Hashtable()>("getEnvironment"), //
		jMethod<::java::lang::String()>("getNameInNamespace"), //
		jMethod<::java::lang::Object(::java::lang::String)>("removeFromEnvironment"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto addToEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToEnvironment")] != -1);
		return call<R>("addToEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_bind")] != -1);
		return call<R>("c_bind", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto c_createSubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_createSubcontext")] != -1);
		return call<R>("c_createSubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_destroySubcontext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_destroySubcontext")] != -1);
		return call<R>("c_destroySubcontext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::Attributes, typename... Args>
	auto c_getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_getAttributes")] != -1);
		return call<R>("c_getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NameParser, typename... Args>
	auto c_getNameParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_getNameParser")] != -1);
		return call<R>("c_getNameParser", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto c_getSchema(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_getSchema")] != -1);
		return call<R>("c_getSchema", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::directory::DirContext, typename... Args>
	auto c_getSchemaClassDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_getSchemaClassDefinition")] != -1);
		return call<R>("c_getSchemaClassDefinition", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto c_list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_list")] != -1);
		return call<R>("c_list", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto c_listBindings(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_listBindings")] != -1);
		return call<R>("c_listBindings", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto c_lookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_lookup")] != -1);
		return call<R>("c_lookup", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto c_lookupLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_lookupLink")] != -1);
		return call<R>("c_lookupLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_modifyAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_modifyAttributes")] != -1);
		return call<R>("c_modifyAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_rebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_rebind")] != -1);
		return call<R>("c_rebind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_rename(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_rename")] != -1);
		return call<R>("c_rename", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::NamingEnumeration, typename... Args>
	auto c_search(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_search")] != -1);
		return call<R>("c_search", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto c_unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("c_unbind")] != -1);
		return call<R>("c_unbind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto composeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("composeName")] != -1);
		return call<R>("composeName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	auto getEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnvironment")] != -1);
		return call<R>("getEnvironment", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNameInNamespace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameInNamespace")] != -1);
		return call<R>("getNameInNamespace", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto removeFromEnvironment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromEnvironment")] != -1);
		return call<R>("removeFromEnvironment", std::forward<Args>(args)...);
	}

};

#endif
