#ifndef com_sun_jndi_dns_DnsUrl_HPP
#define com_sun_jndi_dns_DnsUrl_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::dns::DnsUrl : public jObject<::com::sun::jndi::dns::DnsUrl, ::com::sun::jndi::toolkit::url::Uri> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_dns / "DnsUrl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::com::sun::jndi::dns::DnsUrl *(::java::lang::String)>("fromList"), //
		jMethod<::java::lang::String()>("getDomain"), //
	};

	template<typename R = ::com::sun::jndi::dns::DnsUrl *, typename... Args>
	static auto fromList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromList")] != -1);
		return scall<R>("fromList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", std::forward<Args>(args)...);
	}

};

#endif
