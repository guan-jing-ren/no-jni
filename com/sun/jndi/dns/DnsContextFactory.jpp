#ifndef com_sun_jndi_dns_DnsContextFactory_HPP
#define com_sun_jndi_dns_DnsContextFactory_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::dns::DnsContextFactory : public jObject<::com::sun::jndi::dns::DnsContextFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_dns / "DnsContextFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::jndi::dns::DnsContext(::java::lang::String, ::com::sun::jndi::dns::DnsUrl *, ::java::util::Hashtable)>("getContext"), //
		jMethod<::com::sun::jndi::dns::DnsContext(::java::lang::String, ::java::lang::String *, ::java::util::Hashtable)>("getContext"), //
		jMethod<::javax::naming::Context(::java::util::Hashtable)>("getInitialContext"), //
		jMethod<::jboolean()>("platformServersAvailable"), //
	};

	template<typename R = ::com::sun::jndi::dns::DnsContext, typename... Args>
	static auto getContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return scall<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Context, typename... Args>
	auto getInitialContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInitialContext")] != -1);
		return call<R>("getInitialContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto platformServersAvailable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("platformServersAvailable")] != -1);
		return scall<R>("platformServersAvailable", std::forward<Args>(args)...);
	}

};

#endif
