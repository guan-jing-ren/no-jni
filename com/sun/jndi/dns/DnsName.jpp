#ifndef com_sun_jndi_dns_DnsName_HPP
#define com_sun_jndi_dns_DnsName_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jndi::dns::DnsName : public jObject<::com::sun::jndi::dns::DnsName, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jndi_dns / "DnsName";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::javax::naming::Name(::jint, ::java::lang::String)>("add"), //
		jMethod<::javax::naming::Name(::java::lang::String)>("add"), //
		jMethod<::javax::naming::Name(::jint, ::javax::naming::Name)>("addAll"), //
		jMethod<::javax::naming::Name(::javax::naming::Name)>("addAll"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jboolean(::javax::naming::Name)>("endsWith"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String(::jint)>("get"), //
		jMethod<::java::util::Enumeration()>("getAll"), //
		jMethod<::jshort()>("getOctets"), //
		jMethod<::javax::naming::Name(::jint)>("getPrefix"), //
		jMethod<::javax::naming::Name(::jint)>("getSuffix"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jboolean()>("isHostName"), //
		jMethod<::java::lang::Object(::jint)>("remove"), //
		jMethod<::jint()>("size"), //
		jMethod<::jboolean(::javax::naming::Name)>("startsWith"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::javax::naming::Name, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto addAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAll")] != -1);
		return call<R>("addAll", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto endsWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endsWith")] != -1);
		return call<R>("endsWith", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Enumeration, typename... Args>
	auto getAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAll")] != -1);
		return call<R>("getAll", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getOctets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOctets")] != -1);
		return call<R>("getOctets", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrefix")] != -1);
		return call<R>("getPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::naming::Name, typename... Args>
	auto getSuffix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSuffix")] != -1);
		return call<R>("getSuffix", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isHostName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isHostName")] != -1);
		return call<R>("isHostName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto startsWith(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("startsWith")] != -1);
		return call<R>("startsWith", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
