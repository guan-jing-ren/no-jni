#ifndef com_sun_org_omg_CORBA_portable_ValueHelper_HPP
#define com_sun_org_omg_CORBA_portable_ValueHelper_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::omg::CORBA::portable::ValueHelper : public jObject<::com::sun::org::omg::CORBA::portable::ValueHelper, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_omg_CORBA_portable / "ValueHelper";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("get_class"), //
		jMethod<::java::lang::String *()>("get_truncatable_base_ids"), //
		jMethod<::org::omg::CORBA::TypeCode()>("get_type"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto get_class(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_class")] != -1);
		return call<R>("get_class", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto get_truncatable_base_ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_truncatable_base_ids")] != -1);
		return call<R>("get_truncatable_base_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto get_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_type")] != -1);
		return call<R>("get_type", std::forward<Args>(args)...);
	}

};

#endif
