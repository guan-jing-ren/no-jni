#ifndef com_sun_org_omg_CORBA_AttributeDescription_HPP
#define com_sun_org_omg_CORBA_AttributeDescription_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::omg::CORBA::AttributeDescription : public jObject<::com::sun::org::omg::CORBA::AttributeDescription, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_omg_CORBA / "AttributeDescription";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("defined_in"), //
		jField<::java::lang::String>("id"), //
		jField<::com::sun::org::omg::CORBA::AttributeMode>("mode"), //
		jField<::java::lang::String>("name"), //
		jField<::org::omg::CORBA::TypeCode>("type"), //
		jField<::java::lang::String>("version"), //
	};

	template<typename F = ::java::lang::String>
	auto defined_in() const {
		static_assert(field_signatures[jField<F>("defined_in")] != -1);
		return at<F>("defined_in");
	}

	template<typename F = ::java::lang::String>
	auto id() const {
		static_assert(field_signatures[jField<F>("id")] != -1);
		return at<F>("id");
	}

	template<typename F = ::com::sun::org::omg::CORBA::AttributeMode>
	auto mode() const {
		static_assert(field_signatures[jField<F>("mode")] != -1);
		return at<F>("mode");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::org::omg::CORBA::TypeCode>
	auto type() const {
		static_assert(field_signatures[jField<F>("type")] != -1);
		return at<F>("type");
	}

	template<typename F = ::java::lang::String>
	auto version() const {
		static_assert(field_signatures[jField<F>("version")] != -1);
		return at<F>("version");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::org::omg::CORBA::TypeCode, ::com::sun::org::omg::CORBA::AttributeMode)>(), //
	};

};

#endif
