#ifndef com_sun_org_glassfish_gmbal_ManagedObjectManager_HPP
#define com_sun_org_glassfish_gmbal_ManagedObjectManager_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::ManagedObjectManager : public jObject<::com::sun::org::glassfish::gmbal::ManagedObjectManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "ManagedObjectManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::reflect::AnnotatedElement, ::java::lang::annotation::Annotation)>("addAnnotation"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean()>("createRoot"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object)>("createRoot"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object, ::java::lang::String)>("createRoot"), //
		jMethod<::java::lang::String(::java::lang::Object)>("dumpSkeleton"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXClient(::java::lang::Object)>("getAMXClient"), //
		jMethod<::java::lang::String()>("getDomain"), //
		jMethod<::javax::management::MBeanServer()>("getMBeanServer"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName)>("getObject"), //
		jMethod<::javax::management::ObjectName(::java::lang::Object)>("getObjectName"), //
		jMethod<::java::util::ResourceBundle()>("getResourceBundle"), //
		jMethod<::java::lang::Object()>("getRoot"), //
		jMethod<::jboolean(::java::lang::Object)>("isManagedObject"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object, ::java::lang::Object)>("register"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object, ::java::lang::Object, ::java::lang::String)>("register"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object)>("registerAtRoot"), //
		jMethod<::com::sun::org::glassfish::gmbal::GmbalMBean(::java::lang::Object, ::java::lang::String)>("registerAtRoot"), //
		jMethod<::jvoid()>("resumeJMXRegistration"), //
		jMethod<::jvoid(::jboolean)>("setJMXRegistrationDebug"), //
		jMethod<::jvoid(::javax::management::MBeanServer)>("setMBeanServer"), //
		jMethod<::jvoid(::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel)>("setRegistrationDebug"), //
		jMethod<::jvoid(::java::util::ResourceBundle)>("setResourceBundle"), //
		jMethod<::jvoid(::jboolean)>("setRuntimeDebug"), //
		jMethod<::jvoid(::jint)>("setTypelibDebug"), //
		jMethod<::jvoid()>("stripPackagePrefix"), //
		jMethod<::jvoid(::java::lang::String *)>("stripPrefix"), //
		jMethod<::jvoid(::jboolean)>("suppressDuplicateRootReport"), //
		jMethod<::jvoid()>("suspendJMXRegistration"), //
		jMethod<::jvoid(::java::lang::Object)>("unregister"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAnnotation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAnnotation")] != -1);
		return call<R>("addAnnotation", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::GmbalMBean, typename... Args>
	auto createRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createRoot")] != -1);
		return call<R>("createRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto dumpSkeleton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dumpSkeleton")] != -1);
		return call<R>("dumpSkeleton", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::AMXClient, typename... Args>
	auto getAMXClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAMXClient")] != -1);
		return call<R>("getAMXClient", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomain")] != -1);
		return call<R>("getDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServer, typename... Args>
	auto getMBeanServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanServer")] != -1);
		return call<R>("getMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectName")] != -1);
		return call<R>("getObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::ResourceBundle, typename... Args>
	auto getResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResourceBundle")] != -1);
		return call<R>("getResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isManagedObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isManagedObject")] != -1);
		return call<R>("isManagedObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::GmbalMBean, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return call<R>("register", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::GmbalMBean, typename... Args>
	auto registerAtRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerAtRoot")] != -1);
		return call<R>("registerAtRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resumeJMXRegistration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resumeJMXRegistration")] != -1);
		return call<R>("resumeJMXRegistration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setJMXRegistrationDebug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setJMXRegistrationDebug")] != -1);
		return call<R>("setJMXRegistrationDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMBeanServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMBeanServer")] != -1);
		return call<R>("setMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRegistrationDebug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRegistrationDebug")] != -1);
		return call<R>("setRegistrationDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResourceBundle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResourceBundle")] != -1);
		return call<R>("setResourceBundle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRuntimeDebug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRuntimeDebug")] != -1);
		return call<R>("setRuntimeDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTypelibDebug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTypelibDebug")] != -1);
		return call<R>("setTypelibDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stripPackagePrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stripPackagePrefix")] != -1);
		return call<R>("stripPackagePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stripPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stripPrefix")] != -1);
		return call<R>("stripPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto suppressDuplicateRootReport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("suppressDuplicateRootReport")] != -1);
		return call<R>("suppressDuplicateRootReport", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto suspendJMXRegistration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("suspendJMXRegistration")] != -1);
		return call<R>("suspendJMXRegistration", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregister")] != -1);
		return call<R>("unregister", std::forward<Args>(args)...);
	}

};

#endif
