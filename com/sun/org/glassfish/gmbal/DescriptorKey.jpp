#ifndef com_sun_org_glassfish_gmbal_DescriptorKey_HPP
#define com_sun_org_glassfish_gmbal_DescriptorKey_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::DescriptorKey : public jObject<::com::sun::org::glassfish::gmbal::DescriptorKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "DescriptorKey";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("omitIfDefault"), //
		jMethod<::java::lang::String()>("value"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto omitIfDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("omitIfDefault")] != -1);
		return call<R>("omitIfDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
