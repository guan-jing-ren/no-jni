#ifndef com_sun_org_glassfish_gmbal_ManagedObjectManager$RegistrationDebugLevel_HPP
#define com_sun_org_glassfish_gmbal_ManagedObjectManager$RegistrationDebugLevel_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel : public jObject<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "ManagedObjectManager$RegistrationDebugLevel";

	constexpr static Enume field_signatures{
		jField<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>("FINE"), //
		jField<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>("NONE"), //
		jField<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>("NORMAL"), //
	};

	template<typename F = ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>
	static auto FINE() {
		static_assert(field_signatures[jField<F>("FINE")] != -1);
		return sat<F>("FINE");
	}

	template<typename F = ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel *()>("values"), //
	};

	template<typename R = ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::ManagedObjectManager$RegistrationDebugLevel *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
