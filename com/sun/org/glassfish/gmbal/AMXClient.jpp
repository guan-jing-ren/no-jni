#ifndef com_sun_org_glassfish_gmbal_AMXClient_HPP
#define com_sun_org_glassfish_gmbal_AMXClient_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::AMXClient : public jObject<::com::sun::org::glassfish::gmbal::AMXClient, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "AMXClient";

	constexpr static Enume field_signatures{
		jField<::javax::management::ObjectName>("NULL_OBJECTNAME"), //
	};

	template<typename F = ::javax::management::ObjectName>
	static auto NULL_OBJECTNAME() {
		static_assert(field_signatures[jField<F>("NULL_OBJECTNAME")] != -1);
		return sat<F>("NULL_OBJECTNAME");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::management::MBeanServerConnection, ::javax::management::ObjectName)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::java::lang::String *)>("getAttributes"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXClient *()>("getChildren"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXMBeanInterface *()>("getChildren"), //
		jMethod<::javax::management::MBeanInfo()>("getMBeanInfo"), //
		jMethod<::java::util::Map()>("getMeta"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXClient()>("getParent"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXMBeanInterface()>("getParent"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("invoke"), //
		jMethod<::javax::management::ObjectName()>("objectName"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("setAttribute"), //
		jMethod<::jvoid(::javax::management::Attribute)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::AttributeList)>("setAttributes"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::AMXClient *, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getMeta(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMeta")] != -1);
		return call<R>("getMeta", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::AMXClient, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto objectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectName")] != -1);
		return call<R>("objectName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
