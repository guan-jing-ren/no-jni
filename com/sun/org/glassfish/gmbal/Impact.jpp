#ifndef com_sun_org_glassfish_gmbal_Impact_HPP
#define com_sun_org_glassfish_gmbal_Impact_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::Impact : public jObject<::com::sun::org::glassfish::gmbal::Impact, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "Impact";

	constexpr static Enume field_signatures{
		jField<::com::sun::org::glassfish::gmbal::Impact>("ACTION"), //
		jField<::com::sun::org::glassfish::gmbal::Impact>("ACTION_INFO"), //
		jField<::com::sun::org::glassfish::gmbal::Impact>("INFO"), //
		jField<::com::sun::org::glassfish::gmbal::Impact>("UNKNOWN"), //
	};

	template<typename F = ::com::sun::org::glassfish::gmbal::Impact>
	static auto ACTION() {
		static_assert(field_signatures[jField<F>("ACTION")] != -1);
		return sat<F>("ACTION");
	}

	template<typename F = ::com::sun::org::glassfish::gmbal::Impact>
	static auto ACTION_INFO() {
		static_assert(field_signatures[jField<F>("ACTION_INFO")] != -1);
		return sat<F>("ACTION_INFO");
	}

	template<typename F = ::com::sun::org::glassfish::gmbal::Impact>
	static auto INFO() {
		static_assert(field_signatures[jField<F>("INFO")] != -1);
		return sat<F>("INFO");
	}

	template<typename F = ::com::sun::org::glassfish::gmbal::Impact>
	static auto UNKNOWN() {
		static_assert(field_signatures[jField<F>("UNKNOWN")] != -1);
		return sat<F>("UNKNOWN");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::org::glassfish::gmbal::Impact(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::org::glassfish::gmbal::Impact *()>("values"), //
	};

	template<typename R = ::com::sun::org::glassfish::gmbal::Impact, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::Impact *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
