#ifndef com_sun_org_glassfish_gmbal_AMXMBeanInterface_HPP
#define com_sun_org_glassfish_gmbal_AMXMBeanInterface_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::AMXMBeanInterface : public jObject<::com::sun::org::glassfish::gmbal::AMXMBeanInterface, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "AMXMBeanInterface";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::org::glassfish::gmbal::AMXMBeanInterface *()>("getChildren"), //
		jMethod<::java::util::Map()>("getMeta"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::org::glassfish::gmbal::AMXMBeanInterface()>("getParent"), //
	};

	template<typename R = ::com::sun::org::glassfish::gmbal::AMXMBeanInterface *, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getMeta(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMeta")] != -1);
		return call<R>("getMeta", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::gmbal::AMXMBeanInterface, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

};

#endif
