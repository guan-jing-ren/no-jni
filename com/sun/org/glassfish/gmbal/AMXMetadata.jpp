#ifndef com_sun_org_glassfish_gmbal_AMXMetadata_HPP
#define com_sun_org_glassfish_gmbal_AMXMetadata_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::gmbal::AMXMetadata : public jObject<::com::sun::org::glassfish::gmbal::AMXMetadata, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_gmbal / "AMXMetadata";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("genericInterfaceName"), //
		jMethod<::java::lang::String()>("group"), //
		jMethod<::jboolean()>("immutableInfo"), //
		jMethod<::java::lang::String()>("interfaceClassName"), //
		jMethod<::jboolean()>("isSingleton"), //
		jMethod<::java::lang::String *()>("subTypes"), //
		jMethod<::java::lang::String()>("type"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto genericInterfaceName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("genericInterfaceName")] != -1);
		return call<R>("genericInterfaceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto group(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("group")] != -1);
		return call<R>("group", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto immutableInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("immutableInfo")] != -1);
		return call<R>("immutableInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto interfaceClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("interfaceClassName")] != -1);
		return call<R>("interfaceClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSingleton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSingleton")] != -1);
		return call<R>("isSingleton", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto subTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subTypes")] != -1);
		return call<R>("subTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
