#ifndef com_sun_org_glassfish_external_amx_AMXUtil_HPP
#define com_sun_org_glassfish_external_amx_AMXUtil_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::amx::AMXUtil : public jObject<::com::sun::org::glassfish::external::amx::AMXUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_amx / "AMXUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::management::ObjectName()>("getMBeanServerDelegateObjectName"), //
		jMethod<::javax::management::ObjectName(::java::lang::String)>("newObjectName"), //
		jMethod<::javax::management::ObjectName(::java::lang::String, ::java::lang::String)>("newObjectName"), //
		jMethod<::java::lang::String(::java::lang::String, ::java::lang::String)>("prop"), //
	};

	template<typename R = ::javax::management::ObjectName, typename... Args>
	static auto getMBeanServerDelegateObjectName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanServerDelegateObjectName")] != -1);
		return scall<R>("getMBeanServerDelegateObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	static auto newObjectName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newObjectName")] != -1);
		return scall<R>("newObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto prop(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prop")] != -1);
		return scall<R>("prop", std::forward<Args>(args)...);
	}

};

#endif
