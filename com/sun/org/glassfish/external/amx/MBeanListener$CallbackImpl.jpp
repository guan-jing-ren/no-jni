#ifndef com_sun_org_glassfish_external_amx_MBeanListener$CallbackImpl_HPP
#define com_sun_org_glassfish_external_amx_MBeanListener$CallbackImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::amx::MBeanListener$CallbackImpl : public jObject<::com::sun::org::glassfish::external::amx::MBeanListener$CallbackImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_amx / "MBeanListener$CallbackImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::jvoid()>("await"), //
		jMethod<::javax::management::ObjectName()>("getRegistered"), //
		jMethod<::javax::management::ObjectName()>("getUnregistered"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::com::sun::org::glassfish::external::amx::MBeanListener)>("mbeanRegistered"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::com::sun::org::glassfish::external::amx::MBeanListener)>("mbeanUnregistered"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto await(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("await")] != -1);
		return call<R>("await", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegistered")] != -1);
		return call<R>("getRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getUnregistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnregistered")] != -1);
		return call<R>("getUnregistered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mbeanRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mbeanRegistered")] != -1);
		return call<R>("mbeanRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mbeanUnregistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mbeanUnregistered")] != -1);
		return call<R>("mbeanUnregistered", std::forward<Args>(args)...);
	}

};

#endif
