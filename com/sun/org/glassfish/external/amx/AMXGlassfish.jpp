#ifndef com_sun_org_glassfish_external_amx_AMXGlassfish_HPP
#define com_sun_org_glassfish_external_amx_AMXGlassfish_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::amx::AMXGlassfish : public jObject<::com::sun::org::glassfish::external::amx::AMXGlassfish, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_amx / "AMXGlassfish";

	constexpr static Enume field_signatures{
		jField<::com::sun::org::glassfish::external::amx::AMXGlassfish>("DEFAULT"), //
		jField<::java::lang::String>("DEFAULT_JMX_DOMAIN"), //
	};

	template<typename F = ::com::sun::org::glassfish::external::amx::AMXGlassfish>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_JMX_DOMAIN() {
		static_assert(field_signatures[jField<F>("DEFAULT_JMX_DOMAIN")] != -1);
		return sat<F>("DEFAULT_JMX_DOMAIN");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String()>("amxJMXDomain"), //
		jMethod<::java::lang::String()>("amxSupportDomain"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer)>("bootAMX"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServerConnection)>("bootAMX"), //
		jMethod<::java::lang::String()>("dasConfig"), //
		jMethod<::java::lang::String()>("dasName"), //
		jMethod<::javax::management::ObjectName()>("domainRoot"), //
		jMethod<::javax::management::ObjectName()>("getBootAMXMBeanObjectName"), //
		jMethod<::java::lang::String()>("getGlassfishVersion"), //
		jMethod<::jvoid(::javax::management::MBeanServerConnection)>("invokeBootAMX"), //
		jMethod<::com::sun::org::glassfish::external::amx::MBeanListener(::javax::management::MBeanServerConnection, ::com::sun::org::glassfish::external::amx::MBeanListener$Callback)>("listenForBootAMX"), //
		jMethod<::com::sun::org::glassfish::external::amx::MBeanListener(::javax::management::MBeanServerConnection, ::com::sun::org::glassfish::external::amx::MBeanListener$Callback)>("listenForDomainRoot"), //
		jMethod<::javax::management::ObjectName()>("monitoringRoot"), //
		jMethod<::javax::management::ObjectName(::java::lang::String)>("newObjectName"), //
		jMethod<::javax::management::ObjectName(::java::lang::String, ::java::lang::String, ::java::lang::String)>("newObjectName"), //
		jMethod<::javax::management::ObjectName(::java::lang::String)>("serverMon"), //
		jMethod<::javax::management::ObjectName()>("serverMonForDAS"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServerConnection)>("waitAMXReady"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto amxJMXDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("amxJMXDomain")] != -1);
		return call<R>("amxJMXDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto amxSupportDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("amxSupportDomain")] != -1);
		return call<R>("amxSupportDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto bootAMX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootAMX")] != -1);
		return call<R>("bootAMX", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto dasConfig(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dasConfig")] != -1);
		return call<R>("dasConfig", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto dasName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dasName")] != -1);
		return call<R>("dasName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto domainRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("domainRoot")] != -1);
		return call<R>("domainRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto getBootAMXMBeanObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBootAMXMBeanObjectName")] != -1);
		return call<R>("getBootAMXMBeanObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getGlassfishVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlassfishVersion")] != -1);
		return scall<R>("getGlassfishVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeBootAMX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeBootAMX")] != -1);
		return call<R>("invokeBootAMX", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::amx::MBeanListener, typename... Args>
	auto listenForBootAMX(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listenForBootAMX")] != -1);
		return call<R>("listenForBootAMX", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::amx::MBeanListener, typename... Args>
	auto listenForDomainRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listenForDomainRoot")] != -1);
		return call<R>("listenForDomainRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto monitoringRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("monitoringRoot")] != -1);
		return call<R>("monitoringRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto newObjectName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newObjectName")] != -1);
		return call<R>("newObjectName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto serverMon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverMon")] != -1);
		return call<R>("serverMon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto serverMonForDAS(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverMonForDAS")] != -1);
		return call<R>("serverMonForDAS", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto waitAMXReady(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("waitAMXReady")] != -1);
		return call<R>("waitAMXReady", std::forward<Args>(args)...);
	}

};

#endif
