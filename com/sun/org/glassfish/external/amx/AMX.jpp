#ifndef com_sun_org_glassfish_external_amx_AMX_HPP
#define com_sun_org_glassfish_external_amx_AMX_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::amx::AMX : public jObject<::com::sun::org::glassfish::external::amx::AMX, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_amx / "AMX";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ATTR_CHILDREN"), //
		jField<::java::lang::String>("ATTR_NAME"), //
		jField<::java::lang::String>("ATTR_PARENT"), //
		jField<::java::lang::String>("DESC_GENERIC_INTERFACE_NAME"), //
		jField<::java::lang::String>("DESC_GROUP"), //
		jField<::java::lang::String>("DESC_IS_GLOBAL_SINGLETON"), //
		jField<::java::lang::String>("DESC_IS_SINGLETON"), //
		jField<::java::lang::String>("DESC_PREFIX"), //
		jField<::java::lang::String>("DESC_STD_IMMUTABLE_INFO"), //
		jField<::java::lang::String>("DESC_STD_INTERFACE_NAME"), //
		jField<::java::lang::String>("DESC_SUB_TYPES"), //
		jField<::java::lang::String>("DESC_SUPPORTS_ADOPTION"), //
		jField<::java::lang::String>("GROUP_CONFIGURATION"), //
		jField<::java::lang::String>("GROUP_JSR77"), //
		jField<::java::lang::String>("GROUP_MONITORING"), //
		jField<::java::lang::String>("GROUP_OTHER"), //
		jField<::java::lang::String>("GROUP_UTILITY"), //
		jField<::java::lang::String>("NAME_KEY"), //
		jField<::java::lang::String>("NOTIFICATION_PREFIX"), //
		jField<::java::lang::String>("NO_NAME"), //
		jField<::java::lang::String>("PARENT_PATH_KEY"), //
		jField<::java::lang::String>("TYPE_KEY"), //
	};

	template<typename F = ::java::lang::String>
	static auto ATTR_CHILDREN() {
		static_assert(field_signatures[jField<F>("ATTR_CHILDREN")] != -1);
		return sat<F>("ATTR_CHILDREN");
	}

	template<typename F = ::java::lang::String>
	static auto ATTR_NAME() {
		static_assert(field_signatures[jField<F>("ATTR_NAME")] != -1);
		return sat<F>("ATTR_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto ATTR_PARENT() {
		static_assert(field_signatures[jField<F>("ATTR_PARENT")] != -1);
		return sat<F>("ATTR_PARENT");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_GENERIC_INTERFACE_NAME() {
		static_assert(field_signatures[jField<F>("DESC_GENERIC_INTERFACE_NAME")] != -1);
		return sat<F>("DESC_GENERIC_INTERFACE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_GROUP() {
		static_assert(field_signatures[jField<F>("DESC_GROUP")] != -1);
		return sat<F>("DESC_GROUP");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_IS_GLOBAL_SINGLETON() {
		static_assert(field_signatures[jField<F>("DESC_IS_GLOBAL_SINGLETON")] != -1);
		return sat<F>("DESC_IS_GLOBAL_SINGLETON");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_IS_SINGLETON() {
		static_assert(field_signatures[jField<F>("DESC_IS_SINGLETON")] != -1);
		return sat<F>("DESC_IS_SINGLETON");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_PREFIX() {
		static_assert(field_signatures[jField<F>("DESC_PREFIX")] != -1);
		return sat<F>("DESC_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_STD_IMMUTABLE_INFO() {
		static_assert(field_signatures[jField<F>("DESC_STD_IMMUTABLE_INFO")] != -1);
		return sat<F>("DESC_STD_IMMUTABLE_INFO");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_STD_INTERFACE_NAME() {
		static_assert(field_signatures[jField<F>("DESC_STD_INTERFACE_NAME")] != -1);
		return sat<F>("DESC_STD_INTERFACE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SUB_TYPES() {
		static_assert(field_signatures[jField<F>("DESC_SUB_TYPES")] != -1);
		return sat<F>("DESC_SUB_TYPES");
	}

	template<typename F = ::java::lang::String>
	static auto DESC_SUPPORTS_ADOPTION() {
		static_assert(field_signatures[jField<F>("DESC_SUPPORTS_ADOPTION")] != -1);
		return sat<F>("DESC_SUPPORTS_ADOPTION");
	}

	template<typename F = ::java::lang::String>
	static auto GROUP_CONFIGURATION() {
		static_assert(field_signatures[jField<F>("GROUP_CONFIGURATION")] != -1);
		return sat<F>("GROUP_CONFIGURATION");
	}

	template<typename F = ::java::lang::String>
	static auto GROUP_JSR77() {
		static_assert(field_signatures[jField<F>("GROUP_JSR77")] != -1);
		return sat<F>("GROUP_JSR77");
	}

	template<typename F = ::java::lang::String>
	static auto GROUP_MONITORING() {
		static_assert(field_signatures[jField<F>("GROUP_MONITORING")] != -1);
		return sat<F>("GROUP_MONITORING");
	}

	template<typename F = ::java::lang::String>
	static auto GROUP_OTHER() {
		static_assert(field_signatures[jField<F>("GROUP_OTHER")] != -1);
		return sat<F>("GROUP_OTHER");
	}

	template<typename F = ::java::lang::String>
	static auto GROUP_UTILITY() {
		static_assert(field_signatures[jField<F>("GROUP_UTILITY")] != -1);
		return sat<F>("GROUP_UTILITY");
	}

	template<typename F = ::java::lang::String>
	static auto NAME_KEY() {
		static_assert(field_signatures[jField<F>("NAME_KEY")] != -1);
		return sat<F>("NAME_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto NOTIFICATION_PREFIX() {
		static_assert(field_signatures[jField<F>("NOTIFICATION_PREFIX")] != -1);
		return sat<F>("NOTIFICATION_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto NO_NAME() {
		static_assert(field_signatures[jField<F>("NO_NAME")] != -1);
		return sat<F>("NO_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto PARENT_PATH_KEY() {
		static_assert(field_signatures[jField<F>("PARENT_PATH_KEY")] != -1);
		return sat<F>("PARENT_PATH_KEY");
	}

	template<typename F = ::java::lang::String>
	static auto TYPE_KEY() {
		static_assert(field_signatures[jField<F>("TYPE_KEY")] != -1);
		return sat<F>("TYPE_KEY");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
