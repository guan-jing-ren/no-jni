#ifndef com_sun_org_glassfish_external_amx_AMXGlassfish$BootAMXCallback_HPP
#define com_sun_org_glassfish_external_amx_AMXGlassfish$BootAMXCallback_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::amx::AMXGlassfish$BootAMXCallback : public jObject<::com::sun::org::glassfish::external::amx::AMXGlassfish$BootAMXCallback, ::com::sun::org::glassfish::external::amx::MBeanListener$CallbackImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_amx / "AMXGlassfish$BootAMXCallback";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::management::MBeanServerConnection)>(), //
		jMethod<::jvoid(::javax::management::ObjectName, ::com::sun::org::glassfish::external::amx::MBeanListener)>("mbeanRegistered"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto mbeanRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mbeanRegistered")] != -1);
		return call<R>("mbeanRegistered", std::forward<Args>(args)...);
	}

};

#endif
