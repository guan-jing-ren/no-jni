#ifndef com_sun_org_glassfish_external_probe_provider_PluginPoint_HPP
#define com_sun_org_glassfish_external_probe_provider_PluginPoint_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::probe::provider::PluginPoint : public jObject<::com::sun::org::glassfish::external::probe::provider::PluginPoint, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_probe_provider / "PluginPoint";

	constexpr static Enume field_signatures{
		jField<::com::sun::org::glassfish::external::probe::provider::PluginPoint>("APPLICATIONS"), //
		jField<::com::sun::org::glassfish::external::probe::provider::PluginPoint>("SERVER"), //
	};

	template<typename F = ::com::sun::org::glassfish::external::probe::provider::PluginPoint>
	static auto APPLICATIONS() {
		static_assert(field_signatures[jField<F>("APPLICATIONS")] != -1);
		return sat<F>("APPLICATIONS");
	}

	template<typename F = ::com::sun::org::glassfish::external::probe::provider::PluginPoint>
	static auto SERVER() {
		static_assert(field_signatures[jField<F>("SERVER")] != -1);
		return sat<F>("SERVER");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getPath"), //
		jMethod<::com::sun::org::glassfish::external::probe::provider::PluginPoint(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::org::glassfish::external::probe::provider::PluginPoint *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPath(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPath")] != -1);
		return call<R>("getPath", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::probe::provider::PluginPoint, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::probe::provider::PluginPoint *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
