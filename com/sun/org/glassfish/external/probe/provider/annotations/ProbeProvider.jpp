#ifndef com_sun_org_glassfish_external_probe_provider_annotations_ProbeProvider_HPP
#define com_sun_org_glassfish_external_probe_provider_annotations_ProbeProvider_HPP

#include "../../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::probe::provider::annotations::ProbeProvider : public jObject<::com::sun::org::glassfish::external::probe::provider::annotations::ProbeProvider, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_probe_provider_annotations / "ProbeProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("moduleName"), //
		jMethod<::java::lang::String()>("moduleProviderName"), //
		jMethod<::java::lang::String()>("probeProviderName"), //
		jMethod<::java::lang::String()>("providerName"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto moduleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moduleName")] != -1);
		return call<R>("moduleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto moduleProviderName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moduleProviderName")] != -1);
		return call<R>("moduleProviderName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto probeProviderName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("probeProviderName")] != -1);
		return call<R>("probeProviderName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto providerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("providerName")] != -1);
		return call<R>("providerName", std::forward<Args>(args)...);
	}

};

#endif
