#ifndef com_sun_org_glassfish_external_probe_provider_annotations_Probe_HPP
#define com_sun_org_glassfish_external_probe_provider_annotations_Probe_HPP

#include "../../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::probe::provider::annotations::Probe : public jObject<::com::sun::org::glassfish::external::probe::provider::annotations::Probe, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_probe_provider_annotations / "Probe";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("hidden"), //
		jMethod<::java::lang::String()>("moduleName"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::java::lang::String()>("profileNames"), //
		jMethod<::java::lang::String()>("providerName"), //
		jMethod<::jboolean()>("self"), //
		jMethod<::jboolean()>("stateful"), //
		jMethod<::jboolean()>("statefulException"), //
		jMethod<::jboolean()>("statefulReturn"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto hidden(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hidden")] != -1);
		return call<R>("hidden", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto moduleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moduleName")] != -1);
		return call<R>("moduleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto profileNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("profileNames")] != -1);
		return call<R>("profileNames", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto providerName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("providerName")] != -1);
		return call<R>("providerName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto self(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("self")] != -1);
		return call<R>("self", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto stateful(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stateful")] != -1);
		return call<R>("stateful", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto statefulException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statefulException")] != -1);
		return call<R>("statefulException", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto statefulReturn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statefulReturn")] != -1);
		return call<R>("statefulReturn", std::forward<Args>(args)...);
	}

};

#endif
