#ifndef com_sun_org_glassfish_external_probe_provider_StatsProvider_HPP
#define com_sun_org_glassfish_external_probe_provider_StatsProvider_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::probe::provider::StatsProvider : public jObject<::com::sun::org::glassfish::external::probe::provider::StatsProvider, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_probe_provider / "StatsProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("disable"), //
		jMethod<::jvoid()>("enable"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto disable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disable")] != -1);
		return call<R>("disable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enable")] != -1);
		return call<R>("enable", std::forward<Args>(args)...);
	}

};

#endif
