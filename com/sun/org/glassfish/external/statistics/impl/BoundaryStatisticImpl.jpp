#ifndef com_sun_org_glassfish_external_statistics_impl_BoundaryStatisticImpl_HPP
#define com_sun_org_glassfish_external_statistics_impl_BoundaryStatisticImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::statistics::impl::BoundaryStatisticImpl : public jObject<::com::sun::org::glassfish::external::statistics::impl::BoundaryStatisticImpl, ::com::sun::org::glassfish::external::statistics::impl::StatisticImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_statistics_impl / "BoundaryStatisticImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jlong, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::jlong, ::jlong)>(), //
		jMethod<::jlong()>("getLowerBound"), //
		jMethod<::java::util::Map()>("getStaticAsMap"), //
		jMethod<::com::sun::org::glassfish::external::statistics::BoundaryStatistic()>("getStatistic"), //
		jMethod<::jlong()>("getUpperBound"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
		jMethod<::jvoid()>("reset"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getLowerBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowerBound")] != -1);
		return call<R>("getLowerBound", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getStaticAsMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStaticAsMap")] != -1);
		return call<R>("getStaticAsMap", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::statistics::BoundaryStatistic, typename... Args>
	auto getStatistic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatistic")] != -1);
		return call<R>("getStatistic", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUpperBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUpperBound")] != -1);
		return call<R>("getUpperBound", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
