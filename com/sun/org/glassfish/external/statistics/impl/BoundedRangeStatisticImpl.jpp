#ifndef com_sun_org_glassfish_external_statistics_impl_BoundedRangeStatisticImpl_HPP
#define com_sun_org_glassfish_external_statistics_impl_BoundedRangeStatisticImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::statistics::impl::BoundedRangeStatisticImpl : public jObject<::com::sun::org::glassfish::external::statistics::impl::BoundedRangeStatisticImpl, ::com::sun::org::glassfish::external::statistics::impl::StatisticImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_statistics_impl / "BoundedRangeStatisticImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jlong, ::jlong, ::jlong, ::jlong, ::jlong, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::jlong, ::jlong)>(), //
		jMethod<::jlong()>("getCurrent"), //
		jMethod<::jlong()>("getHighWaterMark"), //
		jMethod<::jlong()>("getLowWaterMark"), //
		jMethod<::jlong()>("getLowerBound"), //
		jMethod<::java::util::Map()>("getStaticAsMap"), //
		jMethod<::com::sun::org::glassfish::external::statistics::BoundedRangeStatistic()>("getStatistic"), //
		jMethod<::jlong()>("getUpperBound"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jlong)>("setCurrent"), //
		jMethod<::jvoid(::jlong)>("setHighWaterMark"), //
		jMethod<::jvoid(::jlong)>("setLowWaterMark"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrent")] != -1);
		return call<R>("getCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getHighWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighWaterMark")] != -1);
		return call<R>("getHighWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLowWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowWaterMark")] != -1);
		return call<R>("getLowWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLowerBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowerBound")] != -1);
		return call<R>("getLowerBound", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getStaticAsMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStaticAsMap")] != -1);
		return call<R>("getStaticAsMap", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::statistics::BoundedRangeStatistic, typename... Args>
	auto getStatistic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStatistic")] != -1);
		return call<R>("getStatistic", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getUpperBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUpperBound")] != -1);
		return call<R>("getUpperBound", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrent")] != -1);
		return call<R>("setCurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHighWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHighWaterMark")] != -1);
		return call<R>("setHighWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLowWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLowWaterMark")] != -1);
		return call<R>("setLowWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
