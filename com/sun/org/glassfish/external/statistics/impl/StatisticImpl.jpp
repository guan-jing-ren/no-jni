#ifndef com_sun_org_glassfish_external_statistics_impl_StatisticImpl_HPP
#define com_sun_org_glassfish_external_statistics_impl_StatisticImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::statistics::impl::StatisticImpl : public jObject<::com::sun::org::glassfish::external::statistics::impl::StatisticImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_statistics_impl / "StatisticImpl";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("LAST_SAMPLE_TIME"), //
		jField<::java::lang::String>("START_TIME"), //
		jField<::java::lang::String>("UNIT_COUNT"), //
		jField<::java::lang::String>("UNIT_MICROSECOND"), //
		jField<::java::lang::String>("UNIT_MILLISECOND"), //
		jField<::java::lang::String>("UNIT_NANOSECOND"), //
		jField<::java::lang::String>("UNIT_SECOND"), //
	};

	template<typename F = ::java::lang::String>
	static auto LAST_SAMPLE_TIME() {
		static_assert(field_signatures[jField<F>("LAST_SAMPLE_TIME")] != -1);
		return sat<F>("LAST_SAMPLE_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto START_TIME() {
		static_assert(field_signatures[jField<F>("START_TIME")] != -1);
		return sat<F>("START_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto UNIT_COUNT() {
		static_assert(field_signatures[jField<F>("UNIT_COUNT")] != -1);
		return sat<F>("UNIT_COUNT");
	}

	template<typename F = ::java::lang::String>
	static auto UNIT_MICROSECOND() {
		static_assert(field_signatures[jField<F>("UNIT_MICROSECOND")] != -1);
		return sat<F>("UNIT_MICROSECOND");
	}

	template<typename F = ::java::lang::String>
	static auto UNIT_MILLISECOND() {
		static_assert(field_signatures[jField<F>("UNIT_MILLISECOND")] != -1);
		return sat<F>("UNIT_MILLISECOND");
	}

	template<typename F = ::java::lang::String>
	static auto UNIT_NANOSECOND() {
		static_assert(field_signatures[jField<F>("UNIT_NANOSECOND")] != -1);
		return sat<F>("UNIT_NANOSECOND");
	}

	template<typename F = ::java::lang::String>
	static auto UNIT_SECOND() {
		static_assert(field_signatures[jField<F>("UNIT_SECOND")] != -1);
		return sat<F>("UNIT_SECOND");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jlong()>("getLastSampleTime"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getStartTime"), //
		jMethod<::java::util::Map()>("getStaticAsMap"), //
		jMethod<::java::lang::String()>("getUnit"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastSampleTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastSampleTime")] != -1);
		return call<R>("getLastSampleTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getStaticAsMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStaticAsMap")] != -1);
		return call<R>("getStaticAsMap", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnit")] != -1);
		return call<R>("getUnit", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
