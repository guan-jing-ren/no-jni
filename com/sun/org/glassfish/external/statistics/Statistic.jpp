#ifndef com_sun_org_glassfish_external_statistics_Statistic_HPP
#define com_sun_org_glassfish_external_statistics_Statistic_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::statistics::Statistic : public jObject<::com::sun::org::glassfish::external::statistics::Statistic, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_statistics / "Statistic";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jlong()>("getLastSampleTime"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getStartTime"), //
		jMethod<::java::lang::String()>("getUnit"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLastSampleTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLastSampleTime")] != -1);
		return call<R>("getLastSampleTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnit")] != -1);
		return call<R>("getUnit", std::forward<Args>(args)...);
	}

};

#endif
