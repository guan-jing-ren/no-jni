#ifndef com_sun_org_glassfish_external_arc_Stability_HPP
#define com_sun_org_glassfish_external_arc_Stability_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::org::glassfish::external::arc::Stability : public jObject<::com::sun::org::glassfish::external::arc::Stability, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_org_glassfish_external_arc / "Stability";

	constexpr static Enume field_signatures{
		jField<::com::sun::org::glassfish::external::arc::Stability>("COMMITTED"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("EXPERIMENTAL"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("NOT_AN_INTERFACE"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("PRIVATE"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("UNCOMMITTED"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("UNSPECIFIED"), //
		jField<::com::sun::org::glassfish::external::arc::Stability>("VOLATILE"), //
	};

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto COMMITTED() {
		static_assert(field_signatures[jField<F>("COMMITTED")] != -1);
		return sat<F>("COMMITTED");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto EXPERIMENTAL() {
		static_assert(field_signatures[jField<F>("EXPERIMENTAL")] != -1);
		return sat<F>("EXPERIMENTAL");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto NOT_AN_INTERFACE() {
		static_assert(field_signatures[jField<F>("NOT_AN_INTERFACE")] != -1);
		return sat<F>("NOT_AN_INTERFACE");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto PRIVATE() {
		static_assert(field_signatures[jField<F>("PRIVATE")] != -1);
		return sat<F>("PRIVATE");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto UNCOMMITTED() {
		static_assert(field_signatures[jField<F>("UNCOMMITTED")] != -1);
		return sat<F>("UNCOMMITTED");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto UNSPECIFIED() {
		static_assert(field_signatures[jField<F>("UNSPECIFIED")] != -1);
		return sat<F>("UNSPECIFIED");
	}

	template<typename F = ::com::sun::org::glassfish::external::arc::Stability>
	static auto VOLATILE() {
		static_assert(field_signatures[jField<F>("VOLATILE")] != -1);
		return sat<F>("VOLATILE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::com::sun::org::glassfish::external::arc::Stability(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::org::glassfish::external::arc::Stability *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::arc::Stability, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::glassfish::external::arc::Stability *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
