#ifndef com_sun_corba_se_pept_protocol_ClientRequestDispatcher_HPP
#define com_sun_corba_se_pept_protocol_ClientRequestDispatcher_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::protocol::ClientRequestDispatcher : public jObject<::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_protocol / "ClientRequestDispatcher";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::java::lang::Object, ::java::lang::String, ::jboolean, ::com::sun::corba::se::pept::transport::ContactInfo)>("beginRequest"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::broker::Broker, ::java::lang::Object, ::com::sun::corba::se::pept::encoding::InputObject)>("endRequest"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::java::lang::Object, ::com::sun::corba::se::pept::encoding::OutputObject)>("marshalingComplete"), //
	};

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto beginRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("beginRequest")] != -1);
		return call<R>("beginRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endRequest")] != -1);
		return call<R>("endRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto marshalingComplete(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("marshalingComplete")] != -1);
		return call<R>("marshalingComplete", std::forward<Args>(args)...);
	}

};

#endif
