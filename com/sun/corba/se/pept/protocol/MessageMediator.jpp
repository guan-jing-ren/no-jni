#ifndef com_sun_corba_se_pept_protocol_MessageMediator_HPP
#define com_sun_corba_se_pept_protocol_MessageMediator_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::protocol::MessageMediator : public jObject<::com::sun::corba::se::pept::protocol::MessageMediator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_protocol / "MessageMediator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("finishSendingRequest"), //
		jMethod<::com::sun::corba::se::pept::broker::Broker()>("getBroker"), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("getConnection"), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfo()>("getContactInfo"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject()>("getInputObject"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject()>("getOutputObject"), //
		jMethod<::jvoid()>("initializeMessage"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::encoding::InputObject)>("setInputObject"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::encoding::OutputObject)>("setOutputObject"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject()>("waitForResponse"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto finishSendingRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishSendingRequest")] != -1);
		return call<R>("finishSendingRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::broker::Broker, typename... Args>
	auto getBroker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroker")] != -1);
		return call<R>("getBroker", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfo, typename... Args>
	auto getContactInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfo")] != -1);
		return call<R>("getContactInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto getInputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputObject")] != -1);
		return call<R>("getInputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto getOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutputObject")] != -1);
		return call<R>("getOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initializeMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initializeMessage")] != -1);
		return call<R>("initializeMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInputObject")] != -1);
		return call<R>("setInputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputObject")] != -1);
		return call<R>("setOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto waitForResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("waitForResponse")] != -1);
		return call<R>("waitForResponse", std::forward<Args>(args)...);
	}

};

#endif
