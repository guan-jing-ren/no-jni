#ifndef com_sun_corba_se_pept_protocol_ClientDelegate_HPP
#define com_sun_corba_se_pept_protocol_ClientDelegate_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::protocol::ClientDelegate : public jObject<::com::sun::corba::se::pept::protocol::ClientDelegate, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_protocol / "ClientDelegate";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::pept::broker::Broker()>("getBroker"), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfoList()>("getContactInfoList"), //
	};

	template<typename R = ::com::sun::corba::se::pept::broker::Broker, typename... Args>
	auto getBroker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroker")] != -1);
		return call<R>("getBroker", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfoList, typename... Args>
	auto getContactInfoList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfoList")] != -1);
		return call<R>("getContactInfoList", std::forward<Args>(args)...);
	}

};

#endif
