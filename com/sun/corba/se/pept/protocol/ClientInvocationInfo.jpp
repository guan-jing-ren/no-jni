#ifndef com_sun_corba_se_pept_protocol_ClientInvocationInfo_HPP
#define com_sun_corba_se_pept_protocol_ClientInvocationInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::protocol::ClientInvocationInfo : public jObject<::com::sun::corba::se::pept::protocol::ClientInvocationInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_protocol / "ClientInvocationInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("decrementEntryCount"), //
		jMethod<::com::sun::corba::se::pept::protocol::ClientRequestDispatcher()>("getClientRequestDispatcher"), //
		jMethod<::java::util::Iterator()>("getContactInfoListIterator"), //
		jMethod<::jint()>("getEntryCount"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator()>("getMessageMediator"), //
		jMethod<::jvoid()>("incrementEntryCount"), //
		jMethod<::jboolean()>("isRetryInvocation"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::ClientRequestDispatcher)>("setClientRequestDispatcher"), //
		jMethod<::jvoid(::java::util::Iterator)>("setContactInfoListIterator"), //
		jMethod<::jvoid(::jboolean)>("setIsRetryInvocation"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("setMessageMediator"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto decrementEntryCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decrementEntryCount")] != -1);
		return call<R>("decrementEntryCount", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, typename... Args>
	auto getClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientRequestDispatcher")] != -1);
		return call<R>("getClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getContactInfoListIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfoListIterator")] != -1);
		return call<R>("getContactInfoListIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEntryCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntryCount")] != -1);
		return call<R>("getEntryCount", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto getMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageMediator")] != -1);
		return call<R>("getMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto incrementEntryCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incrementEntryCount")] != -1);
		return call<R>("incrementEntryCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRetryInvocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRetryInvocation")] != -1);
		return call<R>("isRetryInvocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClientRequestDispatcher")] != -1);
		return call<R>("setClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setContactInfoListIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setContactInfoListIterator")] != -1);
		return call<R>("setContactInfoListIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIsRetryInvocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIsRetryInvocation")] != -1);
		return call<R>("setIsRetryInvocation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessageMediator")] != -1);
		return call<R>("setMessageMediator", std::forward<Args>(args)...);
	}

};

#endif
