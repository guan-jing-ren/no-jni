#ifndef com_sun_corba_se_pept_encoding_InputObject_HPP
#define com_sun_corba_se_pept_encoding_InputObject_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::encoding::InputObject : public jObject<::com::sun::corba::se::pept::encoding::InputObject, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_encoding / "InputObject";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator()>("getMessageMediator"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("setMessageMediator"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto getMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageMediator")] != -1);
		return call<R>("getMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessageMediator")] != -1);
		return call<R>("setMessageMediator", std::forward<Args>(args)...);
	}

};

#endif
