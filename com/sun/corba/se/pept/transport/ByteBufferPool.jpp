#ifndef com_sun_corba_se_pept_transport_ByteBufferPool_HPP
#define com_sun_corba_se_pept_transport_ByteBufferPool_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::transport::ByteBufferPool : public jObject<::com::sun::corba::se::pept::transport::ByteBufferPool, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_transport / "ByteBufferPool";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("activeCount"), //
		jMethod<::java::nio::ByteBuffer(::jint)>("getByteBuffer"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("releaseByteBuffer"), //
	};

	template<typename R = ::jint, typename... Args>
	auto activeCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activeCount")] != -1);
		return call<R>("activeCount", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto getByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBuffer")] != -1);
		return call<R>("getByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto releaseByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseByteBuffer")] != -1);
		return call<R>("releaseByteBuffer", std::forward<Args>(args)...);
	}

};

#endif
