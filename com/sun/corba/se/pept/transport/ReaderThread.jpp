#ifndef com_sun_corba_se_pept_transport_ReaderThread_HPP
#define com_sun_corba_se_pept_transport_ReaderThread_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::transport::ReaderThread : public jObject<::com::sun::corba::se::pept::transport::ReaderThread, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_transport / "ReaderThread";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("getConnection"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

};

#endif
