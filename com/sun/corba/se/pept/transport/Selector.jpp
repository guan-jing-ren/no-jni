#ifndef com_sun_corba_se_pept_transport_Selector_HPP
#define com_sun_corba_se_pept_transport_Selector_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::transport::Selector : public jObject<::com::sun::corba::se::pept::transport::Selector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_transport / "Selector";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jlong()>("getTimeout"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::EventHandler)>("registerForEvent"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::EventHandler)>("registerInterestOps"), //
		jMethod<::jvoid(::jlong)>("setTimeout"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::EventHandler)>("unregisterForEvent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeout")] != -1);
		return call<R>("getTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerForEvent")] != -1);
		return call<R>("registerForEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerInterestOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerInterestOps")] != -1);
		return call<R>("registerInterestOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeout")] != -1);
		return call<R>("setTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterForEvent")] != -1);
		return call<R>("unregisterForEvent", std::forward<Args>(args)...);
	}

};

#endif
