#ifndef com_sun_corba_se_pept_transport_ResponseWaitingRoom_HPP
#define com_sun_corba_se_pept_transport_ResponseWaitingRoom_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::transport::ResponseWaitingRoom : public jObject<::com::sun::corba::se::pept::transport::ResponseWaitingRoom, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_transport / "ResponseWaitingRoom";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("numberRegistered"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("registerWaiter"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::encoding::InputObject)>("responseReceived"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("unregisterWaiter"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::com::sun::corba::se::pept::protocol::MessageMediator)>("waitForResponse"), //
	};

	template<typename R = ::jint, typename... Args>
	auto numberRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberRegistered")] != -1);
		return call<R>("numberRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerWaiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerWaiter")] != -1);
		return call<R>("registerWaiter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto responseReceived(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("responseReceived")] != -1);
		return call<R>("responseReceived", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterWaiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterWaiter")] != -1);
		return call<R>("unregisterWaiter", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto waitForResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("waitForResponse")] != -1);
		return call<R>("waitForResponse", std::forward<Args>(args)...);
	}

};

#endif
