#ifndef com_sun_corba_se_pept_transport_TransportManager_HPP
#define com_sun_corba_se_pept_transport_TransportManager_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::transport::TransportManager : public jObject<::com::sun::corba::se::pept::transport::TransportManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_transport / "TransportManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::java::util::Collection()>("getAcceptors"), //
		jMethod<::com::sun::corba::se::pept::transport::ByteBufferPool(::jint)>("getByteBufferPool"), //
		jMethod<::com::sun::corba::se::pept::transport::InboundConnectionCache(::com::sun::corba::se::pept::transport::Acceptor)>("getInboundConnectionCache"), //
		jMethod<::java::util::Collection()>("getInboundConnectionCaches"), //
		jMethod<::com::sun::corba::se::pept::transport::OutboundConnectionCache(::com::sun::corba::se::pept::transport::ContactInfo)>("getOutboundConnectionCache"), //
		jMethod<::java::util::Collection()>("getOutboundConnectionCaches"), //
		jMethod<::com::sun::corba::se::pept::transport::Selector(::jint)>("getSelector"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::Acceptor)>("registerAcceptor"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::Acceptor)>("unregisterAcceptor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getAcceptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptors")] != -1);
		return call<R>("getAcceptors", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ByteBufferPool, typename... Args>
	auto getByteBufferPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBufferPool")] != -1);
		return call<R>("getByteBufferPool", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::InboundConnectionCache, typename... Args>
	auto getInboundConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInboundConnectionCache")] != -1);
		return call<R>("getInboundConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getInboundConnectionCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInboundConnectionCaches")] != -1);
		return call<R>("getInboundConnectionCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::OutboundConnectionCache, typename... Args>
	auto getOutboundConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutboundConnectionCache")] != -1);
		return call<R>("getOutboundConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getOutboundConnectionCaches(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOutboundConnectionCaches")] != -1);
		return call<R>("getOutboundConnectionCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Selector, typename... Args>
	auto getSelector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelector")] != -1);
		return call<R>("getSelector", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerAcceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerAcceptor")] != -1);
		return call<R>("registerAcceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterAcceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterAcceptor")] != -1);
		return call<R>("unregisterAcceptor", std::forward<Args>(args)...);
	}

};

#endif
