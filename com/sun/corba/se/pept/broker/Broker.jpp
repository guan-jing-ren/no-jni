#ifndef com_sun_corba_se_pept_broker_Broker_HPP
#define com_sun_corba_se_pept_broker_Broker_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::pept::broker::Broker : public jObject<::com::sun::corba::se::pept::broker::Broker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_pept_broker / "Broker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::pept::protocol::ClientInvocationInfo()>("createOrIncrementInvocationInfo"), //
		jMethod<::com::sun::corba::se::pept::protocol::ClientInvocationInfo()>("getInvocationInfo"), //
		jMethod<::com::sun::corba::se::pept::transport::TransportManager()>("getTransportManager"), //
		jMethod<::jvoid()>("releaseOrDecrementInvocationInfo"), //
	};

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientInvocationInfo, typename... Args>
	auto createOrIncrementInvocationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOrIncrementInvocationInfo")] != -1);
		return call<R>("createOrIncrementInvocationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientInvocationInfo, typename... Args>
	auto getInvocationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationInfo")] != -1);
		return call<R>("getInvocationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::TransportManager, typename... Args>
	auto getTransportManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransportManager")] != -1);
		return call<R>("getTransportManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto releaseOrDecrementInvocationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("releaseOrDecrementInvocationInfo")] != -1);
		return call<R>("releaseOrDecrementInvocationInfo", std::forward<Args>(args)...);
	}

};

#endif
