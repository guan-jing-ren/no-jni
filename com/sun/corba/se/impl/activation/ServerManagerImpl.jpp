#ifndef com_sun_corba_se_impl_activation_ServerManagerImpl_HPP
#define com_sun_corba_se_impl_activation_ServerManagerImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::activation::ServerManagerImpl : public jObject<::com::sun::corba::se::impl::activation::ServerManagerImpl, ::com::sun::corba::se::spi::activation::_ServerManagerImplBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_activation / "ServerManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("activate"), //
		jMethod<::jvoid(::jint, ::com::sun::corba::se::spi::activation::Server)>("active"), //
		jMethod<::jint *()>("getActiveServers"), //
		jMethod<::jint(::java::lang::String)>("getEndpoint"), //
		jMethod<::java::lang::String *(::jint)>("getORBNames"), //
		jMethod<::jint(::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB, ::java::lang::String)>("getServerPortForType"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectKey)>("handle"), //
		jMethod<::jvoid(::jint)>("install"), //
		jMethod<::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocation(::jint, ::java::lang::String)>("locateServer"), //
		jMethod<::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB(::jint, ::java::lang::String)>("locateServerForORB"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::com::sun::corba::se::spi::activation::EndPointInfo *)>("registerEndpoints"), //
		jMethod<::jvoid(::jint)>("shutdown"), //
		jMethod<::jvoid(::jint)>("uninstall"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto active(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("active")] != -1);
		return call<R>("active", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getActiveServers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActiveServers")] != -1);
		return call<R>("getActiveServers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getEndpoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndpoint")] != -1);
		return call<R>("getEndpoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getORBNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBNames")] != -1);
		return call<R>("getORBNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerPortForType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerPortForType")] != -1);
		return call<R>("getServerPortForType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handle")] != -1);
		return call<R>("handle", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocation, typename... Args>
	auto locateServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locateServer")] != -1);
		return call<R>("locateServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB, typename... Args>
	auto locateServerForORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locateServerForORB")] != -1);
		return call<R>("locateServerForORB", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerEndpoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerEndpoints")] != -1);
		return call<R>("registerEndpoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstall")] != -1);
		return call<R>("uninstall", std::forward<Args>(args)...);
	}

};

#endif
