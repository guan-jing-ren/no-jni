#ifndef com_sun_corba_se_impl_activation_ServerMain_HPP
#define com_sun_corba_se_impl_activation_ServerMain_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::activation::ServerMain : public jObject<::com::sun::corba::se::impl::activation::ServerMain, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_activation / "ServerMain";

	constexpr static Enume field_signatures{
		jField<::jint>("APPLICATION_ERROR"), //
		jField<::jint>("MAIN_CLASS_NOT_FOUND"), //
		jField<::jint>("NO_MAIN_METHOD"), //
		jField<::jint>("NO_SERVER_ID"), //
		jField<::jint>("OK"), //
		jField<::jint>("REGISTRATION_FAILED"), //
		jField<::jint>("UNKNOWN_ERROR"), //
	};

	template<typename F = ::jint>
	static auto APPLICATION_ERROR() {
		static_assert(field_signatures[jField<F>("APPLICATION_ERROR")] != -1);
		return sat<F>("APPLICATION_ERROR");
	}

	template<typename F = ::jint>
	static auto MAIN_CLASS_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("MAIN_CLASS_NOT_FOUND")] != -1);
		return sat<F>("MAIN_CLASS_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto NO_MAIN_METHOD() {
		static_assert(field_signatures[jField<F>("NO_MAIN_METHOD")] != -1);
		return sat<F>("NO_MAIN_METHOD");
	}

	template<typename F = ::jint>
	static auto NO_SERVER_ID() {
		static_assert(field_signatures[jField<F>("NO_SERVER_ID")] != -1);
		return sat<F>("NO_SERVER_ID");
	}

	template<typename F = ::jint>
	static auto OK() {
		static_assert(field_signatures[jField<F>("OK")] != -1);
		return sat<F>("OK");
	}

	template<typename F = ::jint>
	static auto REGISTRATION_FAILED() {
		static_assert(field_signatures[jField<F>("REGISTRATION_FAILED")] != -1);
		return sat<F>("REGISTRATION_FAILED");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_ERROR() {
		static_assert(field_signatures[jField<F>("UNKNOWN_ERROR")] != -1);
		return sat<F>("UNKNOWN_ERROR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String)>("logError"), //
		jMethod<::jvoid(::java::lang::String)>("logInformation"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("logTerminal"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::java::lang::String(::jint)>("printResult"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto logError(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("logError")] != -1);
		return scall<R>("logError", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto logInformation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("logInformation")] != -1);
		return scall<R>("logInformation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto logTerminal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("logTerminal")] != -1);
		return scall<R>("logTerminal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto printResult(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printResult")] != -1);
		return scall<R>("printResult", std::forward<Args>(args)...);
	}

};

#endif
