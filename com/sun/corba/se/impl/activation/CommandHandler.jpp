#ifndef com_sun_corba_se_impl_activation_CommandHandler_HPP
#define com_sun_corba_se_impl_activation_CommandHandler_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::activation::CommandHandler : public jObject<::com::sun::corba::se::impl::activation::CommandHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_activation / "CommandHandler";

	constexpr static Enume field_signatures{
		jField<::jboolean>("commandDone"), //
		jField<::jboolean>("longHelp"), //
		jField<::jboolean>("parseError"), //
		jField<::jboolean>("shortHelp"), //
	};

	template<typename F = ::jboolean>
	static auto commandDone() {
		static_assert(field_signatures[jField<F>("commandDone")] != -1);
		return sat<F>("commandDone");
	}

	template<typename F = ::jboolean>
	static auto longHelp() {
		static_assert(field_signatures[jField<F>("longHelp")] != -1);
		return sat<F>("longHelp");
	}

	template<typename F = ::jboolean>
	static auto parseError() {
		static_assert(field_signatures[jField<F>("parseError")] != -1);
		return sat<F>("parseError");
	}

	template<typename F = ::jboolean>
	static auto shortHelp() {
		static_assert(field_signatures[jField<F>("shortHelp")] != -1);
		return sat<F>("shortHelp");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCommandName"), //
		jMethod<::jvoid(::java::io::PrintStream, ::jboolean)>("printCommandHelp"), //
		jMethod<::jboolean(::java::lang::String *, ::org::omg::CORBA::ORB, ::java::io::PrintStream)>("processCommand"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCommandName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommandName")] != -1);
		return call<R>("getCommandName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printCommandHelp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printCommandHelp")] != -1);
		return call<R>("printCommandHelp", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto processCommand(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processCommand")] != -1);
		return call<R>("processCommand", std::forward<Args>(args)...);
	}

};

#endif
