#ifndef com_sun_corba_se_impl_presentation_rmi_ReflectiveTie_HPP
#define com_sun_corba_se_impl_presentation_rmi_ReflectiveTie_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::ReflectiveTie : public jObject<::com::sun::corba::se::impl::presentation::rmi::ReflectiveTie, ::org::omg::PortableServer::Servant> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "ReflectiveTie";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::presentation::rmi::PresentationManager, ::com::sun::corba::se::impl::logging::ORBUtilSystemException)>(), //
		jMethod<::java::lang::String *(::org::omg::PortableServer::POA, ::jbyte *)>("_all_interfaces"), //
		jMethod<::org::omg::CORBA::portable::OutputStream(::java::lang::String, ::org::omg::CORBA::portable::InputStream, ::org::omg::CORBA::portable::ResponseHandler)>("_invoke"), //
		jMethod<::jvoid()>("deactivate"), //
		jMethod<::java::rmi::Remote()>("getTarget"), //
		jMethod<::org::omg::CORBA::ORB()>("orb"), //
		jMethod<::jvoid(::org::omg::CORBA::ORB)>("orb"), //
		jMethod<::jvoid(::java::rmi::Remote)>("setTarget"), //
		jMethod<::org::omg::CORBA::Object()>("thisObject"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _all_interfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_all_interfaces")] != -1);
		return call<R>("_all_interfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto _invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_invoke")] != -1);
		return call<R>("_invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	auto getTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTarget")] != -1);
		return call<R>("getTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTarget")] != -1);
		return call<R>("setTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto thisObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thisObject")] != -1);
		return call<R>("thisObject", std::forward<Args>(args)...);
	}

};

#endif
