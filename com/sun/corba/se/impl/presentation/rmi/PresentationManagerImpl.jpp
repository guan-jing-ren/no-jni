#ifndef com_sun_corba_se_impl_presentation_rmi_PresentationManagerImpl_HPP
#define com_sun_corba_se_impl_presentation_rmi_PresentationManagerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl : public jObject<::com::sun::corba::se::impl::presentation::rmi::PresentationManagerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "PresentationManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jboolean)>(), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData(::java::lang::Class)>("getClassData"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller(::java::lang::reflect::Method)>("getDynamicMethodMarshaller"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory(::jboolean)>("getStubFactoryFactory"), //
		jMethod<::javax::rmi::CORBA::Tie()>("getTie"), //
		jMethod<::jvoid(::jboolean, ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory)>("setStubFactoryFactory"), //
		jMethod<::jboolean()>("useDynamicStubs"), //
	};

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData, typename... Args>
	auto getClassData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassData")] != -1);
		return call<R>("getClassData", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::DynamicMethodMarshaller, typename... Args>
	auto getDynamicMethodMarshaller(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDynamicMethodMarshaller")] != -1);
		return call<R>("getDynamicMethodMarshaller", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory, typename... Args>
	auto getStubFactoryFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStubFactoryFactory")] != -1);
		return call<R>("getStubFactoryFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::Tie, typename... Args>
	auto getTie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTie")] != -1);
		return call<R>("getTie", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStubFactoryFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStubFactoryFactory")] != -1);
		return call<R>("setStubFactoryFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useDynamicStubs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useDynamicStubs")] != -1);
		return call<R>("useDynamicStubs", std::forward<Args>(args)...);
	}

};

#endif
