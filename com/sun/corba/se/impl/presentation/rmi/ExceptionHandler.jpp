#ifndef com_sun_corba_se_impl_presentation_rmi_ExceptionHandler_HPP
#define com_sun_corba_se_impl_presentation_rmi_ExceptionHandler_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::ExceptionHandler : public jObject<::com::sun::corba::se::impl::presentation::rmi::ExceptionHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "ExceptionHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Class)>("isDeclaredException"), //
		jMethod<::java::lang::Exception(::org::omg::CORBA::portable::ApplicationException)>("readException"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::java::lang::Exception)>("writeException"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isDeclaredException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDeclaredException")] != -1);
		return call<R>("isDeclaredException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Exception, typename... Args>
	auto readException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readException")] != -1);
		return call<R>("readException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeException")] != -1);
		return call<R>("writeException", std::forward<Args>(args)...);
	}

};

#endif
