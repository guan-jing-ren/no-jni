#ifndef com_sun_corba_se_impl_presentation_rmi_StubFactoryFactoryProxyImpl_HPP
#define com_sun_corba_se_impl_presentation_rmi_StubFactoryFactoryProxyImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::StubFactoryFactoryProxyImpl : public jObject<::com::sun::corba::se::impl::presentation::rmi::StubFactoryFactoryProxyImpl, ::com::sun::corba::se::impl::presentation::rmi::StubFactoryFactoryDynamicBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "StubFactoryFactoryProxyImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory(::com::sun::corba::se::spi::presentation::rmi::PresentationManager, ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData, ::java::lang::ClassLoader)>("makeDynamicStubFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory, typename... Args>
	auto makeDynamicStubFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeDynamicStubFactory")] != -1);
		return call<R>("makeDynamicStubFactory", std::forward<Args>(args)...);
	}

};

#endif
