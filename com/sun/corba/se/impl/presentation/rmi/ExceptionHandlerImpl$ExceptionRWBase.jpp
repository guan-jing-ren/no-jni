#ifndef com_sun_corba_se_impl_presentation_rmi_ExceptionHandlerImpl$ExceptionRWBase_HPP
#define com_sun_corba_se_impl_presentation_rmi_ExceptionHandlerImpl$ExceptionRWBase_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::ExceptionHandlerImpl$ExceptionRWBase : public jObject<::com::sun::corba::se::impl::presentation::rmi::ExceptionHandlerImpl$ExceptionRWBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "ExceptionHandlerImpl$ExceptionRWBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::impl::presentation::rmi::ExceptionHandlerImpl, ::java::lang::Class)>(), //
		jMethod<::java::lang::Class()>("getExceptionClass"), //
		jMethod<::java::lang::String()>("getId"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto getExceptionClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExceptionClass")] != -1);
		return call<R>("getExceptionClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

};

#endif
