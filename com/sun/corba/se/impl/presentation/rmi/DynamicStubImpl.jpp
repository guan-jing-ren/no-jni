#ifndef com_sun_corba_se_impl_presentation_rmi_DynamicStubImpl_HPP
#define com_sun_corba_se_impl_presentation_rmi_DynamicStubImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::DynamicStubImpl : public jObject<::com::sun::corba::se::impl::presentation::rmi::DynamicStubImpl, ::org::omg::CORBA_2_3::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "DynamicStubImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String *)>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::jvoid(::org::omg::CORBA::ORB)>("connect"), //
		jMethod<::org::omg::CORBA::portable::Delegate()>("getDelegate"), //
		jMethod<::org::omg::CORBA::ORB()>("getORB"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::DynamicStub()>("getSelf"), //
		jMethod<::java::lang::String *()>("getTypeIds"), //
		jMethod<::jboolean()>("isLocal"), //
		jMethod<::java::lang::Object()>("readResolve"), //
		jMethod<::org::omg::CORBA::portable::OutputStream(::java::lang::String, ::jboolean)>("request"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::Delegate)>("setDelegate"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::presentation::rmi::DynamicStub)>("setSelf"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::Delegate, typename... Args>
	auto getDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegate")] != -1);
		return call<R>("getDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::DynamicStub, typename... Args>
	auto getSelf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelf")] != -1);
		return call<R>("getSelf", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getTypeIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeIds")] != -1);
		return call<R>("getTypeIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocal")] != -1);
		return call<R>("isLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readResolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readResolve")] != -1);
		return call<R>("readResolve", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto request(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("request")] != -1);
		return call<R>("request", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegate")] != -1);
		return call<R>("setDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelf")] != -1);
		return call<R>("setSelf", std::forward<Args>(args)...);
	}

};

#endif
