#ifndef com_sun_corba_se_impl_presentation_rmi_InvocationHandlerFactoryImpl_HPP
#define com_sun_corba_se_impl_presentation_rmi_InvocationHandlerFactoryImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl : public jObject<::com::sun::corba::se::impl::presentation::rmi::InvocationHandlerFactoryImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "InvocationHandlerFactoryImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::presentation::rmi::PresentationManager, ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData)>(), //
		jMethod<::java::lang::reflect::InvocationHandler()>("getInvocationHandler"), //
		jMethod<::java::lang::Class *()>("getProxyInterfaces"), //
	};

	template<typename R = ::java::lang::reflect::InvocationHandler, typename... Args>
	auto getInvocationHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationHandler")] != -1);
		return call<R>("getInvocationHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getProxyInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyInterfaces")] != -1);
		return call<R>("getProxyInterfaces", std::forward<Args>(args)...);
	}

};

#endif
