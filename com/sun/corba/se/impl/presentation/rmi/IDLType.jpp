#ifndef com_sun_corba_se_impl_presentation_rmi_IDLType_HPP
#define com_sun_corba_se_impl_presentation_rmi_IDLType_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::IDLType : public jObject<::com::sun::corba::se::impl::presentation::rmi::IDLType, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "IDLType";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::Class, ::java::lang::String *, ::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getExceptionName"), //
		jMethod<::java::lang::Class()>("getJavaClass"), //
		jMethod<::java::lang::String()>("getMemberName"), //
		jMethod<::java::lang::String()>("getModuleName"), //
		jMethod<::java::lang::String *()>("getModules"), //
		jMethod<::jboolean()>("hasModule"), //
		jMethod<::java::lang::String(::jchar, ::jboolean)>("makeConcatenatedName"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getExceptionName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExceptionName")] != -1);
		return call<R>("getExceptionName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getJavaClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJavaClass")] != -1);
		return call<R>("getJavaClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMemberName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemberName")] != -1);
		return call<R>("getMemberName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getModuleName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModuleName")] != -1);
		return call<R>("getModuleName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getModules(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModules")] != -1);
		return call<R>("getModules", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasModule(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasModule")] != -1);
		return call<R>("hasModule", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto makeConcatenatedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeConcatenatedName")] != -1);
		return call<R>("makeConcatenatedName", std::forward<Args>(args)...);
	}

};

#endif
