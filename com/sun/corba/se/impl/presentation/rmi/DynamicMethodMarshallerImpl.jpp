#ifndef com_sun_corba_se_impl_presentation_rmi_DynamicMethodMarshallerImpl_HPP
#define com_sun_corba_se_impl_presentation_rmi_DynamicMethodMarshallerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::presentation::rmi::DynamicMethodMarshallerImpl : public jObject<::com::sun::corba::se::impl::presentation::rmi::DynamicMethodMarshallerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_presentation_rmi / "DynamicMethodMarshallerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::reflect::Method)>(), //
		jMethod<::java::lang::Object *(::java::lang::Object *, ::com::sun::corba::se::spi::orb::ORB)>("copyArguments"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::com::sun::corba::se::spi::orb::ORB)>("copyResult"), //
		jMethod<::java::lang::reflect::Method()>("getMethod"), //
		jMethod<::jboolean(::java::lang::Throwable)>("isDeclaredException"), //
		jMethod<::com::sun::corba::se::impl::presentation::rmi::DynamicMethodMarshallerImpl$ReaderWriter(::java::lang::Class)>("makeReaderWriter"), //
		jMethod<::java::lang::Object *(::org::omg::CORBA_2_3::portable::InputStream)>("readArguments"), //
		jMethod<::java::lang::Exception(::org::omg::CORBA::portable::ApplicationException)>("readException"), //
		jMethod<::java::lang::Object(::org::omg::CORBA_2_3::portable::InputStream)>("readResult"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::java::lang::Object *)>("writeArguments"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::java::lang::Exception)>("writeException"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::java::lang::Object)>("writeResult"), //
	};

	template<typename R = ::java::lang::Object *, typename... Args>
	auto copyArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyArguments")] != -1);
		return call<R>("copyArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto copyResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copyResult")] != -1);
		return call<R>("copyResult", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Method, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDeclaredException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDeclaredException")] != -1);
		return call<R>("isDeclaredException", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::presentation::rmi::DynamicMethodMarshallerImpl$ReaderWriter, typename... Args>
	static auto makeReaderWriter(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeReaderWriter")] != -1);
		return scall<R>("makeReaderWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto readArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readArguments")] != -1);
		return call<R>("readArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Exception, typename... Args>
	auto readException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readException")] != -1);
		return call<R>("readException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readResult")] != -1);
		return call<R>("readResult", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeArguments")] != -1);
		return call<R>("writeArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeException")] != -1);
		return call<R>("writeException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeResult(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeResult")] != -1);
		return call<R>("writeResult", std::forward<Args>(args)...);
	}

};

#endif
