#ifndef com_sun_corba_se_impl_encoding_CodeSetConversion$CTBConverter_HPP
#define com_sun_corba_se_impl_encoding_CodeSetConversion$CTBConverter_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CodeSetConversion$CTBConverter : public jObject<::com::sun::corba::se::impl::encoding::CodeSetConversion$CTBConverter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CodeSetConversion$CTBConverter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jchar)>("convert"), //
		jMethod<::jvoid(::java::lang::String)>("convert"), //
		jMethod<::jint()>("getAlignment"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::jfloat()>("getMaxBytesPerChar"), //
		jMethod<::jint()>("getNumBytes"), //
		jMethod<::jboolean()>("isFixedWidthEncoding"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto convert(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convert")] != -1);
		return call<R>("convert", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignment")] != -1);
		return call<R>("getAlignment", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getMaxBytesPerChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxBytesPerChar")] != -1);
		return call<R>("getMaxBytesPerChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumBytes")] != -1);
		return call<R>("getNumBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixedWidthEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixedWidthEncoding")] != -1);
		return call<R>("isFixedWidthEncoding", std::forward<Args>(args)...);
	}

};

#endif
