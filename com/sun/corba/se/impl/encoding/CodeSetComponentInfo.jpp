#ifndef com_sun_corba_se_impl_encoding_CodeSetComponentInfo_HPP
#define com_sun_corba_se_impl_encoding_CodeSetComponentInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo : public jObject<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CodeSetComponentInfo";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo>("JAVASOFT_DEFAULT_CODESETS"), //
		jField<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext>("LOCAL_CODE_SETS"), //
	};

	template<typename F = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo>
	static auto JAVASOFT_DEFAULT_CODESETS() {
		static_assert(field_signatures[jField<F>("JAVASOFT_DEFAULT_CODESETS")] != -1);
		return sat<F>("JAVASOFT_DEFAULT_CODESETS");
	}

	template<typename F = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext>
	static auto LOCAL_CODE_SETS() {
		static_assert(field_signatures[jField<F>("LOCAL_CODE_SETS")] != -1);
		return sat<F>("LOCAL_CODE_SETS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent, ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent)>(), //
		jMethod<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent(::java::lang::String)>("createFromString"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent()>("getCharComponent"), //
		jMethod<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent()>("getWCharComponent"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::MarshalInputStream)>("read"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::MarshalOutputStream)>("write"), //
	};

	template<typename R = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent, typename... Args>
	static auto createFromString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFromString")] != -1);
		return scall<R>("createFromString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent, typename... Args>
	auto getCharComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharComponent")] != -1);
		return call<R>("getCharComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetComponent, typename... Args>
	auto getWCharComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWCharComponent")] != -1);
		return call<R>("getWCharComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
