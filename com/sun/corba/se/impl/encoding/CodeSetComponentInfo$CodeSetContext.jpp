#ifndef com_sun_corba_se_impl_encoding_CodeSetComponentInfo$CodeSetContext_HPP
#define com_sun_corba_se_impl_encoding_CodeSetComponentInfo$CodeSetContext_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext : public jObject<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CodeSetComponentInfo$CodeSetContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::jint()>("getCharCodeSet"), //
		jMethod<::jint()>("getWCharCodeSet"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::MarshalInputStream)>("read"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::MarshalOutputStream)>("write"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCharCodeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCharCodeSet")] != -1);
		return call<R>("getCharCodeSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWCharCodeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWCharCodeSet")] != -1);
		return call<R>("getWCharCodeSet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
