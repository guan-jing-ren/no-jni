#ifndef com_sun_corba_se_impl_encoding_BufferQueue_HPP
#define com_sun_corba_se_impl_encoding_BufferQueue_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::BufferQueue : public jObject<::com::sun::corba::se::impl::encoding::BufferQueue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "BufferQueue";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::impl::encoding::ByteBufferWithInfo()>("dequeue"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("enqueue"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("push"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::com::sun::corba::se::impl::encoding::ByteBufferWithInfo, typename... Args>
	auto dequeue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dequeue")] != -1);
		return call<R>("dequeue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enqueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enqueue")] != -1);
		return call<R>("enqueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto push(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("push")] != -1);
		return call<R>("push", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

};

#endif
