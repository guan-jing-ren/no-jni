#ifndef com_sun_corba_se_impl_encoding_OSFCodeSetRegistry$Entry_HPP
#define com_sun_corba_se_impl_encoding_OSFCodeSetRegistry$Entry_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::OSFCodeSetRegistry$Entry : public jObject<::com::sun::corba::se::impl::encoding::OSFCodeSetRegistry$Entry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "OSFCodeSetRegistry$Entry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("getMaxBytesPerChar"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getNumber"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isFixedWidth"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxBytesPerChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxBytesPerChar")] != -1);
		return call<R>("getMaxBytesPerChar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumber")] != -1);
		return call<R>("getNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixedWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixedWidth")] != -1);
		return call<R>("isFixedWidth", std::forward<Args>(args)...);
	}

};

#endif
