#ifndef com_sun_corba_se_impl_encoding_CodeSetConversion$BTCConverter_HPP
#define com_sun_corba_se_impl_encoding_CodeSetConversion$BTCConverter_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CodeSetConversion$BTCConverter : public jObject<::com::sun::corba::se::impl::encoding::CodeSetConversion$BTCConverter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CodeSetConversion$BTCConverter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jchar *(::jbyte *, ::jint, ::jint)>("getChars"), //
		jMethod<::jint()>("getFixedCharWidth"), //
		jMethod<::jint()>("getNumChars"), //
		jMethod<::jboolean()>("isFixedWidthEncoding"), //
	};

	template<typename R = ::jchar *, typename... Args>
	auto getChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChars")] != -1);
		return call<R>("getChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFixedCharWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFixedCharWidth")] != -1);
		return call<R>("getFixedCharWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumChars(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumChars")] != -1);
		return call<R>("getNumChars", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFixedWidthEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFixedWidthEncoding")] != -1);
		return call<R>("isFixedWidthEncoding", std::forward<Args>(args)...);
	}

};

#endif
