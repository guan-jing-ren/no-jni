#ifndef com_sun_corba_se_impl_encoding_CDROutputStream_HPP
#define com_sun_corba_se_impl_encoding_CDROutputStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CDROutputStream : public jObject<::com::sun::corba::se::impl::encoding::CDROutputStream, ::org::omg::CORBA_2_3::portable::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CDROutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jbyte, ::jboolean, ::com::sun::corba::se::impl::encoding::BufferManagerWrite, ::jbyte)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jbyte, ::jboolean, ::com::sun::corba::se::impl::encoding::BufferManagerWrite, ::jbyte, ::jboolean)>(), //
		jMethod<::java::lang::String *()>("_truncatable_ids"), //
		jMethod<::jvoid(::jint)>("alignOnBoundary"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::org::omg::CORBA::portable::InputStream()>("create_input_stream"), //
		jMethod<::jvoid()>("end_block"), //
		jMethod<::jvoid()>("end_value"), //
		jMethod<::jvoid()>("flush"), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerWrite()>("getBufferManager"), //
		jMethod<::com::sun::corba::se::impl::encoding::ByteBufferWithInfo()>("getByteBufferWithInfo"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator()>("getMessageMediator"), //
		jMethod<::jboolean()>("isLittleEndian"), //
		jMethod<::org::omg::CORBA::ORB()>("orb"), //
		jMethod<::jvoid()>("putEndian"), //
		jMethod<::jvoid(::jboolean)>("setHeaderPadding"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("setMessageMediator"), //
		jMethod<::jvoid()>("start_block"), //
		jMethod<::jvoid(::java::lang::String)>("start_value"), //
		jMethod<::jbyte *()>("toByteArray"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jint, ::jint)>("writeIndirection"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("writeOctetSequenceTo"), //
		jMethod<::jvoid(::java::io::OutputStream)>("writeTo"), //
		jMethod<::jvoid(::java::lang::Object)>("write_Abstract"), //
		jMethod<::jvoid(::org::omg::CORBA::Context, ::org::omg::CORBA::ContextList)>("write_Context"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("write_Object"), //
		jMethod<::jvoid(::org::omg::CORBA::Principal)>("write_Principal"), //
		jMethod<::jvoid(::org::omg::CORBA::TypeCode)>("write_TypeCode"), //
		jMethod<::jvoid(::java::io::Serializable)>("write_Value"), //
		jMethod<::jvoid(::java::lang::Object)>("write_abstract_interface"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("write_any"), //
		jMethod<::jvoid(::org::omg::CORBA::Any *, ::jint, ::jint)>("write_any_array"), //
		jMethod<::jvoid(::jboolean)>("write_boolean"), //
		jMethod<::jvoid(::jboolean *, ::jint, ::jint)>("write_boolean_array"), //
		jMethod<::jvoid(::jchar)>("write_char"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write_char_array"), //
		jMethod<::jvoid(::jdouble)>("write_double"), //
		jMethod<::jvoid(::jdouble *, ::jint, ::jint)>("write_double_array"), //
		jMethod<::jvoid(::java::math::BigDecimal)>("write_fixed"), //
		jMethod<::jvoid(::java::math::BigDecimal, ::jshort, ::jshort)>("write_fixed"), //
		jMethod<::jvoid(::jfloat)>("write_float"), //
		jMethod<::jvoid(::jfloat *, ::jint, ::jint)>("write_float_array"), //
		jMethod<::jvoid(::jint)>("write_long"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("write_long_array"), //
		jMethod<::jvoid(::jlong)>("write_longlong"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("write_longlong_array"), //
		jMethod<::jvoid(::jbyte)>("write_octet"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write_octet_array"), //
		jMethod<::jvoid(::jshort)>("write_short"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("write_short_array"), //
		jMethod<::jvoid(::java::lang::String)>("write_string"), //
		jMethod<::jvoid(::jint)>("write_ulong"), //
		jMethod<::jvoid(::jint *, ::jint, ::jint)>("write_ulong_array"), //
		jMethod<::jvoid(::jlong)>("write_ulonglong"), //
		jMethod<::jvoid(::jlong *, ::jint, ::jint)>("write_ulonglong_array"), //
		jMethod<::jvoid(::jshort)>("write_ushort"), //
		jMethod<::jvoid(::jshort *, ::jint, ::jint)>("write_ushort_array"), //
		jMethod<::jvoid(::java::io::Serializable)>("write_value"), //
		jMethod<::jvoid(::java::io::Serializable, ::java::lang::Class)>("write_value"), //
		jMethod<::jvoid(::java::io::Serializable, ::java::lang::String)>("write_value"), //
		jMethod<::jvoid(::java::io::Serializable, ::org::omg::CORBA::portable::BoxedValueHelper)>("write_value"), //
		jMethod<::jvoid(::jchar)>("write_wchar"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write_wchar_array"), //
		jMethod<::jvoid(::java::lang::String)>("write_wstring"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _truncatable_ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_truncatable_ids")] != -1);
		return call<R>("_truncatable_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto alignOnBoundary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("alignOnBoundary")] != -1);
		return call<R>("alignOnBoundary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::InputStream, typename... Args>
	auto create_input_stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_input_stream")] != -1);
		return call<R>("create_input_stream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto end_block(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("end_block")] != -1);
		return call<R>("end_block", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto end_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("end_value")] != -1);
		return call<R>("end_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto flush(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flush")] != -1);
		return call<R>("flush", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::BufferManagerWrite, typename... Args>
	auto getBufferManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferManager")] != -1);
		return call<R>("getBufferManager", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::ByteBufferWithInfo, typename... Args>
	auto getByteBufferWithInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBufferWithInfo")] != -1);
		return call<R>("getByteBufferWithInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto getMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageMediator")] != -1);
		return call<R>("getMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLittleEndian(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLittleEndian")] != -1);
		return call<R>("isLittleEndian", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putEndian(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putEndian")] != -1);
		return call<R>("putEndian", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHeaderPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHeaderPadding")] != -1);
		return call<R>("setHeaderPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMessageMediator")] != -1);
		return call<R>("setMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start_block(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start_block")] != -1);
		return call<R>("start_block", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start_value")] != -1);
		return call<R>("start_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toByteArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toByteArray")] != -1);
		return call<R>("toByteArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeIndirection")] != -1);
		return call<R>("writeIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeOctetSequenceTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeOctetSequenceTo")] != -1);
		return call<R>("writeOctetSequenceTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeTo")] != -1);
		return call<R>("writeTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Abstract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_Abstract")] != -1);
		return call<R>("write_Abstract", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_Context")] != -1);
		return call<R>("write_Context", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_Object")] != -1);
		return call<R>("write_Object", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Principal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_Principal")] != -1);
		return call<R>("write_Principal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_TypeCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_TypeCode")] != -1);
		return call<R>("write_TypeCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_Value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_Value")] != -1);
		return call<R>("write_Value", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_abstract_interface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_abstract_interface")] != -1);
		return call<R>("write_abstract_interface", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_any")] != -1);
		return call<R>("write_any", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_any_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_any_array")] != -1);
		return call<R>("write_any_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_boolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_boolean")] != -1);
		return call<R>("write_boolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_boolean_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_boolean_array")] != -1);
		return call<R>("write_boolean_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_char(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_char")] != -1);
		return call<R>("write_char", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_char_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_char_array")] != -1);
		return call<R>("write_char_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_double(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_double")] != -1);
		return call<R>("write_double", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_double_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_double_array")] != -1);
		return call<R>("write_double_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_fixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_fixed")] != -1);
		return call<R>("write_fixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_float(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_float")] != -1);
		return call<R>("write_float", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_float_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_float_array")] != -1);
		return call<R>("write_float_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_long")] != -1);
		return call<R>("write_long", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_long_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_long_array")] != -1);
		return call<R>("write_long_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_longlong")] != -1);
		return call<R>("write_longlong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_longlong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_longlong_array")] != -1);
		return call<R>("write_longlong_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_octet")] != -1);
		return call<R>("write_octet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_octet_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_octet_array")] != -1);
		return call<R>("write_octet_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_short")] != -1);
		return call<R>("write_short", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_short_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_short_array")] != -1);
		return call<R>("write_short_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_string(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_string")] != -1);
		return call<R>("write_string", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ulong")] != -1);
		return call<R>("write_ulong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ulong_array")] != -1);
		return call<R>("write_ulong_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulonglong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ulonglong")] != -1);
		return call<R>("write_ulonglong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ulonglong_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ulonglong_array")] != -1);
		return call<R>("write_ulonglong_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ushort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ushort")] != -1);
		return call<R>("write_ushort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_ushort_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_ushort_array")] != -1);
		return call<R>("write_ushort_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_value")] != -1);
		return call<R>("write_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wchar")] != -1);
		return call<R>("write_wchar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wchar_array")] != -1);
		return call<R>("write_wchar_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wstring")] != -1);
		return call<R>("write_wstring", std::forward<Args>(args)...);
	}

};

#endif
