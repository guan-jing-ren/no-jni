#ifndef com_sun_corba_se_impl_encoding_EncapsInputStream_HPP
#define com_sun_corba_se_impl_encoding_EncapsInputStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::EncapsInputStream : public jObject<::com::sun::corba::se::impl::encoding::EncapsInputStream, ::com::sun::corba::se::impl::encoding::CDRInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "EncapsInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::impl::encoding::EncapsInputStream)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::java::nio::ByteBuffer, ::jint, ::jboolean, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::jbyte *, ::jint)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::jbyte *, ::jint, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::jbyte *, ::jint, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::com::sun::org::omg::SendingContext::CodeBase)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::jbyte *, ::jint, ::jboolean, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>(), //
		jMethod<::com::sun::corba::se::impl::encoding::CDRInputStream()>("dup"), //
		jMethod<::com::sun::org::omg::SendingContext::CodeBase()>("getCodeBase"), //
	};

	template<typename R = ::com::sun::corba::se::impl::encoding::CDRInputStream, typename... Args>
	auto dup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dup")] != -1);
		return call<R>("dup", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::SendingContext::CodeBase, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", std::forward<Args>(args)...);
	}

};

#endif
