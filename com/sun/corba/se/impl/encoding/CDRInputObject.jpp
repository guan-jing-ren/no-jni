#ifndef com_sun_corba_se_impl_encoding_CDRInputObject_HPP
#define com_sun_corba_se_impl_encoding_CDRInputObject_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CDRInputObject : public jObject<::com::sun::corba::se::impl::encoding::CDRInputObject, ::com::sun::corba::se::impl::encoding::CDRInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CDRInputObject";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaConnection, ::java::nio::ByteBuffer, ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message)>(), //
		jMethod<::com::sun::corba::se::impl::encoding::CDRInputStream()>("dup"), //
		jMethod<::com::sun::org::omg::SendingContext::CodeBase()>("getCodeBase"), //
		jMethod<::com::sun::corba::se::spi::transport::CorbaConnection()>("getConnection"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::Message()>("getMessageHeader"), //
		jMethod<::jvoid()>("unmarshalHeader"), //
		jMethod<::jboolean()>("unmarshaledHeader"), //
	};

	template<typename R = ::com::sun::corba::se::impl::encoding::CDRInputStream, typename... Args>
	auto dup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dup")] != -1);
		return call<R>("dup", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::SendingContext::CodeBase, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::CorbaConnection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message, typename... Args>
	auto getMessageHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageHeader")] != -1);
		return call<R>("getMessageHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unmarshalHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmarshalHeader")] != -1);
		return call<R>("unmarshalHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto unmarshaledHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmarshaledHeader")] != -1);
		return call<R>("unmarshaledHeader", std::forward<Args>(args)...);
	}

};

#endif
