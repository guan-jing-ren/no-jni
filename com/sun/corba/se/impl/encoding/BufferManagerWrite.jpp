#ifndef com_sun_corba_se_impl_encoding_BufferManagerWrite_HPP
#define com_sun_corba_se_impl_encoding_BufferManagerWrite_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::BufferManagerWrite : public jObject<::com::sun::corba::se::impl::encoding::BufferManagerWrite, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "BufferManagerWrite";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("getBufferSize"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("overflow"), //
		jMethod<::jvoid()>("sendMessage"), //
		jMethod<::jboolean()>("sentFragment"), //
		jMethod<::jboolean()>("sentFullMessage"), //
		jMethod<::jvoid(::java::lang::Object)>("setOutputObject"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBufferSize")] != -1);
		return call<R>("getBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto overflow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("overflow")] != -1);
		return call<R>("overflow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendMessage")] != -1);
		return call<R>("sendMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto sentFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sentFragment")] != -1);
		return call<R>("sentFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto sentFullMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sentFullMessage")] != -1);
		return call<R>("sentFullMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutputObject")] != -1);
		return call<R>("setOutputObject", std::forward<Args>(args)...);
	}

};

#endif
