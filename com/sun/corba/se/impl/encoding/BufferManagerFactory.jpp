#ifndef com_sun_corba_se_impl_encoding_BufferManagerFactory_HPP
#define com_sun_corba_se_impl_encoding_BufferManagerFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::BufferManagerFactory : public jObject<::com::sun::corba::se::impl::encoding::BufferManagerFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "BufferManagerFactory";

	constexpr static Enume field_signatures{
		jField<::jint>("COLLECT"), //
		jField<::jint>("GROW"), //
		jField<::jint>("STREAM"), //
	};

	template<typename F = ::jint>
	static auto COLLECT() {
		static_assert(field_signatures[jField<F>("COLLECT")] != -1);
		return sat<F>("COLLECT");
	}

	template<typename F = ::jint>
	static auto GROW() {
		static_assert(field_signatures[jField<F>("GROW")] != -1);
		return sat<F>("GROW");
	}

	template<typename F = ::jint>
	static auto STREAM() {
		static_assert(field_signatures[jField<F>("STREAM")] != -1);
		return sat<F>("STREAM");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerRead(::com::sun::corba::se::spi::orb::ORB)>("defaultBufferManagerRead"), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerRead(::jint, ::jbyte, ::com::sun::corba::se::spi::orb::ORB)>("newBufferManagerRead"), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerRead(::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jbyte, ::com::sun::corba::se::spi::orb::ORB)>("newBufferManagerRead"), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerWrite(::jint, ::jbyte, ::com::sun::corba::se::spi::orb::ORB)>("newBufferManagerWrite"), //
		jMethod<::com::sun::corba::se::impl::encoding::BufferManagerWrite(::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jbyte, ::com::sun::corba::se::spi::orb::ORB)>("newBufferManagerWrite"), //
	};

	template<typename R = ::com::sun::corba::se::impl::encoding::BufferManagerRead, typename... Args>
	static auto defaultBufferManagerRead(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultBufferManagerRead")] != -1);
		return scall<R>("defaultBufferManagerRead", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::BufferManagerRead, typename... Args>
	static auto newBufferManagerRead(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newBufferManagerRead")] != -1);
		return scall<R>("newBufferManagerRead", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::BufferManagerWrite, typename... Args>
	static auto newBufferManagerWrite(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newBufferManagerWrite")] != -1);
		return scall<R>("newBufferManagerWrite", std::forward<Args>(args)...);
	}

};

#endif
