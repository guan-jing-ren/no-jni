#ifndef com_sun_corba_se_impl_encoding_BufferManagerReadGrow_HPP
#define com_sun_corba_se_impl_encoding_BufferManagerReadGrow_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::BufferManagerReadGrow : public jObject<::com::sun::corba::se::impl::encoding::BufferManagerReadGrow, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "BufferManagerReadGrow";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint)>("cancelProcessing"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("close"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("fragmentationOccured"), //
		jMethod<::com::sun::corba::se::impl::encoding::MarkAndResetHandler()>("getMarkAndResetHandler"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::Message)>("init"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::RestorableInputStream)>("mark"), //
		jMethod<::jvoid(::java::nio::ByteBuffer, ::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage)>("processFragment"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::com::sun::corba::se::impl::encoding::ByteBufferWithInfo(::com::sun::corba::se::impl::encoding::ByteBufferWithInfo)>("underflow"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto cancelProcessing(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelProcessing")] != -1);
		return call<R>("cancelProcessing", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fragmentationOccured(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fragmentationOccured")] != -1);
		return call<R>("fragmentationOccured", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::MarkAndResetHandler, typename... Args>
	auto getMarkAndResetHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMarkAndResetHandler")] != -1);
		return call<R>("getMarkAndResetHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processFragment(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processFragment")] != -1);
		return call<R>("processFragment", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::ByteBufferWithInfo, typename... Args>
	auto underflow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("underflow")] != -1);
		return call<R>("underflow", std::forward<Args>(args)...);
	}

};

#endif
