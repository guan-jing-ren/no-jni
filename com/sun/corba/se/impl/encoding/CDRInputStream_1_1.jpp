#ifndef com_sun_corba_se_impl_encoding_CDRInputStream_1_1_HPP
#define com_sun_corba_se_impl_encoding_CDRInputStream_1_1_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CDRInputStream_1_1 : public jObject<::com::sun::corba::se::impl::encoding::CDRInputStream_1_1, ::com::sun::corba::se::impl::encoding::CDRInputStream_1_0> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CDRInputStream_1_1";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object()>("createStreamMemento"), //
		jMethod<::com::sun::corba::se::impl::encoding::CDRInputStreamBase()>("dup"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jchar()>("read_wchar"), //
		jMethod<::java::lang::String()>("read_wstring"), //
		jMethod<::jvoid(::java::lang::Object)>("restoreInternalState"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto createStreamMemento(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createStreamMemento")] != -1);
		return call<R>("createStreamMemento", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::CDRInputStreamBase, typename... Args>
	auto dup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dup")] != -1);
		return call<R>("dup", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto read_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read_wchar")] != -1);
		return call<R>("read_wchar", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto read_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read_wstring")] != -1);
		return call<R>("read_wstring", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto restoreInternalState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("restoreInternalState")] != -1);
		return call<R>("restoreInternalState", std::forward<Args>(args)...);
	}

};

#endif
