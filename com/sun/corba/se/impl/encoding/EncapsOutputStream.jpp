#ifndef com_sun_corba_se_impl_encoding_EncapsOutputStream_HPP
#define com_sun_corba_se_impl_encoding_EncapsOutputStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::EncapsOutputStream : public jObject<::com::sun::corba::se::impl::encoding::EncapsOutputStream, ::com::sun::corba::se::impl::encoding::CDROutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "EncapsOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jboolean)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jboolean)>(), //
		jMethod<::org::omg::CORBA::portable::InputStream()>("create_input_stream"), //
	};

	template<typename R = ::org::omg::CORBA::portable::InputStream, typename... Args>
	auto create_input_stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_input_stream")] != -1);
		return call<R>("create_input_stream", std::forward<Args>(args)...);
	}

};

#endif
