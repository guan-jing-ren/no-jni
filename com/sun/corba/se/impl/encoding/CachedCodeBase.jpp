#ifndef com_sun_corba_se_impl_encoding_CachedCodeBase_HPP
#define com_sun_corba_se_impl_encoding_CachedCodeBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CachedCodeBase : public jObject<::com::sun::corba::se::impl::encoding::CachedCodeBase, ::com::sun::org::omg::SendingContext::_CodeBaseImplBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CachedCodeBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::transport::CorbaConnection)>(), //
		jMethod<::java::lang::String *(::java::lang::String)>("bases"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::ORB)>("cleanCache"), //
		jMethod<::com::sun::org::omg::CORBA::Repository()>("get_ir"), //
		jMethod<::java::lang::String(::java::lang::String)>("implementation"), //
		jMethod<::java::lang::String *(::java::lang::String *)>("implementations"), //
		jMethod<::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription(::java::lang::String)>("meta"), //
		jMethod<::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription *(::java::lang::String *)>("metas"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto bases(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bases")] != -1);
		return call<R>("bases", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto cleanCache(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cleanCache")] != -1);
		return scall<R>("cleanCache", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::CORBA::Repository, typename... Args>
	auto get_ir(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_ir")] != -1);
		return call<R>("get_ir", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto implementation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implementation")] != -1);
		return call<R>("implementation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto implementations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implementations")] != -1);
		return call<R>("implementations", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription, typename... Args>
	auto meta(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("meta")] != -1);
		return call<R>("meta", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription *, typename... Args>
	auto metas(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("metas")] != -1);
		return call<R>("metas", std::forward<Args>(args)...);
	}

};

#endif
