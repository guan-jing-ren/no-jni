#ifndef com_sun_corba_se_impl_encoding_CDROutputStream_1_2_HPP
#define com_sun_corba_se_impl_encoding_CDROutputStream_1_2_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::CDROutputStream_1_2 : public jObject<::com::sun::corba::se::impl::encoding::CDROutputStream_1_2, ::com::sun::corba::se::impl::encoding::CDROutputStream_1_1> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "CDROutputStream_1_2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jvoid(::jint)>("write_long"), //
		jMethod<::jvoid(::jlong)>("write_longlong"), //
		jMethod<::jvoid(::jbyte)>("write_octet"), //
		jMethod<::jvoid(::jshort)>("write_short"), //
		jMethod<::jvoid(::jchar)>("write_wchar"), //
		jMethod<::jvoid(::jchar *, ::jint, ::jint)>("write_wchar_array"), //
		jMethod<::jvoid(::java::lang::String)>("write_wstring"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_long(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_long")] != -1);
		return call<R>("write_long", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_longlong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_longlong")] != -1);
		return call<R>("write_longlong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_octet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_octet")] != -1);
		return call<R>("write_octet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_short(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_short")] != -1);
		return call<R>("write_short", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wchar")] != -1);
		return call<R>("write_wchar", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wchar_array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wchar_array")] != -1);
		return call<R>("write_wchar_array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write_wstring(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write_wstring")] != -1);
		return call<R>("write_wstring", std::forward<Args>(args)...);
	}

};

#endif
