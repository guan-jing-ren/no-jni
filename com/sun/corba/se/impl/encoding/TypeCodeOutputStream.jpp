#ifndef com_sun_corba_se_impl_encoding_TypeCodeOutputStream_HPP
#define com_sun_corba_se_impl_encoding_TypeCodeOutputStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::encoding::TypeCodeOutputStream : public jObject<::com::sun::corba::se::impl::encoding::TypeCodeOutputStream, ::com::sun::corba::se::impl::encoding::EncapsOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_encoding / "TypeCodeOutputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jboolean)>(), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("addIDAtPosition"), //
		jMethod<::com::sun::corba::se::impl::encoding::TypeCodeOutputStream(::org::omg::CORBA::ORB)>("createEncapsulation"), //
		jMethod<::org::omg::CORBA::portable::InputStream()>("create_input_stream"), //
		jMethod<::jint()>("getPosition"), //
		jMethod<::jint(::java::lang::String)>("getPositionForID"), //
		jMethod<::jint(::jint)>("getRealIndex"), //
		jMethod<::jint()>("getTopLevelPosition"), //
		jMethod<::com::sun::corba::se::impl::encoding::TypeCodeOutputStream()>("getTopLevelStream"), //
		jMethod<::jbyte *()>("getTypeCodeBuffer"), //
		jMethod<::jvoid()>("printTypeMap"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("setEnclosingOutputStream"), //
		jMethod<::com::sun::corba::se::impl::encoding::TypeCodeOutputStream(::org::omg::CORBA_2_3::portable::OutputStream)>("wrapOutputStream"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::jint)>("writeRawBuffer"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addIDAtPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addIDAtPosition")] != -1);
		return call<R>("addIDAtPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::TypeCodeOutputStream, typename... Args>
	auto createEncapsulation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createEncapsulation")] != -1);
		return call<R>("createEncapsulation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::InputStream, typename... Args>
	auto create_input_stream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_input_stream")] != -1);
		return call<R>("create_input_stream", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPosition")] != -1);
		return call<R>("getPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPositionForID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPositionForID")] != -1);
		return call<R>("getPositionForID", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRealIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRealIndex")] != -1);
		return call<R>("getRealIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTopLevelPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLevelPosition")] != -1);
		return call<R>("getTopLevelPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::TypeCodeOutputStream, typename... Args>
	auto getTopLevelStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTopLevelStream")] != -1);
		return call<R>("getTopLevelStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getTypeCodeBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeCodeBuffer")] != -1);
		return call<R>("getTypeCodeBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto printTypeMap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printTypeMap")] != -1);
		return call<R>("printTypeMap", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnclosingOutputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnclosingOutputStream")] != -1);
		return call<R>("setEnclosingOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::TypeCodeOutputStream, typename... Args>
	static auto wrapOutputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrapOutputStream")] != -1);
		return scall<R>("wrapOutputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeRawBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeRawBuffer")] != -1);
		return call<R>("writeRawBuffer", std::forward<Args>(args)...);
	}

};

#endif
