#ifndef com_sun_corba_se_impl_logging_POASystemException_HPP
#define com_sun_corba_se_impl_logging_POASystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::POASystemException : public jObject<::com::sun::corba::se::impl::logging::POASystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "POASystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("ADAPTER_ACTIVATOR_FAILED"), //
		jField<::jint>("ADAPTER_ACTIVATOR_NONEXISTENT"), //
		jField<::jint>("ADAPTER_DESTROYED"), //
		jField<::jint>("ADD_POA_INACTIVE"), //
		jField<::jint>("AOM_ENTRY_DEC_ZERO"), //
		jField<::jint>("BAD_LOCALREPLYSTATUS"), //
		jField<::jint>("BAD_REPOSITORY_ID"), //
		jField<::jint>("BAD_SERVANT"), //
		jField<::jint>("BAD_SKELETON"), //
		jField<::jint>("BAD_TRANSACTION_CONTEXT"), //
		jField<::jint>("BOOTSTRAP_ERROR"), //
		jField<::jint>("CANT_CLONE_TEMPLATE"), //
		jField<::jint>("CANT_RESOLVE_ROOT_POA"), //
		jField<::jint>("DEFAULT_POA_NOT_POAIMPL"), //
		jField<::jint>("DESTROY_DEADLOCK"), //
		jField<::jint>("DUPLICATE_ORB_VERSION_SC"), //
		jField<::jint>("FINDPOA_ERROR"), //
		jField<::jint>("ILLEGAL_FORWARD_REQUEST"), //
		jField<::jint>("ILLEGAL_POA_STATE_TRANS"), //
		jField<::jint>("INCARNATE_RETURNED_NULL"), //
		jField<::jint>("INVOKESETUP"), //
		jField<::jint>("JTS_INIT_ERROR"), //
		jField<::jint>("LOCAL_SERVANT_LOOKUP"), //
		jField<::jint>("MAKE_FACTORY_NOT_POA"), //
		jField<::jint>("METHOD_NOT_IMPLEMENTED"), //
		jField<::jint>("NO_CONTEXT"), //
		jField<::jint>("NO_PROFILES_IN_IOR"), //
		jField<::jint>("NULL_SERVANT"), //
		jField<::jint>("ORBD_ERROR"), //
		jField<::jint>("OTSHOOKEXCEPTION"), //
		jField<::jint>("PERSISTENT_SERVERID_NOT_SET"), //
		jField<::jint>("PERSISTENT_SERVERPORT_ERROR"), //
		jField<::jint>("PERSISTENT_SERVERPORT_NOT_SET"), //
		jField<::jint>("PMF_CREATE_NON_RETAIN"), //
		jField<::jint>("PMF_CREATE_RETAIN"), //
		jField<::jint>("POACURRENT_NULL_FIELD"), //
		jField<::jint>("POACURRENT_UNBALANCED_STACK"), //
		jField<::jint>("POA_BAD_SERVANT_MANAGER"), //
		jField<::jint>("POA_DISCARDING"), //
		jField<::jint>("POA_INACTIVE"), //
		jField<::jint>("POA_INTERNAL_GET_SERVANT_ERROR"), //
		jField<::jint>("POA_LOOKUP_ERROR"), //
		jField<::jint>("POA_NOT_FOUND"), //
		jField<::jint>("POA_NO_DEFAULT_SERVANT"), //
		jField<::jint>("POA_NO_SERVANT_MANAGER"), //
		jField<::jint>("POA_SERVANT_ACTIVATOR_LOOKUP_FAILED"), //
		jField<::jint>("POA_SERVANT_LOCATOR_LOOKUP_FAILED"), //
		jField<::jint>("POA_SERVANT_NOT_UNIQUE"), //
		jField<::jint>("POA_UNKNOWN_POLICY"), //
		jField<::jint>("POA_WRONG_POLICY"), //
		jField<::jint>("POLICY_MEDIATOR_BAD_POLICY_IN_FACTORY"), //
		jField<::jint>("PREINVOKE_CLONE_ERROR"), //
		jField<::jint>("PREINVOKE_POA_DESTROYED"), //
		jField<::jint>("SERVANT_DISPATCH"), //
		jField<::jint>("SERVANT_LOOKUP"), //
		jField<::jint>("SERVANT_MANAGER_ALREADY_SET"), //
		jField<::jint>("SERVANT_MANAGER_BAD_TYPE"), //
		jField<::jint>("SERVANT_MUST_BE_LOCAL"), //
		jField<::jint>("SERVANT_ORB"), //
		jField<::jint>("SERVANT_TO_ID_OAA"), //
		jField<::jint>("SERVANT_TO_ID_SAA"), //
		jField<::jint>("SERVANT_TO_ID_WP"), //
		jField<::jint>("SINGLE_THREAD_NOT_SUPPORTED"), //
		jField<::jint>("THIS_OBJECT_SERVANT_NOT_ACTIVE"), //
		jField<::jint>("THIS_OBJECT_WRONG_POLICY"), //
		jField<::jint>("UNEXPECTED_EXCEPTION"), //
		jField<::jint>("UNKNOWN_LOCALINVOCATION_ERROR"), //
		jField<::jint>("UNKNOWN_SERVERAPP_EXCEPTION"), //
		jField<::jint>("UNKNOWN_SERVER_EXCEPTION"), //
		jField<::jint>("WRONG_CLIENTSC"), //
		jField<::jint>("WRONG_POLICIES_FOR_THIS_OBJECT"), //
	};

	template<typename F = ::jint>
	static auto ADAPTER_ACTIVATOR_FAILED() {
		static_assert(field_signatures[jField<F>("ADAPTER_ACTIVATOR_FAILED")] != -1);
		return sat<F>("ADAPTER_ACTIVATOR_FAILED");
	}

	template<typename F = ::jint>
	static auto ADAPTER_ACTIVATOR_NONEXISTENT() {
		static_assert(field_signatures[jField<F>("ADAPTER_ACTIVATOR_NONEXISTENT")] != -1);
		return sat<F>("ADAPTER_ACTIVATOR_NONEXISTENT");
	}

	template<typename F = ::jint>
	static auto ADAPTER_DESTROYED() {
		static_assert(field_signatures[jField<F>("ADAPTER_DESTROYED")] != -1);
		return sat<F>("ADAPTER_DESTROYED");
	}

	template<typename F = ::jint>
	static auto ADD_POA_INACTIVE() {
		static_assert(field_signatures[jField<F>("ADD_POA_INACTIVE")] != -1);
		return sat<F>("ADD_POA_INACTIVE");
	}

	template<typename F = ::jint>
	static auto AOM_ENTRY_DEC_ZERO() {
		static_assert(field_signatures[jField<F>("AOM_ENTRY_DEC_ZERO")] != -1);
		return sat<F>("AOM_ENTRY_DEC_ZERO");
	}

	template<typename F = ::jint>
	static auto BAD_LOCALREPLYSTATUS() {
		static_assert(field_signatures[jField<F>("BAD_LOCALREPLYSTATUS")] != -1);
		return sat<F>("BAD_LOCALREPLYSTATUS");
	}

	template<typename F = ::jint>
	static auto BAD_REPOSITORY_ID() {
		static_assert(field_signatures[jField<F>("BAD_REPOSITORY_ID")] != -1);
		return sat<F>("BAD_REPOSITORY_ID");
	}

	template<typename F = ::jint>
	static auto BAD_SERVANT() {
		static_assert(field_signatures[jField<F>("BAD_SERVANT")] != -1);
		return sat<F>("BAD_SERVANT");
	}

	template<typename F = ::jint>
	static auto BAD_SKELETON() {
		static_assert(field_signatures[jField<F>("BAD_SKELETON")] != -1);
		return sat<F>("BAD_SKELETON");
	}

	template<typename F = ::jint>
	static auto BAD_TRANSACTION_CONTEXT() {
		static_assert(field_signatures[jField<F>("BAD_TRANSACTION_CONTEXT")] != -1);
		return sat<F>("BAD_TRANSACTION_CONTEXT");
	}

	template<typename F = ::jint>
	static auto BOOTSTRAP_ERROR() {
		static_assert(field_signatures[jField<F>("BOOTSTRAP_ERROR")] != -1);
		return sat<F>("BOOTSTRAP_ERROR");
	}

	template<typename F = ::jint>
	static auto CANT_CLONE_TEMPLATE() {
		static_assert(field_signatures[jField<F>("CANT_CLONE_TEMPLATE")] != -1);
		return sat<F>("CANT_CLONE_TEMPLATE");
	}

	template<typename F = ::jint>
	static auto CANT_RESOLVE_ROOT_POA() {
		static_assert(field_signatures[jField<F>("CANT_RESOLVE_ROOT_POA")] != -1);
		return sat<F>("CANT_RESOLVE_ROOT_POA");
	}

	template<typename F = ::jint>
	static auto DEFAULT_POA_NOT_POAIMPL() {
		static_assert(field_signatures[jField<F>("DEFAULT_POA_NOT_POAIMPL")] != -1);
		return sat<F>("DEFAULT_POA_NOT_POAIMPL");
	}

	template<typename F = ::jint>
	static auto DESTROY_DEADLOCK() {
		static_assert(field_signatures[jField<F>("DESTROY_DEADLOCK")] != -1);
		return sat<F>("DESTROY_DEADLOCK");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_ORB_VERSION_SC() {
		static_assert(field_signatures[jField<F>("DUPLICATE_ORB_VERSION_SC")] != -1);
		return sat<F>("DUPLICATE_ORB_VERSION_SC");
	}

	template<typename F = ::jint>
	static auto FINDPOA_ERROR() {
		static_assert(field_signatures[jField<F>("FINDPOA_ERROR")] != -1);
		return sat<F>("FINDPOA_ERROR");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_FORWARD_REQUEST() {
		static_assert(field_signatures[jField<F>("ILLEGAL_FORWARD_REQUEST")] != -1);
		return sat<F>("ILLEGAL_FORWARD_REQUEST");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_POA_STATE_TRANS() {
		static_assert(field_signatures[jField<F>("ILLEGAL_POA_STATE_TRANS")] != -1);
		return sat<F>("ILLEGAL_POA_STATE_TRANS");
	}

	template<typename F = ::jint>
	static auto INCARNATE_RETURNED_NULL() {
		static_assert(field_signatures[jField<F>("INCARNATE_RETURNED_NULL")] != -1);
		return sat<F>("INCARNATE_RETURNED_NULL");
	}

	template<typename F = ::jint>
	static auto INVOKESETUP() {
		static_assert(field_signatures[jField<F>("INVOKESETUP")] != -1);
		return sat<F>("INVOKESETUP");
	}

	template<typename F = ::jint>
	static auto JTS_INIT_ERROR() {
		static_assert(field_signatures[jField<F>("JTS_INIT_ERROR")] != -1);
		return sat<F>("JTS_INIT_ERROR");
	}

	template<typename F = ::jint>
	static auto LOCAL_SERVANT_LOOKUP() {
		static_assert(field_signatures[jField<F>("LOCAL_SERVANT_LOOKUP")] != -1);
		return sat<F>("LOCAL_SERVANT_LOOKUP");
	}

	template<typename F = ::jint>
	static auto MAKE_FACTORY_NOT_POA() {
		static_assert(field_signatures[jField<F>("MAKE_FACTORY_NOT_POA")] != -1);
		return sat<F>("MAKE_FACTORY_NOT_POA");
	}

	template<typename F = ::jint>
	static auto METHOD_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("METHOD_NOT_IMPLEMENTED")] != -1);
		return sat<F>("METHOD_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto NO_CONTEXT() {
		static_assert(field_signatures[jField<F>("NO_CONTEXT")] != -1);
		return sat<F>("NO_CONTEXT");
	}

	template<typename F = ::jint>
	static auto NO_PROFILES_IN_IOR() {
		static_assert(field_signatures[jField<F>("NO_PROFILES_IN_IOR")] != -1);
		return sat<F>("NO_PROFILES_IN_IOR");
	}

	template<typename F = ::jint>
	static auto NULL_SERVANT() {
		static_assert(field_signatures[jField<F>("NULL_SERVANT")] != -1);
		return sat<F>("NULL_SERVANT");
	}

	template<typename F = ::jint>
	static auto ORBD_ERROR() {
		static_assert(field_signatures[jField<F>("ORBD_ERROR")] != -1);
		return sat<F>("ORBD_ERROR");
	}

	template<typename F = ::jint>
	static auto OTSHOOKEXCEPTION() {
		static_assert(field_signatures[jField<F>("OTSHOOKEXCEPTION")] != -1);
		return sat<F>("OTSHOOKEXCEPTION");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVERID_NOT_SET() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVERID_NOT_SET")] != -1);
		return sat<F>("PERSISTENT_SERVERID_NOT_SET");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVERPORT_ERROR() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVERPORT_ERROR")] != -1);
		return sat<F>("PERSISTENT_SERVERPORT_ERROR");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVERPORT_NOT_SET() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVERPORT_NOT_SET")] != -1);
		return sat<F>("PERSISTENT_SERVERPORT_NOT_SET");
	}

	template<typename F = ::jint>
	static auto PMF_CREATE_NON_RETAIN() {
		static_assert(field_signatures[jField<F>("PMF_CREATE_NON_RETAIN")] != -1);
		return sat<F>("PMF_CREATE_NON_RETAIN");
	}

	template<typename F = ::jint>
	static auto PMF_CREATE_RETAIN() {
		static_assert(field_signatures[jField<F>("PMF_CREATE_RETAIN")] != -1);
		return sat<F>("PMF_CREATE_RETAIN");
	}

	template<typename F = ::jint>
	static auto POACURRENT_NULL_FIELD() {
		static_assert(field_signatures[jField<F>("POACURRENT_NULL_FIELD")] != -1);
		return sat<F>("POACURRENT_NULL_FIELD");
	}

	template<typename F = ::jint>
	static auto POACURRENT_UNBALANCED_STACK() {
		static_assert(field_signatures[jField<F>("POACURRENT_UNBALANCED_STACK")] != -1);
		return sat<F>("POACURRENT_UNBALANCED_STACK");
	}

	template<typename F = ::jint>
	static auto POA_BAD_SERVANT_MANAGER() {
		static_assert(field_signatures[jField<F>("POA_BAD_SERVANT_MANAGER")] != -1);
		return sat<F>("POA_BAD_SERVANT_MANAGER");
	}

	template<typename F = ::jint>
	static auto POA_DISCARDING() {
		static_assert(field_signatures[jField<F>("POA_DISCARDING")] != -1);
		return sat<F>("POA_DISCARDING");
	}

	template<typename F = ::jint>
	static auto POA_INACTIVE() {
		static_assert(field_signatures[jField<F>("POA_INACTIVE")] != -1);
		return sat<F>("POA_INACTIVE");
	}

	template<typename F = ::jint>
	static auto POA_INTERNAL_GET_SERVANT_ERROR() {
		static_assert(field_signatures[jField<F>("POA_INTERNAL_GET_SERVANT_ERROR")] != -1);
		return sat<F>("POA_INTERNAL_GET_SERVANT_ERROR");
	}

	template<typename F = ::jint>
	static auto POA_LOOKUP_ERROR() {
		static_assert(field_signatures[jField<F>("POA_LOOKUP_ERROR")] != -1);
		return sat<F>("POA_LOOKUP_ERROR");
	}

	template<typename F = ::jint>
	static auto POA_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("POA_NOT_FOUND")] != -1);
		return sat<F>("POA_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto POA_NO_DEFAULT_SERVANT() {
		static_assert(field_signatures[jField<F>("POA_NO_DEFAULT_SERVANT")] != -1);
		return sat<F>("POA_NO_DEFAULT_SERVANT");
	}

	template<typename F = ::jint>
	static auto POA_NO_SERVANT_MANAGER() {
		static_assert(field_signatures[jField<F>("POA_NO_SERVANT_MANAGER")] != -1);
		return sat<F>("POA_NO_SERVANT_MANAGER");
	}

	template<typename F = ::jint>
	static auto POA_SERVANT_ACTIVATOR_LOOKUP_FAILED() {
		static_assert(field_signatures[jField<F>("POA_SERVANT_ACTIVATOR_LOOKUP_FAILED")] != -1);
		return sat<F>("POA_SERVANT_ACTIVATOR_LOOKUP_FAILED");
	}

	template<typename F = ::jint>
	static auto POA_SERVANT_LOCATOR_LOOKUP_FAILED() {
		static_assert(field_signatures[jField<F>("POA_SERVANT_LOCATOR_LOOKUP_FAILED")] != -1);
		return sat<F>("POA_SERVANT_LOCATOR_LOOKUP_FAILED");
	}

	template<typename F = ::jint>
	static auto POA_SERVANT_NOT_UNIQUE() {
		static_assert(field_signatures[jField<F>("POA_SERVANT_NOT_UNIQUE")] != -1);
		return sat<F>("POA_SERVANT_NOT_UNIQUE");
	}

	template<typename F = ::jint>
	static auto POA_UNKNOWN_POLICY() {
		static_assert(field_signatures[jField<F>("POA_UNKNOWN_POLICY")] != -1);
		return sat<F>("POA_UNKNOWN_POLICY");
	}

	template<typename F = ::jint>
	static auto POA_WRONG_POLICY() {
		static_assert(field_signatures[jField<F>("POA_WRONG_POLICY")] != -1);
		return sat<F>("POA_WRONG_POLICY");
	}

	template<typename F = ::jint>
	static auto POLICY_MEDIATOR_BAD_POLICY_IN_FACTORY() {
		static_assert(field_signatures[jField<F>("POLICY_MEDIATOR_BAD_POLICY_IN_FACTORY")] != -1);
		return sat<F>("POLICY_MEDIATOR_BAD_POLICY_IN_FACTORY");
	}

	template<typename F = ::jint>
	static auto PREINVOKE_CLONE_ERROR() {
		static_assert(field_signatures[jField<F>("PREINVOKE_CLONE_ERROR")] != -1);
		return sat<F>("PREINVOKE_CLONE_ERROR");
	}

	template<typename F = ::jint>
	static auto PREINVOKE_POA_DESTROYED() {
		static_assert(field_signatures[jField<F>("PREINVOKE_POA_DESTROYED")] != -1);
		return sat<F>("PREINVOKE_POA_DESTROYED");
	}

	template<typename F = ::jint>
	static auto SERVANT_DISPATCH() {
		static_assert(field_signatures[jField<F>("SERVANT_DISPATCH")] != -1);
		return sat<F>("SERVANT_DISPATCH");
	}

	template<typename F = ::jint>
	static auto SERVANT_LOOKUP() {
		static_assert(field_signatures[jField<F>("SERVANT_LOOKUP")] != -1);
		return sat<F>("SERVANT_LOOKUP");
	}

	template<typename F = ::jint>
	static auto SERVANT_MANAGER_ALREADY_SET() {
		static_assert(field_signatures[jField<F>("SERVANT_MANAGER_ALREADY_SET")] != -1);
		return sat<F>("SERVANT_MANAGER_ALREADY_SET");
	}

	template<typename F = ::jint>
	static auto SERVANT_MANAGER_BAD_TYPE() {
		static_assert(field_signatures[jField<F>("SERVANT_MANAGER_BAD_TYPE")] != -1);
		return sat<F>("SERVANT_MANAGER_BAD_TYPE");
	}

	template<typename F = ::jint>
	static auto SERVANT_MUST_BE_LOCAL() {
		static_assert(field_signatures[jField<F>("SERVANT_MUST_BE_LOCAL")] != -1);
		return sat<F>("SERVANT_MUST_BE_LOCAL");
	}

	template<typename F = ::jint>
	static auto SERVANT_ORB() {
		static_assert(field_signatures[jField<F>("SERVANT_ORB")] != -1);
		return sat<F>("SERVANT_ORB");
	}

	template<typename F = ::jint>
	static auto SERVANT_TO_ID_OAA() {
		static_assert(field_signatures[jField<F>("SERVANT_TO_ID_OAA")] != -1);
		return sat<F>("SERVANT_TO_ID_OAA");
	}

	template<typename F = ::jint>
	static auto SERVANT_TO_ID_SAA() {
		static_assert(field_signatures[jField<F>("SERVANT_TO_ID_SAA")] != -1);
		return sat<F>("SERVANT_TO_ID_SAA");
	}

	template<typename F = ::jint>
	static auto SERVANT_TO_ID_WP() {
		static_assert(field_signatures[jField<F>("SERVANT_TO_ID_WP")] != -1);
		return sat<F>("SERVANT_TO_ID_WP");
	}

	template<typename F = ::jint>
	static auto SINGLE_THREAD_NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("SINGLE_THREAD_NOT_SUPPORTED")] != -1);
		return sat<F>("SINGLE_THREAD_NOT_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto THIS_OBJECT_SERVANT_NOT_ACTIVE() {
		static_assert(field_signatures[jField<F>("THIS_OBJECT_SERVANT_NOT_ACTIVE")] != -1);
		return sat<F>("THIS_OBJECT_SERVANT_NOT_ACTIVE");
	}

	template<typename F = ::jint>
	static auto THIS_OBJECT_WRONG_POLICY() {
		static_assert(field_signatures[jField<F>("THIS_OBJECT_WRONG_POLICY")] != -1);
		return sat<F>("THIS_OBJECT_WRONG_POLICY");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_EXCEPTION")] != -1);
		return sat<F>("UNEXPECTED_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_LOCALINVOCATION_ERROR() {
		static_assert(field_signatures[jField<F>("UNKNOWN_LOCALINVOCATION_ERROR")] != -1);
		return sat<F>("UNKNOWN_LOCALINVOCATION_ERROR");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_SERVERAPP_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SERVERAPP_EXCEPTION")] != -1);
		return sat<F>("UNKNOWN_SERVERAPP_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_SERVER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SERVER_EXCEPTION")] != -1);
		return sat<F>("UNKNOWN_SERVER_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto WRONG_CLIENTSC() {
		static_assert(field_signatures[jField<F>("WRONG_CLIENTSC")] != -1);
		return sat<F>("WRONG_CLIENTSC");
	}

	template<typename F = ::jint>
	static auto WRONG_POLICIES_FOR_THIS_OBJECT() {
		static_assert(field_signatures[jField<F>("WRONG_POLICIES_FOR_THIS_OBJECT")] != -1);
		return sat<F>("WRONG_POLICIES_FOR_THIS_OBJECT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("adapterActivatorFailed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("adapterActivatorFailed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("adapterActivatorFailed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("adapterActivatorFailed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("adapterActivatorNonexistent"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("adapterActivatorNonexistent"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("adapterActivatorNonexistent"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("adapterActivatorNonexistent"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("adapterDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("adapterDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("adapterDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("adapterDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("addPoaInactive"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("addPoaInactive"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("addPoaInactive"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("addPoaInactive"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("aomEntryDecZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("aomEntryDecZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("aomEntryDecZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("aomEntryDecZero"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badLocalreplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badLocalreplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badLocalreplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badLocalreplystatus"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("badRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("badRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("badRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("badServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("badServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("badServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badServant"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("badTransactionContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("badTransactionContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("badTransactionContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badTransactionContext"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("bootstrapError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("bootstrapError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("bootstrapError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bootstrapError"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cantCloneTemplate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cantCloneTemplate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cantCloneTemplate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cantCloneTemplate"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cantResolveRootPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cantResolveRootPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cantResolveRootPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cantResolveRootPoa"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("defaultPoaNotPoaimpl"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("defaultPoaNotPoaimpl"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("defaultPoaNotPoaimpl"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("defaultPoaNotPoaimpl"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("destroyDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("destroyDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("destroyDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("destroyDeadlock"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("duplicateOrbVersionSc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("duplicateOrbVersionSc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("duplicateOrbVersionSc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("duplicateOrbVersionSc"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("findpoaError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("findpoaError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("findpoaError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("findpoaError"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("illegalForwardRequest"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("illegalForwardRequest"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("illegalForwardRequest"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalForwardRequest"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("illegalPoaStateTrans"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("illegalPoaStateTrans"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("illegalPoaStateTrans"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalPoaStateTrans"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("incarnateReturnedNull"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("incarnateReturnedNull"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("incarnateReturnedNull"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("incarnateReturnedNull"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("invokesetup"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("invokesetup"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("invokesetup"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invokesetup"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("jtsInitError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("jtsInitError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("jtsInitError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("jtsInitError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("localServantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("localServantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("localServantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("localServantLookup"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("makeFactoryNotPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("makeFactoryNotPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("makeFactoryNotPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("makeFactoryNotPoa"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("methodNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("methodNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("methodNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("methodNotImplemented"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("noContext"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("noContext"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("noContext"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noContext"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("noProfilesInIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("noProfilesInIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("noProfilesInIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noProfilesInIor"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("nullServant"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("nullServant"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("nullServant"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullServant"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("orbdError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("orbdError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("orbdError"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbdError"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("otshookexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("otshookexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("otshookexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("otshookexception"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("persistentServerportError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("persistentServerportError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("persistentServerportError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServerportError"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("pmfCreateNonRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("pmfCreateNonRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("pmfCreateNonRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("pmfCreateNonRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("pmfCreateRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("pmfCreateRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("pmfCreateRetain"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("pmfCreateRetain"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaBadServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaBadServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaBadServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaBadServantManager"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("poaDiscarding"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("poaDiscarding"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("poaDiscarding"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaDiscarding"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaInactive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaInactive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaInactive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaInactive"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("poaInternalGetServantError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("poaInternalGetServantError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("poaInternalGetServantError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaInternalGetServantError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaLookupError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaLookupError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaLookupError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaLookupError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaNoDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaNoDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaNoDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaNoDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaNoServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaNoServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaNoServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaNoServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaNotFound"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaNotFound"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaNotFound"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaNotFound"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaServantActivatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaServantActivatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaServantActivatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaServantActivatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaServantLocatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaServantLocatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaServantLocatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaServantLocatorLookupFailed"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaServantNotUnique"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaServantNotUnique"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaServantNotUnique"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaServantNotUnique"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaUnknownPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaUnknownPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaUnknownPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaUnknownPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("poaWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("poaWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("poaWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaWrongPolicy"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("poacurrentNullField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("poacurrentNullField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("poacurrentNullField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poacurrentNullField"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("poacurrentUnbalancedStack"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("poacurrentUnbalancedStack"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("poacurrentUnbalancedStack"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poacurrentUnbalancedStack"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("policyMediatorBadPolicyInFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("policyMediatorBadPolicyInFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("policyMediatorBadPolicyInFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("policyMediatorBadPolicyInFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("preinvokeCloneError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("preinvokeCloneError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("preinvokeCloneError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("preinvokeCloneError"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("preinvokePoaDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("preinvokePoaDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("preinvokePoaDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("preinvokePoaDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantDispatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantDispatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantDispatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantDispatch"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("servantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("servantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("servantLookup"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantLookup"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("servantManagerAlreadySet"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("servantManagerAlreadySet"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("servantManagerAlreadySet"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantManagerAlreadySet"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("servantManagerBadType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("servantManagerBadType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("servantManagerBadType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantManagerBadType"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantMustBeLocal"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantMustBeLocal"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantMustBeLocal"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantMustBeLocal"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("servantOrb"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("servantOrb"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("servantOrb"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantOrb"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantToIdOaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantToIdOaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantToIdOaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantToIdOaa"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantToIdSaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantToIdSaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantToIdSaa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantToIdSaa"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantToIdWp"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantToIdWp"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantToIdWp"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantToIdWp"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("singleThreadNotSupported"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("singleThreadNotSupported"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("singleThreadNotSupported"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("singleThreadNotSupported"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("thisObjectServantNotActive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("thisObjectServantNotActive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("thisObjectServantNotActive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("thisObjectServantNotActive"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("thisObjectWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("thisObjectWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("thisObjectWrongPolicy"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("thisObjectWrongPolicy"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownLocalinvocationError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownLocalinvocationError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownLocalinvocationError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownLocalinvocationError"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownServerException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownServerException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownServerException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownServerException"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownServerappException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownServerappException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownServerappException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownServerappException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("wrongPoliciesForThisObject"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("wrongPoliciesForThisObject"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("wrongPoliciesForThisObject"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wrongPoliciesForThisObject"), //
	};

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto adapterActivatorFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterActivatorFailed")] != -1);
		return call<R>("adapterActivatorFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto adapterActivatorNonexistent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterActivatorNonexistent")] != -1);
		return call<R>("adapterActivatorNonexistent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto adapterDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterDestroyed")] != -1);
		return call<R>("adapterDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto addPoaInactive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPoaInactive")] != -1);
		return call<R>("addPoaInactive", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto aomEntryDecZero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("aomEntryDecZero")] != -1);
		return call<R>("aomEntryDecZero", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badLocalreplystatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badLocalreplystatus")] != -1);
		return call<R>("badLocalreplystatus", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto badRepositoryId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badRepositoryId")] != -1);
		return call<R>("badRepositoryId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto badServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badServant")] != -1);
		return call<R>("badServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto badSkeleton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSkeleton")] != -1);
		return call<R>("badSkeleton", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto badTransactionContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badTransactionContext")] != -1);
		return call<R>("badTransactionContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto bootstrapError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootstrapError")] != -1);
		return call<R>("bootstrapError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cantCloneTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cantCloneTemplate")] != -1);
		return call<R>("cantCloneTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cantResolveRootPoa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cantResolveRootPoa")] != -1);
		return call<R>("cantResolveRootPoa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto defaultPoaNotPoaimpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultPoaNotPoaimpl")] != -1);
		return call<R>("defaultPoaNotPoaimpl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto destroyDeadlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyDeadlock")] != -1);
		return call<R>("destroyDeadlock", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto duplicateOrbVersionSc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicateOrbVersionSc")] != -1);
		return call<R>("duplicateOrbVersionSc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto findpoaError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findpoaError")] != -1);
		return call<R>("findpoaError", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::POASystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto illegalForwardRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalForwardRequest")] != -1);
		return call<R>("illegalForwardRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalPoaStateTrans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalPoaStateTrans")] != -1);
		return call<R>("illegalPoaStateTrans", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto incarnateReturnedNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incarnateReturnedNull")] != -1);
		return call<R>("incarnateReturnedNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invokesetup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokesetup")] != -1);
		return call<R>("invokesetup", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto jtsInitError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("jtsInitError")] != -1);
		return call<R>("jtsInitError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto localServantLookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localServantLookup")] != -1);
		return call<R>("localServantLookup", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto makeFactoryNotPoa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeFactoryNotPoa")] != -1);
		return call<R>("makeFactoryNotPoa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto methodNotImplemented(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("methodNotImplemented")] != -1);
		return call<R>("methodNotImplemented", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto noContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noContext")] != -1);
		return call<R>("noContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noProfilesInIor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noProfilesInIor")] != -1);
		return call<R>("noProfilesInIor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto nullServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullServant")] != -1);
		return call<R>("nullServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto orbdError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbdError")] != -1);
		return call<R>("orbdError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto otshookexception(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("otshookexception")] != -1);
		return call<R>("otshookexception", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto persistentServeridNotSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServeridNotSet")] != -1);
		return call<R>("persistentServeridNotSet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto persistentServerportError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServerportError")] != -1);
		return call<R>("persistentServerportError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto persistentServerportNotSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServerportNotSet")] != -1);
		return call<R>("persistentServerportNotSet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto pmfCreateNonRetain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pmfCreateNonRetain")] != -1);
		return call<R>("pmfCreateNonRetain", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto pmfCreateRetain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pmfCreateRetain")] != -1);
		return call<R>("pmfCreateRetain", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaBadServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaBadServantManager")] != -1);
		return call<R>("poaBadServantManager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto poaDiscarding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaDiscarding")] != -1);
		return call<R>("poaDiscarding", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaInactive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaInactive")] != -1);
		return call<R>("poaInactive", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto poaInternalGetServantError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaInternalGetServantError")] != -1);
		return call<R>("poaInternalGetServantError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaLookupError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaLookupError")] != -1);
		return call<R>("poaLookupError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaNoDefaultServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaNoDefaultServant")] != -1);
		return call<R>("poaNoDefaultServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaNoServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaNoServantManager")] != -1);
		return call<R>("poaNoServantManager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaNotFound")] != -1);
		return call<R>("poaNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaServantActivatorLookupFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaServantActivatorLookupFailed")] != -1);
		return call<R>("poaServantActivatorLookupFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaServantLocatorLookupFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaServantLocatorLookupFailed")] != -1);
		return call<R>("poaServantLocatorLookupFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaServantNotUnique(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaServantNotUnique")] != -1);
		return call<R>("poaServantNotUnique", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaUnknownPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaUnknownPolicy")] != -1);
		return call<R>("poaUnknownPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto poaWrongPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaWrongPolicy")] != -1);
		return call<R>("poaWrongPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto poacurrentNullField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poacurrentNullField")] != -1);
		return call<R>("poacurrentNullField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto poacurrentUnbalancedStack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poacurrentUnbalancedStack")] != -1);
		return call<R>("poacurrentUnbalancedStack", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto policyMediatorBadPolicyInFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policyMediatorBadPolicyInFactory")] != -1);
		return call<R>("policyMediatorBadPolicyInFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto preinvokeCloneError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preinvokeCloneError")] != -1);
		return call<R>("preinvokeCloneError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto preinvokePoaDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preinvokePoaDestroyed")] != -1);
		return call<R>("preinvokePoaDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantDispatch")] != -1);
		return call<R>("servantDispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto servantLookup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantLookup")] != -1);
		return call<R>("servantLookup", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto servantManagerAlreadySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantManagerAlreadySet")] != -1);
		return call<R>("servantManagerAlreadySet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto servantManagerBadType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantManagerBadType")] != -1);
		return call<R>("servantManagerBadType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantMustBeLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantMustBeLocal")] != -1);
		return call<R>("servantMustBeLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto servantOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantOrb")] != -1);
		return call<R>("servantOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantToIdOaa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantToIdOaa")] != -1);
		return call<R>("servantToIdOaa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantToIdSaa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantToIdSaa")] != -1);
		return call<R>("servantToIdSaa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantToIdWp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantToIdWp")] != -1);
		return call<R>("servantToIdWp", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto singleThreadNotSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("singleThreadNotSupported")] != -1);
		return call<R>("singleThreadNotSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto thisObjectServantNotActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thisObjectServantNotActive")] != -1);
		return call<R>("thisObjectServantNotActive", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto thisObjectWrongPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thisObjectWrongPolicy")] != -1);
		return call<R>("thisObjectWrongPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unexpectedException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedException")] != -1);
		return call<R>("unexpectedException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownLocalinvocationError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownLocalinvocationError")] != -1);
		return call<R>("unknownLocalinvocationError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownServerException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownServerException")] != -1);
		return call<R>("unknownServerException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownServerappException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownServerappException")] != -1);
		return call<R>("unknownServerappException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto wrongClientsc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrongClientsc")] != -1);
		return call<R>("wrongClientsc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto wrongPoliciesForThisObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrongPoliciesForThisObject")] != -1);
		return call<R>("wrongPoliciesForThisObject", std::forward<Args>(args)...);
	}

};

#endif
