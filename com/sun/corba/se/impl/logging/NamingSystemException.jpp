#ifndef com_sun_corba_se_impl_logging_NamingSystemException_HPP
#define com_sun_corba_se_impl_logging_NamingSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::NamingSystemException : public jObject<::com::sun::corba::se::impl::logging::NamingSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "NamingSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("BIND_FAILURE"), //
		jField<::jint>("BIND_UPDATE_CONTEXT_FAILED"), //
		jField<::jint>("INS_BAD_ADDRESS"), //
		jField<::jint>("INS_BAD_SCHEME_NAME"), //
		jField<::jint>("INS_BAD_SCHEME_SPECIFIC_PART"), //
		jField<::jint>("INS_OTHER"), //
		jField<::jint>("NAMING_CTX_BAD_BINDINGTYPE"), //
		jField<::jint>("NAMING_CTX_BINDING_ITERATOR_CREATE"), //
		jField<::jint>("NAMING_CTX_REBINDCTX_ALREADY_BOUND"), //
		jField<::jint>("NAMING_CTX_REBIND_ALREADY_BOUND"), //
		jField<::jint>("NAMING_CTX_RESOLVE_CANNOT_NARROW_TO_CTX"), //
		jField<::jint>("OBJECT_IS_NULL"), //
		jField<::jint>("RESOLVE_CONVERSION_FAILURE"), //
		jField<::jint>("RESOLVE_FAILURE"), //
		jField<::jint>("TRANSIENT_NAME_SERVER_BAD_HOST"), //
		jField<::jint>("TRANSIENT_NAME_SERVER_BAD_PORT"), //
		jField<::jint>("TRANS_NC_BIND_ALREADY_BOUND"), //
		jField<::jint>("TRANS_NC_DESTROY_GOT_EXC"), //
		jField<::jint>("TRANS_NC_LIST_GOT_EXC"), //
		jField<::jint>("TRANS_NC_NEWCTX_GOT_EXC"), //
		jField<::jint>("TRANS_NS_CANNOT_CREATE_INITIAL_NC"), //
		jField<::jint>("TRANS_NS_CANNOT_CREATE_INITIAL_NC_SYS"), //
		jField<::jint>("UNBIND_FAILURE"), //
	};

	template<typename F = ::jint>
	static auto BIND_FAILURE() {
		static_assert(field_signatures[jField<F>("BIND_FAILURE")] != -1);
		return sat<F>("BIND_FAILURE");
	}

	template<typename F = ::jint>
	static auto BIND_UPDATE_CONTEXT_FAILED() {
		static_assert(field_signatures[jField<F>("BIND_UPDATE_CONTEXT_FAILED")] != -1);
		return sat<F>("BIND_UPDATE_CONTEXT_FAILED");
	}

	template<typename F = ::jint>
	static auto INS_BAD_ADDRESS() {
		static_assert(field_signatures[jField<F>("INS_BAD_ADDRESS")] != -1);
		return sat<F>("INS_BAD_ADDRESS");
	}

	template<typename F = ::jint>
	static auto INS_BAD_SCHEME_NAME() {
		static_assert(field_signatures[jField<F>("INS_BAD_SCHEME_NAME")] != -1);
		return sat<F>("INS_BAD_SCHEME_NAME");
	}

	template<typename F = ::jint>
	static auto INS_BAD_SCHEME_SPECIFIC_PART() {
		static_assert(field_signatures[jField<F>("INS_BAD_SCHEME_SPECIFIC_PART")] != -1);
		return sat<F>("INS_BAD_SCHEME_SPECIFIC_PART");
	}

	template<typename F = ::jint>
	static auto INS_OTHER() {
		static_assert(field_signatures[jField<F>("INS_OTHER")] != -1);
		return sat<F>("INS_OTHER");
	}

	template<typename F = ::jint>
	static auto NAMING_CTX_BAD_BINDINGTYPE() {
		static_assert(field_signatures[jField<F>("NAMING_CTX_BAD_BINDINGTYPE")] != -1);
		return sat<F>("NAMING_CTX_BAD_BINDINGTYPE");
	}

	template<typename F = ::jint>
	static auto NAMING_CTX_BINDING_ITERATOR_CREATE() {
		static_assert(field_signatures[jField<F>("NAMING_CTX_BINDING_ITERATOR_CREATE")] != -1);
		return sat<F>("NAMING_CTX_BINDING_ITERATOR_CREATE");
	}

	template<typename F = ::jint>
	static auto NAMING_CTX_REBINDCTX_ALREADY_BOUND() {
		static_assert(field_signatures[jField<F>("NAMING_CTX_REBINDCTX_ALREADY_BOUND")] != -1);
		return sat<F>("NAMING_CTX_REBINDCTX_ALREADY_BOUND");
	}

	template<typename F = ::jint>
	static auto NAMING_CTX_REBIND_ALREADY_BOUND() {
		static_assert(field_signatures[jField<F>("NAMING_CTX_REBIND_ALREADY_BOUND")] != -1);
		return sat<F>("NAMING_CTX_REBIND_ALREADY_BOUND");
	}

	template<typename F = ::jint>
	static auto NAMING_CTX_RESOLVE_CANNOT_NARROW_TO_CTX() {
		static_assert(field_signatures[jField<F>("NAMING_CTX_RESOLVE_CANNOT_NARROW_TO_CTX")] != -1);
		return sat<F>("NAMING_CTX_RESOLVE_CANNOT_NARROW_TO_CTX");
	}

	template<typename F = ::jint>
	static auto OBJECT_IS_NULL() {
		static_assert(field_signatures[jField<F>("OBJECT_IS_NULL")] != -1);
		return sat<F>("OBJECT_IS_NULL");
	}

	template<typename F = ::jint>
	static auto RESOLVE_CONVERSION_FAILURE() {
		static_assert(field_signatures[jField<F>("RESOLVE_CONVERSION_FAILURE")] != -1);
		return sat<F>("RESOLVE_CONVERSION_FAILURE");
	}

	template<typename F = ::jint>
	static auto RESOLVE_FAILURE() {
		static_assert(field_signatures[jField<F>("RESOLVE_FAILURE")] != -1);
		return sat<F>("RESOLVE_FAILURE");
	}

	template<typename F = ::jint>
	static auto TRANSIENT_NAME_SERVER_BAD_HOST() {
		static_assert(field_signatures[jField<F>("TRANSIENT_NAME_SERVER_BAD_HOST")] != -1);
		return sat<F>("TRANSIENT_NAME_SERVER_BAD_HOST");
	}

	template<typename F = ::jint>
	static auto TRANSIENT_NAME_SERVER_BAD_PORT() {
		static_assert(field_signatures[jField<F>("TRANSIENT_NAME_SERVER_BAD_PORT")] != -1);
		return sat<F>("TRANSIENT_NAME_SERVER_BAD_PORT");
	}

	template<typename F = ::jint>
	static auto TRANS_NC_BIND_ALREADY_BOUND() {
		static_assert(field_signatures[jField<F>("TRANS_NC_BIND_ALREADY_BOUND")] != -1);
		return sat<F>("TRANS_NC_BIND_ALREADY_BOUND");
	}

	template<typename F = ::jint>
	static auto TRANS_NC_DESTROY_GOT_EXC() {
		static_assert(field_signatures[jField<F>("TRANS_NC_DESTROY_GOT_EXC")] != -1);
		return sat<F>("TRANS_NC_DESTROY_GOT_EXC");
	}

	template<typename F = ::jint>
	static auto TRANS_NC_LIST_GOT_EXC() {
		static_assert(field_signatures[jField<F>("TRANS_NC_LIST_GOT_EXC")] != -1);
		return sat<F>("TRANS_NC_LIST_GOT_EXC");
	}

	template<typename F = ::jint>
	static auto TRANS_NC_NEWCTX_GOT_EXC() {
		static_assert(field_signatures[jField<F>("TRANS_NC_NEWCTX_GOT_EXC")] != -1);
		return sat<F>("TRANS_NC_NEWCTX_GOT_EXC");
	}

	template<typename F = ::jint>
	static auto TRANS_NS_CANNOT_CREATE_INITIAL_NC() {
		static_assert(field_signatures[jField<F>("TRANS_NS_CANNOT_CREATE_INITIAL_NC")] != -1);
		return sat<F>("TRANS_NS_CANNOT_CREATE_INITIAL_NC");
	}

	template<typename F = ::jint>
	static auto TRANS_NS_CANNOT_CREATE_INITIAL_NC_SYS() {
		static_assert(field_signatures[jField<F>("TRANS_NS_CANNOT_CREATE_INITIAL_NC_SYS")] != -1);
		return sat<F>("TRANS_NS_CANNOT_CREATE_INITIAL_NC_SYS");
	}

	template<typename F = ::jint>
	static auto UNBIND_FAILURE() {
		static_assert(field_signatures[jField<F>("UNBIND_FAILURE")] != -1);
		return sat<F>("UNBIND_FAILURE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("bindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("bindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("bindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("bindUpdateContextFailed"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("bindUpdateContextFailed"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("bindUpdateContextFailed"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bindUpdateContextFailed"), //
		jMethod<::com::sun::corba::se::impl::logging::NamingSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::NamingSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("insBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("insBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("insBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insBadAddress"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("insBadSchemeName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("insBadSchemeName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("insBadSchemeName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insBadSchemeName"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("insBadSchemeSpecificPart"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("insBadSchemeSpecificPart"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("insBadSchemeSpecificPart"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insBadSchemeSpecificPart"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("insOther"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("insOther"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("insOther"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insOther"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("namingCtxBadBindingtype"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("namingCtxBadBindingtype"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("namingCtxBadBindingtype"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("namingCtxBadBindingtype"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("namingCtxBindingIteratorCreate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("namingCtxBindingIteratorCreate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("namingCtxBindingIteratorCreate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("namingCtxBindingIteratorCreate"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("namingCtxRebindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("namingCtxRebindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("namingCtxRebindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("namingCtxRebindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("namingCtxRebindctxAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("namingCtxRebindctxAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("namingCtxRebindctxAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("namingCtxRebindctxAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("namingCtxResolveCannotNarrowToCtx"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("namingCtxResolveCannotNarrowToCtx"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("namingCtxResolveCannotNarrowToCtx"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("namingCtxResolveCannotNarrowToCtx"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("objectIsNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("objectIsNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("objectIsNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objectIsNull"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("resolveConversionFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("resolveConversionFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("resolveConversionFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("resolveConversionFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("resolveFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("resolveFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("resolveFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("resolveFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("transNcBindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("transNcBindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("transNcBindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNcBindAlreadyBound"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("transNcDestroyGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("transNcDestroyGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("transNcDestroyGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNcDestroyGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("transNcListGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("transNcListGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("transNcListGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNcListGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("transNcNewctxGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("transNcNewctxGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("transNcNewctxGotExc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNcNewctxGotExc"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("transNsCannotCreateInitialNc"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("transNsCannotCreateInitialNc"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("transNsCannotCreateInitialNc"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNsCannotCreateInitialNc"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("transNsCannotCreateInitialNcSys"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("transNsCannotCreateInitialNcSys"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("transNsCannotCreateInitialNcSys"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transNsCannotCreateInitialNcSys"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("transientNameServerBadHost"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("transientNameServerBadHost"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("transientNameServerBadHost"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transientNameServerBadHost"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("transientNameServerBadPort"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("transientNameServerBadPort"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("transientNameServerBadPort"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("transientNameServerBadPort"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unbindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unbindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unbindFailure"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unbindFailure"), //
	};

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto bindFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bindFailure")] != -1);
		return call<R>("bindFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto bindUpdateContextFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bindUpdateContextFailed")] != -1);
		return call<R>("bindUpdateContextFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::NamingSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto insBadAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insBadAddress")] != -1);
		return call<R>("insBadAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto insBadSchemeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insBadSchemeName")] != -1);
		return call<R>("insBadSchemeName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto insBadSchemeSpecificPart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insBadSchemeSpecificPart")] != -1);
		return call<R>("insBadSchemeSpecificPart", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto insOther(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insOther")] != -1);
		return call<R>("insOther", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto namingCtxBadBindingtype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("namingCtxBadBindingtype")] != -1);
		return call<R>("namingCtxBadBindingtype", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto namingCtxBindingIteratorCreate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("namingCtxBindingIteratorCreate")] != -1);
		return call<R>("namingCtxBindingIteratorCreate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto namingCtxRebindAlreadyBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("namingCtxRebindAlreadyBound")] != -1);
		return call<R>("namingCtxRebindAlreadyBound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto namingCtxRebindctxAlreadyBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("namingCtxRebindctxAlreadyBound")] != -1);
		return call<R>("namingCtxRebindctxAlreadyBound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto namingCtxResolveCannotNarrowToCtx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("namingCtxResolveCannotNarrowToCtx")] != -1);
		return call<R>("namingCtxResolveCannotNarrowToCtx", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto objectIsNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectIsNull")] != -1);
		return call<R>("objectIsNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto resolveConversionFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveConversionFailure")] != -1);
		return call<R>("resolveConversionFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto resolveFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveFailure")] != -1);
		return call<R>("resolveFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto transNcBindAlreadyBound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNcBindAlreadyBound")] != -1);
		return call<R>("transNcBindAlreadyBound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto transNcDestroyGotExc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNcDestroyGotExc")] != -1);
		return call<R>("transNcDestroyGotExc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto transNcListGotExc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNcListGotExc")] != -1);
		return call<R>("transNcListGotExc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto transNcNewctxGotExc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNcNewctxGotExc")] != -1);
		return call<R>("transNcNewctxGotExc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto transNsCannotCreateInitialNc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNsCannotCreateInitialNc")] != -1);
		return call<R>("transNsCannotCreateInitialNc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto transNsCannotCreateInitialNcSys(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transNsCannotCreateInitialNcSys")] != -1);
		return call<R>("transNsCannotCreateInitialNcSys", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto transientNameServerBadHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transientNameServerBadHost")] != -1);
		return call<R>("transientNameServerBadHost", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto transientNameServerBadPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transientNameServerBadPort")] != -1);
		return call<R>("transientNameServerBadPort", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unbindFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unbindFailure")] != -1);
		return call<R>("unbindFailure", std::forward<Args>(args)...);
	}

};

#endif
