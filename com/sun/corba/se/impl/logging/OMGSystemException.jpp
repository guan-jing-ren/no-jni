#ifndef com_sun_corba_se_impl_logging_OMGSystemException_HPP
#define com_sun_corba_se_impl_logging_OMGSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::OMGSystemException : public jObject<::com::sun::corba::se::impl::logging::OMGSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "OMGSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("ADAPTER_ACTIVATOR_EXCEPTION"), //
		jField<::jint>("BAD_ARGUMENTS_CALL"), //
		jField<::jint>("BAD_CTX_CALL"), //
		jField<::jint>("BAD_INVOKE"), //
		jField<::jint>("BAD_MEMBER_TYPECODE"), //
		jField<::jint>("BAD_NVLIST"), //
		jField<::jint>("BAD_ONEWAY_DEFINITION"), //
		jField<::jint>("BAD_OPERATION_AFTER_SHUTDOWN"), //
		jField<::jint>("BAD_POLICY_INCARNATE"), //
		jField<::jint>("BAD_POLL_AFTER"), //
		jField<::jint>("BAD_POLL_BEFORE"), //
		jField<::jint>("BAD_POLL_SYNC"), //
		jField<::jint>("BAD_RESULT_CALL"), //
		jField<::jint>("BAD_SEND"), //
		jField<::jint>("BAD_SERVANT_MANAGER_TYPE"), //
		jField<::jint>("BAD_SERVANT_TYPE"), //
		jField<::jint>("BAD_SET_SERVANT_MANAGER"), //
		jField<::jint>("BIO_GENOMIC_NO_ITERATOR"), //
		jField<::jint>("BIO_META_NOT_AVAILABLE"), //
		jField<::jint>("BIO_NOT_AVAILABLE"), //
		jField<::jint>("BIO_RESET"), //
		jField<::jint>("CHAR_NOT_IN_CODESET"), //
		jField<::jint>("CODESET_COMPONENT_REQUIRED"), //
		jField<::jint>("CREATE_POA_DESTROY"), //
		jField<::jint>("CTX_ILLEGAL_NAME"), //
		jField<::jint>("CTX_ILLEGAL_PROPERTY_NAME"), //
		jField<::jint>("CTX_ILLEGAL_SEARCH_STRING"), //
		jField<::jint>("CTX_NON_EMPTY"), //
		jField<::jint>("DEP_PREVENT_DESTRUCTION"), //
		jField<::jint>("DESTROY_INDESTRUCTIBLE"), //
		jField<::jint>("DII_FOR_IMPLICIT_OPERATION"), //
		jField<::jint>("DII_LOCAL_OBJECT"), //
		jField<::jint>("ENUM_OUT_OF_RANGE"), //
		jField<::jint>("IDL_CONTEXT_NOT_FOUND"), //
		jField<::jint>("ILLEGAL_PARAMETER"), //
		jField<::jint>("ILLEGAL_SERVICE_CONTEXT"), //
		jField<::jint>("INCOMPATIBLE_VALUE_IMPL"), //
		jField<::jint>("INCOMPLETE_TYPECODE"), //
		jField<::jint>("INVALID_COMPONENT_ID"), //
		jField<::jint>("INVALID_OBJECT_ID"), //
		jField<::jint>("INVALID_PI_CALL1"), //
		jField<::jint>("INVALID_PI_CALL2"), //
		jField<::jint>("INVALID_PI_CALL3"), //
		jField<::jint>("INVALID_PI_CALL4"), //
		jField<::jint>("INVALID_PROFILE_ID"), //
		jField<::jint>("INVALID_SERVICE_CONTEXT_ID"), //
		jField<::jint>("INVALID_STREAM_FORMAT_VERSION"), //
		jField<::jint>("IOR_POLICY_RECONCILE_ERROR"), //
		jField<::jint>("IR_DERIVE_ABS_INT_BASE"), //
		jField<::jint>("IR_VALUE_SUPPORT"), //
		jField<::jint>("MARSHALL_INCOMPLETE_TYPECODE"), //
		jField<::jint>("MISSING_LOCAL_VALUE_IMPL"), //
		jField<::jint>("NAME_CLASH"), //
		jField<::jint>("NAME_USED_IFR"), //
		jField<::jint>("NOT_AN_OBJECT_IMPL"), //
		jField<::jint>("NOT_A_VALUEINPUTSTREAM"), //
		jField<::jint>("NOT_A_VALUEOUTPUTSTREAM"), //
		jField<::jint>("NOT_SERIALIZABLE"), //
		jField<::jint>("NO_CLIENT_WCHAR_CODESET_CTX"), //
		jField<::jint>("NO_CONNECTION_PRIORITY"), //
		jField<::jint>("NO_DEFAULT_SERVANT"), //
		jField<::jint>("NO_INTERFACE_IN_IR"), //
		jField<::jint>("NO_IR"), //
		jField<::jint>("NO_MATCHING_IDL_CONTEXT"), //
		jField<::jint>("NO_OBJECT_ADAPTOR"), //
		jField<::jint>("NO_POLICY_FACTORY"), //
		jField<::jint>("NO_SERVANT_MANAGER"), //
		jField<::jint>("NO_SERVER_WCHAR_CODESET_CMP"), //
		jField<::jint>("NO_USABLE_PROFILE"), //
		jField<::jint>("NO_USABLE_PROFILE_2"), //
		jField<::jint>("NO_USABLE_PROFILE_3"), //
		jField<::jint>("NULL_SERVANT_RETURNED"), //
		jField<::jint>("OBJECT_ADAPTER_INACTIVE"), //
		jField<::jint>("OPERATION_UNKNOWN_TO_TARGET"), //
		jField<::jint>("PI_EXC_COMP_ESTABLISHED"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED1"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED2"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED3"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED4"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED5"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED6"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED7"), //
		jField<::jint>("PI_OPERATION_NOT_SUPPORTED8"), //
		jField<::jint>("PI_UNKNOWN_USER_EXCEPTION"), //
		jField<::jint>("POA_DESTROYED"), //
		jField<::jint>("POA_REQUEST_DISCARD"), //
		jField<::jint>("POLICY_FACTORY_REG_FAILED"), //
		jField<::jint>("POLICY_TYPE_DUPLICATE"), //
		jField<::jint>("POLICY_UNKNOWN"), //
		jField<::jint>("PRIORITY_MAP_FAILRE"), //
		jField<::jint>("PRIORITY_RANGE_RESTRICT"), //
		jField<::jint>("PRIORITY_REASSIGN"), //
		jField<::jint>("REQUEST_CANCELLED"), //
		jField<::jint>("RID_ALREADY_DEFINED"), //
		jField<::jint>("RIR_WITH_NULL_OBJECT"), //
		jField<::jint>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE1"), //
		jField<::jint>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE2"), //
		jField<::jint>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE3"), //
		jField<::jint>("SERVICE_CONTEXT_ADD_FAILED"), //
		jField<::jint>("SET_EXCEPTION_BAD_ANY"), //
		jField<::jint>("SET_EXCEPTION_UNLISTED"), //
		jField<::jint>("SET_RESULT_BEFORE_CTX"), //
		jField<::jint>("SHUTDOWN_WAIT_FOR_COMPLETION_DEADLOCK"), //
		jField<::jint>("SO_BAD_ADDRESS"), //
		jField<::jint>("SO_BAD_SCHEMA_SPECIFIC"), //
		jField<::jint>("SO_BAD_SCHEME_NAME"), //
		jField<::jint>("SO_NON_SPECIFIC"), //
		jField<::jint>("TARGET_NOT_CONTAINER"), //
		jField<::jint>("TC_UNION_BAD_DISC"), //
		jField<::jint>("TC_UNION_DUP_LABEL"), //
		jField<::jint>("TC_UNION_INCOMPATIBLE"), //
		jField<::jint>("TYPECODE_BAD_NAME"), //
		jField<::jint>("TYPECODE_BAD_REPID"), //
		jField<::jint>("TYPECODE_INV_MEMBER"), //
		jField<::jint>("UNABLE_LOCATE_VALUE_FACTORY"), //
		jField<::jint>("UNABLE_REGISTER_VALUE_FACTORY"), //
		jField<::jint>("UNION_BAD_DISCRIMINATOR"), //
		jField<::jint>("UNKNOWN_USER_EXCEPTION"), //
		jField<::jint>("UNREGISTERED_VALUE_AS_OBJREF"), //
		jField<::jint>("UNSUPPORTED_FORMAT_VERSION"), //
		jField<::jint>("UNSUPPORTED_SYSTEM_EXCEPTION"), //
		jField<::jint>("WCHAR_BAD_GIOP_VERSION_RETURNED"), //
		jField<::jint>("WCHAR_BAD_GIOP_VERSION_SENT"), //
		jField<::jint>("XA_CALL_INVAL"), //
		jField<::jint>("XA_END_TRUE_ROLLBACK_DEFERRED"), //
		jField<::jint>("XA_NOTA"), //
		jField<::jint>("XA_RB"), //
		jField<::jint>("XA_RMERR"), //
		jField<::jint>("XA_RMFAIL"), //
		jField<::jint>("XA_START_OUTSIZE"), //
		jField<::jint>("XA_START_PROTO"), //
	};

	template<typename F = ::jint>
	static auto ADAPTER_ACTIVATOR_EXCEPTION() {
		static_assert(field_signatures[jField<F>("ADAPTER_ACTIVATOR_EXCEPTION")] != -1);
		return sat<F>("ADAPTER_ACTIVATOR_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto BAD_ARGUMENTS_CALL() {
		static_assert(field_signatures[jField<F>("BAD_ARGUMENTS_CALL")] != -1);
		return sat<F>("BAD_ARGUMENTS_CALL");
	}

	template<typename F = ::jint>
	static auto BAD_CTX_CALL() {
		static_assert(field_signatures[jField<F>("BAD_CTX_CALL")] != -1);
		return sat<F>("BAD_CTX_CALL");
	}

	template<typename F = ::jint>
	static auto BAD_INVOKE() {
		static_assert(field_signatures[jField<F>("BAD_INVOKE")] != -1);
		return sat<F>("BAD_INVOKE");
	}

	template<typename F = ::jint>
	static auto BAD_MEMBER_TYPECODE() {
		static_assert(field_signatures[jField<F>("BAD_MEMBER_TYPECODE")] != -1);
		return sat<F>("BAD_MEMBER_TYPECODE");
	}

	template<typename F = ::jint>
	static auto BAD_NVLIST() {
		static_assert(field_signatures[jField<F>("BAD_NVLIST")] != -1);
		return sat<F>("BAD_NVLIST");
	}

	template<typename F = ::jint>
	static auto BAD_ONEWAY_DEFINITION() {
		static_assert(field_signatures[jField<F>("BAD_ONEWAY_DEFINITION")] != -1);
		return sat<F>("BAD_ONEWAY_DEFINITION");
	}

	template<typename F = ::jint>
	static auto BAD_OPERATION_AFTER_SHUTDOWN() {
		static_assert(field_signatures[jField<F>("BAD_OPERATION_AFTER_SHUTDOWN")] != -1);
		return sat<F>("BAD_OPERATION_AFTER_SHUTDOWN");
	}

	template<typename F = ::jint>
	static auto BAD_POLICY_INCARNATE() {
		static_assert(field_signatures[jField<F>("BAD_POLICY_INCARNATE")] != -1);
		return sat<F>("BAD_POLICY_INCARNATE");
	}

	template<typename F = ::jint>
	static auto BAD_POLL_AFTER() {
		static_assert(field_signatures[jField<F>("BAD_POLL_AFTER")] != -1);
		return sat<F>("BAD_POLL_AFTER");
	}

	template<typename F = ::jint>
	static auto BAD_POLL_BEFORE() {
		static_assert(field_signatures[jField<F>("BAD_POLL_BEFORE")] != -1);
		return sat<F>("BAD_POLL_BEFORE");
	}

	template<typename F = ::jint>
	static auto BAD_POLL_SYNC() {
		static_assert(field_signatures[jField<F>("BAD_POLL_SYNC")] != -1);
		return sat<F>("BAD_POLL_SYNC");
	}

	template<typename F = ::jint>
	static auto BAD_RESULT_CALL() {
		static_assert(field_signatures[jField<F>("BAD_RESULT_CALL")] != -1);
		return sat<F>("BAD_RESULT_CALL");
	}

	template<typename F = ::jint>
	static auto BAD_SEND() {
		static_assert(field_signatures[jField<F>("BAD_SEND")] != -1);
		return sat<F>("BAD_SEND");
	}

	template<typename F = ::jint>
	static auto BAD_SERVANT_MANAGER_TYPE() {
		static_assert(field_signatures[jField<F>("BAD_SERVANT_MANAGER_TYPE")] != -1);
		return sat<F>("BAD_SERVANT_MANAGER_TYPE");
	}

	template<typename F = ::jint>
	static auto BAD_SERVANT_TYPE() {
		static_assert(field_signatures[jField<F>("BAD_SERVANT_TYPE")] != -1);
		return sat<F>("BAD_SERVANT_TYPE");
	}

	template<typename F = ::jint>
	static auto BAD_SET_SERVANT_MANAGER() {
		static_assert(field_signatures[jField<F>("BAD_SET_SERVANT_MANAGER")] != -1);
		return sat<F>("BAD_SET_SERVANT_MANAGER");
	}

	template<typename F = ::jint>
	static auto BIO_GENOMIC_NO_ITERATOR() {
		static_assert(field_signatures[jField<F>("BIO_GENOMIC_NO_ITERATOR")] != -1);
		return sat<F>("BIO_GENOMIC_NO_ITERATOR");
	}

	template<typename F = ::jint>
	static auto BIO_META_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("BIO_META_NOT_AVAILABLE")] != -1);
		return sat<F>("BIO_META_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto BIO_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("BIO_NOT_AVAILABLE")] != -1);
		return sat<F>("BIO_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto BIO_RESET() {
		static_assert(field_signatures[jField<F>("BIO_RESET")] != -1);
		return sat<F>("BIO_RESET");
	}

	template<typename F = ::jint>
	static auto CHAR_NOT_IN_CODESET() {
		static_assert(field_signatures[jField<F>("CHAR_NOT_IN_CODESET")] != -1);
		return sat<F>("CHAR_NOT_IN_CODESET");
	}

	template<typename F = ::jint>
	static auto CODESET_COMPONENT_REQUIRED() {
		static_assert(field_signatures[jField<F>("CODESET_COMPONENT_REQUIRED")] != -1);
		return sat<F>("CODESET_COMPONENT_REQUIRED");
	}

	template<typename F = ::jint>
	static auto CREATE_POA_DESTROY() {
		static_assert(field_signatures[jField<F>("CREATE_POA_DESTROY")] != -1);
		return sat<F>("CREATE_POA_DESTROY");
	}

	template<typename F = ::jint>
	static auto CTX_ILLEGAL_NAME() {
		static_assert(field_signatures[jField<F>("CTX_ILLEGAL_NAME")] != -1);
		return sat<F>("CTX_ILLEGAL_NAME");
	}

	template<typename F = ::jint>
	static auto CTX_ILLEGAL_PROPERTY_NAME() {
		static_assert(field_signatures[jField<F>("CTX_ILLEGAL_PROPERTY_NAME")] != -1);
		return sat<F>("CTX_ILLEGAL_PROPERTY_NAME");
	}

	template<typename F = ::jint>
	static auto CTX_ILLEGAL_SEARCH_STRING() {
		static_assert(field_signatures[jField<F>("CTX_ILLEGAL_SEARCH_STRING")] != -1);
		return sat<F>("CTX_ILLEGAL_SEARCH_STRING");
	}

	template<typename F = ::jint>
	static auto CTX_NON_EMPTY() {
		static_assert(field_signatures[jField<F>("CTX_NON_EMPTY")] != -1);
		return sat<F>("CTX_NON_EMPTY");
	}

	template<typename F = ::jint>
	static auto DEP_PREVENT_DESTRUCTION() {
		static_assert(field_signatures[jField<F>("DEP_PREVENT_DESTRUCTION")] != -1);
		return sat<F>("DEP_PREVENT_DESTRUCTION");
	}

	template<typename F = ::jint>
	static auto DESTROY_INDESTRUCTIBLE() {
		static_assert(field_signatures[jField<F>("DESTROY_INDESTRUCTIBLE")] != -1);
		return sat<F>("DESTROY_INDESTRUCTIBLE");
	}

	template<typename F = ::jint>
	static auto DII_FOR_IMPLICIT_OPERATION() {
		static_assert(field_signatures[jField<F>("DII_FOR_IMPLICIT_OPERATION")] != -1);
		return sat<F>("DII_FOR_IMPLICIT_OPERATION");
	}

	template<typename F = ::jint>
	static auto DII_LOCAL_OBJECT() {
		static_assert(field_signatures[jField<F>("DII_LOCAL_OBJECT")] != -1);
		return sat<F>("DII_LOCAL_OBJECT");
	}

	template<typename F = ::jint>
	static auto ENUM_OUT_OF_RANGE() {
		static_assert(field_signatures[jField<F>("ENUM_OUT_OF_RANGE")] != -1);
		return sat<F>("ENUM_OUT_OF_RANGE");
	}

	template<typename F = ::jint>
	static auto IDL_CONTEXT_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("IDL_CONTEXT_NOT_FOUND")] != -1);
		return sat<F>("IDL_CONTEXT_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_PARAMETER() {
		static_assert(field_signatures[jField<F>("ILLEGAL_PARAMETER")] != -1);
		return sat<F>("ILLEGAL_PARAMETER");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_SERVICE_CONTEXT() {
		static_assert(field_signatures[jField<F>("ILLEGAL_SERVICE_CONTEXT")] != -1);
		return sat<F>("ILLEGAL_SERVICE_CONTEXT");
	}

	template<typename F = ::jint>
	static auto INCOMPATIBLE_VALUE_IMPL() {
		static_assert(field_signatures[jField<F>("INCOMPATIBLE_VALUE_IMPL")] != -1);
		return sat<F>("INCOMPATIBLE_VALUE_IMPL");
	}

	template<typename F = ::jint>
	static auto INCOMPLETE_TYPECODE() {
		static_assert(field_signatures[jField<F>("INCOMPLETE_TYPECODE")] != -1);
		return sat<F>("INCOMPLETE_TYPECODE");
	}

	template<typename F = ::jint>
	static auto INVALID_COMPONENT_ID() {
		static_assert(field_signatures[jField<F>("INVALID_COMPONENT_ID")] != -1);
		return sat<F>("INVALID_COMPONENT_ID");
	}

	template<typename F = ::jint>
	static auto INVALID_OBJECT_ID() {
		static_assert(field_signatures[jField<F>("INVALID_OBJECT_ID")] != -1);
		return sat<F>("INVALID_OBJECT_ID");
	}

	template<typename F = ::jint>
	static auto INVALID_PI_CALL1() {
		static_assert(field_signatures[jField<F>("INVALID_PI_CALL1")] != -1);
		return sat<F>("INVALID_PI_CALL1");
	}

	template<typename F = ::jint>
	static auto INVALID_PI_CALL2() {
		static_assert(field_signatures[jField<F>("INVALID_PI_CALL2")] != -1);
		return sat<F>("INVALID_PI_CALL2");
	}

	template<typename F = ::jint>
	static auto INVALID_PI_CALL3() {
		static_assert(field_signatures[jField<F>("INVALID_PI_CALL3")] != -1);
		return sat<F>("INVALID_PI_CALL3");
	}

	template<typename F = ::jint>
	static auto INVALID_PI_CALL4() {
		static_assert(field_signatures[jField<F>("INVALID_PI_CALL4")] != -1);
		return sat<F>("INVALID_PI_CALL4");
	}

	template<typename F = ::jint>
	static auto INVALID_PROFILE_ID() {
		static_assert(field_signatures[jField<F>("INVALID_PROFILE_ID")] != -1);
		return sat<F>("INVALID_PROFILE_ID");
	}

	template<typename F = ::jint>
	static auto INVALID_SERVICE_CONTEXT_ID() {
		static_assert(field_signatures[jField<F>("INVALID_SERVICE_CONTEXT_ID")] != -1);
		return sat<F>("INVALID_SERVICE_CONTEXT_ID");
	}

	template<typename F = ::jint>
	static auto INVALID_STREAM_FORMAT_VERSION() {
		static_assert(field_signatures[jField<F>("INVALID_STREAM_FORMAT_VERSION")] != -1);
		return sat<F>("INVALID_STREAM_FORMAT_VERSION");
	}

	template<typename F = ::jint>
	static auto IOR_POLICY_RECONCILE_ERROR() {
		static_assert(field_signatures[jField<F>("IOR_POLICY_RECONCILE_ERROR")] != -1);
		return sat<F>("IOR_POLICY_RECONCILE_ERROR");
	}

	template<typename F = ::jint>
	static auto IR_DERIVE_ABS_INT_BASE() {
		static_assert(field_signatures[jField<F>("IR_DERIVE_ABS_INT_BASE")] != -1);
		return sat<F>("IR_DERIVE_ABS_INT_BASE");
	}

	template<typename F = ::jint>
	static auto IR_VALUE_SUPPORT() {
		static_assert(field_signatures[jField<F>("IR_VALUE_SUPPORT")] != -1);
		return sat<F>("IR_VALUE_SUPPORT");
	}

	template<typename F = ::jint>
	static auto MARSHALL_INCOMPLETE_TYPECODE() {
		static_assert(field_signatures[jField<F>("MARSHALL_INCOMPLETE_TYPECODE")] != -1);
		return sat<F>("MARSHALL_INCOMPLETE_TYPECODE");
	}

	template<typename F = ::jint>
	static auto MISSING_LOCAL_VALUE_IMPL() {
		static_assert(field_signatures[jField<F>("MISSING_LOCAL_VALUE_IMPL")] != -1);
		return sat<F>("MISSING_LOCAL_VALUE_IMPL");
	}

	template<typename F = ::jint>
	static auto NAME_CLASH() {
		static_assert(field_signatures[jField<F>("NAME_CLASH")] != -1);
		return sat<F>("NAME_CLASH");
	}

	template<typename F = ::jint>
	static auto NAME_USED_IFR() {
		static_assert(field_signatures[jField<F>("NAME_USED_IFR")] != -1);
		return sat<F>("NAME_USED_IFR");
	}

	template<typename F = ::jint>
	static auto NOT_AN_OBJECT_IMPL() {
		static_assert(field_signatures[jField<F>("NOT_AN_OBJECT_IMPL")] != -1);
		return sat<F>("NOT_AN_OBJECT_IMPL");
	}

	template<typename F = ::jint>
	static auto NOT_A_VALUEINPUTSTREAM() {
		static_assert(field_signatures[jField<F>("NOT_A_VALUEINPUTSTREAM")] != -1);
		return sat<F>("NOT_A_VALUEINPUTSTREAM");
	}

	template<typename F = ::jint>
	static auto NOT_A_VALUEOUTPUTSTREAM() {
		static_assert(field_signatures[jField<F>("NOT_A_VALUEOUTPUTSTREAM")] != -1);
		return sat<F>("NOT_A_VALUEOUTPUTSTREAM");
	}

	template<typename F = ::jint>
	static auto NOT_SERIALIZABLE() {
		static_assert(field_signatures[jField<F>("NOT_SERIALIZABLE")] != -1);
		return sat<F>("NOT_SERIALIZABLE");
	}

	template<typename F = ::jint>
	static auto NO_CLIENT_WCHAR_CODESET_CTX() {
		static_assert(field_signatures[jField<F>("NO_CLIENT_WCHAR_CODESET_CTX")] != -1);
		return sat<F>("NO_CLIENT_WCHAR_CODESET_CTX");
	}

	template<typename F = ::jint>
	static auto NO_CONNECTION_PRIORITY() {
		static_assert(field_signatures[jField<F>("NO_CONNECTION_PRIORITY")] != -1);
		return sat<F>("NO_CONNECTION_PRIORITY");
	}

	template<typename F = ::jint>
	static auto NO_DEFAULT_SERVANT() {
		static_assert(field_signatures[jField<F>("NO_DEFAULT_SERVANT")] != -1);
		return sat<F>("NO_DEFAULT_SERVANT");
	}

	template<typename F = ::jint>
	static auto NO_INTERFACE_IN_IR() {
		static_assert(field_signatures[jField<F>("NO_INTERFACE_IN_IR")] != -1);
		return sat<F>("NO_INTERFACE_IN_IR");
	}

	template<typename F = ::jint>
	static auto NO_IR() {
		static_assert(field_signatures[jField<F>("NO_IR")] != -1);
		return sat<F>("NO_IR");
	}

	template<typename F = ::jint>
	static auto NO_MATCHING_IDL_CONTEXT() {
		static_assert(field_signatures[jField<F>("NO_MATCHING_IDL_CONTEXT")] != -1);
		return sat<F>("NO_MATCHING_IDL_CONTEXT");
	}

	template<typename F = ::jint>
	static auto NO_OBJECT_ADAPTOR() {
		static_assert(field_signatures[jField<F>("NO_OBJECT_ADAPTOR")] != -1);
		return sat<F>("NO_OBJECT_ADAPTOR");
	}

	template<typename F = ::jint>
	static auto NO_POLICY_FACTORY() {
		static_assert(field_signatures[jField<F>("NO_POLICY_FACTORY")] != -1);
		return sat<F>("NO_POLICY_FACTORY");
	}

	template<typename F = ::jint>
	static auto NO_SERVANT_MANAGER() {
		static_assert(field_signatures[jField<F>("NO_SERVANT_MANAGER")] != -1);
		return sat<F>("NO_SERVANT_MANAGER");
	}

	template<typename F = ::jint>
	static auto NO_SERVER_WCHAR_CODESET_CMP() {
		static_assert(field_signatures[jField<F>("NO_SERVER_WCHAR_CODESET_CMP")] != -1);
		return sat<F>("NO_SERVER_WCHAR_CODESET_CMP");
	}

	template<typename F = ::jint>
	static auto NO_USABLE_PROFILE() {
		static_assert(field_signatures[jField<F>("NO_USABLE_PROFILE")] != -1);
		return sat<F>("NO_USABLE_PROFILE");
	}

	template<typename F = ::jint>
	static auto NO_USABLE_PROFILE_2() {
		static_assert(field_signatures[jField<F>("NO_USABLE_PROFILE_2")] != -1);
		return sat<F>("NO_USABLE_PROFILE_2");
	}

	template<typename F = ::jint>
	static auto NO_USABLE_PROFILE_3() {
		static_assert(field_signatures[jField<F>("NO_USABLE_PROFILE_3")] != -1);
		return sat<F>("NO_USABLE_PROFILE_3");
	}

	template<typename F = ::jint>
	static auto NULL_SERVANT_RETURNED() {
		static_assert(field_signatures[jField<F>("NULL_SERVANT_RETURNED")] != -1);
		return sat<F>("NULL_SERVANT_RETURNED");
	}

	template<typename F = ::jint>
	static auto OBJECT_ADAPTER_INACTIVE() {
		static_assert(field_signatures[jField<F>("OBJECT_ADAPTER_INACTIVE")] != -1);
		return sat<F>("OBJECT_ADAPTER_INACTIVE");
	}

	template<typename F = ::jint>
	static auto OPERATION_UNKNOWN_TO_TARGET() {
		static_assert(field_signatures[jField<F>("OPERATION_UNKNOWN_TO_TARGET")] != -1);
		return sat<F>("OPERATION_UNKNOWN_TO_TARGET");
	}

	template<typename F = ::jint>
	static auto PI_EXC_COMP_ESTABLISHED() {
		static_assert(field_signatures[jField<F>("PI_EXC_COMP_ESTABLISHED")] != -1);
		return sat<F>("PI_EXC_COMP_ESTABLISHED");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED1() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED1")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED1");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED2() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED2")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED2");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED3() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED3")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED3");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED4() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED4")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED4");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED5() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED5")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED5");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED6() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED6")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED6");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED7() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED7")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED7");
	}

	template<typename F = ::jint>
	static auto PI_OPERATION_NOT_SUPPORTED8() {
		static_assert(field_signatures[jField<F>("PI_OPERATION_NOT_SUPPORTED8")] != -1);
		return sat<F>("PI_OPERATION_NOT_SUPPORTED8");
	}

	template<typename F = ::jint>
	static auto PI_UNKNOWN_USER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("PI_UNKNOWN_USER_EXCEPTION")] != -1);
		return sat<F>("PI_UNKNOWN_USER_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto POA_DESTROYED() {
		static_assert(field_signatures[jField<F>("POA_DESTROYED")] != -1);
		return sat<F>("POA_DESTROYED");
	}

	template<typename F = ::jint>
	static auto POA_REQUEST_DISCARD() {
		static_assert(field_signatures[jField<F>("POA_REQUEST_DISCARD")] != -1);
		return sat<F>("POA_REQUEST_DISCARD");
	}

	template<typename F = ::jint>
	static auto POLICY_FACTORY_REG_FAILED() {
		static_assert(field_signatures[jField<F>("POLICY_FACTORY_REG_FAILED")] != -1);
		return sat<F>("POLICY_FACTORY_REG_FAILED");
	}

	template<typename F = ::jint>
	static auto POLICY_TYPE_DUPLICATE() {
		static_assert(field_signatures[jField<F>("POLICY_TYPE_DUPLICATE")] != -1);
		return sat<F>("POLICY_TYPE_DUPLICATE");
	}

	template<typename F = ::jint>
	static auto POLICY_UNKNOWN() {
		static_assert(field_signatures[jField<F>("POLICY_UNKNOWN")] != -1);
		return sat<F>("POLICY_UNKNOWN");
	}

	template<typename F = ::jint>
	static auto PRIORITY_MAP_FAILRE() {
		static_assert(field_signatures[jField<F>("PRIORITY_MAP_FAILRE")] != -1);
		return sat<F>("PRIORITY_MAP_FAILRE");
	}

	template<typename F = ::jint>
	static auto PRIORITY_RANGE_RESTRICT() {
		static_assert(field_signatures[jField<F>("PRIORITY_RANGE_RESTRICT")] != -1);
		return sat<F>("PRIORITY_RANGE_RESTRICT");
	}

	template<typename F = ::jint>
	static auto PRIORITY_REASSIGN() {
		static_assert(field_signatures[jField<F>("PRIORITY_REASSIGN")] != -1);
		return sat<F>("PRIORITY_REASSIGN");
	}

	template<typename F = ::jint>
	static auto REQUEST_CANCELLED() {
		static_assert(field_signatures[jField<F>("REQUEST_CANCELLED")] != -1);
		return sat<F>("REQUEST_CANCELLED");
	}

	template<typename F = ::jint>
	static auto RID_ALREADY_DEFINED() {
		static_assert(field_signatures[jField<F>("RID_ALREADY_DEFINED")] != -1);
		return sat<F>("RID_ALREADY_DEFINED");
	}

	template<typename F = ::jint>
	static auto RIR_WITH_NULL_OBJECT() {
		static_assert(field_signatures[jField<F>("RIR_WITH_NULL_OBJECT")] != -1);
		return sat<F>("RIR_WITH_NULL_OBJECT");
	}

	template<typename F = ::jint>
	static auto RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE1() {
		static_assert(field_signatures[jField<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE1")] != -1);
		return sat<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE1");
	}

	template<typename F = ::jint>
	static auto RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE2() {
		static_assert(field_signatures[jField<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE2")] != -1);
		return sat<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE2");
	}

	template<typename F = ::jint>
	static auto RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE3() {
		static_assert(field_signatures[jField<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE3")] != -1);
		return sat<F>("RMIIIOP_OPTIONAL_DATA_INCOMPATIBLE3");
	}

	template<typename F = ::jint>
	static auto SERVICE_CONTEXT_ADD_FAILED() {
		static_assert(field_signatures[jField<F>("SERVICE_CONTEXT_ADD_FAILED")] != -1);
		return sat<F>("SERVICE_CONTEXT_ADD_FAILED");
	}

	template<typename F = ::jint>
	static auto SET_EXCEPTION_BAD_ANY() {
		static_assert(field_signatures[jField<F>("SET_EXCEPTION_BAD_ANY")] != -1);
		return sat<F>("SET_EXCEPTION_BAD_ANY");
	}

	template<typename F = ::jint>
	static auto SET_EXCEPTION_UNLISTED() {
		static_assert(field_signatures[jField<F>("SET_EXCEPTION_UNLISTED")] != -1);
		return sat<F>("SET_EXCEPTION_UNLISTED");
	}

	template<typename F = ::jint>
	static auto SET_RESULT_BEFORE_CTX() {
		static_assert(field_signatures[jField<F>("SET_RESULT_BEFORE_CTX")] != -1);
		return sat<F>("SET_RESULT_BEFORE_CTX");
	}

	template<typename F = ::jint>
	static auto SHUTDOWN_WAIT_FOR_COMPLETION_DEADLOCK() {
		static_assert(field_signatures[jField<F>("SHUTDOWN_WAIT_FOR_COMPLETION_DEADLOCK")] != -1);
		return sat<F>("SHUTDOWN_WAIT_FOR_COMPLETION_DEADLOCK");
	}

	template<typename F = ::jint>
	static auto SO_BAD_ADDRESS() {
		static_assert(field_signatures[jField<F>("SO_BAD_ADDRESS")] != -1);
		return sat<F>("SO_BAD_ADDRESS");
	}

	template<typename F = ::jint>
	static auto SO_BAD_SCHEMA_SPECIFIC() {
		static_assert(field_signatures[jField<F>("SO_BAD_SCHEMA_SPECIFIC")] != -1);
		return sat<F>("SO_BAD_SCHEMA_SPECIFIC");
	}

	template<typename F = ::jint>
	static auto SO_BAD_SCHEME_NAME() {
		static_assert(field_signatures[jField<F>("SO_BAD_SCHEME_NAME")] != -1);
		return sat<F>("SO_BAD_SCHEME_NAME");
	}

	template<typename F = ::jint>
	static auto SO_NON_SPECIFIC() {
		static_assert(field_signatures[jField<F>("SO_NON_SPECIFIC")] != -1);
		return sat<F>("SO_NON_SPECIFIC");
	}

	template<typename F = ::jint>
	static auto TARGET_NOT_CONTAINER() {
		static_assert(field_signatures[jField<F>("TARGET_NOT_CONTAINER")] != -1);
		return sat<F>("TARGET_NOT_CONTAINER");
	}

	template<typename F = ::jint>
	static auto TC_UNION_BAD_DISC() {
		static_assert(field_signatures[jField<F>("TC_UNION_BAD_DISC")] != -1);
		return sat<F>("TC_UNION_BAD_DISC");
	}

	template<typename F = ::jint>
	static auto TC_UNION_DUP_LABEL() {
		static_assert(field_signatures[jField<F>("TC_UNION_DUP_LABEL")] != -1);
		return sat<F>("TC_UNION_DUP_LABEL");
	}

	template<typename F = ::jint>
	static auto TC_UNION_INCOMPATIBLE() {
		static_assert(field_signatures[jField<F>("TC_UNION_INCOMPATIBLE")] != -1);
		return sat<F>("TC_UNION_INCOMPATIBLE");
	}

	template<typename F = ::jint>
	static auto TYPECODE_BAD_NAME() {
		static_assert(field_signatures[jField<F>("TYPECODE_BAD_NAME")] != -1);
		return sat<F>("TYPECODE_BAD_NAME");
	}

	template<typename F = ::jint>
	static auto TYPECODE_BAD_REPID() {
		static_assert(field_signatures[jField<F>("TYPECODE_BAD_REPID")] != -1);
		return sat<F>("TYPECODE_BAD_REPID");
	}

	template<typename F = ::jint>
	static auto TYPECODE_INV_MEMBER() {
		static_assert(field_signatures[jField<F>("TYPECODE_INV_MEMBER")] != -1);
		return sat<F>("TYPECODE_INV_MEMBER");
	}

	template<typename F = ::jint>
	static auto UNABLE_LOCATE_VALUE_FACTORY() {
		static_assert(field_signatures[jField<F>("UNABLE_LOCATE_VALUE_FACTORY")] != -1);
		return sat<F>("UNABLE_LOCATE_VALUE_FACTORY");
	}

	template<typename F = ::jint>
	static auto UNABLE_REGISTER_VALUE_FACTORY() {
		static_assert(field_signatures[jField<F>("UNABLE_REGISTER_VALUE_FACTORY")] != -1);
		return sat<F>("UNABLE_REGISTER_VALUE_FACTORY");
	}

	template<typename F = ::jint>
	static auto UNION_BAD_DISCRIMINATOR() {
		static_assert(field_signatures[jField<F>("UNION_BAD_DISCRIMINATOR")] != -1);
		return sat<F>("UNION_BAD_DISCRIMINATOR");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_USER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNKNOWN_USER_EXCEPTION")] != -1);
		return sat<F>("UNKNOWN_USER_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto UNREGISTERED_VALUE_AS_OBJREF() {
		static_assert(field_signatures[jField<F>("UNREGISTERED_VALUE_AS_OBJREF")] != -1);
		return sat<F>("UNREGISTERED_VALUE_AS_OBJREF");
	}

	template<typename F = ::jint>
	static auto UNSUPPORTED_FORMAT_VERSION() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_FORMAT_VERSION")] != -1);
		return sat<F>("UNSUPPORTED_FORMAT_VERSION");
	}

	template<typename F = ::jint>
	static auto UNSUPPORTED_SYSTEM_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_SYSTEM_EXCEPTION")] != -1);
		return sat<F>("UNSUPPORTED_SYSTEM_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto WCHAR_BAD_GIOP_VERSION_RETURNED() {
		static_assert(field_signatures[jField<F>("WCHAR_BAD_GIOP_VERSION_RETURNED")] != -1);
		return sat<F>("WCHAR_BAD_GIOP_VERSION_RETURNED");
	}

	template<typename F = ::jint>
	static auto WCHAR_BAD_GIOP_VERSION_SENT() {
		static_assert(field_signatures[jField<F>("WCHAR_BAD_GIOP_VERSION_SENT")] != -1);
		return sat<F>("WCHAR_BAD_GIOP_VERSION_SENT");
	}

	template<typename F = ::jint>
	static auto XA_CALL_INVAL() {
		static_assert(field_signatures[jField<F>("XA_CALL_INVAL")] != -1);
		return sat<F>("XA_CALL_INVAL");
	}

	template<typename F = ::jint>
	static auto XA_END_TRUE_ROLLBACK_DEFERRED() {
		static_assert(field_signatures[jField<F>("XA_END_TRUE_ROLLBACK_DEFERRED")] != -1);
		return sat<F>("XA_END_TRUE_ROLLBACK_DEFERRED");
	}

	template<typename F = ::jint>
	static auto XA_NOTA() {
		static_assert(field_signatures[jField<F>("XA_NOTA")] != -1);
		return sat<F>("XA_NOTA");
	}

	template<typename F = ::jint>
	static auto XA_RB() {
		static_assert(field_signatures[jField<F>("XA_RB")] != -1);
		return sat<F>("XA_RB");
	}

	template<typename F = ::jint>
	static auto XA_RMERR() {
		static_assert(field_signatures[jField<F>("XA_RMERR")] != -1);
		return sat<F>("XA_RMERR");
	}

	template<typename F = ::jint>
	static auto XA_RMFAIL() {
		static_assert(field_signatures[jField<F>("XA_RMFAIL")] != -1);
		return sat<F>("XA_RMFAIL");
	}

	template<typename F = ::jint>
	static auto XA_START_OUTSIZE() {
		static_assert(field_signatures[jField<F>("XA_START_OUTSIZE")] != -1);
		return sat<F>("XA_START_OUTSIZE");
	}

	template<typename F = ::jint>
	static auto XA_START_PROTO() {
		static_assert(field_signatures[jField<F>("XA_START_PROTO")] != -1);
		return sat<F>("XA_START_PROTO");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Object, ::java::lang::Object)>("adapterActivatorException"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("adapterActivatorException"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("adapterActivatorException"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("adapterActivatorException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badArgumentsCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badArgumentsCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badArgumentsCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badArgumentsCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badCtxCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badCtxCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badCtxCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badCtxCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badInvoke"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badInvoke"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badInvoke"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badInvoke"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE()>("badMemberTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::java::lang::Throwable)>("badMemberTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus)>("badMemberTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badMemberTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badNvlist"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("badOnewayDefinition"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("badOnewayDefinition"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("badOnewayDefinition"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badOnewayDefinition"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badOperationAfterShutdown"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badOperationAfterShutdown"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badOperationAfterShutdown"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badOperationAfterShutdown"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("badPolicyIncarnate"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("badPolicyIncarnate"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("badPolicyIncarnate"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badPolicyIncarnate"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badPollAfter"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badPollAfter"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badPollAfter"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badPollAfter"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badPollBefore"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badPollBefore"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badPollBefore"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badPollBefore"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badPollSync"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badPollSync"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badPollSync"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badPollSync"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badResultCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badResultCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badResultCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badResultCall"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badSend"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badSend"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badSend"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSend"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("badServantManagerType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("badServantManagerType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("badServantManagerType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badServantManagerType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("badServantType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("badServantType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("badServantType"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badServantType"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("badSetServantManager"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("badSetServantManager"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("badSetServantManager"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSetServantManager"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("bioGenomicNoIterator"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("bioGenomicNoIterator"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("bioGenomicNoIterator"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bioGenomicNoIterator"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("bioMetaNotAvailable"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("bioMetaNotAvailable"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("bioMetaNotAvailable"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bioMetaNotAvailable"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("bioNotAvailable"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("bioNotAvailable"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("bioNotAvailable"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bioNotAvailable"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("bioReset"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("bioReset"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("bioReset"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bioReset"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("charNotInCodeset"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("charNotInCodeset"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("charNotInCodeset"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("charNotInCodeset"), //
		jMethod<::org::omg::CORBA::INV_OBJREF()>("codesetComponentRequired"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable)>("codesetComponentRequired"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus)>("codesetComponentRequired"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("codesetComponentRequired"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("createPoaDestroy"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("createPoaDestroy"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("createPoaDestroy"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("createPoaDestroy"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("ctxIllegalName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("ctxIllegalName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("ctxIllegalName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ctxIllegalName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("ctxIllegalPropertyName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("ctxIllegalPropertyName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("ctxIllegalPropertyName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ctxIllegalPropertyName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("ctxIllegalSearchString"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("ctxIllegalSearchString"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("ctxIllegalSearchString"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ctxIllegalSearchString"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("ctxNonEmpty"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("ctxNonEmpty"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("ctxNonEmpty"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ctxNonEmpty"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("depPreventDestruction"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("depPreventDestruction"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("depPreventDestruction"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("depPreventDestruction"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("destroyIndestructible"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("destroyIndestructible"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("destroyIndestructible"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("destroyIndestructible"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("diiForImplicitOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("diiForImplicitOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("diiForImplicitOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("diiForImplicitOperation"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("diiLocalObject"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("diiLocalObject"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("diiLocalObject"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("diiLocalObject"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("enumOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("enumOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("enumOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("enumOutOfRange"), //
		jMethod<::com::sun::corba::se::impl::logging::OMGSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::OMGSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT()>("idlContextNotFound"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::java::lang::Throwable)>("idlContextNotFound"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::org::omg::CORBA::CompletionStatus)>("idlContextNotFound"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("idlContextNotFound"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE()>("illegalParameter"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::java::lang::Throwable)>("illegalParameter"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus)>("illegalParameter"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalParameter"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("illegalServiceContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("illegalServiceContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("illegalServiceContext"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalServiceContext"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("incompatibleValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("incompatibleValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("incompatibleValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("incompatibleValueImpl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("incompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("incompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("incompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("incompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("invalidComponentId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("invalidComponentId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidComponentId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidComponentId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("invalidObjectId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("invalidObjectId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("invalidObjectId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidObjectId"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("invalidPiCall1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("invalidPiCall1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("invalidPiCall1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidPiCall1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("invalidPiCall2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("invalidPiCall2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("invalidPiCall2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidPiCall2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("invalidPiCall3"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("invalidPiCall3"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("invalidPiCall3"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidPiCall3"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("invalidPiCall4"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("invalidPiCall4"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("invalidPiCall4"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidPiCall4"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("invalidProfileId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("invalidProfileId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("invalidProfileId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidProfileId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("invalidServiceContextId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("invalidServiceContextId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("invalidServiceContextId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidServiceContextId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("invalidStreamFormatVersion"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("invalidStreamFormatVersion"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidStreamFormatVersion"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidStreamFormatVersion"), //
		jMethod<::org::omg::CORBA::INV_POLICY()>("iorPolicyReconcileError"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::java::lang::Throwable)>("iorPolicyReconcileError"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus)>("iorPolicyReconcileError"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("iorPolicyReconcileError"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("irDeriveAbsIntBase"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("irDeriveAbsIntBase"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("irDeriveAbsIntBase"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("irDeriveAbsIntBase"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("irValueSupport"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("irValueSupport"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("irValueSupport"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("irValueSupport"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE()>("marshallIncompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::java::lang::Throwable)>("marshallIncompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus)>("marshallIncompleteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("marshallIncompleteTypecode"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("missingLocalValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("missingLocalValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("missingLocalValueImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("missingLocalValueImpl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("nameClash"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("nameClash"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("nameClash"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nameClash"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("nameUsedIfr"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("nameUsedIfr"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("nameUsedIfr"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nameUsedIfr"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("noClientWcharCodesetCtx"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("noClientWcharCodesetCtx"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("noClientWcharCodesetCtx"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noClientWcharCodesetCtx"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("noConnectionPriority"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("noConnectionPriority"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("noConnectionPriority"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noConnectionPriority"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("noDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("noDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("noDefaultServant"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noDefaultServant"), //
		jMethod<::org::omg::CORBA::INTF_REPOS()>("noInterfaceInIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::java::lang::Throwable)>("noInterfaceInIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::org::omg::CORBA::CompletionStatus)>("noInterfaceInIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noInterfaceInIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS()>("noIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::java::lang::Throwable)>("noIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::org::omg::CORBA::CompletionStatus)>("noIr"), //
		jMethod<::org::omg::CORBA::INTF_REPOS(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noIr"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT()>("noMatchingIdlContext"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::java::lang::Throwable)>("noMatchingIdlContext"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::org::omg::CORBA::CompletionStatus)>("noMatchingIdlContext"), //
		jMethod<::org::omg::CORBA::BAD_CONTEXT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noMatchingIdlContext"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("noObjectAdaptor"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("noObjectAdaptor"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("noObjectAdaptor"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noObjectAdaptor"), //
		jMethod<::org::omg::CORBA::INV_POLICY()>("noPolicyFactory"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::java::lang::Throwable)>("noPolicyFactory"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus)>("noPolicyFactory"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noPolicyFactory"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("noServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("noServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("noServantManager"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noServantManager"), //
		jMethod<::org::omg::CORBA::INV_OBJREF()>("noServerWcharCodesetCmp"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable)>("noServerWcharCodesetCmp"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus)>("noServerWcharCodesetCmp"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noServerWcharCodesetCmp"), //
		jMethod<::org::omg::CORBA::IMP_LIMIT()>("noUsableProfile"), //
		jMethod<::org::omg::CORBA::IMP_LIMIT(::java::lang::Throwable)>("noUsableProfile"), //
		jMethod<::org::omg::CORBA::IMP_LIMIT(::org::omg::CORBA::CompletionStatus)>("noUsableProfile"), //
		jMethod<::org::omg::CORBA::IMP_LIMIT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noUsableProfile"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("noUsableProfile2"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("noUsableProfile2"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("noUsableProfile2"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noUsableProfile2"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("noUsableProfile3"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("noUsableProfile3"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("noUsableProfile3"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noUsableProfile3"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("notAValueinputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("notAValueinputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("notAValueinputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("notAValueinputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("notAValueoutputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("notAValueoutputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("notAValueoutputstream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("notAValueoutputstream"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("notAnObjectImpl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("notAnObjectImpl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("notAnObjectImpl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("notAnObjectImpl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("notSerializable"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("notSerializable"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("notSerializable"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("notSerializable"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("nullServantReturned"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("nullServantReturned"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("nullServantReturned"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullServantReturned"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("objectAdapterInactive"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("objectAdapterInactive"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("objectAdapterInactive"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objectAdapterInactive"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("operationUnknownToTarget"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("operationUnknownToTarget"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("operationUnknownToTarget"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("operationUnknownToTarget"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("piExcCompEstablished"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("piExcCompEstablished"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("piExcCompEstablished"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piExcCompEstablished"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported1"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported1"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported1"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported1"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported2"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported2"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported2"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported2"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported3"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported3"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported3"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported3"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported4"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported4"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported4"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported4"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported5"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported5"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported5"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported5"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported6"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported6"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported6"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported6"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported7"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported7"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported7"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported7"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES()>("piOperationNotSupported8"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::java::lang::Throwable)>("piOperationNotSupported8"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus)>("piOperationNotSupported8"), //
		jMethod<::org::omg::CORBA::NO_RESOURCES(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOperationNotSupported8"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("piUnknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("piUnknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("piUnknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piUnknownUserException"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("poaDestroyed"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("poaDestroyed"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("poaDestroyed"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaDestroyed"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("poaRequestDiscard"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("poaRequestDiscard"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("poaRequestDiscard"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("poaRequestDiscard"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Object)>("policyFactoryRegFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable, ::java::lang::Object)>("policyFactoryRegFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("policyFactoryRegFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("policyFactoryRegFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("policyTypeDuplicate"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("policyTypeDuplicate"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("policyTypeDuplicate"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("policyTypeDuplicate"), //
		jMethod<::org::omg::CORBA::INV_POLICY()>("policyUnknown"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::java::lang::Throwable)>("policyUnknown"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus)>("policyUnknown"), //
		jMethod<::org::omg::CORBA::INV_POLICY(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("policyUnknown"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("priorityMapFailre"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("priorityMapFailre"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("priorityMapFailre"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("priorityMapFailre"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("priorityRangeRestrict"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("priorityRangeRestrict"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("priorityRangeRestrict"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("priorityRangeRestrict"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("priorityReassign"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("priorityReassign"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("priorityReassign"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("priorityReassign"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("requestCancelled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("requestCancelled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("requestCancelled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("requestCancelled"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("ridAlreadyDefined"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("ridAlreadyDefined"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("ridAlreadyDefined"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ridAlreadyDefined"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("rirWithNullObject"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("rirWithNullObject"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("rirWithNullObject"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("rirWithNullObject"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("rmiiiopOptionalDataIncompatible1"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible1"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("rmiiiopOptionalDataIncompatible1"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible1"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("rmiiiopOptionalDataIncompatible2"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible2"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("rmiiiopOptionalDataIncompatible2"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible2"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("rmiiiopOptionalDataIncompatible3"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible3"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("rmiiiopOptionalDataIncompatible3"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("rmiiiopOptionalDataIncompatible3"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Object)>("serviceContextAddFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable, ::java::lang::Object)>("serviceContextAddFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("serviceContextAddFailed"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("serviceContextAddFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("setExceptionBadAny"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("setExceptionBadAny"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("setExceptionBadAny"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setExceptionBadAny"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("setExceptionUnlisted"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("setExceptionUnlisted"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("setExceptionUnlisted"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setExceptionUnlisted"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("setResultBeforeCtx"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("setResultBeforeCtx"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("setResultBeforeCtx"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setResultBeforeCtx"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("shutdownWaitForCompletionDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("shutdownWaitForCompletionDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("shutdownWaitForCompletionDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("shutdownWaitForCompletionDeadlock"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("soBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("soBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("soBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("soBadAddress"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("soBadSchemaSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("soBadSchemaSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("soBadSchemaSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("soBadSchemaSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("soBadSchemeName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("soBadSchemeName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("soBadSchemeName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("soBadSchemeName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("soNonSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("soNonSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("soNonSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("soNonSpecific"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("targetNotContainer"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("targetNotContainer"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("targetNotContainer"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("targetNotContainer"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("tcUnionBadDisc"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("tcUnionBadDisc"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("tcUnionBadDisc"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("tcUnionBadDisc"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("tcUnionDupLabel"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("tcUnionDupLabel"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("tcUnionDupLabel"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("tcUnionDupLabel"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("tcUnionIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("tcUnionIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("tcUnionIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("tcUnionIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("typecodeBadName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("typecodeBadName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("typecodeBadName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("typecodeBadName"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("typecodeBadRepid"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("typecodeBadRepid"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("typecodeBadRepid"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("typecodeBadRepid"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("typecodeInvMember"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("typecodeInvMember"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("typecodeInvMember"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("typecodeInvMember"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unableLocateValueFactory"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unableLocateValueFactory"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unableLocateValueFactory"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableLocateValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("unableRegisterValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("unableRegisterValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("unableRegisterValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableRegisterValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("unionBadDiscriminator"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("unionBadDiscriminator"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("unionBadDiscriminator"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unionBadDiscriminator"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownUserException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownUserException"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("unregisteredValueAsObjref"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("unregisteredValueAsObjref"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("unregisteredValueAsObjref"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unregisteredValueAsObjref"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unsupportedFormatVersion"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unsupportedFormatVersion"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unsupportedFormatVersion"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unsupportedFormatVersion"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unsupportedSystemException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unsupportedSystemException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unsupportedSystemException"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unsupportedSystemException"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("wcharBadGiopVersionReturned"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("wcharBadGiopVersionReturned"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("wcharBadGiopVersionReturned"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wcharBadGiopVersionReturned"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("wcharBadGiopVersionSent"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("wcharBadGiopVersionSent"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("wcharBadGiopVersionSent"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wcharBadGiopVersionSent"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("xaCallInval"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("xaCallInval"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("xaCallInval"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaCallInval"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK()>("xaEndTrueRollbackDeferred"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::java::lang::Throwable)>("xaEndTrueRollbackDeferred"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus)>("xaEndTrueRollbackDeferred"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaEndTrueRollbackDeferred"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK()>("xaNota"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::java::lang::Throwable)>("xaNota"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus)>("xaNota"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaNota"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK()>("xaRb"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::java::lang::Throwable)>("xaRb"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus)>("xaRb"), //
		jMethod<::org::omg::CORBA::TRANSACTION_ROLLEDBACK(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaRb"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("xaRmerr"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("xaRmerr"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("xaRmerr"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaRmerr"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("xaRmfail"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("xaRmfail"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("xaRmfail"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaRmfail"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("xaStartOutsize"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("xaStartOutsize"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("xaStartOutsize"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaStartOutsize"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("xaStartProto"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("xaStartProto"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("xaStartProto"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("xaStartProto"), //
	};

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto adapterActivatorException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterActivatorException")] != -1);
		return call<R>("adapterActivatorException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badArgumentsCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badArgumentsCall")] != -1);
		return call<R>("badArgumentsCall", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badCtxCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCtxCall")] != -1);
		return call<R>("badCtxCall", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badInvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badInvoke")] != -1);
		return call<R>("badInvoke", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_TYPECODE, typename... Args>
	auto badMemberTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badMemberTypecode")] != -1);
		return call<R>("badMemberTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badNvlist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badNvlist")] != -1);
		return call<R>("badNvlist", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto badOnewayDefinition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badOnewayDefinition")] != -1);
		return call<R>("badOnewayDefinition", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badOperationAfterShutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badOperationAfterShutdown")] != -1);
		return call<R>("badOperationAfterShutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto badPolicyIncarnate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badPolicyIncarnate")] != -1);
		return call<R>("badPolicyIncarnate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badPollAfter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badPollAfter")] != -1);
		return call<R>("badPollAfter", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badPollBefore(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badPollBefore")] != -1);
		return call<R>("badPollBefore", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badPollSync(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badPollSync")] != -1);
		return call<R>("badPollSync", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badResultCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badResultCall")] != -1);
		return call<R>("badResultCall", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badSend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSend")] != -1);
		return call<R>("badSend", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto badServantManagerType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badServantManagerType")] != -1);
		return call<R>("badServantManagerType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto badServantType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badServantType")] != -1);
		return call<R>("badServantType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badSetServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSetServantManager")] != -1);
		return call<R>("badSetServantManager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto bioGenomicNoIterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bioGenomicNoIterator")] != -1);
		return call<R>("bioGenomicNoIterator", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto bioMetaNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bioMetaNotAvailable")] != -1);
		return call<R>("bioMetaNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto bioNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bioNotAvailable")] != -1);
		return call<R>("bioNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto bioReset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bioReset")] != -1);
		return call<R>("bioReset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto charNotInCodeset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("charNotInCodeset")] != -1);
		return call<R>("charNotInCodeset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto codesetComponentRequired(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codesetComponentRequired")] != -1);
		return call<R>("codesetComponentRequired", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto createPoaDestroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createPoaDestroy")] != -1);
		return call<R>("createPoaDestroy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto ctxIllegalName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctxIllegalName")] != -1);
		return call<R>("ctxIllegalName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto ctxIllegalPropertyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctxIllegalPropertyName")] != -1);
		return call<R>("ctxIllegalPropertyName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto ctxIllegalSearchString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctxIllegalSearchString")] != -1);
		return call<R>("ctxIllegalSearchString", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto ctxNonEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctxNonEmpty")] != -1);
		return call<R>("ctxNonEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto depPreventDestruction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("depPreventDestruction")] != -1);
		return call<R>("depPreventDestruction", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto destroyIndestructible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyIndestructible")] != -1);
		return call<R>("destroyIndestructible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto diiForImplicitOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("diiForImplicitOperation")] != -1);
		return call<R>("diiForImplicitOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto diiLocalObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("diiLocalObject")] != -1);
		return call<R>("diiLocalObject", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto enumOutOfRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enumOutOfRange")] != -1);
		return call<R>("enumOutOfRange", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::OMGSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_CONTEXT, typename... Args>
	auto idlContextNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("idlContextNotFound")] != -1);
		return call<R>("idlContextNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_TYPECODE, typename... Args>
	auto illegalParameter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalParameter")] != -1);
		return call<R>("illegalParameter", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto illegalServiceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalServiceContext")] != -1);
		return call<R>("illegalServiceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto incompatibleValueImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incompatibleValueImpl")] != -1);
		return call<R>("incompatibleValueImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto incompleteTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("incompleteTypecode")] != -1);
		return call<R>("incompleteTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidComponentId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidComponentId")] != -1);
		return call<R>("invalidComponentId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidObjectId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidObjectId")] != -1);
		return call<R>("invalidObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto invalidPiCall1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidPiCall1")] != -1);
		return call<R>("invalidPiCall1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto invalidPiCall2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidPiCall2")] != -1);
		return call<R>("invalidPiCall2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto invalidPiCall3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidPiCall3")] != -1);
		return call<R>("invalidPiCall3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto invalidPiCall4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidPiCall4")] != -1);
		return call<R>("invalidPiCall4", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidProfileId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidProfileId")] != -1);
		return call<R>("invalidProfileId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidServiceContextId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidServiceContextId")] != -1);
		return call<R>("invalidServiceContextId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidStreamFormatVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidStreamFormatVersion")] != -1);
		return call<R>("invalidStreamFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_POLICY, typename... Args>
	auto iorPolicyReconcileError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iorPolicyReconcileError")] != -1);
		return call<R>("iorPolicyReconcileError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto irDeriveAbsIntBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("irDeriveAbsIntBase")] != -1);
		return call<R>("irDeriveAbsIntBase", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto irValueSupport(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("irValueSupport")] != -1);
		return call<R>("irValueSupport", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_TYPECODE, typename... Args>
	auto marshallIncompleteTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("marshallIncompleteTypecode")] != -1);
		return call<R>("marshallIncompleteTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto missingLocalValueImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("missingLocalValueImpl")] != -1);
		return call<R>("missingLocalValueImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto nameClash(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nameClash")] != -1);
		return call<R>("nameClash", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto nameUsedIfr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nameUsedIfr")] != -1);
		return call<R>("nameUsedIfr", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto noClientWcharCodesetCtx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noClientWcharCodesetCtx")] != -1);
		return call<R>("noClientWcharCodesetCtx", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto noConnectionPriority(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noConnectionPriority")] != -1);
		return call<R>("noConnectionPriority", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto noDefaultServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noDefaultServant")] != -1);
		return call<R>("noDefaultServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTF_REPOS, typename... Args>
	auto noInterfaceInIr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noInterfaceInIr")] != -1);
		return call<R>("noInterfaceInIr", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTF_REPOS, typename... Args>
	auto noIr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noIr")] != -1);
		return call<R>("noIr", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_CONTEXT, typename... Args>
	auto noMatchingIdlContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noMatchingIdlContext")] != -1);
		return call<R>("noMatchingIdlContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto noObjectAdaptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noObjectAdaptor")] != -1);
		return call<R>("noObjectAdaptor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_POLICY, typename... Args>
	auto noPolicyFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noPolicyFactory")] != -1);
		return call<R>("noPolicyFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto noServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noServantManager")] != -1);
		return call<R>("noServantManager", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto noServerWcharCodesetCmp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noServerWcharCodesetCmp")] != -1);
		return call<R>("noServerWcharCodesetCmp", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::IMP_LIMIT, typename... Args>
	auto noUsableProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noUsableProfile")] != -1);
		return call<R>("noUsableProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto noUsableProfile2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noUsableProfile2")] != -1);
		return call<R>("noUsableProfile2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto noUsableProfile3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noUsableProfile3")] != -1);
		return call<R>("noUsableProfile3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto notAValueinputstream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notAValueinputstream")] != -1);
		return call<R>("notAValueinputstream", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto notAValueoutputstream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notAValueoutputstream")] != -1);
		return call<R>("notAValueoutputstream", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto notAnObjectImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notAnObjectImpl")] != -1);
		return call<R>("notAnObjectImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto notSerializable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("notSerializable")] != -1);
		return call<R>("notSerializable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto nullServantReturned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullServantReturned")] != -1);
		return call<R>("nullServantReturned", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto objectAdapterInactive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectAdapterInactive")] != -1);
		return call<R>("objectAdapterInactive", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto operationUnknownToTarget(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operationUnknownToTarget")] != -1);
		return call<R>("operationUnknownToTarget", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto piExcCompEstablished(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piExcCompEstablished")] != -1);
		return call<R>("piExcCompEstablished", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported1")] != -1);
		return call<R>("piOperationNotSupported1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported2")] != -1);
		return call<R>("piOperationNotSupported2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported3")] != -1);
		return call<R>("piOperationNotSupported3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported4")] != -1);
		return call<R>("piOperationNotSupported4", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported5(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported5")] != -1);
		return call<R>("piOperationNotSupported5", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported6(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported6")] != -1);
		return call<R>("piOperationNotSupported6", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported7(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported7")] != -1);
		return call<R>("piOperationNotSupported7", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_RESOURCES, typename... Args>
	auto piOperationNotSupported8(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOperationNotSupported8")] != -1);
		return call<R>("piOperationNotSupported8", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto piUnknownUserException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piUnknownUserException")] != -1);
		return call<R>("piUnknownUserException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto poaDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaDestroyed")] != -1);
		return call<R>("poaDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto poaRequestDiscard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poaRequestDiscard")] != -1);
		return call<R>("poaRequestDiscard", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto policyFactoryRegFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policyFactoryRegFailed")] != -1);
		return call<R>("policyFactoryRegFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto policyTypeDuplicate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policyTypeDuplicate")] != -1);
		return call<R>("policyTypeDuplicate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_POLICY, typename... Args>
	auto policyUnknown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policyUnknown")] != -1);
		return call<R>("policyUnknown", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto priorityMapFailre(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("priorityMapFailre")] != -1);
		return call<R>("priorityMapFailre", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto priorityRangeRestrict(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("priorityRangeRestrict")] != -1);
		return call<R>("priorityRangeRestrict", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto priorityReassign(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("priorityReassign")] != -1);
		return call<R>("priorityReassign", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto requestCancelled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestCancelled")] != -1);
		return call<R>("requestCancelled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto ridAlreadyDefined(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ridAlreadyDefined")] != -1);
		return call<R>("ridAlreadyDefined", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto rirWithNullObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rirWithNullObject")] != -1);
		return call<R>("rirWithNullObject", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto rmiiiopOptionalDataIncompatible1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rmiiiopOptionalDataIncompatible1")] != -1);
		return call<R>("rmiiiopOptionalDataIncompatible1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto rmiiiopOptionalDataIncompatible2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rmiiiopOptionalDataIncompatible2")] != -1);
		return call<R>("rmiiiopOptionalDataIncompatible2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto rmiiiopOptionalDataIncompatible3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rmiiiopOptionalDataIncompatible3")] != -1);
		return call<R>("rmiiiopOptionalDataIncompatible3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto serviceContextAddFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serviceContextAddFailed")] != -1);
		return call<R>("serviceContextAddFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto setExceptionBadAny(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExceptionBadAny")] != -1);
		return call<R>("setExceptionBadAny", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto setExceptionUnlisted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExceptionUnlisted")] != -1);
		return call<R>("setExceptionUnlisted", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto setResultBeforeCtx(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResultBeforeCtx")] != -1);
		return call<R>("setResultBeforeCtx", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto shutdownWaitForCompletionDeadlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdownWaitForCompletionDeadlock")] != -1);
		return call<R>("shutdownWaitForCompletionDeadlock", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto soBadAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("soBadAddress")] != -1);
		return call<R>("soBadAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto soBadSchemaSpecific(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("soBadSchemaSpecific")] != -1);
		return call<R>("soBadSchemaSpecific", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto soBadSchemeName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("soBadSchemeName")] != -1);
		return call<R>("soBadSchemeName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto soNonSpecific(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("soNonSpecific")] != -1);
		return call<R>("soNonSpecific", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto targetNotContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("targetNotContainer")] != -1);
		return call<R>("targetNotContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto tcUnionBadDisc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tcUnionBadDisc")] != -1);
		return call<R>("tcUnionBadDisc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto tcUnionDupLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tcUnionDupLabel")] != -1);
		return call<R>("tcUnionDupLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto tcUnionIncompatible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tcUnionIncompatible")] != -1);
		return call<R>("tcUnionIncompatible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto typecodeBadName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typecodeBadName")] != -1);
		return call<R>("typecodeBadName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto typecodeBadRepid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typecodeBadRepid")] != -1);
		return call<R>("typecodeBadRepid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto typecodeInvMember(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typecodeInvMember")] != -1);
		return call<R>("typecodeInvMember", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unableLocateValueFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableLocateValueFactory")] != -1);
		return call<R>("unableLocateValueFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto unableRegisterValueFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableRegisterValueFactory")] != -1);
		return call<R>("unableRegisterValueFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto unionBadDiscriminator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unionBadDiscriminator")] != -1);
		return call<R>("unionBadDiscriminator", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownUserException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownUserException")] != -1);
		return call<R>("unknownUserException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto unregisteredValueAsObjref(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisteredValueAsObjref")] != -1);
		return call<R>("unregisteredValueAsObjref", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unsupportedFormatVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsupportedFormatVersion")] != -1);
		return call<R>("unsupportedFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unsupportedSystemException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsupportedSystemException")] != -1);
		return call<R>("unsupportedSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto wcharBadGiopVersionReturned(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wcharBadGiopVersionReturned")] != -1);
		return call<R>("wcharBadGiopVersionReturned", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto wcharBadGiopVersionSent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wcharBadGiopVersionSent")] != -1);
		return call<R>("wcharBadGiopVersionSent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto xaCallInval(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaCallInval")] != -1);
		return call<R>("xaCallInval", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSACTION_ROLLEDBACK, typename... Args>
	auto xaEndTrueRollbackDeferred(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaEndTrueRollbackDeferred")] != -1);
		return call<R>("xaEndTrueRollbackDeferred", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSACTION_ROLLEDBACK, typename... Args>
	auto xaNota(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaNota")] != -1);
		return call<R>("xaNota", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSACTION_ROLLEDBACK, typename... Args>
	auto xaRb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaRb")] != -1);
		return call<R>("xaRb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto xaRmerr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaRmerr")] != -1);
		return call<R>("xaRmerr", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto xaRmfail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaRmfail")] != -1);
		return call<R>("xaRmfail", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto xaStartOutsize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaStartOutsize")] != -1);
		return call<R>("xaStartOutsize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto xaStartProto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("xaStartProto")] != -1);
		return call<R>("xaStartProto", std::forward<Args>(args)...);
	}

};

#endif
