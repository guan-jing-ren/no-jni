#ifndef com_sun_corba_se_impl_logging_UtilSystemException_HPP
#define com_sun_corba_se_impl_logging_UtilSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::UtilSystemException : public jObject<::com::sun::corba::se::impl::logging::UtilSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "UtilSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("BAD_BEGIN_UNMARSHAL_CUSTOM_VALUE"), //
		jField<::jint>("BAD_HEX_DIGIT"), //
		jField<::jint>("CLASS_CAST_EXCEPTION_IN_LOAD_STUB"), //
		jField<::jint>("CLASS_NOT_FOUND"), //
		jField<::jint>("CONNECT_NO_TIE"), //
		jField<::jint>("CONNECT_TIE_NO_SERVANT"), //
		jField<::jint>("CONNECT_TIE_WRONG_ORB"), //
		jField<::jint>("CONNECT_WRONG_ORB"), //
		jField<::jint>("COULD_NOT_LOAD_STUB"), //
		jField<::jint>("ERROR_IN_MAKE_STUB_FROM_REPOSITORY_ID"), //
		jField<::jint>("ERROR_SET_BOOLEAN_FIELD"), //
		jField<::jint>("ERROR_SET_BYTE_FIELD"), //
		jField<::jint>("ERROR_SET_CHAR_FIELD"), //
		jField<::jint>("ERROR_SET_DOUBLE_FIELD"), //
		jField<::jint>("ERROR_SET_FLOAT_FIELD"), //
		jField<::jint>("ERROR_SET_INT_FIELD"), //
		jField<::jint>("ERROR_SET_LONG_FIELD"), //
		jField<::jint>("ERROR_SET_OBJECT_FIELD"), //
		jField<::jint>("ERROR_SET_SHORT_FIELD"), //
		jField<::jint>("EXCEPTION_IN_LOAD_STUB"), //
		jField<::jint>("ILLEGAL_FIELD_ACCESS"), //
		jField<::jint>("INVALID_INDIRECTION"), //
		jField<::jint>("LOAD_TIE_FAILED"), //
		jField<::jint>("NO_POA"), //
		jField<::jint>("OBJECT_NOT_CONNECTED"), //
		jField<::jint>("OBJECT_NOT_EXPORTED"), //
		jField<::jint>("STUB_FACTORY_COULD_NOT_MAKE_STUB"), //
		jField<::jint>("UNABLE_LOCATE_VALUE_HELPER"), //
		jField<::jint>("UNKNOWN_SYSEX"), //
	};

	template<typename F = ::jint>
	static auto BAD_BEGIN_UNMARSHAL_CUSTOM_VALUE() {
		static_assert(field_signatures[jField<F>("BAD_BEGIN_UNMARSHAL_CUSTOM_VALUE")] != -1);
		return sat<F>("BAD_BEGIN_UNMARSHAL_CUSTOM_VALUE");
	}

	template<typename F = ::jint>
	static auto BAD_HEX_DIGIT() {
		static_assert(field_signatures[jField<F>("BAD_HEX_DIGIT")] != -1);
		return sat<F>("BAD_HEX_DIGIT");
	}

	template<typename F = ::jint>
	static auto CLASS_CAST_EXCEPTION_IN_LOAD_STUB() {
		static_assert(field_signatures[jField<F>("CLASS_CAST_EXCEPTION_IN_LOAD_STUB")] != -1);
		return sat<F>("CLASS_CAST_EXCEPTION_IN_LOAD_STUB");
	}

	template<typename F = ::jint>
	static auto CLASS_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("CLASS_NOT_FOUND")] != -1);
		return sat<F>("CLASS_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto CONNECT_NO_TIE() {
		static_assert(field_signatures[jField<F>("CONNECT_NO_TIE")] != -1);
		return sat<F>("CONNECT_NO_TIE");
	}

	template<typename F = ::jint>
	static auto CONNECT_TIE_NO_SERVANT() {
		static_assert(field_signatures[jField<F>("CONNECT_TIE_NO_SERVANT")] != -1);
		return sat<F>("CONNECT_TIE_NO_SERVANT");
	}

	template<typename F = ::jint>
	static auto CONNECT_TIE_WRONG_ORB() {
		static_assert(field_signatures[jField<F>("CONNECT_TIE_WRONG_ORB")] != -1);
		return sat<F>("CONNECT_TIE_WRONG_ORB");
	}

	template<typename F = ::jint>
	static auto CONNECT_WRONG_ORB() {
		static_assert(field_signatures[jField<F>("CONNECT_WRONG_ORB")] != -1);
		return sat<F>("CONNECT_WRONG_ORB");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_LOAD_STUB() {
		static_assert(field_signatures[jField<F>("COULD_NOT_LOAD_STUB")] != -1);
		return sat<F>("COULD_NOT_LOAD_STUB");
	}

	template<typename F = ::jint>
	static auto ERROR_IN_MAKE_STUB_FROM_REPOSITORY_ID() {
		static_assert(field_signatures[jField<F>("ERROR_IN_MAKE_STUB_FROM_REPOSITORY_ID")] != -1);
		return sat<F>("ERROR_IN_MAKE_STUB_FROM_REPOSITORY_ID");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_BOOLEAN_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_BOOLEAN_FIELD")] != -1);
		return sat<F>("ERROR_SET_BOOLEAN_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_BYTE_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_BYTE_FIELD")] != -1);
		return sat<F>("ERROR_SET_BYTE_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_CHAR_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_CHAR_FIELD")] != -1);
		return sat<F>("ERROR_SET_CHAR_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_DOUBLE_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_DOUBLE_FIELD")] != -1);
		return sat<F>("ERROR_SET_DOUBLE_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_FLOAT_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_FLOAT_FIELD")] != -1);
		return sat<F>("ERROR_SET_FLOAT_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_INT_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_INT_FIELD")] != -1);
		return sat<F>("ERROR_SET_INT_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_LONG_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_LONG_FIELD")] != -1);
		return sat<F>("ERROR_SET_LONG_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_OBJECT_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_OBJECT_FIELD")] != -1);
		return sat<F>("ERROR_SET_OBJECT_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_SET_SHORT_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SET_SHORT_FIELD")] != -1);
		return sat<F>("ERROR_SET_SHORT_FIELD");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_IN_LOAD_STUB() {
		static_assert(field_signatures[jField<F>("EXCEPTION_IN_LOAD_STUB")] != -1);
		return sat<F>("EXCEPTION_IN_LOAD_STUB");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_FIELD_ACCESS() {
		static_assert(field_signatures[jField<F>("ILLEGAL_FIELD_ACCESS")] != -1);
		return sat<F>("ILLEGAL_FIELD_ACCESS");
	}

	template<typename F = ::jint>
	static auto INVALID_INDIRECTION() {
		static_assert(field_signatures[jField<F>("INVALID_INDIRECTION")] != -1);
		return sat<F>("INVALID_INDIRECTION");
	}

	template<typename F = ::jint>
	static auto LOAD_TIE_FAILED() {
		static_assert(field_signatures[jField<F>("LOAD_TIE_FAILED")] != -1);
		return sat<F>("LOAD_TIE_FAILED");
	}

	template<typename F = ::jint>
	static auto NO_POA() {
		static_assert(field_signatures[jField<F>("NO_POA")] != -1);
		return sat<F>("NO_POA");
	}

	template<typename F = ::jint>
	static auto OBJECT_NOT_CONNECTED() {
		static_assert(field_signatures[jField<F>("OBJECT_NOT_CONNECTED")] != -1);
		return sat<F>("OBJECT_NOT_CONNECTED");
	}

	template<typename F = ::jint>
	static auto OBJECT_NOT_EXPORTED() {
		static_assert(field_signatures[jField<F>("OBJECT_NOT_EXPORTED")] != -1);
		return sat<F>("OBJECT_NOT_EXPORTED");
	}

	template<typename F = ::jint>
	static auto STUB_FACTORY_COULD_NOT_MAKE_STUB() {
		static_assert(field_signatures[jField<F>("STUB_FACTORY_COULD_NOT_MAKE_STUB")] != -1);
		return sat<F>("STUB_FACTORY_COULD_NOT_MAKE_STUB");
	}

	template<typename F = ::jint>
	static auto UNABLE_LOCATE_VALUE_HELPER() {
		static_assert(field_signatures[jField<F>("UNABLE_LOCATE_VALUE_HELPER")] != -1);
		return sat<F>("UNABLE_LOCATE_VALUE_HELPER");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_SYSEX() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SYSEX")] != -1);
		return sat<F>("UNKNOWN_SYSEX");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badBeginUnmarshalCustomValue"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badBeginUnmarshalCustomValue"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badBeginUnmarshalCustomValue"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badBeginUnmarshalCustomValue"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("classCastExceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("classCastExceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("classCastExceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("classCastExceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("classNotFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("classNotFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("classNotFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("classNotFound"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("connectNoTie"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("connectNoTie"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("connectNoTie"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectNoTie"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("connectTieNoServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("connectTieNoServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("connectTieNoServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectTieNoServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("connectTieWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("connectTieWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("connectTieWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectTieWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("connectWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("connectWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("connectWrongOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectWrongOrb"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Object)>("couldNotLoadStub"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable, ::java::lang::Object)>("couldNotLoadStub"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("couldNotLoadStub"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("couldNotLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("errorInMakeStubFromRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("errorInMakeStubFromRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("errorInMakeStubFromRepositoryId"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorInMakeStubFromRepositoryId"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetBooleanField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetBooleanField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetBooleanField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetBooleanField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetByteField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetByteField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetByteField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetByteField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetCharField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetCharField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetCharField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetCharField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetDoubleField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetDoubleField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetDoubleField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetDoubleField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetFloatField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetFloatField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetFloatField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetFloatField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetIntField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetIntField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetIntField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetIntField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetLongField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetLongField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetLongField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetLongField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetObjectField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetObjectField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetObjectField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetObjectField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetShortField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetShortField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetShortField"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("errorSetShortField"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("exceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("exceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("exceptionInLoadStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionInLoadStub"), //
		jMethod<::com::sun::corba::se::impl::logging::UtilSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::UtilSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("illegalFieldAccess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("illegalFieldAccess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalFieldAccess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalFieldAccess"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("loadTieFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("loadTieFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("loadTieFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("loadTieFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("noPoa"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("noPoa"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("noPoa"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noPoa"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Object)>("objectNotConnected"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable, ::java::lang::Object)>("objectNotConnected"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("objectNotConnected"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("objectNotConnected"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Object)>("objectNotExported"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable, ::java::lang::Object)>("objectNotExported"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("objectNotExported"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("objectNotExported"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("stubFactoryCouldNotMakeStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("stubFactoryCouldNotMakeStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("stubFactoryCouldNotMakeStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("stubFactoryCouldNotMakeStub"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unableLocateValueHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unableLocateValueHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unableLocateValueHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableLocateValueHelper"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownSysex"), //
	};

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badBeginUnmarshalCustomValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badBeginUnmarshalCustomValue")] != -1);
		return call<R>("badBeginUnmarshalCustomValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badHexDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badHexDigit")] != -1);
		return call<R>("badHexDigit", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto classCastExceptionInLoadStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classCastExceptionInLoadStub")] != -1);
		return call<R>("classCastExceptionInLoadStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto classNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classNotFound")] != -1);
		return call<R>("classNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto connectNoTie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectNoTie")] != -1);
		return call<R>("connectNoTie", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto connectTieNoServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectTieNoServant")] != -1);
		return call<R>("connectTieNoServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto connectTieWrongOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectTieWrongOrb")] != -1);
		return call<R>("connectTieWrongOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto connectWrongOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectWrongOrb")] != -1);
		return call<R>("connectWrongOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto couldNotLoadStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotLoadStub")] != -1);
		return call<R>("couldNotLoadStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto errorInMakeStubFromRepositoryId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorInMakeStubFromRepositoryId")] != -1);
		return call<R>("errorInMakeStubFromRepositoryId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetBooleanField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetBooleanField")] != -1);
		return call<R>("errorSetBooleanField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetByteField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetByteField")] != -1);
		return call<R>("errorSetByteField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetCharField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetCharField")] != -1);
		return call<R>("errorSetCharField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetDoubleField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetDoubleField")] != -1);
		return call<R>("errorSetDoubleField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetFloatField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetFloatField")] != -1);
		return call<R>("errorSetFloatField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetIntField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetIntField")] != -1);
		return call<R>("errorSetIntField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetLongField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetLongField")] != -1);
		return call<R>("errorSetLongField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetObjectField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetObjectField")] != -1);
		return call<R>("errorSetObjectField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorSetShortField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSetShortField")] != -1);
		return call<R>("errorSetShortField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto exceptionInLoadStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInLoadStub")] != -1);
		return call<R>("exceptionInLoadStub", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::UtilSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalFieldAccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalFieldAccess")] != -1);
		return call<R>("illegalFieldAccess", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidIndirection")] != -1);
		return call<R>("invalidIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto loadTieFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadTieFailed")] != -1);
		return call<R>("loadTieFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto noPoa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noPoa")] != -1);
		return call<R>("noPoa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto objectNotConnected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectNotConnected")] != -1);
		return call<R>("objectNotConnected", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto objectNotExported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectNotExported")] != -1);
		return call<R>("objectNotExported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto stubFactoryCouldNotMakeStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stubFactoryCouldNotMakeStub")] != -1);
		return call<R>("stubFactoryCouldNotMakeStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unableLocateValueHelper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableLocateValueHelper")] != -1);
		return call<R>("unableLocateValueHelper", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownSysex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownSysex")] != -1);
		return call<R>("unknownSysex", std::forward<Args>(args)...);
	}

};

#endif
