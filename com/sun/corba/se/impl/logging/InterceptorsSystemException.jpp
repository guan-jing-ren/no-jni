#ifndef com_sun_corba_se_impl_logging_InterceptorsSystemException_HPP
#define com_sun_corba_se_impl_logging_InterceptorsSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::InterceptorsSystemException : public jObject<::com::sun::corba::se::impl::logging::InterceptorsSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "InterceptorsSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("BAD_STATE1"), //
		jField<::jint>("BAD_STATE2"), //
		jField<::jint>("CANT_POP_ONLY_CURRENT_2"), //
		jField<::jint>("CANT_POP_ONLY_PICURRENT"), //
		jField<::jint>("CLIENT_INFO_STACK_NULL"), //
		jField<::jint>("DELEGATE_NOT_CLIENTSUB"), //
		jField<::jint>("EXCEPTION_INVALID"), //
		jField<::jint>("EXCEPTION_IN_ARGUMENTS"), //
		jField<::jint>("EXCEPTION_IN_CONTEXTS"), //
		jField<::jint>("EXCEPTION_IN_EXCEPTIONS"), //
		jField<::jint>("EXCEPTION_UNAVAILABLE"), //
		jField<::jint>("EXCEPTION_WAS_NULL"), //
		jField<::jint>("EXCEPTION_WAS_NULL_2"), //
		jField<::jint>("INTERCEPTOR_LIST_LOCKED"), //
		jField<::jint>("IOEXCEPTION_DURING_CANCEL_REQUEST"), //
		jField<::jint>("MARK_AND_RESET_FAILED"), //
		jField<::jint>("NAME_NULL"), //
		jField<::jint>("OBJECT_HAS_NO_DELEGATE"), //
		jField<::jint>("OBJECT_NOT_OBJECTIMPL"), //
		jField<::jint>("ORBINITINFO_INVALID"), //
		jField<::jint>("PI_DII_RESULT_IS_NULL"), //
		jField<::jint>("PI_DSI_RESULT_IS_NULL"), //
		jField<::jint>("PI_ORB_NOT_POLICY_BASED"), //
		jField<::jint>("REPLY_STATUS_NOT_INIT"), //
		jField<::jint>("RIR_INVALID_PRE_INIT"), //
		jField<::jint>("SERVANT_INVALID"), //
		jField<::jint>("SERVER_INFO_STACK_NULL"), //
		jField<::jint>("SLOT_TABLE_INVARIANT"), //
		jField<::jint>("SORT_SIZE_MISMATCH"), //
		jField<::jint>("TYPE_OUT_OF_RANGE"), //
		jField<::jint>("UNKNOWN_REQUEST_INVOKE"), //
	};

	template<typename F = ::jint>
	static auto BAD_STATE1() {
		static_assert(field_signatures[jField<F>("BAD_STATE1")] != -1);
		return sat<F>("BAD_STATE1");
	}

	template<typename F = ::jint>
	static auto BAD_STATE2() {
		static_assert(field_signatures[jField<F>("BAD_STATE2")] != -1);
		return sat<F>("BAD_STATE2");
	}

	template<typename F = ::jint>
	static auto CANT_POP_ONLY_CURRENT_2() {
		static_assert(field_signatures[jField<F>("CANT_POP_ONLY_CURRENT_2")] != -1);
		return sat<F>("CANT_POP_ONLY_CURRENT_2");
	}

	template<typename F = ::jint>
	static auto CANT_POP_ONLY_PICURRENT() {
		static_assert(field_signatures[jField<F>("CANT_POP_ONLY_PICURRENT")] != -1);
		return sat<F>("CANT_POP_ONLY_PICURRENT");
	}

	template<typename F = ::jint>
	static auto CLIENT_INFO_STACK_NULL() {
		static_assert(field_signatures[jField<F>("CLIENT_INFO_STACK_NULL")] != -1);
		return sat<F>("CLIENT_INFO_STACK_NULL");
	}

	template<typename F = ::jint>
	static auto DELEGATE_NOT_CLIENTSUB() {
		static_assert(field_signatures[jField<F>("DELEGATE_NOT_CLIENTSUB")] != -1);
		return sat<F>("DELEGATE_NOT_CLIENTSUB");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_INVALID() {
		static_assert(field_signatures[jField<F>("EXCEPTION_INVALID")] != -1);
		return sat<F>("EXCEPTION_INVALID");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_IN_ARGUMENTS() {
		static_assert(field_signatures[jField<F>("EXCEPTION_IN_ARGUMENTS")] != -1);
		return sat<F>("EXCEPTION_IN_ARGUMENTS");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_IN_CONTEXTS() {
		static_assert(field_signatures[jField<F>("EXCEPTION_IN_CONTEXTS")] != -1);
		return sat<F>("EXCEPTION_IN_CONTEXTS");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_IN_EXCEPTIONS() {
		static_assert(field_signatures[jField<F>("EXCEPTION_IN_EXCEPTIONS")] != -1);
		return sat<F>("EXCEPTION_IN_EXCEPTIONS");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_UNAVAILABLE() {
		static_assert(field_signatures[jField<F>("EXCEPTION_UNAVAILABLE")] != -1);
		return sat<F>("EXCEPTION_UNAVAILABLE");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_WAS_NULL() {
		static_assert(field_signatures[jField<F>("EXCEPTION_WAS_NULL")] != -1);
		return sat<F>("EXCEPTION_WAS_NULL");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_WAS_NULL_2() {
		static_assert(field_signatures[jField<F>("EXCEPTION_WAS_NULL_2")] != -1);
		return sat<F>("EXCEPTION_WAS_NULL_2");
	}

	template<typename F = ::jint>
	static auto INTERCEPTOR_LIST_LOCKED() {
		static_assert(field_signatures[jField<F>("INTERCEPTOR_LIST_LOCKED")] != -1);
		return sat<F>("INTERCEPTOR_LIST_LOCKED");
	}

	template<typename F = ::jint>
	static auto IOEXCEPTION_DURING_CANCEL_REQUEST() {
		static_assert(field_signatures[jField<F>("IOEXCEPTION_DURING_CANCEL_REQUEST")] != -1);
		return sat<F>("IOEXCEPTION_DURING_CANCEL_REQUEST");
	}

	template<typename F = ::jint>
	static auto MARK_AND_RESET_FAILED() {
		static_assert(field_signatures[jField<F>("MARK_AND_RESET_FAILED")] != -1);
		return sat<F>("MARK_AND_RESET_FAILED");
	}

	template<typename F = ::jint>
	static auto NAME_NULL() {
		static_assert(field_signatures[jField<F>("NAME_NULL")] != -1);
		return sat<F>("NAME_NULL");
	}

	template<typename F = ::jint>
	static auto OBJECT_HAS_NO_DELEGATE() {
		static_assert(field_signatures[jField<F>("OBJECT_HAS_NO_DELEGATE")] != -1);
		return sat<F>("OBJECT_HAS_NO_DELEGATE");
	}

	template<typename F = ::jint>
	static auto OBJECT_NOT_OBJECTIMPL() {
		static_assert(field_signatures[jField<F>("OBJECT_NOT_OBJECTIMPL")] != -1);
		return sat<F>("OBJECT_NOT_OBJECTIMPL");
	}

	template<typename F = ::jint>
	static auto ORBINITINFO_INVALID() {
		static_assert(field_signatures[jField<F>("ORBINITINFO_INVALID")] != -1);
		return sat<F>("ORBINITINFO_INVALID");
	}

	template<typename F = ::jint>
	static auto PI_DII_RESULT_IS_NULL() {
		static_assert(field_signatures[jField<F>("PI_DII_RESULT_IS_NULL")] != -1);
		return sat<F>("PI_DII_RESULT_IS_NULL");
	}

	template<typename F = ::jint>
	static auto PI_DSI_RESULT_IS_NULL() {
		static_assert(field_signatures[jField<F>("PI_DSI_RESULT_IS_NULL")] != -1);
		return sat<F>("PI_DSI_RESULT_IS_NULL");
	}

	template<typename F = ::jint>
	static auto PI_ORB_NOT_POLICY_BASED() {
		static_assert(field_signatures[jField<F>("PI_ORB_NOT_POLICY_BASED")] != -1);
		return sat<F>("PI_ORB_NOT_POLICY_BASED");
	}

	template<typename F = ::jint>
	static auto REPLY_STATUS_NOT_INIT() {
		static_assert(field_signatures[jField<F>("REPLY_STATUS_NOT_INIT")] != -1);
		return sat<F>("REPLY_STATUS_NOT_INIT");
	}

	template<typename F = ::jint>
	static auto RIR_INVALID_PRE_INIT() {
		static_assert(field_signatures[jField<F>("RIR_INVALID_PRE_INIT")] != -1);
		return sat<F>("RIR_INVALID_PRE_INIT");
	}

	template<typename F = ::jint>
	static auto SERVANT_INVALID() {
		static_assert(field_signatures[jField<F>("SERVANT_INVALID")] != -1);
		return sat<F>("SERVANT_INVALID");
	}

	template<typename F = ::jint>
	static auto SERVER_INFO_STACK_NULL() {
		static_assert(field_signatures[jField<F>("SERVER_INFO_STACK_NULL")] != -1);
		return sat<F>("SERVER_INFO_STACK_NULL");
	}

	template<typename F = ::jint>
	static auto SLOT_TABLE_INVARIANT() {
		static_assert(field_signatures[jField<F>("SLOT_TABLE_INVARIANT")] != -1);
		return sat<F>("SLOT_TABLE_INVARIANT");
	}

	template<typename F = ::jint>
	static auto SORT_SIZE_MISMATCH() {
		static_assert(field_signatures[jField<F>("SORT_SIZE_MISMATCH")] != -1);
		return sat<F>("SORT_SIZE_MISMATCH");
	}

	template<typename F = ::jint>
	static auto TYPE_OUT_OF_RANGE() {
		static_assert(field_signatures[jField<F>("TYPE_OUT_OF_RANGE")] != -1);
		return sat<F>("TYPE_OUT_OF_RANGE");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_REQUEST_INVOKE() {
		static_assert(field_signatures[jField<F>("UNKNOWN_REQUEST_INVOKE")] != -1);
		return sat<F>("UNKNOWN_REQUEST_INVOKE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Object, ::java::lang::Object)>("badState1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badState1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("badState1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badState1"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("badState2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("badState2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("badState2"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("badState2"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cantPopOnlyCurrent2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cantPopOnlyCurrent2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cantPopOnlyCurrent2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cantPopOnlyCurrent2"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cantPopOnlyPicurrent"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cantPopOnlyPicurrent"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cantPopOnlyPicurrent"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cantPopOnlyPicurrent"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("clientInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("clientInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("clientInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("clientInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("delegateNotClientsub"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("delegateNotClientsub"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("delegateNotClientsub"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("delegateNotClientsub"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionInArguments"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionInArguments"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionInArguments"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionInArguments"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionInContexts"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionInContexts"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionInContexts"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionInContexts"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionInExceptions"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionInExceptions"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionInExceptions"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionInExceptions"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionUnavailable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionUnavailable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionUnavailable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionUnavailable"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionWasNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionWasNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionWasNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionWasNull"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionWasNull2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionWasNull2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionWasNull2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionWasNull2"), //
		jMethod<::com::sun::corba::se::impl::logging::InterceptorsSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::InterceptorsSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("interceptorListLocked"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("interceptorListLocked"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("interceptorListLocked"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("interceptorListLocked"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("ioexceptionDuringCancelRequest"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("ioexceptionDuringCancelRequest"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("ioexceptionDuringCancelRequest"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ioexceptionDuringCancelRequest"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("markAndResetFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("markAndResetFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("markAndResetFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("markAndResetFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("nameNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("nameNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("nameNull"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nameNull"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("objectHasNoDelegate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("objectHasNoDelegate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("objectHasNoDelegate"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objectHasNoDelegate"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("objectNotObjectimpl"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("objectNotObjectimpl"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("objectNotObjectimpl"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objectNotObjectimpl"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("orbinitinfoInvalid"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("orbinitinfoInvalid"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("orbinitinfoInvalid"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbinitinfoInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("piDiiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("piDiiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("piDiiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piDiiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("piDsiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("piDsiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("piDsiResultIsNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piDsiResultIsNull"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("piOrbNotPolicyBased"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("piOrbNotPolicyBased"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("piOrbNotPolicyBased"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("piOrbNotPolicyBased"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("replyStatusNotInit"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("replyStatusNotInit"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("replyStatusNotInit"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("replyStatusNotInit"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("rirInvalidPreInit"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("rirInvalidPreInit"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("rirInvalidPreInit"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("rirInvalidPreInit"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("servantInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("servantInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("servantInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("serverInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("serverInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("serverInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverInfoStackNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("slotTableInvariant"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("slotTableInvariant"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("slotTableInvariant"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("slotTableInvariant"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("sortSizeMismatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("sortSizeMismatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("sortSizeMismatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("sortSizeMismatch"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("typeOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("typeOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("typeOutOfRange"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("typeOutOfRange"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownRequestInvoke"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownRequestInvoke"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownRequestInvoke"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownRequestInvoke"), //
	};

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badState1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badState1")] != -1);
		return call<R>("badState1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto badState2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badState2")] != -1);
		return call<R>("badState2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cantPopOnlyCurrent2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cantPopOnlyCurrent2")] != -1);
		return call<R>("cantPopOnlyCurrent2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cantPopOnlyPicurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cantPopOnlyPicurrent")] != -1);
		return call<R>("cantPopOnlyPicurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto clientInfoStackNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientInfoStackNull")] != -1);
		return call<R>("clientInfoStackNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto delegateNotClientsub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delegateNotClientsub")] != -1);
		return call<R>("delegateNotClientsub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionInArguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInArguments")] != -1);
		return call<R>("exceptionInArguments", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionInContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInContexts")] != -1);
		return call<R>("exceptionInContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionInExceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInExceptions")] != -1);
		return call<R>("exceptionInExceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInvalid")] != -1);
		return call<R>("exceptionInvalid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionUnavailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionUnavailable")] != -1);
		return call<R>("exceptionUnavailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionWasNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionWasNull")] != -1);
		return call<R>("exceptionWasNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionWasNull2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionWasNull2")] != -1);
		return call<R>("exceptionWasNull2", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::InterceptorsSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto interceptorListLocked(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("interceptorListLocked")] != -1);
		return call<R>("interceptorListLocked", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto ioexceptionDuringCancelRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ioexceptionDuringCancelRequest")] != -1);
		return call<R>("ioexceptionDuringCancelRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto markAndResetFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markAndResetFailed")] != -1);
		return call<R>("markAndResetFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto nameNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nameNull")] != -1);
		return call<R>("nameNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto objectHasNoDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectHasNoDelegate")] != -1);
		return call<R>("objectHasNoDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto objectNotObjectimpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectNotObjectimpl")] != -1);
		return call<R>("objectNotObjectimpl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto orbinitinfoInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbinitinfoInvalid")] != -1);
		return call<R>("orbinitinfoInvalid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto piDiiResultIsNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piDiiResultIsNull")] != -1);
		return call<R>("piDiiResultIsNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto piDsiResultIsNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piDsiResultIsNull")] != -1);
		return call<R>("piDsiResultIsNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto piOrbNotPolicyBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("piOrbNotPolicyBased")] != -1);
		return call<R>("piOrbNotPolicyBased", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto replyStatusNotInit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("replyStatusNotInit")] != -1);
		return call<R>("replyStatusNotInit", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto rirInvalidPreInit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("rirInvalidPreInit")] != -1);
		return call<R>("rirInvalidPreInit", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto servantInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantInvalid")] != -1);
		return call<R>("servantInvalid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto serverInfoStackNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverInfoStackNull")] != -1);
		return call<R>("serverInfoStackNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto slotTableInvariant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("slotTableInvariant")] != -1);
		return call<R>("slotTableInvariant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto sortSizeMismatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sortSizeMismatch")] != -1);
		return call<R>("sortSizeMismatch", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto typeOutOfRange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typeOutOfRange")] != -1);
		return call<R>("typeOutOfRange", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownRequestInvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownRequestInvoke")] != -1);
		return call<R>("unknownRequestInvoke", std::forward<Args>(args)...);
	}

};

#endif
