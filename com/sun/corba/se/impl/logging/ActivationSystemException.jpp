#ifndef com_sun_corba_se_impl_logging_ActivationSystemException_HPP
#define com_sun_corba_se_impl_logging_ActivationSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::ActivationSystemException : public jObject<::com::sun::corba::se::impl::logging::ActivationSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "ActivationSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("CANNOT_ADD_INITIAL_NAMING"), //
		jField<::jint>("CANNOT_READ_REPOSITORY_DB"), //
		jField<::jint>("CANNOT_WRITE_REPOSITORY_DB"), //
		jField<::jint>("ERROR_IN_BAD_SERVER_ID_HANDLER"), //
		jField<::jint>("SERVER_NOT_EXPECTED_TO_REGISTER"), //
		jField<::jint>("SERVER_NOT_RUNNING"), //
		jField<::jint>("UNABLE_TO_START_PROCESS"), //
	};

	template<typename F = ::jint>
	static auto CANNOT_ADD_INITIAL_NAMING() {
		static_assert(field_signatures[jField<F>("CANNOT_ADD_INITIAL_NAMING")] != -1);
		return sat<F>("CANNOT_ADD_INITIAL_NAMING");
	}

	template<typename F = ::jint>
	static auto CANNOT_READ_REPOSITORY_DB() {
		static_assert(field_signatures[jField<F>("CANNOT_READ_REPOSITORY_DB")] != -1);
		return sat<F>("CANNOT_READ_REPOSITORY_DB");
	}

	template<typename F = ::jint>
	static auto CANNOT_WRITE_REPOSITORY_DB() {
		static_assert(field_signatures[jField<F>("CANNOT_WRITE_REPOSITORY_DB")] != -1);
		return sat<F>("CANNOT_WRITE_REPOSITORY_DB");
	}

	template<typename F = ::jint>
	static auto ERROR_IN_BAD_SERVER_ID_HANDLER() {
		static_assert(field_signatures[jField<F>("ERROR_IN_BAD_SERVER_ID_HANDLER")] != -1);
		return sat<F>("ERROR_IN_BAD_SERVER_ID_HANDLER");
	}

	template<typename F = ::jint>
	static auto SERVER_NOT_EXPECTED_TO_REGISTER() {
		static_assert(field_signatures[jField<F>("SERVER_NOT_EXPECTED_TO_REGISTER")] != -1);
		return sat<F>("SERVER_NOT_EXPECTED_TO_REGISTER");
	}

	template<typename F = ::jint>
	static auto SERVER_NOT_RUNNING() {
		static_assert(field_signatures[jField<F>("SERVER_NOT_RUNNING")] != -1);
		return sat<F>("SERVER_NOT_RUNNING");
	}

	template<typename F = ::jint>
	static auto UNABLE_TO_START_PROCESS() {
		static_assert(field_signatures[jField<F>("UNABLE_TO_START_PROCESS")] != -1);
		return sat<F>("UNABLE_TO_START_PROCESS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("cannotAddInitialNaming"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("cannotAddInitialNaming"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("cannotAddInitialNaming"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotAddInitialNaming"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("cannotReadRepositoryDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("cannotReadRepositoryDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("cannotReadRepositoryDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotReadRepositoryDb"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cannotWriteRepositoryDb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cannotWriteRepositoryDb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cannotWriteRepositoryDb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotWriteRepositoryDb"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("errorInBadServerIdHandler"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("errorInBadServerIdHandler"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("errorInBadServerIdHandler"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorInBadServerIdHandler"), //
		jMethod<::com::sun::corba::se::impl::logging::ActivationSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::ActivationSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("serverNotExpectedToRegister"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("serverNotExpectedToRegister"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("serverNotExpectedToRegister"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverNotExpectedToRegister"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("serverNotRunning"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("serverNotRunning"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("serverNotRunning"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverNotRunning"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unableToStartProcess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unableToStartProcess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unableToStartProcess"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableToStartProcess"), //
	};

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto cannotAddInitialNaming(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotAddInitialNaming")] != -1);
		return call<R>("cannotAddInitialNaming", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto cannotReadRepositoryDb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotReadRepositoryDb")] != -1);
		return call<R>("cannotReadRepositoryDb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cannotWriteRepositoryDb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotWriteRepositoryDb")] != -1);
		return call<R>("cannotWriteRepositoryDb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto errorInBadServerIdHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorInBadServerIdHandler")] != -1);
		return call<R>("errorInBadServerIdHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::ActivationSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto serverNotExpectedToRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverNotExpectedToRegister")] != -1);
		return call<R>("serverNotExpectedToRegister", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto serverNotRunning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverNotRunning")] != -1);
		return call<R>("serverNotRunning", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unableToStartProcess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableToStartProcess")] != -1);
		return call<R>("unableToStartProcess", std::forward<Args>(args)...);
	}

};

#endif
