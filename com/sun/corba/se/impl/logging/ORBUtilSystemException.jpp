#ifndef com_sun_corba_se_impl_logging_ORBUtilSystemException_HPP
#define com_sun_corba_se_impl_logging_ORBUtilSystemException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::logging::ORBUtilSystemException : public jObject<::com::sun::corba::se::impl::logging::ORBUtilSystemException, ::com::sun::corba::se::spi::logging::LogWrapperBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_logging / "ORBUtilSystemException";

	constexpr static Enume field_signatures{
		jField<::jint>("ABSTRACT_FROM_NON_ABSTRACT"), //
		jField<::jint>("ACCEPTORS_AND_LEGACY_SOCKET_FACTORY_AT_SAME_TIME"), //
		jField<::jint>("ACCEPTOR_INSTANTIATION_FAILURE"), //
		jField<::jint>("ACCEPTOR_INSTANTIATION_TYPE_FAILURE"), //
		jField<::jint>("ADAPTER_ID_NOT_AVAILABLE"), //
		jField<::jint>("ADAPTER_INACTIVE_IN_ACTIVATION"), //
		jField<::jint>("APPLICATION_EXCEPTION_IN_SPECIAL_METHOD"), //
		jField<::jint>("ARGUMENTS_CALLED_AFTER_EXCEPTION"), //
		jField<::jint>("ARGUMENTS_CALLED_MULTIPLE"), //
		jField<::jint>("ARGUMENTS_CALLED_NULL_ARGS"), //
		jField<::jint>("ARGUMENTS_NOT_CALLED"), //
		jField<::jint>("BADKIND_CANNOT_OCCUR"), //
		jField<::jint>("BAD_ACTIVATE_TIE_CALL"), //
		jField<::jint>("BAD_ADAPTER_ID"), //
		jField<::jint>("BAD_ARGUMENTS_NVLIST"), //
		jField<::jint>("BAD_CHUNK_LENGTH"), //
		jField<::jint>("BAD_CODEBASE_INDIRECTION"), //
		jField<::jint>("BAD_CODESETS_FROM_CLIENT"), //
		jField<::jint>("BAD_CODE_SET_STRING"), //
		jField<::jint>("BAD_COMPLETION_STATUS_IN_LOCATE_REPLY"), //
		jField<::jint>("BAD_COMPLETION_STATUS_IN_REPLY"), //
		jField<::jint>("BAD_CONTACT_INFO_LIST_FACTORY"), //
		jField<::jint>("BAD_CORBALOC_STRING"), //
		jField<::jint>("BAD_CUSTOM_IIOP_PRIMARY_TO_CONTACT_INFO"), //
		jField<::jint>("BAD_CUSTOM_IOR_TO_SOCKET_INFO"), //
		jField<::jint>("BAD_CUSTOM_SOCKET_FACTORY"), //
		jField<::jint>("BAD_DIGIT_IN_FIXED"), //
		jField<::jint>("BAD_EXCEPTION_DETAIL_MESSAGE_SERVICE_CONTEXT_TYPE"), //
		jField<::jint>("BAD_FIXED"), //
		jField<::jint>("BAD_GIOP_1_1_CTB"), //
		jField<::jint>("BAD_GIOP_REQUEST_TYPE"), //
		jField<::jint>("BAD_HELPER_ID_METHOD"), //
		jField<::jint>("BAD_HELPER_READ_METHOD"), //
		jField<::jint>("BAD_HELPER_WRITE_METHOD"), //
		jField<::jint>("BAD_HEX_DIGIT"), //
		jField<::jint>("BAD_INSERTOBJ_PARAM"), //
		jField<::jint>("BAD_KIND"), //
		jField<::jint>("BAD_LOCATE_REQUEST_STATUS"), //
		jField<::jint>("BAD_MESSAGE_TYPE_FOR_CANCEL"), //
		jField<::jint>("BAD_MODIFIER"), //
		jField<::jint>("BAD_ORB_CONFIGURATOR"), //
		jField<::jint>("BAD_ORB_FOR_SERVANT"), //
		jField<::jint>("BAD_REMOTE_TYPECODE"), //
		jField<::jint>("BAD_REPLYSTATUS"), //
		jField<::jint>("BAD_REP_ID_INDIRECTION"), //
		jField<::jint>("BAD_RESERVED_LENGTH"), //
		jField<::jint>("BAD_SEQUENCE_BOUNDS"), //
		jField<::jint>("BAD_SERVANT_READ_OBJECT"), //
		jField<::jint>("BAD_SERVER_ID"), //
		jField<::jint>("BAD_SKELETON"), //
		jField<::jint>("BAD_STRINGIFIED_IOR"), //
		jField<::jint>("BAD_STRINGIFIED_IOR_LEN"), //
		jField<::jint>("BAD_STRING_BOUNDS"), //
		jField<::jint>("BAD_SYSTEM_EXCEPTION_IN_LOCATE_REPLY"), //
		jField<::jint>("BAD_SYSTEM_EXCEPTION_IN_REPLY"), //
		jField<::jint>("BAD_TOA_OAID"), //
		jField<::jint>("BAD_TYPECODE_FOR_CUSTOM_VALUE"), //
		jField<::jint>("BAD_UNICODE_PAIR"), //
		jField<::jint>("BAD_URL"), //
		jField<::jint>("BAD_VALUE_TAG"), //
		jField<::jint>("BOOTSTRAP_APPLICATION_EXCEPTION"), //
		jField<::jint>("BOOTSTRAP_EXCEPTION"), //
		jField<::jint>("BOOTSTRAP_RUNTIME_EXCEPTION"), //
		jField<::jint>("BOOTSTRAP_SERVER_NOT_AVAIL"), //
		jField<::jint>("BOUNDS_CANNOT_OCCUR"), //
		jField<::jint>("BOUNDS_ERROR_IN_DII_REQUEST"), //
		jField<::jint>("BTC_CONVERTER_FAILURE"), //
		jField<::jint>("BTC_RESULT_MORE_THAN_ONE_CHAR"), //
		jField<::jint>("BUFFER_READ_MANAGER_TIMEOUT"), //
		jField<::jint>("CANCEL_NOT_SUPPORTED"), //
		jField<::jint>("CANNOT_CREATE_ORBID_DB"), //
		jField<::jint>("CANNOT_MARSHAL_BAD_TCKIND"), //
		jField<::jint>("CANNOT_MARSHAL_NATIVE"), //
		jField<::jint>("CANNOT_READ_ORBID_DB"), //
		jField<::jint>("CANNOT_WRITE_ORBID_DB"), //
		jField<::jint>("CHARACTER_OUTOFRANGE"), //
		jField<::jint>("CHUNK_OVERFLOW"), //
		jField<::jint>("CLASS_NOT_FOUND1"), //
		jField<::jint>("CLASS_NOT_FOUND2"), //
		jField<::jint>("CLASS_NOT_FOUND3"), //
		jField<::jint>("CNFE_READ_CLASS"), //
		jField<::jint>("CODESET_INCOMPATIBLE"), //
		jField<::jint>("CONNECTING_SERVANT"), //
		jField<::jint>("CONNECTION_ABORT"), //
		jField<::jint>("CONNECTION_CLOSE_REBIND"), //
		jField<::jint>("CONNECTION_REBIND"), //
		jField<::jint>("CONNECT_FAILURE"), //
		jField<::jint>("CONNECT_REQUIRES_STUB"), //
		jField<::jint>("CONTEXT_CALLED_OUT_OF_ORDER"), //
		jField<::jint>("CONTEXT_NOT_IMPLEMENTED"), //
		jField<::jint>("COULD_NOT_CREATE_ARRAY"), //
		jField<::jint>("COULD_NOT_DUPLICATE_CDR_INPUT_STREAM"), //
		jField<::jint>("COULD_NOT_FIND_CLASS"), //
		jField<::jint>("COULD_NOT_INSTANTIATE_HELPER"), //
		jField<::jint>("COULD_NOT_INVOKE_HELPER_READ_METHOD"), //
		jField<::jint>("COULD_NOT_LOAD_CLASS"), //
		jField<::jint>("COULD_NOT_SET_ARRAY"), //
		jField<::jint>("COULD_NOT_SKIP_BYTES"), //
		jField<::jint>("CREATE_LISTENER_FAILED"), //
		jField<::jint>("CTB_CONVERTER_FAILURE"), //
		jField<::jint>("CUSTOM_WRAPPER_INDIRECTION"), //
		jField<::jint>("CUSTOM_WRAPPER_NOT_SINGLE_REPID"), //
		jField<::jint>("CUSTOM_WRAPPER_WITH_CODEBASE"), //
		jField<::jint>("DEFAULT_CREATE_SERVER_SOCKET_GIVEN_NON_IIOP_CLEAR_TEXT"), //
		jField<::jint>("DSIMETHOD_NOTCALLED"), //
		jField<::jint>("DSI_RESULT_EXCEPTION"), //
		jField<::jint>("DUPLICATE_EXCEPTION_DETAIL_MESSAGE"), //
		jField<::jint>("DUPLICATE_INDIRECTION_OFFSET"), //
		jField<::jint>("DUPLICATE_ORB_VERSION_SERVICE_CONTEXT"), //
		jField<::jint>("DUPLICATE_SENDING_CONTEXT_SERVICE_CONTEXT"), //
		jField<::jint>("DYN_ANY_DESTROYED"), //
		jField<::jint>("EMPTY_STACK_RUN_SERVANT_POST_INVOKE"), //
		jField<::jint>("END_OF_STREAM"), //
		jField<::jint>("ERROR_INIT_BADSERVERIDHANDLER"), //
		jField<::jint>("ERROR_INVOKING_HELPER_WRITE"), //
		jField<::jint>("ERROR_IN_SETTING_DYNAMIC_STUB_FACTORY_FACTORY"), //
		jField<::jint>("ERROR_RESOLVING_ALIAS"), //
		jField<::jint>("ERROR_SETTING_FIELD"), //
		jField<::jint>("ERROR_UNMARSHALING_USEREXC"), //
		jField<::jint>("EXCEPTION_IN_ACCEPT"), //
		jField<::jint>("EXCEPTION_WHEN_SENDING_CLOSE_CONNECTION"), //
		jField<::jint>("EXPECTED_TYPE_NULL_AND_NO_REP_ID"), //
		jField<::jint>("EXTRACT_NOT_INITIALIZED"), //
		jField<::jint>("EXTRACT_OBJECT_FAILED"), //
		jField<::jint>("EXTRACT_OBJECT_INCOMPATIBLE"), //
		jField<::jint>("EXTRACT_WRONG_TYPE"), //
		jField<::jint>("EXTRACT_WRONG_TYPE_LIST"), //
		jField<::jint>("FIELD_NOT_FOUND"), //
		jField<::jint>("FIXED_BAD_TYPECODE"), //
		jField<::jint>("FIXED_NOT_MATCH"), //
		jField<::jint>("FRAGMENTATION_DISALLOWED"), //
		jField<::jint>("FRAGMENT_SIZE_DIV"), //
		jField<::jint>("FRAGMENT_SIZE_MINIMUM"), //
		jField<::jint>("GENERIC_NO_IMPL"), //
		jField<::jint>("GETINTERFACE_NOT_IMPLEMENTED"), //
		jField<::jint>("GET_DELEGATE_REQUIRES_STUB"), //
		jField<::jint>("GET_DELEGATE_SERVANT_NOT_ACTIVE"), //
		jField<::jint>("GET_DELEGATE_WRONG_POLICY"), //
		jField<::jint>("GET_LOCAL_HOST_FAILED"), //
		jField<::jint>("GET_ORB_REQUIRES_STUB"), //
		jField<::jint>("GET_PROPERTIES_ERROR"), //
		jField<::jint>("GET_SERVER_PORT_CALLED_BEFORE_ENDPOINTS_INITIALIZED"), //
		jField<::jint>("GET_SYSTEM_EX_RETURNED_NULL"), //
		jField<::jint>("GET_TYPE_IDS_REQUIRES_STUB"), //
		jField<::jint>("GIOP_MAGIC_ERROR"), //
		jField<::jint>("GIOP_VERSION_ERROR"), //
		jField<::jint>("IIOPINPUTSTREAM_GROW"), //
		jField<::jint>("ILLEGAL_BOOTSTRAP_OPERATION"), //
		jField<::jint>("ILLEGAL_CONTACT_INFO_LIST_FACTORY_TYPE"), //
		jField<::jint>("ILLEGAL_GIOP_MSG_TYPE"), //
		jField<::jint>("ILLEGAL_IIOP_PRIMARY_TO_CONTACT_INFO_TYPE"), //
		jField<::jint>("ILLEGAL_IOR_TO_SOCKET_INFO_TYPE"), //
		jField<::jint>("ILLEGAL_REPLY_STATUS"), //
		jField<::jint>("ILLEGAL_SOCKET_FACTORY_TYPE"), //
		jField<::jint>("ILLEGAL_SUBCONTRACT_ID"), //
		jField<::jint>("ILLEGAL_TARGET_ADDRESS_DISPOSITION"), //
		jField<::jint>("ILLEGAL_UNION_DISCRIMINATOR_TYPE"), //
		jField<::jint>("INDIRECTION_NOT_FOUND"), //
		jField<::jint>("INSERT_OBJECT_FAILED"), //
		jField<::jint>("INSERT_OBJECT_INCOMPATIBLE"), //
		jField<::jint>("INTERRUPTED_JOIN_CALL_WHILE_CLOSING_THREAD_POOL"), //
		jField<::jint>("INVALID_BTC_CONVERTER_NAME"), //
		jField<::jint>("INVALID_BUFF_MGR_STRATEGY"), //
		jField<::jint>("INVALID_CODE_SET_NUMBER"), //
		jField<::jint>("INVALID_CODE_SET_STRING"), //
		jField<::jint>("INVALID_COMPLEX_TYPECODE"), //
		jField<::jint>("INVALID_CONTACT_INFO_LIST_ITERATOR_FAILURE_EXCEPTION"), //
		jField<::jint>("INVALID_CTB_CONVERTER_NAME"), //
		jField<::jint>("INVALID_INDIRECTION"), //
		jField<::jint>("INVALID_ISSTREAMED_TCKIND"), //
		jField<::jint>("INVALID_JDK1_3_1_PATCH_LEVEL"), //
		jField<::jint>("INVALID_OBJECT_KEY"), //
		jField<::jint>("INVALID_REQUEST_PARTITIONING_COMPONENT_VALUE"), //
		jField<::jint>("INVALID_REQUEST_PARTITIONING_ID"), //
		jField<::jint>("INVALID_REQUEST_PARTITIONING_POLICY_VALUE"), //
		jField<::jint>("INVALID_SIMPLE_TYPECODE"), //
		jField<::jint>("INVALID_SINGLE_CHAR_CTB"), //
		jField<::jint>("INVALID_TAGGED_PROFILE"), //
		jField<::jint>("INVALID_TYPECODE_KIND"), //
		jField<::jint>("INVALID_TYPECODE_KIND_MARSHAL"), //
		jField<::jint>("INVOCATION_ERROR_IN_REFLECTIVE_TIE"), //
		jField<::jint>("INVOCATION_INFO_STACK_EMPTY"), //
		jField<::jint>("INVOKE_ERROR"), //
		jField<::jint>("IOEXCEPTION_WHEN_READING_CONNECTION"), //
		jField<::jint>("IO_EXCEPTION_ON_CLOSE"), //
		jField<::jint>("IS_LOCAL_REQUIRES_STUB"), //
		jField<::jint>("JAVA_SERIALIZATION_EXCEPTION"), //
		jField<::jint>("JAVA_STREAM_INIT_FAILED"), //
		jField<::jint>("LOCAL_OBJECT_NOT_ALLOWED"), //
		jField<::jint>("LOCATE_UNKNOWN_OBJECT"), //
		jField<::jint>("LOCATIONFORWARD_ERROR"), //
		jField<::jint>("LONG_DOUBLE_NOT_IMPLEMENTED"), //
		jField<::jint>("MALFORMED_URL"), //
		jField<::jint>("METHOD_NOT_FOUND_IN_TIE"), //
		jField<::jint>("METHOD_SHOULD_NOT_BE_CALLED"), //
		jField<::jint>("MULT_IIOP_PROF_NOT_SUPPORTED"), //
		jField<::jint>("NEGATIVE_BOUNDS"), //
		jField<::jint>("NEGATIVE_STRING_LENGTH"), //
		jField<::jint>("NON_EXISTENT_ORBID"), //
		jField<::jint>("NO_CLIENT_SC_CLASS"), //
		jField<::jint>("NO_INTERFACE_DEF_STUB"), //
		jField<::jint>("NO_INVOCATION_HANDLER"), //
		jField<::jint>("NO_OBJECT_ADAPTER_FACTORY"), //
		jField<::jint>("NO_POA"), //
		jField<::jint>("NO_PROFILE_PRESENT"), //
		jField<::jint>("NO_SERVER_SC_IN_DISPATCH"), //
		jField<::jint>("NO_SERVER_SUBCONTRACT"), //
		jField<::jint>("NO_TOA"), //
		jField<::jint>("NULL_IOR"), //
		jField<::jint>("NULL_NOT_ALLOWED"), //
		jField<::jint>("NULL_OBJECT_REFERENCE"), //
		jField<::jint>("NULL_OUT_CALL"), //
		jField<::jint>("NULL_PARAM"), //
		jField<::jint>("NULL_REPLY_IN_GET_ADDR_DISPOSITION"), //
		jField<::jint>("NUM_INVOCATIONS_ALREADY_ZERO"), //
		jField<::jint>("OBJECT_ADAPTER_ID_NOT_AVAILABLE"), //
		jField<::jint>("OBJREF_FROM_FOREIGN_ORB"), //
		jField<::jint>("ORB_CONFIGURATOR_ERROR"), //
		jField<::jint>("ORB_CONNECT_ERROR"), //
		jField<::jint>("ORB_DESTROYED"), //
		jField<::jint>("ORB_ID_NOT_AVAILABLE"), //
		jField<::jint>("ORB_INITIALIZER_FAILURE"), //
		jField<::jint>("ORB_INITIALIZER_TYPE"), //
		jField<::jint>("ORB_INITIALREFERENCE_SYNTAX"), //
		jField<::jint>("ORB_TARGET_ADDR_PREFERENCE_IN_EXTRACT_OBJECTKEY_INVALID"), //
		jField<::jint>("PEEKSTRING_FAILED"), //
		jField<::jint>("PERSISTENT_SERVERID_NOT_SET"), //
		jField<::jint>("PERSISTENT_SERVERPORT_NOT_SET"), //
		jField<::jint>("PERSISTENT_SERVER_INIT_ERROR"), //
		jField<::jint>("POSITIVE_END_TAG"), //
		jField<::jint>("PROBLEM_WITH_EXCEPTION_TYPECODE"), //
		jField<::jint>("READ_OBJECT_EXCEPTION"), //
		jField<::jint>("READ_OBJECT_LOAD_CLASS_FAILURE"), //
		jField<::jint>("READ_UNDECLARED_EXCEPTION"), //
		jField<::jint>("READ_VALUE_AND_NO_REP_ID"), //
		jField<::jint>("RECURSIVE_TYPECODE_ERROR"), //
		jField<::jint>("RECV_MSG_ERROR"), //
		jField<::jint>("REF_TYPE_INDIR_TYPE"), //
		jField<::jint>("REMARSHAL_WITH_NOWHERE_TO_GO"), //
		jField<::jint>("REQUEST_CANCELED"), //
		jField<::jint>("REQUEST_REQUIRES_STUB"), //
		jField<::jint>("RUNTIMEEXCEPTION"), //
		jField<::jint>("RequestDispatcherRegistry_ERROR"), //
		jField<::jint>("SECURITY_EXCEPTION_IN_ACCEPT"), //
		jField<::jint>("SELECTION_KEY_INVALID"), //
		jField<::jint>("SEND_DEFERRED_NOTIMPLEMENTED"), //
		jField<::jint>("SERVANT_NOT_FOUND"), //
		jField<::jint>("SERVER_ID_NOT_AVAILABLE"), //
		jField<::jint>("SERVER_SC_NO_IIOP_PROFILE"), //
		jField<::jint>("SERVER_SC_TEMP_SIZE"), //
		jField<::jint>("SET_DELEGATE_REQUIRES_STUB"), //
		jField<::jint>("SET_EXCEPTION_CALLED_BAD_TYPE"), //
		jField<::jint>("SET_EXCEPTION_CALLED_NULL_ARGS"), //
		jField<::jint>("SET_RESULT_AFTER_EXCEPTION"), //
		jField<::jint>("SET_RESULT_CALLED_MULTIPLE"), //
		jField<::jint>("SET_RESULT_CALLED_NULL_ARGS"), //
		jField<::jint>("SOCKET_FACTORY_AND_CONTACT_INFO_LIST_AT_SAME_TIME"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE1"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE2"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE3"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE4"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE5"), //
		jField<::jint>("STATEMENT_NOT_REACHABLE6"), //
		jField<::jint>("STRINGIFY_WRITE_ERROR"), //
		jField<::jint>("STRING_EXPECTED"), //
		jField<::jint>("STUB_CREATE_ERROR"), //
		jField<::jint>("SVCCTX_UNMARSHAL_ERROR"), //
		jField<::jint>("THREAD_GROUP_DESTROY_FAILED"), //
		jField<::jint>("THREAD_GROUP_HAS_ACTIVE_THREADS_IN_CLOSE"), //
		jField<::jint>("THREAD_GROUP_HAS_SUB_GROUPS_IN_CLOSE"), //
		jField<::jint>("THREAD_GROUP_IS_DESTROYED"), //
		jField<::jint>("THREAD_POOL_CLOSE_ERROR"), //
		jField<::jint>("TK_LONG_DOUBLE_NOT_SUPPORTED"), //
		jField<::jint>("TRANSPORT_READ_TIMEOUT_EXCEEDED"), //
		jField<::jint>("TYPECODE_NOT_SUPPORTED"), //
		jField<::jint>("UNABLE_FIND_VALUE_FACTORY"), //
		jField<::jint>("UNABLE_TO_LOCATE_REP_ID_ARRAY"), //
		jField<::jint>("UNABLE_TO_SET_SOCKET_FACTORY_ORB"), //
		jField<::jint>("UNEXPECTED_DII_EXCEPTION"), //
		jField<::jint>("UNEXPECTED_DIRECT_BYTE_BUFFER_WITH_NON_CHANNEL_SOCKET"), //
		jField<::jint>("UNEXPECTED_ENCLOSING_VALUETYPE"), //
		jField<::jint>("UNEXPECTED_EOF"), //
		jField<::jint>("UNEXPECTED_EXCEPTION"), //
		jField<::jint>("UNEXPECTED_NON_DIRECT_BYTE_BUFFER_WITH_CHANNEL_SOCKET"), //
		jField<::jint>("UNEXPECTED_UNION_DEFAULT"), //
		jField<::jint>("UNION_DISCRIMINATOR_ERROR"), //
		jField<::jint>("UNKNOWN_CODESET"), //
		jField<::jint>("UNKNOWN_CONVERSION_CODE_SET"), //
		jField<::jint>("UNKNOWN_CORBA_EXC"), //
		jField<::jint>("UNKNOWN_DSI_SYSEX"), //
		jField<::jint>("UNKNOWN_EXCEPTION_IN_DISPATCH"), //
		jField<::jint>("UNKNOWN_NATIVE_CODESET"), //
		jField<::jint>("UNKNOWN_SERVER_ERROR"), //
		jField<::jint>("UNKNOWN_SYSEX"), //
		jField<::jint>("UNRESOLVED_RECURSIVE_TYPECODE"), //
		jField<::jint>("UNSUPPORTED_GIOP_VERSION"), //
		jField<::jint>("VALUEHANDLER_READ_ERROR"), //
		jField<::jint>("VALUEHANDLER_READ_EXCEPTION"), //
		jField<::jint>("WCHAR_ARRAY_UNSUPPORTED_ENCODING"), //
		jField<::jint>("WCHAR_DATA_IN_GIOP_1_0"), //
		jField<::jint>("WORKER_THREAD_CAUGHT_UNEXPECTED_THROWABLE"), //
		jField<::jint>("WORKER_THREAD_CREATED"), //
		jField<::jint>("WORKER_THREAD_CREATION_FAILURE"), //
		jField<::jint>("WORKER_THREAD_DO_WORK_THROWABLE"), //
		jField<::jint>("WORKER_THREAD_NOT_NEEDED"), //
		jField<::jint>("WORKER_THREAD_SET_NAME_FAILURE"), //
		jField<::jint>("WORKER_THREAD_THROWABLE_FROM_REQUEST_WORK"), //
		jField<::jint>("WORK_QUEUE_REQUEST_WORK_NO_WORK_FOUND"), //
		jField<::jint>("WORK_QUEUE_THREAD_INTERRUPTED"), //
		jField<::jint>("WRITE_ERROR_SEND"), //
		jField<::jint>("WRITE_LOCAL_OBJECT"), //
		jField<::jint>("WRITE_UNDECLARED_EXCEPTION"), //
		jField<::jint>("WRONG_CLIENTSC"), //
		jField<::jint>("WRONG_INTERFACE_DEF"), //
	};

	template<typename F = ::jint>
	static auto ABSTRACT_FROM_NON_ABSTRACT() {
		static_assert(field_signatures[jField<F>("ABSTRACT_FROM_NON_ABSTRACT")] != -1);
		return sat<F>("ABSTRACT_FROM_NON_ABSTRACT");
	}

	template<typename F = ::jint>
	static auto ACCEPTORS_AND_LEGACY_SOCKET_FACTORY_AT_SAME_TIME() {
		static_assert(field_signatures[jField<F>("ACCEPTORS_AND_LEGACY_SOCKET_FACTORY_AT_SAME_TIME")] != -1);
		return sat<F>("ACCEPTORS_AND_LEGACY_SOCKET_FACTORY_AT_SAME_TIME");
	}

	template<typename F = ::jint>
	static auto ACCEPTOR_INSTANTIATION_FAILURE() {
		static_assert(field_signatures[jField<F>("ACCEPTOR_INSTANTIATION_FAILURE")] != -1);
		return sat<F>("ACCEPTOR_INSTANTIATION_FAILURE");
	}

	template<typename F = ::jint>
	static auto ACCEPTOR_INSTANTIATION_TYPE_FAILURE() {
		static_assert(field_signatures[jField<F>("ACCEPTOR_INSTANTIATION_TYPE_FAILURE")] != -1);
		return sat<F>("ACCEPTOR_INSTANTIATION_TYPE_FAILURE");
	}

	template<typename F = ::jint>
	static auto ADAPTER_ID_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("ADAPTER_ID_NOT_AVAILABLE")] != -1);
		return sat<F>("ADAPTER_ID_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto ADAPTER_INACTIVE_IN_ACTIVATION() {
		static_assert(field_signatures[jField<F>("ADAPTER_INACTIVE_IN_ACTIVATION")] != -1);
		return sat<F>("ADAPTER_INACTIVE_IN_ACTIVATION");
	}

	template<typename F = ::jint>
	static auto APPLICATION_EXCEPTION_IN_SPECIAL_METHOD() {
		static_assert(field_signatures[jField<F>("APPLICATION_EXCEPTION_IN_SPECIAL_METHOD")] != -1);
		return sat<F>("APPLICATION_EXCEPTION_IN_SPECIAL_METHOD");
	}

	template<typename F = ::jint>
	static auto ARGUMENTS_CALLED_AFTER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("ARGUMENTS_CALLED_AFTER_EXCEPTION")] != -1);
		return sat<F>("ARGUMENTS_CALLED_AFTER_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto ARGUMENTS_CALLED_MULTIPLE() {
		static_assert(field_signatures[jField<F>("ARGUMENTS_CALLED_MULTIPLE")] != -1);
		return sat<F>("ARGUMENTS_CALLED_MULTIPLE");
	}

	template<typename F = ::jint>
	static auto ARGUMENTS_CALLED_NULL_ARGS() {
		static_assert(field_signatures[jField<F>("ARGUMENTS_CALLED_NULL_ARGS")] != -1);
		return sat<F>("ARGUMENTS_CALLED_NULL_ARGS");
	}

	template<typename F = ::jint>
	static auto ARGUMENTS_NOT_CALLED() {
		static_assert(field_signatures[jField<F>("ARGUMENTS_NOT_CALLED")] != -1);
		return sat<F>("ARGUMENTS_NOT_CALLED");
	}

	template<typename F = ::jint>
	static auto BADKIND_CANNOT_OCCUR() {
		static_assert(field_signatures[jField<F>("BADKIND_CANNOT_OCCUR")] != -1);
		return sat<F>("BADKIND_CANNOT_OCCUR");
	}

	template<typename F = ::jint>
	static auto BAD_ACTIVATE_TIE_CALL() {
		static_assert(field_signatures[jField<F>("BAD_ACTIVATE_TIE_CALL")] != -1);
		return sat<F>("BAD_ACTIVATE_TIE_CALL");
	}

	template<typename F = ::jint>
	static auto BAD_ADAPTER_ID() {
		static_assert(field_signatures[jField<F>("BAD_ADAPTER_ID")] != -1);
		return sat<F>("BAD_ADAPTER_ID");
	}

	template<typename F = ::jint>
	static auto BAD_ARGUMENTS_NVLIST() {
		static_assert(field_signatures[jField<F>("BAD_ARGUMENTS_NVLIST")] != -1);
		return sat<F>("BAD_ARGUMENTS_NVLIST");
	}

	template<typename F = ::jint>
	static auto BAD_CHUNK_LENGTH() {
		static_assert(field_signatures[jField<F>("BAD_CHUNK_LENGTH")] != -1);
		return sat<F>("BAD_CHUNK_LENGTH");
	}

	template<typename F = ::jint>
	static auto BAD_CODEBASE_INDIRECTION() {
		static_assert(field_signatures[jField<F>("BAD_CODEBASE_INDIRECTION")] != -1);
		return sat<F>("BAD_CODEBASE_INDIRECTION");
	}

	template<typename F = ::jint>
	static auto BAD_CODESETS_FROM_CLIENT() {
		static_assert(field_signatures[jField<F>("BAD_CODESETS_FROM_CLIENT")] != -1);
		return sat<F>("BAD_CODESETS_FROM_CLIENT");
	}

	template<typename F = ::jint>
	static auto BAD_CODE_SET_STRING() {
		static_assert(field_signatures[jField<F>("BAD_CODE_SET_STRING")] != -1);
		return sat<F>("BAD_CODE_SET_STRING");
	}

	template<typename F = ::jint>
	static auto BAD_COMPLETION_STATUS_IN_LOCATE_REPLY() {
		static_assert(field_signatures[jField<F>("BAD_COMPLETION_STATUS_IN_LOCATE_REPLY")] != -1);
		return sat<F>("BAD_COMPLETION_STATUS_IN_LOCATE_REPLY");
	}

	template<typename F = ::jint>
	static auto BAD_COMPLETION_STATUS_IN_REPLY() {
		static_assert(field_signatures[jField<F>("BAD_COMPLETION_STATUS_IN_REPLY")] != -1);
		return sat<F>("BAD_COMPLETION_STATUS_IN_REPLY");
	}

	template<typename F = ::jint>
	static auto BAD_CONTACT_INFO_LIST_FACTORY() {
		static_assert(field_signatures[jField<F>("BAD_CONTACT_INFO_LIST_FACTORY")] != -1);
		return sat<F>("BAD_CONTACT_INFO_LIST_FACTORY");
	}

	template<typename F = ::jint>
	static auto BAD_CORBALOC_STRING() {
		static_assert(field_signatures[jField<F>("BAD_CORBALOC_STRING")] != -1);
		return sat<F>("BAD_CORBALOC_STRING");
	}

	template<typename F = ::jint>
	static auto BAD_CUSTOM_IIOP_PRIMARY_TO_CONTACT_INFO() {
		static_assert(field_signatures[jField<F>("BAD_CUSTOM_IIOP_PRIMARY_TO_CONTACT_INFO")] != -1);
		return sat<F>("BAD_CUSTOM_IIOP_PRIMARY_TO_CONTACT_INFO");
	}

	template<typename F = ::jint>
	static auto BAD_CUSTOM_IOR_TO_SOCKET_INFO() {
		static_assert(field_signatures[jField<F>("BAD_CUSTOM_IOR_TO_SOCKET_INFO")] != -1);
		return sat<F>("BAD_CUSTOM_IOR_TO_SOCKET_INFO");
	}

	template<typename F = ::jint>
	static auto BAD_CUSTOM_SOCKET_FACTORY() {
		static_assert(field_signatures[jField<F>("BAD_CUSTOM_SOCKET_FACTORY")] != -1);
		return sat<F>("BAD_CUSTOM_SOCKET_FACTORY");
	}

	template<typename F = ::jint>
	static auto BAD_DIGIT_IN_FIXED() {
		static_assert(field_signatures[jField<F>("BAD_DIGIT_IN_FIXED")] != -1);
		return sat<F>("BAD_DIGIT_IN_FIXED");
	}

	template<typename F = ::jint>
	static auto BAD_EXCEPTION_DETAIL_MESSAGE_SERVICE_CONTEXT_TYPE() {
		static_assert(field_signatures[jField<F>("BAD_EXCEPTION_DETAIL_MESSAGE_SERVICE_CONTEXT_TYPE")] != -1);
		return sat<F>("BAD_EXCEPTION_DETAIL_MESSAGE_SERVICE_CONTEXT_TYPE");
	}

	template<typename F = ::jint>
	static auto BAD_FIXED() {
		static_assert(field_signatures[jField<F>("BAD_FIXED")] != -1);
		return sat<F>("BAD_FIXED");
	}

	template<typename F = ::jint>
	static auto BAD_GIOP_1_1_CTB() {
		static_assert(field_signatures[jField<F>("BAD_GIOP_1_1_CTB")] != -1);
		return sat<F>("BAD_GIOP_1_1_CTB");
	}

	template<typename F = ::jint>
	static auto BAD_GIOP_REQUEST_TYPE() {
		static_assert(field_signatures[jField<F>("BAD_GIOP_REQUEST_TYPE")] != -1);
		return sat<F>("BAD_GIOP_REQUEST_TYPE");
	}

	template<typename F = ::jint>
	static auto BAD_HELPER_ID_METHOD() {
		static_assert(field_signatures[jField<F>("BAD_HELPER_ID_METHOD")] != -1);
		return sat<F>("BAD_HELPER_ID_METHOD");
	}

	template<typename F = ::jint>
	static auto BAD_HELPER_READ_METHOD() {
		static_assert(field_signatures[jField<F>("BAD_HELPER_READ_METHOD")] != -1);
		return sat<F>("BAD_HELPER_READ_METHOD");
	}

	template<typename F = ::jint>
	static auto BAD_HELPER_WRITE_METHOD() {
		static_assert(field_signatures[jField<F>("BAD_HELPER_WRITE_METHOD")] != -1);
		return sat<F>("BAD_HELPER_WRITE_METHOD");
	}

	template<typename F = ::jint>
	static auto BAD_HEX_DIGIT() {
		static_assert(field_signatures[jField<F>("BAD_HEX_DIGIT")] != -1);
		return sat<F>("BAD_HEX_DIGIT");
	}

	template<typename F = ::jint>
	static auto BAD_INSERTOBJ_PARAM() {
		static_assert(field_signatures[jField<F>("BAD_INSERTOBJ_PARAM")] != -1);
		return sat<F>("BAD_INSERTOBJ_PARAM");
	}

	template<typename F = ::jint>
	static auto BAD_KIND() {
		static_assert(field_signatures[jField<F>("BAD_KIND")] != -1);
		return sat<F>("BAD_KIND");
	}

	template<typename F = ::jint>
	static auto BAD_LOCATE_REQUEST_STATUS() {
		static_assert(field_signatures[jField<F>("BAD_LOCATE_REQUEST_STATUS")] != -1);
		return sat<F>("BAD_LOCATE_REQUEST_STATUS");
	}

	template<typename F = ::jint>
	static auto BAD_MESSAGE_TYPE_FOR_CANCEL() {
		static_assert(field_signatures[jField<F>("BAD_MESSAGE_TYPE_FOR_CANCEL")] != -1);
		return sat<F>("BAD_MESSAGE_TYPE_FOR_CANCEL");
	}

	template<typename F = ::jint>
	static auto BAD_MODIFIER() {
		static_assert(field_signatures[jField<F>("BAD_MODIFIER")] != -1);
		return sat<F>("BAD_MODIFIER");
	}

	template<typename F = ::jint>
	static auto BAD_ORB_CONFIGURATOR() {
		static_assert(field_signatures[jField<F>("BAD_ORB_CONFIGURATOR")] != -1);
		return sat<F>("BAD_ORB_CONFIGURATOR");
	}

	template<typename F = ::jint>
	static auto BAD_ORB_FOR_SERVANT() {
		static_assert(field_signatures[jField<F>("BAD_ORB_FOR_SERVANT")] != -1);
		return sat<F>("BAD_ORB_FOR_SERVANT");
	}

	template<typename F = ::jint>
	static auto BAD_REMOTE_TYPECODE() {
		static_assert(field_signatures[jField<F>("BAD_REMOTE_TYPECODE")] != -1);
		return sat<F>("BAD_REMOTE_TYPECODE");
	}

	template<typename F = ::jint>
	static auto BAD_REPLYSTATUS() {
		static_assert(field_signatures[jField<F>("BAD_REPLYSTATUS")] != -1);
		return sat<F>("BAD_REPLYSTATUS");
	}

	template<typename F = ::jint>
	static auto BAD_REP_ID_INDIRECTION() {
		static_assert(field_signatures[jField<F>("BAD_REP_ID_INDIRECTION")] != -1);
		return sat<F>("BAD_REP_ID_INDIRECTION");
	}

	template<typename F = ::jint>
	static auto BAD_RESERVED_LENGTH() {
		static_assert(field_signatures[jField<F>("BAD_RESERVED_LENGTH")] != -1);
		return sat<F>("BAD_RESERVED_LENGTH");
	}

	template<typename F = ::jint>
	static auto BAD_SEQUENCE_BOUNDS() {
		static_assert(field_signatures[jField<F>("BAD_SEQUENCE_BOUNDS")] != -1);
		return sat<F>("BAD_SEQUENCE_BOUNDS");
	}

	template<typename F = ::jint>
	static auto BAD_SERVANT_READ_OBJECT() {
		static_assert(field_signatures[jField<F>("BAD_SERVANT_READ_OBJECT")] != -1);
		return sat<F>("BAD_SERVANT_READ_OBJECT");
	}

	template<typename F = ::jint>
	static auto BAD_SERVER_ID() {
		static_assert(field_signatures[jField<F>("BAD_SERVER_ID")] != -1);
		return sat<F>("BAD_SERVER_ID");
	}

	template<typename F = ::jint>
	static auto BAD_SKELETON() {
		static_assert(field_signatures[jField<F>("BAD_SKELETON")] != -1);
		return sat<F>("BAD_SKELETON");
	}

	template<typename F = ::jint>
	static auto BAD_STRINGIFIED_IOR() {
		static_assert(field_signatures[jField<F>("BAD_STRINGIFIED_IOR")] != -1);
		return sat<F>("BAD_STRINGIFIED_IOR");
	}

	template<typename F = ::jint>
	static auto BAD_STRINGIFIED_IOR_LEN() {
		static_assert(field_signatures[jField<F>("BAD_STRINGIFIED_IOR_LEN")] != -1);
		return sat<F>("BAD_STRINGIFIED_IOR_LEN");
	}

	template<typename F = ::jint>
	static auto BAD_STRING_BOUNDS() {
		static_assert(field_signatures[jField<F>("BAD_STRING_BOUNDS")] != -1);
		return sat<F>("BAD_STRING_BOUNDS");
	}

	template<typename F = ::jint>
	static auto BAD_SYSTEM_EXCEPTION_IN_LOCATE_REPLY() {
		static_assert(field_signatures[jField<F>("BAD_SYSTEM_EXCEPTION_IN_LOCATE_REPLY")] != -1);
		return sat<F>("BAD_SYSTEM_EXCEPTION_IN_LOCATE_REPLY");
	}

	template<typename F = ::jint>
	static auto BAD_SYSTEM_EXCEPTION_IN_REPLY() {
		static_assert(field_signatures[jField<F>("BAD_SYSTEM_EXCEPTION_IN_REPLY")] != -1);
		return sat<F>("BAD_SYSTEM_EXCEPTION_IN_REPLY");
	}

	template<typename F = ::jint>
	static auto BAD_TOA_OAID() {
		static_assert(field_signatures[jField<F>("BAD_TOA_OAID")] != -1);
		return sat<F>("BAD_TOA_OAID");
	}

	template<typename F = ::jint>
	static auto BAD_TYPECODE_FOR_CUSTOM_VALUE() {
		static_assert(field_signatures[jField<F>("BAD_TYPECODE_FOR_CUSTOM_VALUE")] != -1);
		return sat<F>("BAD_TYPECODE_FOR_CUSTOM_VALUE");
	}

	template<typename F = ::jint>
	static auto BAD_UNICODE_PAIR() {
		static_assert(field_signatures[jField<F>("BAD_UNICODE_PAIR")] != -1);
		return sat<F>("BAD_UNICODE_PAIR");
	}

	template<typename F = ::jint>
	static auto BAD_URL() {
		static_assert(field_signatures[jField<F>("BAD_URL")] != -1);
		return sat<F>("BAD_URL");
	}

	template<typename F = ::jint>
	static auto BAD_VALUE_TAG() {
		static_assert(field_signatures[jField<F>("BAD_VALUE_TAG")] != -1);
		return sat<F>("BAD_VALUE_TAG");
	}

	template<typename F = ::jint>
	static auto BOOTSTRAP_APPLICATION_EXCEPTION() {
		static_assert(field_signatures[jField<F>("BOOTSTRAP_APPLICATION_EXCEPTION")] != -1);
		return sat<F>("BOOTSTRAP_APPLICATION_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto BOOTSTRAP_EXCEPTION() {
		static_assert(field_signatures[jField<F>("BOOTSTRAP_EXCEPTION")] != -1);
		return sat<F>("BOOTSTRAP_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto BOOTSTRAP_RUNTIME_EXCEPTION() {
		static_assert(field_signatures[jField<F>("BOOTSTRAP_RUNTIME_EXCEPTION")] != -1);
		return sat<F>("BOOTSTRAP_RUNTIME_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto BOOTSTRAP_SERVER_NOT_AVAIL() {
		static_assert(field_signatures[jField<F>("BOOTSTRAP_SERVER_NOT_AVAIL")] != -1);
		return sat<F>("BOOTSTRAP_SERVER_NOT_AVAIL");
	}

	template<typename F = ::jint>
	static auto BOUNDS_CANNOT_OCCUR() {
		static_assert(field_signatures[jField<F>("BOUNDS_CANNOT_OCCUR")] != -1);
		return sat<F>("BOUNDS_CANNOT_OCCUR");
	}

	template<typename F = ::jint>
	static auto BOUNDS_ERROR_IN_DII_REQUEST() {
		static_assert(field_signatures[jField<F>("BOUNDS_ERROR_IN_DII_REQUEST")] != -1);
		return sat<F>("BOUNDS_ERROR_IN_DII_REQUEST");
	}

	template<typename F = ::jint>
	static auto BTC_CONVERTER_FAILURE() {
		static_assert(field_signatures[jField<F>("BTC_CONVERTER_FAILURE")] != -1);
		return sat<F>("BTC_CONVERTER_FAILURE");
	}

	template<typename F = ::jint>
	static auto BTC_RESULT_MORE_THAN_ONE_CHAR() {
		static_assert(field_signatures[jField<F>("BTC_RESULT_MORE_THAN_ONE_CHAR")] != -1);
		return sat<F>("BTC_RESULT_MORE_THAN_ONE_CHAR");
	}

	template<typename F = ::jint>
	static auto BUFFER_READ_MANAGER_TIMEOUT() {
		static_assert(field_signatures[jField<F>("BUFFER_READ_MANAGER_TIMEOUT")] != -1);
		return sat<F>("BUFFER_READ_MANAGER_TIMEOUT");
	}

	template<typename F = ::jint>
	static auto CANCEL_NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("CANCEL_NOT_SUPPORTED")] != -1);
		return sat<F>("CANCEL_NOT_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto CANNOT_CREATE_ORBID_DB() {
		static_assert(field_signatures[jField<F>("CANNOT_CREATE_ORBID_DB")] != -1);
		return sat<F>("CANNOT_CREATE_ORBID_DB");
	}

	template<typename F = ::jint>
	static auto CANNOT_MARSHAL_BAD_TCKIND() {
		static_assert(field_signatures[jField<F>("CANNOT_MARSHAL_BAD_TCKIND")] != -1);
		return sat<F>("CANNOT_MARSHAL_BAD_TCKIND");
	}

	template<typename F = ::jint>
	static auto CANNOT_MARSHAL_NATIVE() {
		static_assert(field_signatures[jField<F>("CANNOT_MARSHAL_NATIVE")] != -1);
		return sat<F>("CANNOT_MARSHAL_NATIVE");
	}

	template<typename F = ::jint>
	static auto CANNOT_READ_ORBID_DB() {
		static_assert(field_signatures[jField<F>("CANNOT_READ_ORBID_DB")] != -1);
		return sat<F>("CANNOT_READ_ORBID_DB");
	}

	template<typename F = ::jint>
	static auto CANNOT_WRITE_ORBID_DB() {
		static_assert(field_signatures[jField<F>("CANNOT_WRITE_ORBID_DB")] != -1);
		return sat<F>("CANNOT_WRITE_ORBID_DB");
	}

	template<typename F = ::jint>
	static auto CHARACTER_OUTOFRANGE() {
		static_assert(field_signatures[jField<F>("CHARACTER_OUTOFRANGE")] != -1);
		return sat<F>("CHARACTER_OUTOFRANGE");
	}

	template<typename F = ::jint>
	static auto CHUNK_OVERFLOW() {
		static_assert(field_signatures[jField<F>("CHUNK_OVERFLOW")] != -1);
		return sat<F>("CHUNK_OVERFLOW");
	}

	template<typename F = ::jint>
	static auto CLASS_NOT_FOUND1() {
		static_assert(field_signatures[jField<F>("CLASS_NOT_FOUND1")] != -1);
		return sat<F>("CLASS_NOT_FOUND1");
	}

	template<typename F = ::jint>
	static auto CLASS_NOT_FOUND2() {
		static_assert(field_signatures[jField<F>("CLASS_NOT_FOUND2")] != -1);
		return sat<F>("CLASS_NOT_FOUND2");
	}

	template<typename F = ::jint>
	static auto CLASS_NOT_FOUND3() {
		static_assert(field_signatures[jField<F>("CLASS_NOT_FOUND3")] != -1);
		return sat<F>("CLASS_NOT_FOUND3");
	}

	template<typename F = ::jint>
	static auto CNFE_READ_CLASS() {
		static_assert(field_signatures[jField<F>("CNFE_READ_CLASS")] != -1);
		return sat<F>("CNFE_READ_CLASS");
	}

	template<typename F = ::jint>
	static auto CODESET_INCOMPATIBLE() {
		static_assert(field_signatures[jField<F>("CODESET_INCOMPATIBLE")] != -1);
		return sat<F>("CODESET_INCOMPATIBLE");
	}

	template<typename F = ::jint>
	static auto CONNECTING_SERVANT() {
		static_assert(field_signatures[jField<F>("CONNECTING_SERVANT")] != -1);
		return sat<F>("CONNECTING_SERVANT");
	}

	template<typename F = ::jint>
	static auto CONNECTION_ABORT() {
		static_assert(field_signatures[jField<F>("CONNECTION_ABORT")] != -1);
		return sat<F>("CONNECTION_ABORT");
	}

	template<typename F = ::jint>
	static auto CONNECTION_CLOSE_REBIND() {
		static_assert(field_signatures[jField<F>("CONNECTION_CLOSE_REBIND")] != -1);
		return sat<F>("CONNECTION_CLOSE_REBIND");
	}

	template<typename F = ::jint>
	static auto CONNECTION_REBIND() {
		static_assert(field_signatures[jField<F>("CONNECTION_REBIND")] != -1);
		return sat<F>("CONNECTION_REBIND");
	}

	template<typename F = ::jint>
	static auto CONNECT_FAILURE() {
		static_assert(field_signatures[jField<F>("CONNECT_FAILURE")] != -1);
		return sat<F>("CONNECT_FAILURE");
	}

	template<typename F = ::jint>
	static auto CONNECT_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("CONNECT_REQUIRES_STUB")] != -1);
		return sat<F>("CONNECT_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto CONTEXT_CALLED_OUT_OF_ORDER() {
		static_assert(field_signatures[jField<F>("CONTEXT_CALLED_OUT_OF_ORDER")] != -1);
		return sat<F>("CONTEXT_CALLED_OUT_OF_ORDER");
	}

	template<typename F = ::jint>
	static auto CONTEXT_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("CONTEXT_NOT_IMPLEMENTED")] != -1);
		return sat<F>("CONTEXT_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_CREATE_ARRAY() {
		static_assert(field_signatures[jField<F>("COULD_NOT_CREATE_ARRAY")] != -1);
		return sat<F>("COULD_NOT_CREATE_ARRAY");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_DUPLICATE_CDR_INPUT_STREAM() {
		static_assert(field_signatures[jField<F>("COULD_NOT_DUPLICATE_CDR_INPUT_STREAM")] != -1);
		return sat<F>("COULD_NOT_DUPLICATE_CDR_INPUT_STREAM");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_FIND_CLASS() {
		static_assert(field_signatures[jField<F>("COULD_NOT_FIND_CLASS")] != -1);
		return sat<F>("COULD_NOT_FIND_CLASS");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_INSTANTIATE_HELPER() {
		static_assert(field_signatures[jField<F>("COULD_NOT_INSTANTIATE_HELPER")] != -1);
		return sat<F>("COULD_NOT_INSTANTIATE_HELPER");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_INVOKE_HELPER_READ_METHOD() {
		static_assert(field_signatures[jField<F>("COULD_NOT_INVOKE_HELPER_READ_METHOD")] != -1);
		return sat<F>("COULD_NOT_INVOKE_HELPER_READ_METHOD");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_LOAD_CLASS() {
		static_assert(field_signatures[jField<F>("COULD_NOT_LOAD_CLASS")] != -1);
		return sat<F>("COULD_NOT_LOAD_CLASS");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_SET_ARRAY() {
		static_assert(field_signatures[jField<F>("COULD_NOT_SET_ARRAY")] != -1);
		return sat<F>("COULD_NOT_SET_ARRAY");
	}

	template<typename F = ::jint>
	static auto COULD_NOT_SKIP_BYTES() {
		static_assert(field_signatures[jField<F>("COULD_NOT_SKIP_BYTES")] != -1);
		return sat<F>("COULD_NOT_SKIP_BYTES");
	}

	template<typename F = ::jint>
	static auto CREATE_LISTENER_FAILED() {
		static_assert(field_signatures[jField<F>("CREATE_LISTENER_FAILED")] != -1);
		return sat<F>("CREATE_LISTENER_FAILED");
	}

	template<typename F = ::jint>
	static auto CTB_CONVERTER_FAILURE() {
		static_assert(field_signatures[jField<F>("CTB_CONVERTER_FAILURE")] != -1);
		return sat<F>("CTB_CONVERTER_FAILURE");
	}

	template<typename F = ::jint>
	static auto CUSTOM_WRAPPER_INDIRECTION() {
		static_assert(field_signatures[jField<F>("CUSTOM_WRAPPER_INDIRECTION")] != -1);
		return sat<F>("CUSTOM_WRAPPER_INDIRECTION");
	}

	template<typename F = ::jint>
	static auto CUSTOM_WRAPPER_NOT_SINGLE_REPID() {
		static_assert(field_signatures[jField<F>("CUSTOM_WRAPPER_NOT_SINGLE_REPID")] != -1);
		return sat<F>("CUSTOM_WRAPPER_NOT_SINGLE_REPID");
	}

	template<typename F = ::jint>
	static auto CUSTOM_WRAPPER_WITH_CODEBASE() {
		static_assert(field_signatures[jField<F>("CUSTOM_WRAPPER_WITH_CODEBASE")] != -1);
		return sat<F>("CUSTOM_WRAPPER_WITH_CODEBASE");
	}

	template<typename F = ::jint>
	static auto DEFAULT_CREATE_SERVER_SOCKET_GIVEN_NON_IIOP_CLEAR_TEXT() {
		static_assert(field_signatures[jField<F>("DEFAULT_CREATE_SERVER_SOCKET_GIVEN_NON_IIOP_CLEAR_TEXT")] != -1);
		return sat<F>("DEFAULT_CREATE_SERVER_SOCKET_GIVEN_NON_IIOP_CLEAR_TEXT");
	}

	template<typename F = ::jint>
	static auto DSIMETHOD_NOTCALLED() {
		static_assert(field_signatures[jField<F>("DSIMETHOD_NOTCALLED")] != -1);
		return sat<F>("DSIMETHOD_NOTCALLED");
	}

	template<typename F = ::jint>
	static auto DSI_RESULT_EXCEPTION() {
		static_assert(field_signatures[jField<F>("DSI_RESULT_EXCEPTION")] != -1);
		return sat<F>("DSI_RESULT_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_EXCEPTION_DETAIL_MESSAGE() {
		static_assert(field_signatures[jField<F>("DUPLICATE_EXCEPTION_DETAIL_MESSAGE")] != -1);
		return sat<F>("DUPLICATE_EXCEPTION_DETAIL_MESSAGE");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_INDIRECTION_OFFSET() {
		static_assert(field_signatures[jField<F>("DUPLICATE_INDIRECTION_OFFSET")] != -1);
		return sat<F>("DUPLICATE_INDIRECTION_OFFSET");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_ORB_VERSION_SERVICE_CONTEXT() {
		static_assert(field_signatures[jField<F>("DUPLICATE_ORB_VERSION_SERVICE_CONTEXT")] != -1);
		return sat<F>("DUPLICATE_ORB_VERSION_SERVICE_CONTEXT");
	}

	template<typename F = ::jint>
	static auto DUPLICATE_SENDING_CONTEXT_SERVICE_CONTEXT() {
		static_assert(field_signatures[jField<F>("DUPLICATE_SENDING_CONTEXT_SERVICE_CONTEXT")] != -1);
		return sat<F>("DUPLICATE_SENDING_CONTEXT_SERVICE_CONTEXT");
	}

	template<typename F = ::jint>
	static auto DYN_ANY_DESTROYED() {
		static_assert(field_signatures[jField<F>("DYN_ANY_DESTROYED")] != -1);
		return sat<F>("DYN_ANY_DESTROYED");
	}

	template<typename F = ::jint>
	static auto EMPTY_STACK_RUN_SERVANT_POST_INVOKE() {
		static_assert(field_signatures[jField<F>("EMPTY_STACK_RUN_SERVANT_POST_INVOKE")] != -1);
		return sat<F>("EMPTY_STACK_RUN_SERVANT_POST_INVOKE");
	}

	template<typename F = ::jint>
	static auto END_OF_STREAM() {
		static_assert(field_signatures[jField<F>("END_OF_STREAM")] != -1);
		return sat<F>("END_OF_STREAM");
	}

	template<typename F = ::jint>
	static auto ERROR_INIT_BADSERVERIDHANDLER() {
		static_assert(field_signatures[jField<F>("ERROR_INIT_BADSERVERIDHANDLER")] != -1);
		return sat<F>("ERROR_INIT_BADSERVERIDHANDLER");
	}

	template<typename F = ::jint>
	static auto ERROR_INVOKING_HELPER_WRITE() {
		static_assert(field_signatures[jField<F>("ERROR_INVOKING_HELPER_WRITE")] != -1);
		return sat<F>("ERROR_INVOKING_HELPER_WRITE");
	}

	template<typename F = ::jint>
	static auto ERROR_IN_SETTING_DYNAMIC_STUB_FACTORY_FACTORY() {
		static_assert(field_signatures[jField<F>("ERROR_IN_SETTING_DYNAMIC_STUB_FACTORY_FACTORY")] != -1);
		return sat<F>("ERROR_IN_SETTING_DYNAMIC_STUB_FACTORY_FACTORY");
	}

	template<typename F = ::jint>
	static auto ERROR_RESOLVING_ALIAS() {
		static_assert(field_signatures[jField<F>("ERROR_RESOLVING_ALIAS")] != -1);
		return sat<F>("ERROR_RESOLVING_ALIAS");
	}

	template<typename F = ::jint>
	static auto ERROR_SETTING_FIELD() {
		static_assert(field_signatures[jField<F>("ERROR_SETTING_FIELD")] != -1);
		return sat<F>("ERROR_SETTING_FIELD");
	}

	template<typename F = ::jint>
	static auto ERROR_UNMARSHALING_USEREXC() {
		static_assert(field_signatures[jField<F>("ERROR_UNMARSHALING_USEREXC")] != -1);
		return sat<F>("ERROR_UNMARSHALING_USEREXC");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_IN_ACCEPT() {
		static_assert(field_signatures[jField<F>("EXCEPTION_IN_ACCEPT")] != -1);
		return sat<F>("EXCEPTION_IN_ACCEPT");
	}

	template<typename F = ::jint>
	static auto EXCEPTION_WHEN_SENDING_CLOSE_CONNECTION() {
		static_assert(field_signatures[jField<F>("EXCEPTION_WHEN_SENDING_CLOSE_CONNECTION")] != -1);
		return sat<F>("EXCEPTION_WHEN_SENDING_CLOSE_CONNECTION");
	}

	template<typename F = ::jint>
	static auto EXPECTED_TYPE_NULL_AND_NO_REP_ID() {
		static_assert(field_signatures[jField<F>("EXPECTED_TYPE_NULL_AND_NO_REP_ID")] != -1);
		return sat<F>("EXPECTED_TYPE_NULL_AND_NO_REP_ID");
	}

	template<typename F = ::jint>
	static auto EXTRACT_NOT_INITIALIZED() {
		static_assert(field_signatures[jField<F>("EXTRACT_NOT_INITIALIZED")] != -1);
		return sat<F>("EXTRACT_NOT_INITIALIZED");
	}

	template<typename F = ::jint>
	static auto EXTRACT_OBJECT_FAILED() {
		static_assert(field_signatures[jField<F>("EXTRACT_OBJECT_FAILED")] != -1);
		return sat<F>("EXTRACT_OBJECT_FAILED");
	}

	template<typename F = ::jint>
	static auto EXTRACT_OBJECT_INCOMPATIBLE() {
		static_assert(field_signatures[jField<F>("EXTRACT_OBJECT_INCOMPATIBLE")] != -1);
		return sat<F>("EXTRACT_OBJECT_INCOMPATIBLE");
	}

	template<typename F = ::jint>
	static auto EXTRACT_WRONG_TYPE() {
		static_assert(field_signatures[jField<F>("EXTRACT_WRONG_TYPE")] != -1);
		return sat<F>("EXTRACT_WRONG_TYPE");
	}

	template<typename F = ::jint>
	static auto EXTRACT_WRONG_TYPE_LIST() {
		static_assert(field_signatures[jField<F>("EXTRACT_WRONG_TYPE_LIST")] != -1);
		return sat<F>("EXTRACT_WRONG_TYPE_LIST");
	}

	template<typename F = ::jint>
	static auto FIELD_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("FIELD_NOT_FOUND")] != -1);
		return sat<F>("FIELD_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto FIXED_BAD_TYPECODE() {
		static_assert(field_signatures[jField<F>("FIXED_BAD_TYPECODE")] != -1);
		return sat<F>("FIXED_BAD_TYPECODE");
	}

	template<typename F = ::jint>
	static auto FIXED_NOT_MATCH() {
		static_assert(field_signatures[jField<F>("FIXED_NOT_MATCH")] != -1);
		return sat<F>("FIXED_NOT_MATCH");
	}

	template<typename F = ::jint>
	static auto FRAGMENTATION_DISALLOWED() {
		static_assert(field_signatures[jField<F>("FRAGMENTATION_DISALLOWED")] != -1);
		return sat<F>("FRAGMENTATION_DISALLOWED");
	}

	template<typename F = ::jint>
	static auto FRAGMENT_SIZE_DIV() {
		static_assert(field_signatures[jField<F>("FRAGMENT_SIZE_DIV")] != -1);
		return sat<F>("FRAGMENT_SIZE_DIV");
	}

	template<typename F = ::jint>
	static auto FRAGMENT_SIZE_MINIMUM() {
		static_assert(field_signatures[jField<F>("FRAGMENT_SIZE_MINIMUM")] != -1);
		return sat<F>("FRAGMENT_SIZE_MINIMUM");
	}

	template<typename F = ::jint>
	static auto GENERIC_NO_IMPL() {
		static_assert(field_signatures[jField<F>("GENERIC_NO_IMPL")] != -1);
		return sat<F>("GENERIC_NO_IMPL");
	}

	template<typename F = ::jint>
	static auto GETINTERFACE_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("GETINTERFACE_NOT_IMPLEMENTED")] != -1);
		return sat<F>("GETINTERFACE_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto GET_DELEGATE_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("GET_DELEGATE_REQUIRES_STUB")] != -1);
		return sat<F>("GET_DELEGATE_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto GET_DELEGATE_SERVANT_NOT_ACTIVE() {
		static_assert(field_signatures[jField<F>("GET_DELEGATE_SERVANT_NOT_ACTIVE")] != -1);
		return sat<F>("GET_DELEGATE_SERVANT_NOT_ACTIVE");
	}

	template<typename F = ::jint>
	static auto GET_DELEGATE_WRONG_POLICY() {
		static_assert(field_signatures[jField<F>("GET_DELEGATE_WRONG_POLICY")] != -1);
		return sat<F>("GET_DELEGATE_WRONG_POLICY");
	}

	template<typename F = ::jint>
	static auto GET_LOCAL_HOST_FAILED() {
		static_assert(field_signatures[jField<F>("GET_LOCAL_HOST_FAILED")] != -1);
		return sat<F>("GET_LOCAL_HOST_FAILED");
	}

	template<typename F = ::jint>
	static auto GET_ORB_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("GET_ORB_REQUIRES_STUB")] != -1);
		return sat<F>("GET_ORB_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto GET_PROPERTIES_ERROR() {
		static_assert(field_signatures[jField<F>("GET_PROPERTIES_ERROR")] != -1);
		return sat<F>("GET_PROPERTIES_ERROR");
	}

	template<typename F = ::jint>
	static auto GET_SERVER_PORT_CALLED_BEFORE_ENDPOINTS_INITIALIZED() {
		static_assert(field_signatures[jField<F>("GET_SERVER_PORT_CALLED_BEFORE_ENDPOINTS_INITIALIZED")] != -1);
		return sat<F>("GET_SERVER_PORT_CALLED_BEFORE_ENDPOINTS_INITIALIZED");
	}

	template<typename F = ::jint>
	static auto GET_SYSTEM_EX_RETURNED_NULL() {
		static_assert(field_signatures[jField<F>("GET_SYSTEM_EX_RETURNED_NULL")] != -1);
		return sat<F>("GET_SYSTEM_EX_RETURNED_NULL");
	}

	template<typename F = ::jint>
	static auto GET_TYPE_IDS_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("GET_TYPE_IDS_REQUIRES_STUB")] != -1);
		return sat<F>("GET_TYPE_IDS_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto GIOP_MAGIC_ERROR() {
		static_assert(field_signatures[jField<F>("GIOP_MAGIC_ERROR")] != -1);
		return sat<F>("GIOP_MAGIC_ERROR");
	}

	template<typename F = ::jint>
	static auto GIOP_VERSION_ERROR() {
		static_assert(field_signatures[jField<F>("GIOP_VERSION_ERROR")] != -1);
		return sat<F>("GIOP_VERSION_ERROR");
	}

	template<typename F = ::jint>
	static auto IIOPINPUTSTREAM_GROW() {
		static_assert(field_signatures[jField<F>("IIOPINPUTSTREAM_GROW")] != -1);
		return sat<F>("IIOPINPUTSTREAM_GROW");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_BOOTSTRAP_OPERATION() {
		static_assert(field_signatures[jField<F>("ILLEGAL_BOOTSTRAP_OPERATION")] != -1);
		return sat<F>("ILLEGAL_BOOTSTRAP_OPERATION");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_CONTACT_INFO_LIST_FACTORY_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_CONTACT_INFO_LIST_FACTORY_TYPE")] != -1);
		return sat<F>("ILLEGAL_CONTACT_INFO_LIST_FACTORY_TYPE");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_GIOP_MSG_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_GIOP_MSG_TYPE")] != -1);
		return sat<F>("ILLEGAL_GIOP_MSG_TYPE");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_IIOP_PRIMARY_TO_CONTACT_INFO_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_IIOP_PRIMARY_TO_CONTACT_INFO_TYPE")] != -1);
		return sat<F>("ILLEGAL_IIOP_PRIMARY_TO_CONTACT_INFO_TYPE");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_IOR_TO_SOCKET_INFO_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_IOR_TO_SOCKET_INFO_TYPE")] != -1);
		return sat<F>("ILLEGAL_IOR_TO_SOCKET_INFO_TYPE");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_REPLY_STATUS() {
		static_assert(field_signatures[jField<F>("ILLEGAL_REPLY_STATUS")] != -1);
		return sat<F>("ILLEGAL_REPLY_STATUS");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_SOCKET_FACTORY_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_SOCKET_FACTORY_TYPE")] != -1);
		return sat<F>("ILLEGAL_SOCKET_FACTORY_TYPE");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_SUBCONTRACT_ID() {
		static_assert(field_signatures[jField<F>("ILLEGAL_SUBCONTRACT_ID")] != -1);
		return sat<F>("ILLEGAL_SUBCONTRACT_ID");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_TARGET_ADDRESS_DISPOSITION() {
		static_assert(field_signatures[jField<F>("ILLEGAL_TARGET_ADDRESS_DISPOSITION")] != -1);
		return sat<F>("ILLEGAL_TARGET_ADDRESS_DISPOSITION");
	}

	template<typename F = ::jint>
	static auto ILLEGAL_UNION_DISCRIMINATOR_TYPE() {
		static_assert(field_signatures[jField<F>("ILLEGAL_UNION_DISCRIMINATOR_TYPE")] != -1);
		return sat<F>("ILLEGAL_UNION_DISCRIMINATOR_TYPE");
	}

	template<typename F = ::jint>
	static auto INDIRECTION_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("INDIRECTION_NOT_FOUND")] != -1);
		return sat<F>("INDIRECTION_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto INSERT_OBJECT_FAILED() {
		static_assert(field_signatures[jField<F>("INSERT_OBJECT_FAILED")] != -1);
		return sat<F>("INSERT_OBJECT_FAILED");
	}

	template<typename F = ::jint>
	static auto INSERT_OBJECT_INCOMPATIBLE() {
		static_assert(field_signatures[jField<F>("INSERT_OBJECT_INCOMPATIBLE")] != -1);
		return sat<F>("INSERT_OBJECT_INCOMPATIBLE");
	}

	template<typename F = ::jint>
	static auto INTERRUPTED_JOIN_CALL_WHILE_CLOSING_THREAD_POOL() {
		static_assert(field_signatures[jField<F>("INTERRUPTED_JOIN_CALL_WHILE_CLOSING_THREAD_POOL")] != -1);
		return sat<F>("INTERRUPTED_JOIN_CALL_WHILE_CLOSING_THREAD_POOL");
	}

	template<typename F = ::jint>
	static auto INVALID_BTC_CONVERTER_NAME() {
		static_assert(field_signatures[jField<F>("INVALID_BTC_CONVERTER_NAME")] != -1);
		return sat<F>("INVALID_BTC_CONVERTER_NAME");
	}

	template<typename F = ::jint>
	static auto INVALID_BUFF_MGR_STRATEGY() {
		static_assert(field_signatures[jField<F>("INVALID_BUFF_MGR_STRATEGY")] != -1);
		return sat<F>("INVALID_BUFF_MGR_STRATEGY");
	}

	template<typename F = ::jint>
	static auto INVALID_CODE_SET_NUMBER() {
		static_assert(field_signatures[jField<F>("INVALID_CODE_SET_NUMBER")] != -1);
		return sat<F>("INVALID_CODE_SET_NUMBER");
	}

	template<typename F = ::jint>
	static auto INVALID_CODE_SET_STRING() {
		static_assert(field_signatures[jField<F>("INVALID_CODE_SET_STRING")] != -1);
		return sat<F>("INVALID_CODE_SET_STRING");
	}

	template<typename F = ::jint>
	static auto INVALID_COMPLEX_TYPECODE() {
		static_assert(field_signatures[jField<F>("INVALID_COMPLEX_TYPECODE")] != -1);
		return sat<F>("INVALID_COMPLEX_TYPECODE");
	}

	template<typename F = ::jint>
	static auto INVALID_CONTACT_INFO_LIST_ITERATOR_FAILURE_EXCEPTION() {
		static_assert(field_signatures[jField<F>("INVALID_CONTACT_INFO_LIST_ITERATOR_FAILURE_EXCEPTION")] != -1);
		return sat<F>("INVALID_CONTACT_INFO_LIST_ITERATOR_FAILURE_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto INVALID_CTB_CONVERTER_NAME() {
		static_assert(field_signatures[jField<F>("INVALID_CTB_CONVERTER_NAME")] != -1);
		return sat<F>("INVALID_CTB_CONVERTER_NAME");
	}

	template<typename F = ::jint>
	static auto INVALID_INDIRECTION() {
		static_assert(field_signatures[jField<F>("INVALID_INDIRECTION")] != -1);
		return sat<F>("INVALID_INDIRECTION");
	}

	template<typename F = ::jint>
	static auto INVALID_ISSTREAMED_TCKIND() {
		static_assert(field_signatures[jField<F>("INVALID_ISSTREAMED_TCKIND")] != -1);
		return sat<F>("INVALID_ISSTREAMED_TCKIND");
	}

	template<typename F = ::jint>
	static auto INVALID_JDK1_3_1_PATCH_LEVEL() {
		static_assert(field_signatures[jField<F>("INVALID_JDK1_3_1_PATCH_LEVEL")] != -1);
		return sat<F>("INVALID_JDK1_3_1_PATCH_LEVEL");
	}

	template<typename F = ::jint>
	static auto INVALID_OBJECT_KEY() {
		static_assert(field_signatures[jField<F>("INVALID_OBJECT_KEY")] != -1);
		return sat<F>("INVALID_OBJECT_KEY");
	}

	template<typename F = ::jint>
	static auto INVALID_REQUEST_PARTITIONING_COMPONENT_VALUE() {
		static_assert(field_signatures[jField<F>("INVALID_REQUEST_PARTITIONING_COMPONENT_VALUE")] != -1);
		return sat<F>("INVALID_REQUEST_PARTITIONING_COMPONENT_VALUE");
	}

	template<typename F = ::jint>
	static auto INVALID_REQUEST_PARTITIONING_ID() {
		static_assert(field_signatures[jField<F>("INVALID_REQUEST_PARTITIONING_ID")] != -1);
		return sat<F>("INVALID_REQUEST_PARTITIONING_ID");
	}

	template<typename F = ::jint>
	static auto INVALID_REQUEST_PARTITIONING_POLICY_VALUE() {
		static_assert(field_signatures[jField<F>("INVALID_REQUEST_PARTITIONING_POLICY_VALUE")] != -1);
		return sat<F>("INVALID_REQUEST_PARTITIONING_POLICY_VALUE");
	}

	template<typename F = ::jint>
	static auto INVALID_SIMPLE_TYPECODE() {
		static_assert(field_signatures[jField<F>("INVALID_SIMPLE_TYPECODE")] != -1);
		return sat<F>("INVALID_SIMPLE_TYPECODE");
	}

	template<typename F = ::jint>
	static auto INVALID_SINGLE_CHAR_CTB() {
		static_assert(field_signatures[jField<F>("INVALID_SINGLE_CHAR_CTB")] != -1);
		return sat<F>("INVALID_SINGLE_CHAR_CTB");
	}

	template<typename F = ::jint>
	static auto INVALID_TAGGED_PROFILE() {
		static_assert(field_signatures[jField<F>("INVALID_TAGGED_PROFILE")] != -1);
		return sat<F>("INVALID_TAGGED_PROFILE");
	}

	template<typename F = ::jint>
	static auto INVALID_TYPECODE_KIND() {
		static_assert(field_signatures[jField<F>("INVALID_TYPECODE_KIND")] != -1);
		return sat<F>("INVALID_TYPECODE_KIND");
	}

	template<typename F = ::jint>
	static auto INVALID_TYPECODE_KIND_MARSHAL() {
		static_assert(field_signatures[jField<F>("INVALID_TYPECODE_KIND_MARSHAL")] != -1);
		return sat<F>("INVALID_TYPECODE_KIND_MARSHAL");
	}

	template<typename F = ::jint>
	static auto INVOCATION_ERROR_IN_REFLECTIVE_TIE() {
		static_assert(field_signatures[jField<F>("INVOCATION_ERROR_IN_REFLECTIVE_TIE")] != -1);
		return sat<F>("INVOCATION_ERROR_IN_REFLECTIVE_TIE");
	}

	template<typename F = ::jint>
	static auto INVOCATION_INFO_STACK_EMPTY() {
		static_assert(field_signatures[jField<F>("INVOCATION_INFO_STACK_EMPTY")] != -1);
		return sat<F>("INVOCATION_INFO_STACK_EMPTY");
	}

	template<typename F = ::jint>
	static auto INVOKE_ERROR() {
		static_assert(field_signatures[jField<F>("INVOKE_ERROR")] != -1);
		return sat<F>("INVOKE_ERROR");
	}

	template<typename F = ::jint>
	static auto IOEXCEPTION_WHEN_READING_CONNECTION() {
		static_assert(field_signatures[jField<F>("IOEXCEPTION_WHEN_READING_CONNECTION")] != -1);
		return sat<F>("IOEXCEPTION_WHEN_READING_CONNECTION");
	}

	template<typename F = ::jint>
	static auto IO_EXCEPTION_ON_CLOSE() {
		static_assert(field_signatures[jField<F>("IO_EXCEPTION_ON_CLOSE")] != -1);
		return sat<F>("IO_EXCEPTION_ON_CLOSE");
	}

	template<typename F = ::jint>
	static auto IS_LOCAL_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("IS_LOCAL_REQUIRES_STUB")] != -1);
		return sat<F>("IS_LOCAL_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto JAVA_SERIALIZATION_EXCEPTION() {
		static_assert(field_signatures[jField<F>("JAVA_SERIALIZATION_EXCEPTION")] != -1);
		return sat<F>("JAVA_SERIALIZATION_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto JAVA_STREAM_INIT_FAILED() {
		static_assert(field_signatures[jField<F>("JAVA_STREAM_INIT_FAILED")] != -1);
		return sat<F>("JAVA_STREAM_INIT_FAILED");
	}

	template<typename F = ::jint>
	static auto LOCAL_OBJECT_NOT_ALLOWED() {
		static_assert(field_signatures[jField<F>("LOCAL_OBJECT_NOT_ALLOWED")] != -1);
		return sat<F>("LOCAL_OBJECT_NOT_ALLOWED");
	}

	template<typename F = ::jint>
	static auto LOCATE_UNKNOWN_OBJECT() {
		static_assert(field_signatures[jField<F>("LOCATE_UNKNOWN_OBJECT")] != -1);
		return sat<F>("LOCATE_UNKNOWN_OBJECT");
	}

	template<typename F = ::jint>
	static auto LOCATIONFORWARD_ERROR() {
		static_assert(field_signatures[jField<F>("LOCATIONFORWARD_ERROR")] != -1);
		return sat<F>("LOCATIONFORWARD_ERROR");
	}

	template<typename F = ::jint>
	static auto LONG_DOUBLE_NOT_IMPLEMENTED() {
		static_assert(field_signatures[jField<F>("LONG_DOUBLE_NOT_IMPLEMENTED")] != -1);
		return sat<F>("LONG_DOUBLE_NOT_IMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto MALFORMED_URL() {
		static_assert(field_signatures[jField<F>("MALFORMED_URL")] != -1);
		return sat<F>("MALFORMED_URL");
	}

	template<typename F = ::jint>
	static auto METHOD_NOT_FOUND_IN_TIE() {
		static_assert(field_signatures[jField<F>("METHOD_NOT_FOUND_IN_TIE")] != -1);
		return sat<F>("METHOD_NOT_FOUND_IN_TIE");
	}

	template<typename F = ::jint>
	static auto METHOD_SHOULD_NOT_BE_CALLED() {
		static_assert(field_signatures[jField<F>("METHOD_SHOULD_NOT_BE_CALLED")] != -1);
		return sat<F>("METHOD_SHOULD_NOT_BE_CALLED");
	}

	template<typename F = ::jint>
	static auto MULT_IIOP_PROF_NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("MULT_IIOP_PROF_NOT_SUPPORTED")] != -1);
		return sat<F>("MULT_IIOP_PROF_NOT_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto NEGATIVE_BOUNDS() {
		static_assert(field_signatures[jField<F>("NEGATIVE_BOUNDS")] != -1);
		return sat<F>("NEGATIVE_BOUNDS");
	}

	template<typename F = ::jint>
	static auto NEGATIVE_STRING_LENGTH() {
		static_assert(field_signatures[jField<F>("NEGATIVE_STRING_LENGTH")] != -1);
		return sat<F>("NEGATIVE_STRING_LENGTH");
	}

	template<typename F = ::jint>
	static auto NON_EXISTENT_ORBID() {
		static_assert(field_signatures[jField<F>("NON_EXISTENT_ORBID")] != -1);
		return sat<F>("NON_EXISTENT_ORBID");
	}

	template<typename F = ::jint>
	static auto NO_CLIENT_SC_CLASS() {
		static_assert(field_signatures[jField<F>("NO_CLIENT_SC_CLASS")] != -1);
		return sat<F>("NO_CLIENT_SC_CLASS");
	}

	template<typename F = ::jint>
	static auto NO_INTERFACE_DEF_STUB() {
		static_assert(field_signatures[jField<F>("NO_INTERFACE_DEF_STUB")] != -1);
		return sat<F>("NO_INTERFACE_DEF_STUB");
	}

	template<typename F = ::jint>
	static auto NO_INVOCATION_HANDLER() {
		static_assert(field_signatures[jField<F>("NO_INVOCATION_HANDLER")] != -1);
		return sat<F>("NO_INVOCATION_HANDLER");
	}

	template<typename F = ::jint>
	static auto NO_OBJECT_ADAPTER_FACTORY() {
		static_assert(field_signatures[jField<F>("NO_OBJECT_ADAPTER_FACTORY")] != -1);
		return sat<F>("NO_OBJECT_ADAPTER_FACTORY");
	}

	template<typename F = ::jint>
	static auto NO_POA() {
		static_assert(field_signatures[jField<F>("NO_POA")] != -1);
		return sat<F>("NO_POA");
	}

	template<typename F = ::jint>
	static auto NO_PROFILE_PRESENT() {
		static_assert(field_signatures[jField<F>("NO_PROFILE_PRESENT")] != -1);
		return sat<F>("NO_PROFILE_PRESENT");
	}

	template<typename F = ::jint>
	static auto NO_SERVER_SC_IN_DISPATCH() {
		static_assert(field_signatures[jField<F>("NO_SERVER_SC_IN_DISPATCH")] != -1);
		return sat<F>("NO_SERVER_SC_IN_DISPATCH");
	}

	template<typename F = ::jint>
	static auto NO_SERVER_SUBCONTRACT() {
		static_assert(field_signatures[jField<F>("NO_SERVER_SUBCONTRACT")] != -1);
		return sat<F>("NO_SERVER_SUBCONTRACT");
	}

	template<typename F = ::jint>
	static auto NO_TOA() {
		static_assert(field_signatures[jField<F>("NO_TOA")] != -1);
		return sat<F>("NO_TOA");
	}

	template<typename F = ::jint>
	static auto NULL_IOR() {
		static_assert(field_signatures[jField<F>("NULL_IOR")] != -1);
		return sat<F>("NULL_IOR");
	}

	template<typename F = ::jint>
	static auto NULL_NOT_ALLOWED() {
		static_assert(field_signatures[jField<F>("NULL_NOT_ALLOWED")] != -1);
		return sat<F>("NULL_NOT_ALLOWED");
	}

	template<typename F = ::jint>
	static auto NULL_OBJECT_REFERENCE() {
		static_assert(field_signatures[jField<F>("NULL_OBJECT_REFERENCE")] != -1);
		return sat<F>("NULL_OBJECT_REFERENCE");
	}

	template<typename F = ::jint>
	static auto NULL_OUT_CALL() {
		static_assert(field_signatures[jField<F>("NULL_OUT_CALL")] != -1);
		return sat<F>("NULL_OUT_CALL");
	}

	template<typename F = ::jint>
	static auto NULL_PARAM() {
		static_assert(field_signatures[jField<F>("NULL_PARAM")] != -1);
		return sat<F>("NULL_PARAM");
	}

	template<typename F = ::jint>
	static auto NULL_REPLY_IN_GET_ADDR_DISPOSITION() {
		static_assert(field_signatures[jField<F>("NULL_REPLY_IN_GET_ADDR_DISPOSITION")] != -1);
		return sat<F>("NULL_REPLY_IN_GET_ADDR_DISPOSITION");
	}

	template<typename F = ::jint>
	static auto NUM_INVOCATIONS_ALREADY_ZERO() {
		static_assert(field_signatures[jField<F>("NUM_INVOCATIONS_ALREADY_ZERO")] != -1);
		return sat<F>("NUM_INVOCATIONS_ALREADY_ZERO");
	}

	template<typename F = ::jint>
	static auto OBJECT_ADAPTER_ID_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("OBJECT_ADAPTER_ID_NOT_AVAILABLE")] != -1);
		return sat<F>("OBJECT_ADAPTER_ID_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto OBJREF_FROM_FOREIGN_ORB() {
		static_assert(field_signatures[jField<F>("OBJREF_FROM_FOREIGN_ORB")] != -1);
		return sat<F>("OBJREF_FROM_FOREIGN_ORB");
	}

	template<typename F = ::jint>
	static auto ORB_CONFIGURATOR_ERROR() {
		static_assert(field_signatures[jField<F>("ORB_CONFIGURATOR_ERROR")] != -1);
		return sat<F>("ORB_CONFIGURATOR_ERROR");
	}

	template<typename F = ::jint>
	static auto ORB_CONNECT_ERROR() {
		static_assert(field_signatures[jField<F>("ORB_CONNECT_ERROR")] != -1);
		return sat<F>("ORB_CONNECT_ERROR");
	}

	template<typename F = ::jint>
	static auto ORB_DESTROYED() {
		static_assert(field_signatures[jField<F>("ORB_DESTROYED")] != -1);
		return sat<F>("ORB_DESTROYED");
	}

	template<typename F = ::jint>
	static auto ORB_ID_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("ORB_ID_NOT_AVAILABLE")] != -1);
		return sat<F>("ORB_ID_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto ORB_INITIALIZER_FAILURE() {
		static_assert(field_signatures[jField<F>("ORB_INITIALIZER_FAILURE")] != -1);
		return sat<F>("ORB_INITIALIZER_FAILURE");
	}

	template<typename F = ::jint>
	static auto ORB_INITIALIZER_TYPE() {
		static_assert(field_signatures[jField<F>("ORB_INITIALIZER_TYPE")] != -1);
		return sat<F>("ORB_INITIALIZER_TYPE");
	}

	template<typename F = ::jint>
	static auto ORB_INITIALREFERENCE_SYNTAX() {
		static_assert(field_signatures[jField<F>("ORB_INITIALREFERENCE_SYNTAX")] != -1);
		return sat<F>("ORB_INITIALREFERENCE_SYNTAX");
	}

	template<typename F = ::jint>
	static auto ORB_TARGET_ADDR_PREFERENCE_IN_EXTRACT_OBJECTKEY_INVALID() {
		static_assert(field_signatures[jField<F>("ORB_TARGET_ADDR_PREFERENCE_IN_EXTRACT_OBJECTKEY_INVALID")] != -1);
		return sat<F>("ORB_TARGET_ADDR_PREFERENCE_IN_EXTRACT_OBJECTKEY_INVALID");
	}

	template<typename F = ::jint>
	static auto PEEKSTRING_FAILED() {
		static_assert(field_signatures[jField<F>("PEEKSTRING_FAILED")] != -1);
		return sat<F>("PEEKSTRING_FAILED");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVERID_NOT_SET() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVERID_NOT_SET")] != -1);
		return sat<F>("PERSISTENT_SERVERID_NOT_SET");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVERPORT_NOT_SET() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVERPORT_NOT_SET")] != -1);
		return sat<F>("PERSISTENT_SERVERPORT_NOT_SET");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SERVER_INIT_ERROR() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVER_INIT_ERROR")] != -1);
		return sat<F>("PERSISTENT_SERVER_INIT_ERROR");
	}

	template<typename F = ::jint>
	static auto POSITIVE_END_TAG() {
		static_assert(field_signatures[jField<F>("POSITIVE_END_TAG")] != -1);
		return sat<F>("POSITIVE_END_TAG");
	}

	template<typename F = ::jint>
	static auto PROBLEM_WITH_EXCEPTION_TYPECODE() {
		static_assert(field_signatures[jField<F>("PROBLEM_WITH_EXCEPTION_TYPECODE")] != -1);
		return sat<F>("PROBLEM_WITH_EXCEPTION_TYPECODE");
	}

	template<typename F = ::jint>
	static auto READ_OBJECT_EXCEPTION() {
		static_assert(field_signatures[jField<F>("READ_OBJECT_EXCEPTION")] != -1);
		return sat<F>("READ_OBJECT_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto READ_OBJECT_LOAD_CLASS_FAILURE() {
		static_assert(field_signatures[jField<F>("READ_OBJECT_LOAD_CLASS_FAILURE")] != -1);
		return sat<F>("READ_OBJECT_LOAD_CLASS_FAILURE");
	}

	template<typename F = ::jint>
	static auto READ_UNDECLARED_EXCEPTION() {
		static_assert(field_signatures[jField<F>("READ_UNDECLARED_EXCEPTION")] != -1);
		return sat<F>("READ_UNDECLARED_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto READ_VALUE_AND_NO_REP_ID() {
		static_assert(field_signatures[jField<F>("READ_VALUE_AND_NO_REP_ID")] != -1);
		return sat<F>("READ_VALUE_AND_NO_REP_ID");
	}

	template<typename F = ::jint>
	static auto RECURSIVE_TYPECODE_ERROR() {
		static_assert(field_signatures[jField<F>("RECURSIVE_TYPECODE_ERROR")] != -1);
		return sat<F>("RECURSIVE_TYPECODE_ERROR");
	}

	template<typename F = ::jint>
	static auto RECV_MSG_ERROR() {
		static_assert(field_signatures[jField<F>("RECV_MSG_ERROR")] != -1);
		return sat<F>("RECV_MSG_ERROR");
	}

	template<typename F = ::jint>
	static auto REF_TYPE_INDIR_TYPE() {
		static_assert(field_signatures[jField<F>("REF_TYPE_INDIR_TYPE")] != -1);
		return sat<F>("REF_TYPE_INDIR_TYPE");
	}

	template<typename F = ::jint>
	static auto REMARSHAL_WITH_NOWHERE_TO_GO() {
		static_assert(field_signatures[jField<F>("REMARSHAL_WITH_NOWHERE_TO_GO")] != -1);
		return sat<F>("REMARSHAL_WITH_NOWHERE_TO_GO");
	}

	template<typename F = ::jint>
	static auto REQUEST_CANCELED() {
		static_assert(field_signatures[jField<F>("REQUEST_CANCELED")] != -1);
		return sat<F>("REQUEST_CANCELED");
	}

	template<typename F = ::jint>
	static auto REQUEST_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("REQUEST_REQUIRES_STUB")] != -1);
		return sat<F>("REQUEST_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto RUNTIMEEXCEPTION() {
		static_assert(field_signatures[jField<F>("RUNTIMEEXCEPTION")] != -1);
		return sat<F>("RUNTIMEEXCEPTION");
	}

	template<typename F = ::jint>
	static auto RequestDispatcherRegistry_ERROR() {
		static_assert(field_signatures[jField<F>("RequestDispatcherRegistry_ERROR")] != -1);
		return sat<F>("RequestDispatcherRegistry_ERROR");
	}

	template<typename F = ::jint>
	static auto SECURITY_EXCEPTION_IN_ACCEPT() {
		static_assert(field_signatures[jField<F>("SECURITY_EXCEPTION_IN_ACCEPT")] != -1);
		return sat<F>("SECURITY_EXCEPTION_IN_ACCEPT");
	}

	template<typename F = ::jint>
	static auto SELECTION_KEY_INVALID() {
		static_assert(field_signatures[jField<F>("SELECTION_KEY_INVALID")] != -1);
		return sat<F>("SELECTION_KEY_INVALID");
	}

	template<typename F = ::jint>
	static auto SEND_DEFERRED_NOTIMPLEMENTED() {
		static_assert(field_signatures[jField<F>("SEND_DEFERRED_NOTIMPLEMENTED")] != -1);
		return sat<F>("SEND_DEFERRED_NOTIMPLEMENTED");
	}

	template<typename F = ::jint>
	static auto SERVANT_NOT_FOUND() {
		static_assert(field_signatures[jField<F>("SERVANT_NOT_FOUND")] != -1);
		return sat<F>("SERVANT_NOT_FOUND");
	}

	template<typename F = ::jint>
	static auto SERVER_ID_NOT_AVAILABLE() {
		static_assert(field_signatures[jField<F>("SERVER_ID_NOT_AVAILABLE")] != -1);
		return sat<F>("SERVER_ID_NOT_AVAILABLE");
	}

	template<typename F = ::jint>
	static auto SERVER_SC_NO_IIOP_PROFILE() {
		static_assert(field_signatures[jField<F>("SERVER_SC_NO_IIOP_PROFILE")] != -1);
		return sat<F>("SERVER_SC_NO_IIOP_PROFILE");
	}

	template<typename F = ::jint>
	static auto SERVER_SC_TEMP_SIZE() {
		static_assert(field_signatures[jField<F>("SERVER_SC_TEMP_SIZE")] != -1);
		return sat<F>("SERVER_SC_TEMP_SIZE");
	}

	template<typename F = ::jint>
	static auto SET_DELEGATE_REQUIRES_STUB() {
		static_assert(field_signatures[jField<F>("SET_DELEGATE_REQUIRES_STUB")] != -1);
		return sat<F>("SET_DELEGATE_REQUIRES_STUB");
	}

	template<typename F = ::jint>
	static auto SET_EXCEPTION_CALLED_BAD_TYPE() {
		static_assert(field_signatures[jField<F>("SET_EXCEPTION_CALLED_BAD_TYPE")] != -1);
		return sat<F>("SET_EXCEPTION_CALLED_BAD_TYPE");
	}

	template<typename F = ::jint>
	static auto SET_EXCEPTION_CALLED_NULL_ARGS() {
		static_assert(field_signatures[jField<F>("SET_EXCEPTION_CALLED_NULL_ARGS")] != -1);
		return sat<F>("SET_EXCEPTION_CALLED_NULL_ARGS");
	}

	template<typename F = ::jint>
	static auto SET_RESULT_AFTER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("SET_RESULT_AFTER_EXCEPTION")] != -1);
		return sat<F>("SET_RESULT_AFTER_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto SET_RESULT_CALLED_MULTIPLE() {
		static_assert(field_signatures[jField<F>("SET_RESULT_CALLED_MULTIPLE")] != -1);
		return sat<F>("SET_RESULT_CALLED_MULTIPLE");
	}

	template<typename F = ::jint>
	static auto SET_RESULT_CALLED_NULL_ARGS() {
		static_assert(field_signatures[jField<F>("SET_RESULT_CALLED_NULL_ARGS")] != -1);
		return sat<F>("SET_RESULT_CALLED_NULL_ARGS");
	}

	template<typename F = ::jint>
	static auto SOCKET_FACTORY_AND_CONTACT_INFO_LIST_AT_SAME_TIME() {
		static_assert(field_signatures[jField<F>("SOCKET_FACTORY_AND_CONTACT_INFO_LIST_AT_SAME_TIME")] != -1);
		return sat<F>("SOCKET_FACTORY_AND_CONTACT_INFO_LIST_AT_SAME_TIME");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE1() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE1")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE1");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE2() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE2")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE2");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE3() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE3")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE3");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE4() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE4")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE4");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE5() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE5")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE5");
	}

	template<typename F = ::jint>
	static auto STATEMENT_NOT_REACHABLE6() {
		static_assert(field_signatures[jField<F>("STATEMENT_NOT_REACHABLE6")] != -1);
		return sat<F>("STATEMENT_NOT_REACHABLE6");
	}

	template<typename F = ::jint>
	static auto STRINGIFY_WRITE_ERROR() {
		static_assert(field_signatures[jField<F>("STRINGIFY_WRITE_ERROR")] != -1);
		return sat<F>("STRINGIFY_WRITE_ERROR");
	}

	template<typename F = ::jint>
	static auto STRING_EXPECTED() {
		static_assert(field_signatures[jField<F>("STRING_EXPECTED")] != -1);
		return sat<F>("STRING_EXPECTED");
	}

	template<typename F = ::jint>
	static auto STUB_CREATE_ERROR() {
		static_assert(field_signatures[jField<F>("STUB_CREATE_ERROR")] != -1);
		return sat<F>("STUB_CREATE_ERROR");
	}

	template<typename F = ::jint>
	static auto SVCCTX_UNMARSHAL_ERROR() {
		static_assert(field_signatures[jField<F>("SVCCTX_UNMARSHAL_ERROR")] != -1);
		return sat<F>("SVCCTX_UNMARSHAL_ERROR");
	}

	template<typename F = ::jint>
	static auto THREAD_GROUP_DESTROY_FAILED() {
		static_assert(field_signatures[jField<F>("THREAD_GROUP_DESTROY_FAILED")] != -1);
		return sat<F>("THREAD_GROUP_DESTROY_FAILED");
	}

	template<typename F = ::jint>
	static auto THREAD_GROUP_HAS_ACTIVE_THREADS_IN_CLOSE() {
		static_assert(field_signatures[jField<F>("THREAD_GROUP_HAS_ACTIVE_THREADS_IN_CLOSE")] != -1);
		return sat<F>("THREAD_GROUP_HAS_ACTIVE_THREADS_IN_CLOSE");
	}

	template<typename F = ::jint>
	static auto THREAD_GROUP_HAS_SUB_GROUPS_IN_CLOSE() {
		static_assert(field_signatures[jField<F>("THREAD_GROUP_HAS_SUB_GROUPS_IN_CLOSE")] != -1);
		return sat<F>("THREAD_GROUP_HAS_SUB_GROUPS_IN_CLOSE");
	}

	template<typename F = ::jint>
	static auto THREAD_GROUP_IS_DESTROYED() {
		static_assert(field_signatures[jField<F>("THREAD_GROUP_IS_DESTROYED")] != -1);
		return sat<F>("THREAD_GROUP_IS_DESTROYED");
	}

	template<typename F = ::jint>
	static auto THREAD_POOL_CLOSE_ERROR() {
		static_assert(field_signatures[jField<F>("THREAD_POOL_CLOSE_ERROR")] != -1);
		return sat<F>("THREAD_POOL_CLOSE_ERROR");
	}

	template<typename F = ::jint>
	static auto TK_LONG_DOUBLE_NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("TK_LONG_DOUBLE_NOT_SUPPORTED")] != -1);
		return sat<F>("TK_LONG_DOUBLE_NOT_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto TRANSPORT_READ_TIMEOUT_EXCEEDED() {
		static_assert(field_signatures[jField<F>("TRANSPORT_READ_TIMEOUT_EXCEEDED")] != -1);
		return sat<F>("TRANSPORT_READ_TIMEOUT_EXCEEDED");
	}

	template<typename F = ::jint>
	static auto TYPECODE_NOT_SUPPORTED() {
		static_assert(field_signatures[jField<F>("TYPECODE_NOT_SUPPORTED")] != -1);
		return sat<F>("TYPECODE_NOT_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto UNABLE_FIND_VALUE_FACTORY() {
		static_assert(field_signatures[jField<F>("UNABLE_FIND_VALUE_FACTORY")] != -1);
		return sat<F>("UNABLE_FIND_VALUE_FACTORY");
	}

	template<typename F = ::jint>
	static auto UNABLE_TO_LOCATE_REP_ID_ARRAY() {
		static_assert(field_signatures[jField<F>("UNABLE_TO_LOCATE_REP_ID_ARRAY")] != -1);
		return sat<F>("UNABLE_TO_LOCATE_REP_ID_ARRAY");
	}

	template<typename F = ::jint>
	static auto UNABLE_TO_SET_SOCKET_FACTORY_ORB() {
		static_assert(field_signatures[jField<F>("UNABLE_TO_SET_SOCKET_FACTORY_ORB")] != -1);
		return sat<F>("UNABLE_TO_SET_SOCKET_FACTORY_ORB");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_DII_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_DII_EXCEPTION")] != -1);
		return sat<F>("UNEXPECTED_DII_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_DIRECT_BYTE_BUFFER_WITH_NON_CHANNEL_SOCKET() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_DIRECT_BYTE_BUFFER_WITH_NON_CHANNEL_SOCKET")] != -1);
		return sat<F>("UNEXPECTED_DIRECT_BYTE_BUFFER_WITH_NON_CHANNEL_SOCKET");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_ENCLOSING_VALUETYPE() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_ENCLOSING_VALUETYPE")] != -1);
		return sat<F>("UNEXPECTED_ENCLOSING_VALUETYPE");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_EOF() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_EOF")] != -1);
		return sat<F>("UNEXPECTED_EOF");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_EXCEPTION() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_EXCEPTION")] != -1);
		return sat<F>("UNEXPECTED_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_NON_DIRECT_BYTE_BUFFER_WITH_CHANNEL_SOCKET() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_NON_DIRECT_BYTE_BUFFER_WITH_CHANNEL_SOCKET")] != -1);
		return sat<F>("UNEXPECTED_NON_DIRECT_BYTE_BUFFER_WITH_CHANNEL_SOCKET");
	}

	template<typename F = ::jint>
	static auto UNEXPECTED_UNION_DEFAULT() {
		static_assert(field_signatures[jField<F>("UNEXPECTED_UNION_DEFAULT")] != -1);
		return sat<F>("UNEXPECTED_UNION_DEFAULT");
	}

	template<typename F = ::jint>
	static auto UNION_DISCRIMINATOR_ERROR() {
		static_assert(field_signatures[jField<F>("UNION_DISCRIMINATOR_ERROR")] != -1);
		return sat<F>("UNION_DISCRIMINATOR_ERROR");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_CODESET() {
		static_assert(field_signatures[jField<F>("UNKNOWN_CODESET")] != -1);
		return sat<F>("UNKNOWN_CODESET");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_CONVERSION_CODE_SET() {
		static_assert(field_signatures[jField<F>("UNKNOWN_CONVERSION_CODE_SET")] != -1);
		return sat<F>("UNKNOWN_CONVERSION_CODE_SET");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_CORBA_EXC() {
		static_assert(field_signatures[jField<F>("UNKNOWN_CORBA_EXC")] != -1);
		return sat<F>("UNKNOWN_CORBA_EXC");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_DSI_SYSEX() {
		static_assert(field_signatures[jField<F>("UNKNOWN_DSI_SYSEX")] != -1);
		return sat<F>("UNKNOWN_DSI_SYSEX");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_EXCEPTION_IN_DISPATCH() {
		static_assert(field_signatures[jField<F>("UNKNOWN_EXCEPTION_IN_DISPATCH")] != -1);
		return sat<F>("UNKNOWN_EXCEPTION_IN_DISPATCH");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_NATIVE_CODESET() {
		static_assert(field_signatures[jField<F>("UNKNOWN_NATIVE_CODESET")] != -1);
		return sat<F>("UNKNOWN_NATIVE_CODESET");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_SERVER_ERROR() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SERVER_ERROR")] != -1);
		return sat<F>("UNKNOWN_SERVER_ERROR");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_SYSEX() {
		static_assert(field_signatures[jField<F>("UNKNOWN_SYSEX")] != -1);
		return sat<F>("UNKNOWN_SYSEX");
	}

	template<typename F = ::jint>
	static auto UNRESOLVED_RECURSIVE_TYPECODE() {
		static_assert(field_signatures[jField<F>("UNRESOLVED_RECURSIVE_TYPECODE")] != -1);
		return sat<F>("UNRESOLVED_RECURSIVE_TYPECODE");
	}

	template<typename F = ::jint>
	static auto UNSUPPORTED_GIOP_VERSION() {
		static_assert(field_signatures[jField<F>("UNSUPPORTED_GIOP_VERSION")] != -1);
		return sat<F>("UNSUPPORTED_GIOP_VERSION");
	}

	template<typename F = ::jint>
	static auto VALUEHANDLER_READ_ERROR() {
		static_assert(field_signatures[jField<F>("VALUEHANDLER_READ_ERROR")] != -1);
		return sat<F>("VALUEHANDLER_READ_ERROR");
	}

	template<typename F = ::jint>
	static auto VALUEHANDLER_READ_EXCEPTION() {
		static_assert(field_signatures[jField<F>("VALUEHANDLER_READ_EXCEPTION")] != -1);
		return sat<F>("VALUEHANDLER_READ_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto WCHAR_ARRAY_UNSUPPORTED_ENCODING() {
		static_assert(field_signatures[jField<F>("WCHAR_ARRAY_UNSUPPORTED_ENCODING")] != -1);
		return sat<F>("WCHAR_ARRAY_UNSUPPORTED_ENCODING");
	}

	template<typename F = ::jint>
	static auto WCHAR_DATA_IN_GIOP_1_0() {
		static_assert(field_signatures[jField<F>("WCHAR_DATA_IN_GIOP_1_0")] != -1);
		return sat<F>("WCHAR_DATA_IN_GIOP_1_0");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_CAUGHT_UNEXPECTED_THROWABLE() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_CAUGHT_UNEXPECTED_THROWABLE")] != -1);
		return sat<F>("WORKER_THREAD_CAUGHT_UNEXPECTED_THROWABLE");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_CREATED() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_CREATED")] != -1);
		return sat<F>("WORKER_THREAD_CREATED");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_CREATION_FAILURE() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_CREATION_FAILURE")] != -1);
		return sat<F>("WORKER_THREAD_CREATION_FAILURE");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_DO_WORK_THROWABLE() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_DO_WORK_THROWABLE")] != -1);
		return sat<F>("WORKER_THREAD_DO_WORK_THROWABLE");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_NOT_NEEDED() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_NOT_NEEDED")] != -1);
		return sat<F>("WORKER_THREAD_NOT_NEEDED");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_SET_NAME_FAILURE() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_SET_NAME_FAILURE")] != -1);
		return sat<F>("WORKER_THREAD_SET_NAME_FAILURE");
	}

	template<typename F = ::jint>
	static auto WORKER_THREAD_THROWABLE_FROM_REQUEST_WORK() {
		static_assert(field_signatures[jField<F>("WORKER_THREAD_THROWABLE_FROM_REQUEST_WORK")] != -1);
		return sat<F>("WORKER_THREAD_THROWABLE_FROM_REQUEST_WORK");
	}

	template<typename F = ::jint>
	static auto WORK_QUEUE_REQUEST_WORK_NO_WORK_FOUND() {
		static_assert(field_signatures[jField<F>("WORK_QUEUE_REQUEST_WORK_NO_WORK_FOUND")] != -1);
		return sat<F>("WORK_QUEUE_REQUEST_WORK_NO_WORK_FOUND");
	}

	template<typename F = ::jint>
	static auto WORK_QUEUE_THREAD_INTERRUPTED() {
		static_assert(field_signatures[jField<F>("WORK_QUEUE_THREAD_INTERRUPTED")] != -1);
		return sat<F>("WORK_QUEUE_THREAD_INTERRUPTED");
	}

	template<typename F = ::jint>
	static auto WRITE_ERROR_SEND() {
		static_assert(field_signatures[jField<F>("WRITE_ERROR_SEND")] != -1);
		return sat<F>("WRITE_ERROR_SEND");
	}

	template<typename F = ::jint>
	static auto WRITE_LOCAL_OBJECT() {
		static_assert(field_signatures[jField<F>("WRITE_LOCAL_OBJECT")] != -1);
		return sat<F>("WRITE_LOCAL_OBJECT");
	}

	template<typename F = ::jint>
	static auto WRITE_UNDECLARED_EXCEPTION() {
		static_assert(field_signatures[jField<F>("WRITE_UNDECLARED_EXCEPTION")] != -1);
		return sat<F>("WRITE_UNDECLARED_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto WRONG_CLIENTSC() {
		static_assert(field_signatures[jField<F>("WRONG_CLIENTSC")] != -1);
		return sat<F>("WRONG_CLIENTSC");
	}

	template<typename F = ::jint>
	static auto WRONG_INTERFACE_DEF() {
		static_assert(field_signatures[jField<F>("WRONG_INTERFACE_DEF")] != -1);
		return sat<F>("WRONG_INTERFACE_DEF");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::logging::Logger)>(), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("abstractFromNonAbstract"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("abstractFromNonAbstract"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("abstractFromNonAbstract"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("abstractFromNonAbstract"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("acceptorInstantiationFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("acceptorInstantiationFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("acceptorInstantiationFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("acceptorInstantiationFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("acceptorInstantiationTypeFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("acceptorInstantiationTypeFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("acceptorInstantiationTypeFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("acceptorInstantiationTypeFailure"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("acceptorsAndLegacySocketFactoryAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("acceptorsAndLegacySocketFactoryAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("acceptorsAndLegacySocketFactoryAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("acceptorsAndLegacySocketFactoryAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("adapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("adapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("adapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("adapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("adapterInactiveInActivation"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("adapterInactiveInActivation"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("adapterInactiveInActivation"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("adapterInactiveInActivation"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("applicationExceptionInSpecialMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("applicationExceptionInSpecialMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("applicationExceptionInSpecialMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("applicationExceptionInSpecialMethod"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("argumentsCalledAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("argumentsCalledAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("argumentsCalledAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("argumentsCalledAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("argumentsCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("argumentsCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("argumentsCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("argumentsCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("argumentsCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("argumentsCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("argumentsCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("argumentsCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("argumentsNotCalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("argumentsNotCalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("argumentsNotCalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("argumentsNotCalled"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("badActivateTieCall"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("badActivateTieCall"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("badActivateTieCall"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badActivateTieCall"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("badAdapterId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("badAdapterId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("badAdapterId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badAdapterId"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badArgumentsNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badArgumentsNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badArgumentsNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badArgumentsNvlist"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("badChunkLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badChunkLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("badChunkLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badChunkLength"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badCodeSetString"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("badCodebaseIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("badCodebaseIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCodebaseIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCodebaseIndirection"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badCodesetsFromClient"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badCodesetsFromClient"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badCodesetsFromClient"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badCodesetsFromClient"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("badCompletionStatusInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("badCompletionStatusInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCompletionStatusInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCompletionStatusInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("badCompletionStatusInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("badCompletionStatusInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCompletionStatusInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCompletionStatusInReply"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("badContactInfoListFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("badContactInfoListFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badContactInfoListFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badContactInfoListFactory"), //
		jMethod<::org::omg::CORBA::INV_OBJREF()>("badCorbalocString"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable)>("badCorbalocString"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus)>("badCorbalocString"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badCorbalocString"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("badCustomIiopPrimaryToContactInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("badCustomIiopPrimaryToContactInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCustomIiopPrimaryToContactInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCustomIiopPrimaryToContactInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("badCustomIorToSocketInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("badCustomIorToSocketInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCustomIorToSocketInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCustomIorToSocketInfo"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("badCustomSocketFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("badCustomSocketFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badCustomSocketFactory"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badCustomSocketFactory"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badDigitInFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badDigitInFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badDigitInFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badDigitInFixed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badExceptionDetailMessageServiceContextType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badExceptionDetailMessageServiceContextType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badExceptionDetailMessageServiceContextType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badExceptionDetailMessageServiceContextType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("badFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("badFixed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badFixed"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badGiop11Ctb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badGiop11Ctb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badGiop11Ctb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badGiop11Ctb"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badGiopRequestType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badGiopRequestType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badGiopRequestType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badGiopRequestType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("badHelperIdMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("badHelperIdMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badHelperIdMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badHelperIdMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("badHelperReadMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("badHelperReadMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badHelperReadMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badHelperReadMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("badHelperWriteMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("badHelperWriteMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badHelperWriteMethod"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badHelperWriteMethod"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badHexDigit"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("badInsertobjParam"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("badInsertobjParam"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badInsertobjParam"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badInsertobjParam"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badKind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badKind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badKind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badKind"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badLocateRequestStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badLocateRequestStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badLocateRequestStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badLocateRequestStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badMessageTypeForCancel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badMessageTypeForCancel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badMessageTypeForCancel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badMessageTypeForCancel"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badModifier"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badModifier"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badModifier"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badModifier"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object)>("badOrbConfigurator"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object)>("badOrbConfigurator"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badOrbConfigurator"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badOrbConfigurator"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("badOrbForServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("badOrbForServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("badOrbForServant"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badOrbForServant"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE()>("badRemoteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::java::lang::Throwable)>("badRemoteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus)>("badRemoteTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badRemoteTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("badRepIdIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("badRepIdIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badRepIdIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badRepIdIndirection"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badReplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badReplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badReplystatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badReplystatus"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badReservedLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badReservedLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badReservedLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badReservedLength"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object, ::java::lang::Object)>("badSequenceBounds"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badSequenceBounds"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("badSequenceBounds"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badSequenceBounds"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badServantReadObject"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badServantReadObject"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badServantReadObject"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badServantReadObject"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("badServerId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("badServerId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("badServerId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badServerId"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSkeleton"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object, ::java::lang::Object)>("badStringBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badStringBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("badStringBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("badStringBounds"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badStringifiedIor"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badStringifiedIor"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badStringifiedIor"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badStringifiedIor"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badStringifiedIorLen"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badStringifiedIorLen"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badStringifiedIorLen"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badStringifiedIorLen"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badSystemExceptionInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badSystemExceptionInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badSystemExceptionInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSystemExceptionInLocateReply"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badSystemExceptionInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badSystemExceptionInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badSystemExceptionInReply"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badSystemExceptionInReply"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badToaOaid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badToaOaid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badToaOaid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badToaOaid"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("badTypecodeForCustomValue"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("badTypecodeForCustomValue"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("badTypecodeForCustomValue"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badTypecodeForCustomValue"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("badUnicodePair"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("badUnicodePair"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("badUnicodePair"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badUnicodePair"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("badUrl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("badUrl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badUrl"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badUrl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("badValueTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("badValueTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("badValueTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("badValueTag"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("badkindCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("badkindCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("badkindCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("badkindCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("bootstrapApplicationException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("bootstrapApplicationException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("bootstrapApplicationException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bootstrapApplicationException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("bootstrapException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("bootstrapException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("bootstrapException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bootstrapException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("bootstrapRuntimeException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("bootstrapRuntimeException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("bootstrapRuntimeException"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bootstrapRuntimeException"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("bootstrapServerNotAvail"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("bootstrapServerNotAvail"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("bootstrapServerNotAvail"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bootstrapServerNotAvail"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("boundsCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("boundsCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("boundsCannotOccur"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("boundsCannotOccur"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("boundsErrorInDiiRequest"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("boundsErrorInDiiRequest"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("boundsErrorInDiiRequest"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("boundsErrorInDiiRequest"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("btcConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("btcConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("btcConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("btcConverterFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("btcResultMoreThanOneChar"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("btcResultMoreThanOneChar"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("btcResultMoreThanOneChar"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("btcResultMoreThanOneChar"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("bufferReadManagerTimeout"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("bufferReadManagerTimeout"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("bufferReadManagerTimeout"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("bufferReadManagerTimeout"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("cancelNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("cancelNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("cancelNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cancelNotSupported"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("cannotCreateOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("cannotCreateOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("cannotCreateOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotCreateOrbidDb"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("cannotMarshalBadTckind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("cannotMarshalBadTckind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("cannotMarshalBadTckind"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotMarshalBadTckind"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("cannotMarshalNative"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("cannotMarshalNative"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("cannotMarshalNative"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotMarshalNative"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("cannotReadOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("cannotReadOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("cannotReadOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotReadOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("cannotWriteOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("cannotWriteOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("cannotWriteOrbidDb"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("cannotWriteOrbidDb"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("characterOutofrange"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("characterOutofrange"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("characterOutofrange"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("characterOutofrange"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("chunkOverflow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("chunkOverflow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("chunkOverflow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("chunkOverflow"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object)>("classNotFound1"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object)>("classNotFound1"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("classNotFound1"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("classNotFound1"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object)>("classNotFound2"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object)>("classNotFound2"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("classNotFound2"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("classNotFound2"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object)>("classNotFound3"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object)>("classNotFound3"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("classNotFound3"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("classNotFound3"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("cnfeReadClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("cnfeReadClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("cnfeReadClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("cnfeReadClass"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("codesetIncompatible"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("codesetIncompatible"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("codesetIncompatible"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("codesetIncompatible"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("connectFailure"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("connectFailure"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("connectFailure"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("connectFailure"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("connectRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("connectRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("connectRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("connectingServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("connectingServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("connectingServant"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectingServant"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("connectionAbort"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("connectionAbort"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("connectionAbort"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectionAbort"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("connectionCloseRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("connectionCloseRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("connectionCloseRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectionCloseRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("connectionRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("connectionRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("connectionRebind"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("connectionRebind"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("contextCalledOutOfOrder"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("contextCalledOutOfOrder"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("contextCalledOutOfOrder"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("contextCalledOutOfOrder"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("contextNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("contextNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("contextNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("contextNotImplemented"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotCreateArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotCreateArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotCreateArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotCreateArray"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("couldNotDuplicateCdrInputStream"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("couldNotDuplicateCdrInputStream"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("couldNotDuplicateCdrInputStream"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("couldNotDuplicateCdrInputStream"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("couldNotFindClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("couldNotFindClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("couldNotFindClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("couldNotFindClass"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("couldNotInstantiateHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("couldNotInstantiateHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("couldNotInstantiateHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("couldNotInstantiateHelper"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("couldNotInvokeHelperReadMethod"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("couldNotInvokeHelperReadMethod"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("couldNotInvokeHelperReadMethod"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("couldNotInvokeHelperReadMethod"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("couldNotLoadClass"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("couldNotLoadClass"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("couldNotLoadClass"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("couldNotLoadClass"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotSetArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotSetArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotSetArray"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("couldNotSetArray"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("couldNotSkipBytes"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("couldNotSkipBytes"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("couldNotSkipBytes"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("couldNotSkipBytes"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object)>("createListenerFailed"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object)>("createListenerFailed"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("createListenerFailed"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("createListenerFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("ctbConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("ctbConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("ctbConverterFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ctbConverterFailure"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("customWrapperIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("customWrapperIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("customWrapperIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("customWrapperIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("customWrapperNotSingleRepid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("customWrapperNotSingleRepid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("customWrapperNotSingleRepid"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("customWrapperNotSingleRepid"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("customWrapperWithCodebase"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("customWrapperWithCodebase"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("customWrapperWithCodebase"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("customWrapperWithCodebase"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object)>("defaultCreateServerSocketGivenNonIiopClearText"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object)>("defaultCreateServerSocketGivenNonIiopClearText"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("defaultCreateServerSocketGivenNonIiopClearText"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("defaultCreateServerSocketGivenNonIiopClearText"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("dsiResultException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("dsiResultException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("dsiResultException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("dsiResultException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("dsimethodNotcalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("dsimethodNotcalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("dsimethodNotcalled"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("dsimethodNotcalled"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("duplicateExceptionDetailMessage"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("duplicateExceptionDetailMessage"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("duplicateExceptionDetailMessage"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("duplicateExceptionDetailMessage"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("duplicateIndirectionOffset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("duplicateIndirectionOffset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("duplicateIndirectionOffset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("duplicateIndirectionOffset"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("duplicateOrbVersionServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("duplicateOrbVersionServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("duplicateOrbVersionServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("duplicateOrbVersionServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("duplicateSendingContextServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("duplicateSendingContextServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("duplicateSendingContextServiceContext"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("duplicateSendingContextServiceContext"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("dynAnyDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("dynAnyDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("dynAnyDestroyed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("dynAnyDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("emptyStackRunServantPostInvoke"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("emptyStackRunServantPostInvoke"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("emptyStackRunServantPostInvoke"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("emptyStackRunServantPostInvoke"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("endOfStream"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("endOfStream"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("endOfStream"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("endOfStream"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("errorInSettingDynamicStubFactoryFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("errorInSettingDynamicStubFactoryFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("errorInSettingDynamicStubFactoryFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("errorInSettingDynamicStubFactoryFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("errorInitBadserveridhandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("errorInitBadserveridhandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("errorInitBadserveridhandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorInitBadserveridhandler"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("errorInvokingHelperWrite"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("errorInvokingHelperWrite"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("errorInvokingHelperWrite"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorInvokingHelperWrite"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("errorResolvingAlias"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("errorResolvingAlias"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("errorResolvingAlias"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorResolvingAlias"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object)>("errorSettingField"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("errorSettingField"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("errorSettingField"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("errorSettingField"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("errorUnmarshalingUserexc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("errorUnmarshalingUserexc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("errorUnmarshalingUserexc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("errorUnmarshalingUserexc"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object)>("exceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object)>("exceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("exceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("exceptionInAccept"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("exceptionWhenSendingCloseConnection"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("exceptionWhenSendingCloseConnection"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("exceptionWhenSendingCloseConnection"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("exceptionWhenSendingCloseConnection"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("expectedTypeNullAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("expectedTypeNullAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("expectedTypeNullAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("expectedTypeNullAndNoRepId"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("extractNotInitialized"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("extractNotInitialized"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("extractNotInitialized"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("extractNotInitialized"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("extractObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("extractObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("extractObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("extractObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("extractObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("extractObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("extractObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("extractObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object, ::java::lang::Object)>("extractWrongType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("extractWrongType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("extractWrongType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("extractWrongType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object, ::java::lang::Object)>("extractWrongTypeList"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("extractWrongTypeList"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("extractWrongTypeList"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("extractWrongTypeList"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("fieldNotFound"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("fieldNotFound"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("fieldNotFound"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("fieldNotFound"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("fixedBadTypecode"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("fixedBadTypecode"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("fixedBadTypecode"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("fixedBadTypecode"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("fixedNotMatch"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("fixedNotMatch"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("fixedNotMatch"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("fixedNotMatch"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object, ::java::lang::Object)>("fragmentSizeDiv"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeDiv"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeDiv"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeDiv"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object, ::java::lang::Object)>("fragmentSizeMinimum"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeMinimum"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeMinimum"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("fragmentSizeMinimum"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("fragmentationDisallowed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("fragmentationDisallowed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("fragmentationDisallowed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("fragmentationDisallowed"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("genericNoImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("genericNoImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("genericNoImpl"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("genericNoImpl"), //
		jMethod<::com::sun::corba::se::impl::logging::ORBUtilSystemException(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("get"), //
		jMethod<::com::sun::corba::se::impl::logging::ORBUtilSystemException(::java::lang::String)>("get"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("getDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("getDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("getDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("getDelegateServantNotActive"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("getDelegateServantNotActive"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("getDelegateServantNotActive"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getDelegateServantNotActive"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("getDelegateWrongPolicy"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("getDelegateWrongPolicy"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("getDelegateWrongPolicy"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getDelegateWrongPolicy"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("getLocalHostFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("getLocalHostFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("getLocalHostFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getLocalHostFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("getOrbRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("getOrbRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("getOrbRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getOrbRequiresStub"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("getPropertiesError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("getPropertiesError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("getPropertiesError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getPropertiesError"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("getServerPortCalledBeforeEndpointsInitialized"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("getServerPortCalledBeforeEndpointsInitialized"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("getServerPortCalledBeforeEndpointsInitialized"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getServerPortCalledBeforeEndpointsInitialized"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("getSystemExReturnedNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("getSystemExReturnedNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("getSystemExReturnedNull"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getSystemExReturnedNull"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("getTypeIdsRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("getTypeIdsRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("getTypeIdsRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getTypeIdsRequiresStub"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("getinterfaceNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("getinterfaceNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("getinterfaceNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("getinterfaceNotImplemented"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("giopMagicError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("giopMagicError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("giopMagicError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("giopMagicError"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("giopVersionError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("giopVersionError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("giopVersionError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("giopVersionError"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("iiopinputstreamGrow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("iiopinputstreamGrow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("iiopinputstreamGrow"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("iiopinputstreamGrow"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("illegalBootstrapOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("illegalBootstrapOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalBootstrapOperation"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalBootstrapOperation"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("illegalContactInfoListFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("illegalContactInfoListFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalContactInfoListFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalContactInfoListFactoryType"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("illegalGiopMsgType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("illegalGiopMsgType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("illegalGiopMsgType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalGiopMsgType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("illegalIiopPrimaryToContactInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("illegalIiopPrimaryToContactInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalIiopPrimaryToContactInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalIiopPrimaryToContactInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("illegalIorToSocketInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("illegalIorToSocketInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalIorToSocketInfoType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalIorToSocketInfoType"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("illegalReplyStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("illegalReplyStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("illegalReplyStatus"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalReplyStatus"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("illegalSocketFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("illegalSocketFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalSocketFactoryType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalSocketFactoryType"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("illegalSubcontractId"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("illegalSubcontractId"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("illegalSubcontractId"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("illegalSubcontractId"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("illegalTargetAddressDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("illegalTargetAddressDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("illegalTargetAddressDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalTargetAddressDisposition"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("illegalUnionDiscriminatorType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("illegalUnionDiscriminatorType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("illegalUnionDiscriminatorType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("illegalUnionDiscriminatorType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("indirectionNotFound"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("indirectionNotFound"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("indirectionNotFound"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("indirectionNotFound"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("insertObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("insertObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("insertObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insertObjectFailed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("insertObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("insertObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("insertObjectIncompatible"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("insertObjectIncompatible"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("interruptedJoinCallWhileClosingThreadPool"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("interruptedJoinCallWhileClosingThreadPool"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("interruptedJoinCallWhileClosingThreadPool"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("interruptedJoinCallWhileClosingThreadPool"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("invalidBtcConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("invalidBtcConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidBtcConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidBtcConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("invalidBuffMgrStrategy"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("invalidBuffMgrStrategy"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidBuffMgrStrategy"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidBuffMgrStrategy"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("invalidCodeSetNumber"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("invalidCodeSetNumber"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("invalidCodeSetNumber"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidCodeSetNumber"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("invalidCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("invalidCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidCodeSetString"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidCodeSetString"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("invalidComplexTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("invalidComplexTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("invalidComplexTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidComplexTypecode"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("invalidContactInfoListIteratorFailureException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("invalidContactInfoListIteratorFailureException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("invalidContactInfoListIteratorFailureException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidContactInfoListIteratorFailureException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("invalidCtbConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("invalidCtbConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidCtbConverterName"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidCtbConverterName"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidIndirection"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("invalidIsstreamedTckind"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("invalidIsstreamedTckind"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidIsstreamedTckind"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidIsstreamedTckind"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("invalidJdk131PatchLevel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("invalidJdk131PatchLevel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("invalidJdk131PatchLevel"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidJdk131PatchLevel"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("invalidObjectKey"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("invalidObjectKey"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("invalidObjectKey"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidObjectKey"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningComponentValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningComponentValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningComponentValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningComponentValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningId"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningPolicyValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningPolicyValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningPolicyValue"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("invalidRequestPartitioningPolicyValue"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("invalidSimpleTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("invalidSimpleTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("invalidSimpleTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidSimpleTypecode"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("invalidSingleCharCtb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("invalidSingleCharCtb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("invalidSingleCharCtb"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidSingleCharCtb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("invalidTaggedProfile"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("invalidTaggedProfile"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("invalidTaggedProfile"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidTaggedProfile"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Object)>("invalidTypecodeKind"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable, ::java::lang::Object)>("invalidTypecodeKind"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("invalidTypecodeKind"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("invalidTypecodeKind"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("invalidTypecodeKindMarshal"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("invalidTypecodeKindMarshal"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("invalidTypecodeKindMarshal"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invalidTypecodeKindMarshal"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("invocationErrorInReflectiveTie"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("invocationErrorInReflectiveTie"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("invocationErrorInReflectiveTie"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("invocationErrorInReflectiveTie"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("invocationInfoStackEmpty"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("invocationInfoStackEmpty"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("invocationInfoStackEmpty"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invocationInfoStackEmpty"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("invokeError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("invokeError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("invokeError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("invokeError"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("ioExceptionOnClose"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("ioExceptionOnClose"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("ioExceptionOnClose"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ioExceptionOnClose"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("ioexceptionWhenReadingConnection"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("ioexceptionWhenReadingConnection"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("ioexceptionWhenReadingConnection"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("ioexceptionWhenReadingConnection"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("isLocalRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("isLocalRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("isLocalRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("isLocalRequiresStub"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("javaSerializationException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("javaSerializationException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("javaSerializationException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("javaSerializationException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("javaStreamInitFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("javaStreamInitFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("javaStreamInitFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("javaStreamInitFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("localObjectNotAllowed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("localObjectNotAllowed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("localObjectNotAllowed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("localObjectNotAllowed"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("locateUnknownObject"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("locateUnknownObject"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("locateUnknownObject"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("locateUnknownObject"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("locationforwardError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("locationforwardError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("locationforwardError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("locationforwardError"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("longDoubleNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("longDoubleNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("longDoubleNotImplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("longDoubleNotImplemented"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("malformedUrl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("malformedUrl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("malformedUrl"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("malformedUrl"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Object, ::java::lang::Object)>("methodNotFoundInTie"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("methodNotFoundInTie"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("methodNotFoundInTie"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("methodNotFoundInTie"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("methodShouldNotBeCalled"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("methodShouldNotBeCalled"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("methodShouldNotBeCalled"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("methodShouldNotBeCalled"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("multIiopProfNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("multIiopProfNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("multIiopProfNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("multIiopProfNotSupported"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("negativeBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("negativeBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("negativeBounds"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("negativeBounds"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("negativeStringLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("negativeStringLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("negativeStringLength"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("negativeStringLength"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("noClientScClass"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("noClientScClass"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("noClientScClass"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noClientScClass"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("noInterfaceDefStub"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("noInterfaceDefStub"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("noInterfaceDefStub"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noInterfaceDefStub"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("noInvocationHandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("noInvocationHandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("noInvocationHandler"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("noInvocationHandler"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("noObjectAdapterFactory"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("noObjectAdapterFactory"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("noObjectAdapterFactory"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noObjectAdapterFactory"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("noPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("noPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("noPoa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noPoa"), //
		jMethod<::org::omg::CORBA::INV_OBJREF()>("noProfilePresent"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::java::lang::Throwable)>("noProfilePresent"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus)>("noProfilePresent"), //
		jMethod<::org::omg::CORBA::INV_OBJREF(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noProfilePresent"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("noServerScInDispatch"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("noServerScInDispatch"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("noServerScInDispatch"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noServerScInDispatch"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("noServerSubcontract"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("noServerSubcontract"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("noServerSubcontract"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noServerSubcontract"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("noToa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("noToa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("noToa"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("noToa"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("nonExistentOrbid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("nonExistentOrbid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("nonExistentOrbid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nonExistentOrbid"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("nullIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("nullIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("nullIor"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullIor"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("nullNotAllowed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("nullNotAllowed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("nullNotAllowed"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullNotAllowed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("nullObjectReference"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("nullObjectReference"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("nullObjectReference"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullObjectReference"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("nullOutCall"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("nullOutCall"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("nullOutCall"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullOutCall"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("nullParam"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("nullParam"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("nullParam"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullParam"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("nullReplyInGetAddrDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("nullReplyInGetAddrDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("nullReplyInGetAddrDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("nullReplyInGetAddrDisposition"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("numInvocationsAlreadyZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("numInvocationsAlreadyZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("numInvocationsAlreadyZero"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("numInvocationsAlreadyZero"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("objectAdapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("objectAdapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("objectAdapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objectAdapterIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("objrefFromForeignOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("objrefFromForeignOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("objrefFromForeignOrb"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("objrefFromForeignOrb"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("orbConfiguratorError"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("orbConfiguratorError"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("orbConfiguratorError"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbConfiguratorError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER()>("orbConnectError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::java::lang::Throwable)>("orbConnectError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus)>("orbConnectError"), //
		jMethod<::org::omg::CORBA::OBJ_ADAPTER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbConnectError"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("orbDestroyed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("orbDestroyed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("orbDestroyed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbDestroyed"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("orbIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("orbIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("orbIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbIdNotAvailable"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("orbInitializerFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("orbInitializerFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("orbInitializerFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("orbInitializerFailure"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Object)>("orbInitializerType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable, ::java::lang::Object)>("orbInitializerType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("orbInitializerType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("orbInitializerType"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION()>("orbInitialreferenceSyntax"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::java::lang::Throwable)>("orbInitialreferenceSyntax"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus)>("orbInitialreferenceSyntax"), //
		jMethod<::org::omg::CORBA::DATA_CONVERSION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbInitialreferenceSyntax"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("orbTargetAddrPreferenceInExtractObjectkeyInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("orbTargetAddrPreferenceInExtractObjectkeyInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("orbTargetAddrPreferenceInExtractObjectkeyInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("orbTargetAddrPreferenceInExtractObjectkeyInvalid"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("peekstringFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("peekstringFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("peekstringFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("peekstringFailed"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("persistentServerInitError"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("persistentServerInitError"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("persistentServerInitError"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServerInitError"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServeridNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE()>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::java::lang::Throwable)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::INITIALIZE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("persistentServerportNotSet"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("positiveEndTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("positiveEndTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("positiveEndTag"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("positiveEndTag"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("problemWithExceptionTypecode"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("problemWithExceptionTypecode"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("problemWithExceptionTypecode"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("problemWithExceptionTypecode"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("readObjectException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("readObjectException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("readObjectException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("readObjectException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("readObjectLoadClassFailure"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("readObjectLoadClassFailure"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("readObjectLoadClassFailure"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("readObjectLoadClassFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("readUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("readUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("readUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("readUndeclaredException"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("readValueAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("readValueAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("readValueAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("readValueAndNoRepId"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("recursiveTypecodeError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("recursiveTypecodeError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("recursiveTypecodeError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("recursiveTypecodeError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("recvMsgError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("recvMsgError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("recvMsgError"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("recvMsgError"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("refTypeIndirType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("refTypeIndirType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("refTypeIndirType"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("refTypeIndirType"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("remarshalWithNowhereToGo"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("remarshalWithNowhereToGo"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("remarshalWithNowhereToGo"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("remarshalWithNowhereToGo"), //
		jMethod<::org::omg::CORBA::TRANSIENT()>("requestCanceled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::java::lang::Throwable)>("requestCanceled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus)>("requestCanceled"), //
		jMethod<::org::omg::CORBA::TRANSIENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("requestCanceled"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("requestRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("requestRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("requestRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("requestRequiresStub"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("requestdispatcherregistryError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("requestdispatcherregistryError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("requestdispatcherregistryError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("requestdispatcherregistryError"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("runtimeexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("runtimeexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("runtimeexception"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("runtimeexception"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object, ::java::lang::Object)>("securityExceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("securityExceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("securityExceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("securityExceptionInAccept"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object)>("selectionKeyInvalid"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object)>("selectionKeyInvalid"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("selectionKeyInvalid"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("selectionKeyInvalid"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT()>("sendDeferredNotimplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::java::lang::Throwable)>("sendDeferredNotimplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus)>("sendDeferredNotimplemented"), //
		jMethod<::org::omg::CORBA::NO_IMPLEMENT(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("sendDeferredNotimplemented"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST()>("servantNotFound"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::java::lang::Throwable)>("servantNotFound"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus)>("servantNotFound"), //
		jMethod<::org::omg::CORBA::OBJECT_NOT_EXIST(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("servantNotFound"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("serverIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("serverIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("serverIdNotAvailable"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverIdNotAvailable"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("serverScNoIiopProfile"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("serverScNoIiopProfile"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("serverScNoIiopProfile"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverScNoIiopProfile"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("serverScTempSize"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("serverScTempSize"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("serverScTempSize"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("serverScTempSize"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("setDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("setDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("setDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setDelegateRequiresStub"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("setExceptionCalledBadType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("setExceptionCalledBadType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("setExceptionCalledBadType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setExceptionCalledBadType"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION()>("setExceptionCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::java::lang::Throwable)>("setExceptionCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus)>("setExceptionCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_OPERATION(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setExceptionCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("setResultAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("setResultAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("setResultAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setResultAfterException"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("setResultCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("setResultCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("setResultCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setResultCalledMultiple"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER()>("setResultCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::java::lang::Throwable)>("setResultCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus)>("setResultCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_INV_ORDER(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("setResultCalledNullArgs"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("socketFactoryAndContactInfoListAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("socketFactoryAndContactInfoListAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("socketFactoryAndContactInfoListAtSameTime"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("socketFactoryAndContactInfoListAtSameTime"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable1"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable1"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable1"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable1"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable2"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable2"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable3"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable3"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable3"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable3"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable4"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable4"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable4"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable4"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable5"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable5"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable5"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable5"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("statementNotReachable6"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("statementNotReachable6"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("statementNotReachable6"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("statementNotReachable6"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("stringExpected"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("stringExpected"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("stringExpected"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("stringExpected"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("stringifyWriteError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("stringifyWriteError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("stringifyWriteError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("stringifyWriteError"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("stubCreateError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("stubCreateError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("stubCreateError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("stubCreateError"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("svcctxUnmarshalError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("svcctxUnmarshalError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("svcctxUnmarshalError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("svcctxUnmarshalError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("threadGroupDestroyFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("threadGroupDestroyFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("threadGroupDestroyFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("threadGroupDestroyFailed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("threadGroupHasActiveThreadsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasActiveThreadsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasActiveThreadsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasActiveThreadsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("threadGroupHasSubGroupsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasSubGroupsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasSubGroupsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("threadGroupHasSubGroupsInClose"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("threadGroupIsDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("threadGroupIsDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("threadGroupIsDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("threadGroupIsDestroyed"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("threadPoolCloseError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("threadPoolCloseError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("threadPoolCloseError"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("threadPoolCloseError"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("tkLongDoubleNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("tkLongDoubleNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("tkLongDoubleNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("tkLongDoubleNotSupported"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("transportReadTimeoutExceeded"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("transportReadTimeoutExceeded"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("transportReadTimeoutExceeded"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("transportReadTimeoutExceeded"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("typecodeNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("typecodeNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("typecodeNotSupported"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("typecodeNotSupported"), //
		jMethod<::org::omg::CORBA::BAD_PARAM()>("unableFindValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::java::lang::Throwable)>("unableFindValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus)>("unableFindValueFactory"), //
		jMethod<::org::omg::CORBA::BAD_PARAM(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableFindValueFactory"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("unableToLocateRepIdArray"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("unableToLocateRepIdArray"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unableToLocateRepIdArray"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unableToLocateRepIdArray"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unableToSetSocketFactoryOrb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unableToSetSocketFactoryOrb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unableToSetSocketFactoryOrb"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unableToSetSocketFactoryOrb"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unexpectedDiiException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unexpectedDiiException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unexpectedDiiException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedDiiException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unexpectedDirectByteBufferWithNonChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unexpectedDirectByteBufferWithNonChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unexpectedDirectByteBufferWithNonChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedDirectByteBufferWithNonChannelSocket"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object, ::java::lang::Object)>("unexpectedEnclosingValuetype"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("unexpectedEnclosingValuetype"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("unexpectedEnclosingValuetype"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("unexpectedEnclosingValuetype"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unexpectedEof"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unexpectedEof"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unexpectedEof"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedEof"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("unexpectedNonDirectByteBufferWithChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("unexpectedNonDirectByteBufferWithChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("unexpectedNonDirectByteBufferWithChannelSocket"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedNonDirectByteBufferWithChannelSocket"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unexpectedUnionDefault"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unexpectedUnionDefault"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unexpectedUnionDefault"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unexpectedUnionDefault"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("unionDiscriminatorError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("unionDiscriminatorError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("unionDiscriminatorError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unionDiscriminatorError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Object)>("unknownCodeset"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable, ::java::lang::Object)>("unknownCodeset"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unknownCodeset"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unknownCodeset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("unknownConversionCodeSet"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("unknownConversionCodeSet"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unknownConversionCodeSet"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unknownConversionCodeSet"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownCorbaExc"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownCorbaExc"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownCorbaExc"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownCorbaExc"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownDsiSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownDsiSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownDsiSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownDsiSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownExceptionInDispatch"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownExceptionInDispatch"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownExceptionInDispatch"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownExceptionInDispatch"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("unknownNativeCodeset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("unknownNativeCodeset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unknownNativeCodeset"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unknownNativeCodeset"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownServerError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownServerError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownServerError"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownServerError"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("unknownSysex"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unknownSysex"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE()>("unresolvedRecursiveTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::java::lang::Throwable)>("unresolvedRecursiveTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus)>("unresolvedRecursiveTypecode"), //
		jMethod<::org::omg::CORBA::BAD_TYPECODE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("unresolvedRecursiveTypecode"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("unsupportedGiopVersion"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("unsupportedGiopVersion"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("unsupportedGiopVersion"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("unsupportedGiopVersion"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("valuehandlerReadError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("valuehandlerReadError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("valuehandlerReadError"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("valuehandlerReadError"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("valuehandlerReadException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("valuehandlerReadException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("valuehandlerReadException"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("valuehandlerReadException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("wcharArrayUnsupportedEncoding"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("wcharArrayUnsupportedEncoding"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("wcharArrayUnsupportedEncoding"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wcharArrayUnsupportedEncoding"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("wcharDataInGiop10"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("wcharDataInGiop10"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("wcharDataInGiop10"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wcharDataInGiop10"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("workQueueRequestWorkNoWorkFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workQueueRequestWorkNoWorkFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("workQueueRequestWorkNoWorkFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workQueueRequestWorkNoWorkFound"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("workQueueThreadInterrupted"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workQueueThreadInterrupted"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("workQueueThreadInterrupted"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workQueueThreadInterrupted"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("workerThreadCaughtUnexpectedThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadCaughtUnexpectedThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("workerThreadCaughtUnexpectedThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadCaughtUnexpectedThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("workerThreadCreated"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadCreated"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("workerThreadCreated"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadCreated"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("workerThreadCreationFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("workerThreadCreationFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("workerThreadCreationFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("workerThreadCreationFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object)>("workerThreadDoWorkThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadDoWorkThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object)>("workerThreadDoWorkThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object)>("workerThreadDoWorkThrowable"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadNotNeeded"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadNotNeeded"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadNotNeeded"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadNotNeeded"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadSetNameFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadSetNameFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadSetNameFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadSetNameFailure"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadThrowableFromRequestWork"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadThrowableFromRequestWork"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadThrowableFromRequestWork"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object, ::java::lang::Object, ::java::lang::Object)>("workerThreadThrowableFromRequestWork"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE()>("writeErrorSend"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::java::lang::Throwable)>("writeErrorSend"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus)>("writeErrorSend"), //
		jMethod<::org::omg::CORBA::COMM_FAILURE(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("writeErrorSend"), //
		jMethod<::org::omg::CORBA::MARSHAL()>("writeLocalObject"), //
		jMethod<::org::omg::CORBA::MARSHAL(::java::lang::Throwable)>("writeLocalObject"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus)>("writeLocalObject"), //
		jMethod<::org::omg::CORBA::MARSHAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("writeLocalObject"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Object)>("writeUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable, ::java::lang::Object)>("writeUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Object)>("writeUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable, ::java::lang::Object)>("writeUndeclaredException"), //
		jMethod<::org::omg::CORBA::INTERNAL()>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::java::lang::Throwable)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::INTERNAL(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wrongClientsc"), //
		jMethod<::org::omg::CORBA::UNKNOWN()>("wrongInterfaceDef"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::java::lang::Throwable)>("wrongInterfaceDef"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus)>("wrongInterfaceDef"), //
		jMethod<::org::omg::CORBA::UNKNOWN(::org::omg::CORBA::CompletionStatus, ::java::lang::Throwable)>("wrongInterfaceDef"), //
	};

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto abstractFromNonAbstract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("abstractFromNonAbstract")] != -1);
		return call<R>("abstractFromNonAbstract", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto acceptorInstantiationFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorInstantiationFailure")] != -1);
		return call<R>("acceptorInstantiationFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto acceptorInstantiationTypeFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorInstantiationTypeFailure")] != -1);
		return call<R>("acceptorInstantiationTypeFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto acceptorsAndLegacySocketFactoryAtSameTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorsAndLegacySocketFactoryAtSameTime")] != -1);
		return call<R>("acceptorsAndLegacySocketFactoryAtSameTime", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto adapterIdNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterIdNotAvailable")] != -1);
		return call<R>("adapterIdNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto adapterInactiveInActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterInactiveInActivation")] != -1);
		return call<R>("adapterInactiveInActivation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto applicationExceptionInSpecialMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("applicationExceptionInSpecialMethod")] != -1);
		return call<R>("applicationExceptionInSpecialMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto argumentsCalledAfterException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("argumentsCalledAfterException")] != -1);
		return call<R>("argumentsCalledAfterException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto argumentsCalledMultiple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("argumentsCalledMultiple")] != -1);
		return call<R>("argumentsCalledMultiple", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto argumentsCalledNullArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("argumentsCalledNullArgs")] != -1);
		return call<R>("argumentsCalledNullArgs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto argumentsNotCalled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("argumentsNotCalled")] != -1);
		return call<R>("argumentsNotCalled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto badActivateTieCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badActivateTieCall")] != -1);
		return call<R>("badActivateTieCall", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto badAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badAdapterId")] != -1);
		return call<R>("badAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badArgumentsNvlist(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badArgumentsNvlist")] != -1);
		return call<R>("badArgumentsNvlist", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badChunkLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badChunkLength")] != -1);
		return call<R>("badChunkLength", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badCodeSetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCodeSetString")] != -1);
		return call<R>("badCodeSetString", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badCodebaseIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCodebaseIndirection")] != -1);
		return call<R>("badCodebaseIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badCodesetsFromClient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCodesetsFromClient")] != -1);
		return call<R>("badCodesetsFromClient", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badCompletionStatusInLocateReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCompletionStatusInLocateReply")] != -1);
		return call<R>("badCompletionStatusInLocateReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badCompletionStatusInReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCompletionStatusInReply")] != -1);
		return call<R>("badCompletionStatusInReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badContactInfoListFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badContactInfoListFactory")] != -1);
		return call<R>("badContactInfoListFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto badCorbalocString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCorbalocString")] != -1);
		return call<R>("badCorbalocString", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badCustomIiopPrimaryToContactInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCustomIiopPrimaryToContactInfo")] != -1);
		return call<R>("badCustomIiopPrimaryToContactInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badCustomIorToSocketInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCustomIorToSocketInfo")] != -1);
		return call<R>("badCustomIorToSocketInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badCustomSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badCustomSocketFactory")] != -1);
		return call<R>("badCustomSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badDigitInFixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badDigitInFixed")] != -1);
		return call<R>("badDigitInFixed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badExceptionDetailMessageServiceContextType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badExceptionDetailMessageServiceContextType")] != -1);
		return call<R>("badExceptionDetailMessageServiceContextType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badFixed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badFixed")] != -1);
		return call<R>("badFixed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badGiop11Ctb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badGiop11Ctb")] != -1);
		return call<R>("badGiop11Ctb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badGiopRequestType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badGiopRequestType")] != -1);
		return call<R>("badGiopRequestType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badHelperIdMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badHelperIdMethod")] != -1);
		return call<R>("badHelperIdMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badHelperReadMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badHelperReadMethod")] != -1);
		return call<R>("badHelperReadMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badHelperWriteMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badHelperWriteMethod")] != -1);
		return call<R>("badHelperWriteMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badHexDigit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badHexDigit")] != -1);
		return call<R>("badHexDigit", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badInsertobjParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badInsertobjParam")] != -1);
		return call<R>("badInsertobjParam", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badKind")] != -1);
		return call<R>("badKind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badLocateRequestStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badLocateRequestStatus")] != -1);
		return call<R>("badLocateRequestStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badMessageTypeForCancel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badMessageTypeForCancel")] != -1);
		return call<R>("badMessageTypeForCancel", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badModifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badModifier")] != -1);
		return call<R>("badModifier", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto badOrbConfigurator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badOrbConfigurator")] != -1);
		return call<R>("badOrbConfigurator", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto badOrbForServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badOrbForServant")] != -1);
		return call<R>("badOrbForServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_TYPECODE, typename... Args>
	auto badRemoteTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badRemoteTypecode")] != -1);
		return call<R>("badRemoteTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badRepIdIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badRepIdIndirection")] != -1);
		return call<R>("badRepIdIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badReplystatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badReplystatus")] != -1);
		return call<R>("badReplystatus", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badReservedLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badReservedLength")] != -1);
		return call<R>("badReservedLength", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badSequenceBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSequenceBounds")] != -1);
		return call<R>("badSequenceBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badServantReadObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badServantReadObject")] != -1);
		return call<R>("badServantReadObject", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto badServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badServerId")] != -1);
		return call<R>("badServerId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto badSkeleton(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSkeleton")] != -1);
		return call<R>("badSkeleton", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto badStringBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badStringBounds")] != -1);
		return call<R>("badStringBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badStringifiedIor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badStringifiedIor")] != -1);
		return call<R>("badStringifiedIor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badStringifiedIorLen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badStringifiedIorLen")] != -1);
		return call<R>("badStringifiedIorLen", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badSystemExceptionInLocateReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSystemExceptionInLocateReply")] != -1);
		return call<R>("badSystemExceptionInLocateReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badSystemExceptionInReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badSystemExceptionInReply")] != -1);
		return call<R>("badSystemExceptionInReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badToaOaid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badToaOaid")] != -1);
		return call<R>("badToaOaid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badTypecodeForCustomValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badTypecodeForCustomValue")] != -1);
		return call<R>("badTypecodeForCustomValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto badUnicodePair(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badUnicodePair")] != -1);
		return call<R>("badUnicodePair", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto badUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badUrl")] != -1);
		return call<R>("badUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto badValueTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badValueTag")] != -1);
		return call<R>("badValueTag", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto badkindCannotOccur(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("badkindCannotOccur")] != -1);
		return call<R>("badkindCannotOccur", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto bootstrapApplicationException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootstrapApplicationException")] != -1);
		return call<R>("bootstrapApplicationException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto bootstrapException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootstrapException")] != -1);
		return call<R>("bootstrapException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto bootstrapRuntimeException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootstrapRuntimeException")] != -1);
		return call<R>("bootstrapRuntimeException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto bootstrapServerNotAvail(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bootstrapServerNotAvail")] != -1);
		return call<R>("bootstrapServerNotAvail", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto boundsCannotOccur(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("boundsCannotOccur")] != -1);
		return call<R>("boundsCannotOccur", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto boundsErrorInDiiRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("boundsErrorInDiiRequest")] != -1);
		return call<R>("boundsErrorInDiiRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto btcConverterFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("btcConverterFailure")] != -1);
		return call<R>("btcConverterFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto btcResultMoreThanOneChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("btcResultMoreThanOneChar")] != -1);
		return call<R>("btcResultMoreThanOneChar", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto bufferReadManagerTimeout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bufferReadManagerTimeout")] != -1);
		return call<R>("bufferReadManagerTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto cancelNotSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cancelNotSupported")] != -1);
		return call<R>("cancelNotSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto cannotCreateOrbidDb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotCreateOrbidDb")] != -1);
		return call<R>("cannotCreateOrbidDb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto cannotMarshalBadTckind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotMarshalBadTckind")] != -1);
		return call<R>("cannotMarshalBadTckind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto cannotMarshalNative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotMarshalNative")] != -1);
		return call<R>("cannotMarshalNative", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto cannotReadOrbidDb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotReadOrbidDb")] != -1);
		return call<R>("cannotReadOrbidDb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto cannotWriteOrbidDb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cannotWriteOrbidDb")] != -1);
		return call<R>("cannotWriteOrbidDb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto characterOutofrange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("characterOutofrange")] != -1);
		return call<R>("characterOutofrange", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto chunkOverflow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chunkOverflow")] != -1);
		return call<R>("chunkOverflow", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto classNotFound1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classNotFound1")] != -1);
		return call<R>("classNotFound1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto classNotFound2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classNotFound2")] != -1);
		return call<R>("classNotFound2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto classNotFound3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classNotFound3")] != -1);
		return call<R>("classNotFound3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto cnfeReadClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cnfeReadClass")] != -1);
		return call<R>("cnfeReadClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto codesetIncompatible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codesetIncompatible")] != -1);
		return call<R>("codesetIncompatible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto connectFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectFailure")] != -1);
		return call<R>("connectFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto connectRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectRequiresStub")] != -1);
		return call<R>("connectRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto connectingServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectingServant")] != -1);
		return call<R>("connectingServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto connectionAbort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionAbort")] != -1);
		return call<R>("connectionAbort", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto connectionCloseRebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionCloseRebind")] != -1);
		return call<R>("connectionCloseRebind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto connectionRebind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionRebind")] != -1);
		return call<R>("connectionRebind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto contextCalledOutOfOrder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contextCalledOutOfOrder")] != -1);
		return call<R>("contextCalledOutOfOrder", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto contextNotImplemented(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contextNotImplemented")] != -1);
		return call<R>("contextNotImplemented", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto couldNotCreateArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotCreateArray")] != -1);
		return call<R>("couldNotCreateArray", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto couldNotDuplicateCdrInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotDuplicateCdrInputStream")] != -1);
		return call<R>("couldNotDuplicateCdrInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto couldNotFindClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotFindClass")] != -1);
		return call<R>("couldNotFindClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto couldNotInstantiateHelper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotInstantiateHelper")] != -1);
		return call<R>("couldNotInstantiateHelper", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto couldNotInvokeHelperReadMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotInvokeHelperReadMethod")] != -1);
		return call<R>("couldNotInvokeHelperReadMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto couldNotLoadClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotLoadClass")] != -1);
		return call<R>("couldNotLoadClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto couldNotSetArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotSetArray")] != -1);
		return call<R>("couldNotSetArray", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto couldNotSkipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("couldNotSkipBytes")] != -1);
		return call<R>("couldNotSkipBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto createListenerFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createListenerFailed")] != -1);
		return call<R>("createListenerFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto ctbConverterFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctbConverterFailure")] != -1);
		return call<R>("ctbConverterFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto customWrapperIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("customWrapperIndirection")] != -1);
		return call<R>("customWrapperIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto customWrapperNotSingleRepid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("customWrapperNotSingleRepid")] != -1);
		return call<R>("customWrapperNotSingleRepid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto customWrapperWithCodebase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("customWrapperWithCodebase")] != -1);
		return call<R>("customWrapperWithCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto defaultCreateServerSocketGivenNonIiopClearText(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultCreateServerSocketGivenNonIiopClearText")] != -1);
		return call<R>("defaultCreateServerSocketGivenNonIiopClearText", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto dsiResultException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dsiResultException")] != -1);
		return call<R>("dsiResultException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto dsimethodNotcalled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dsimethodNotcalled")] != -1);
		return call<R>("dsimethodNotcalled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto duplicateExceptionDetailMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicateExceptionDetailMessage")] != -1);
		return call<R>("duplicateExceptionDetailMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto duplicateIndirectionOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicateIndirectionOffset")] != -1);
		return call<R>("duplicateIndirectionOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto duplicateOrbVersionServiceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicateOrbVersionServiceContext")] != -1);
		return call<R>("duplicateOrbVersionServiceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto duplicateSendingContextServiceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("duplicateSendingContextServiceContext")] != -1);
		return call<R>("duplicateSendingContextServiceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto dynAnyDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dynAnyDestroyed")] != -1);
		return call<R>("dynAnyDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto emptyStackRunServantPostInvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("emptyStackRunServantPostInvoke")] != -1);
		return call<R>("emptyStackRunServantPostInvoke", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto endOfStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endOfStream")] != -1);
		return call<R>("endOfStream", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto errorInSettingDynamicStubFactoryFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorInSettingDynamicStubFactoryFactory")] != -1);
		return call<R>("errorInSettingDynamicStubFactoryFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorInitBadserveridhandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorInitBadserveridhandler")] != -1);
		return call<R>("errorInitBadserveridhandler", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto errorInvokingHelperWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorInvokingHelperWrite")] != -1);
		return call<R>("errorInvokingHelperWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorResolvingAlias(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorResolvingAlias")] != -1);
		return call<R>("errorResolvingAlias", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto errorSettingField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorSettingField")] != -1);
		return call<R>("errorSettingField", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto errorUnmarshalingUserexc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errorUnmarshalingUserexc")] != -1);
		return call<R>("errorUnmarshalingUserexc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto exceptionInAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionInAccept")] != -1);
		return call<R>("exceptionInAccept", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto exceptionWhenSendingCloseConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptionWhenSendingCloseConnection")] != -1);
		return call<R>("exceptionWhenSendingCloseConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto expectedTypeNullAndNoRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("expectedTypeNullAndNoRepId")] != -1);
		return call<R>("expectedTypeNullAndNoRepId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto extractNotInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractNotInitialized")] != -1);
		return call<R>("extractNotInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto extractObjectFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractObjectFailed")] != -1);
		return call<R>("extractObjectFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto extractObjectIncompatible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractObjectIncompatible")] != -1);
		return call<R>("extractObjectIncompatible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto extractWrongType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractWrongType")] != -1);
		return call<R>("extractWrongType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto extractWrongTypeList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractWrongTypeList")] != -1);
		return call<R>("extractWrongTypeList", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto fieldNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fieldNotFound")] != -1);
		return call<R>("fieldNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto fixedBadTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fixedBadTypecode")] != -1);
		return call<R>("fixedBadTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto fixedNotMatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fixedNotMatch")] != -1);
		return call<R>("fixedNotMatch", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto fragmentSizeDiv(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fragmentSizeDiv")] != -1);
		return call<R>("fragmentSizeDiv", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto fragmentSizeMinimum(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fragmentSizeMinimum")] != -1);
		return call<R>("fragmentSizeMinimum", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto fragmentationDisallowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fragmentationDisallowed")] != -1);
		return call<R>("fragmentationDisallowed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto genericNoImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("genericNoImpl")] != -1);
		return call<R>("genericNoImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::ORBUtilSystemException, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto getDelegateRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegateRequiresStub")] != -1);
		return call<R>("getDelegateRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto getDelegateServantNotActive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegateServantNotActive")] != -1);
		return call<R>("getDelegateServantNotActive", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto getDelegateWrongPolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegateWrongPolicy")] != -1);
		return call<R>("getDelegateWrongPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto getLocalHostFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalHostFailed")] != -1);
		return call<R>("getLocalHostFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto getOrbRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrbRequiresStub")] != -1);
		return call<R>("getOrbRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto getPropertiesError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertiesError")] != -1);
		return call<R>("getPropertiesError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto getServerPortCalledBeforeEndpointsInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerPortCalledBeforeEndpointsInitialized")] != -1);
		return call<R>("getServerPortCalledBeforeEndpointsInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto getSystemExReturnedNull(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemExReturnedNull")] != -1);
		return call<R>("getSystemExReturnedNull", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto getTypeIdsRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeIdsRequiresStub")] != -1);
		return call<R>("getTypeIdsRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto getinterfaceNotImplemented(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getinterfaceNotImplemented")] != -1);
		return call<R>("getinterfaceNotImplemented", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto giopMagicError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("giopMagicError")] != -1);
		return call<R>("giopMagicError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto giopVersionError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("giopVersionError")] != -1);
		return call<R>("giopVersionError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto iiopinputstreamGrow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iiopinputstreamGrow")] != -1);
		return call<R>("iiopinputstreamGrow", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto illegalBootstrapOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalBootstrapOperation")] != -1);
		return call<R>("illegalBootstrapOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto illegalContactInfoListFactoryType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalContactInfoListFactoryType")] != -1);
		return call<R>("illegalContactInfoListFactoryType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalGiopMsgType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalGiopMsgType")] != -1);
		return call<R>("illegalGiopMsgType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto illegalIiopPrimaryToContactInfoType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalIiopPrimaryToContactInfoType")] != -1);
		return call<R>("illegalIiopPrimaryToContactInfoType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto illegalIorToSocketInfoType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalIorToSocketInfoType")] != -1);
		return call<R>("illegalIorToSocketInfoType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalReplyStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalReplyStatus")] != -1);
		return call<R>("illegalReplyStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto illegalSocketFactoryType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalSocketFactoryType")] != -1);
		return call<R>("illegalSocketFactoryType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalSubcontractId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalSubcontractId")] != -1);
		return call<R>("illegalSubcontractId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto illegalTargetAddressDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalTargetAddressDisposition")] != -1);
		return call<R>("illegalTargetAddressDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto illegalUnionDiscriminatorType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("illegalUnionDiscriminatorType")] != -1);
		return call<R>("illegalUnionDiscriminatorType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto indirectionNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indirectionNotFound")] != -1);
		return call<R>("indirectionNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto insertObjectFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertObjectFailed")] != -1);
		return call<R>("insertObjectFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto insertObjectIncompatible(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertObjectIncompatible")] != -1);
		return call<R>("insertObjectIncompatible", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto interruptedJoinCallWhileClosingThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("interruptedJoinCallWhileClosingThreadPool")] != -1);
		return call<R>("interruptedJoinCallWhileClosingThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidBtcConverterName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidBtcConverterName")] != -1);
		return call<R>("invalidBtcConverterName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidBuffMgrStrategy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidBuffMgrStrategy")] != -1);
		return call<R>("invalidBuffMgrStrategy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidCodeSetNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidCodeSetNumber")] != -1);
		return call<R>("invalidCodeSetNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidCodeSetString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidCodeSetString")] != -1);
		return call<R>("invalidCodeSetString", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidComplexTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidComplexTypecode")] != -1);
		return call<R>("invalidComplexTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidContactInfoListIteratorFailureException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidContactInfoListIteratorFailureException")] != -1);
		return call<R>("invalidContactInfoListIteratorFailureException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidCtbConverterName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidCtbConverterName")] != -1);
		return call<R>("invalidCtbConverterName", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidIndirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidIndirection")] != -1);
		return call<R>("invalidIndirection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidIsstreamedTckind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidIsstreamedTckind")] != -1);
		return call<R>("invalidIsstreamedTckind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invalidJdk131PatchLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidJdk131PatchLevel")] != -1);
		return call<R>("invalidJdk131PatchLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidObjectKey")] != -1);
		return call<R>("invalidObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidRequestPartitioningComponentValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidRequestPartitioningComponentValue")] != -1);
		return call<R>("invalidRequestPartitioningComponentValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidRequestPartitioningId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidRequestPartitioningId")] != -1);
		return call<R>("invalidRequestPartitioningId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidRequestPartitioningPolicyValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidRequestPartitioningPolicyValue")] != -1);
		return call<R>("invalidRequestPartitioningPolicyValue", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidSimpleTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidSimpleTypecode")] != -1);
		return call<R>("invalidSimpleTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto invalidSingleCharCtb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidSingleCharCtb")] != -1);
		return call<R>("invalidSingleCharCtb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidTaggedProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidTaggedProfile")] != -1);
		return call<R>("invalidTaggedProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto invalidTypecodeKind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidTypecodeKind")] != -1);
		return call<R>("invalidTypecodeKind", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto invalidTypecodeKindMarshal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invalidTypecodeKindMarshal")] != -1);
		return call<R>("invalidTypecodeKindMarshal", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invocationErrorInReflectiveTie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invocationErrorInReflectiveTie")] != -1);
		return call<R>("invocationErrorInReflectiveTie", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto invocationInfoStackEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invocationInfoStackEmpty")] != -1);
		return call<R>("invocationInfoStackEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto invokeError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeError")] != -1);
		return call<R>("invokeError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto ioExceptionOnClose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ioExceptionOnClose")] != -1);
		return call<R>("ioExceptionOnClose", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto ioexceptionWhenReadingConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ioexceptionWhenReadingConnection")] != -1);
		return call<R>("ioexceptionWhenReadingConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto isLocalRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocalRequiresStub")] != -1);
		return call<R>("isLocalRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto javaSerializationException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("javaSerializationException")] != -1);
		return call<R>("javaSerializationException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto javaStreamInitFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("javaStreamInitFailed")] != -1);
		return call<R>("javaStreamInitFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto localObjectNotAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localObjectNotAllowed")] != -1);
		return call<R>("localObjectNotAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto locateUnknownObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locateUnknownObject")] != -1);
		return call<R>("locateUnknownObject", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto locationforwardError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locationforwardError")] != -1);
		return call<R>("locationforwardError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto longDoubleNotImplemented(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("longDoubleNotImplemented")] != -1);
		return call<R>("longDoubleNotImplemented", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto malformedUrl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("malformedUrl")] != -1);
		return call<R>("malformedUrl", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto methodNotFoundInTie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("methodNotFoundInTie")] != -1);
		return call<R>("methodNotFoundInTie", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto methodShouldNotBeCalled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("methodShouldNotBeCalled")] != -1);
		return call<R>("methodShouldNotBeCalled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto multIiopProfNotSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("multIiopProfNotSupported")] != -1);
		return call<R>("multIiopProfNotSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto negativeBounds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("negativeBounds")] != -1);
		return call<R>("negativeBounds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto negativeStringLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("negativeStringLength")] != -1);
		return call<R>("negativeStringLength", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noClientScClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noClientScClass")] != -1);
		return call<R>("noClientScClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto noInterfaceDefStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noInterfaceDefStub")] != -1);
		return call<R>("noInterfaceDefStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noInvocationHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noInvocationHandler")] != -1);
		return call<R>("noInvocationHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto noObjectAdapterFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noObjectAdapterFactory")] != -1);
		return call<R>("noObjectAdapterFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noPoa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noPoa")] != -1);
		return call<R>("noPoa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INV_OBJREF, typename... Args>
	auto noProfilePresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noProfilePresent")] != -1);
		return call<R>("noProfilePresent", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto noServerScInDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noServerScInDispatch")] != -1);
		return call<R>("noServerScInDispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noServerSubcontract(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noServerSubcontract")] != -1);
		return call<R>("noServerSubcontract", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto noToa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noToa")] != -1);
		return call<R>("noToa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto nonExistentOrbid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nonExistentOrbid")] != -1);
		return call<R>("nonExistentOrbid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto nullIor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullIor")] != -1);
		return call<R>("nullIor", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto nullNotAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullNotAllowed")] != -1);
		return call<R>("nullNotAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto nullObjectReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullObjectReference")] != -1);
		return call<R>("nullObjectReference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto nullOutCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullOutCall")] != -1);
		return call<R>("nullOutCall", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto nullParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullParam")] != -1);
		return call<R>("nullParam", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto nullReplyInGetAddrDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nullReplyInGetAddrDisposition")] != -1);
		return call<R>("nullReplyInGetAddrDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto numInvocationsAlreadyZero(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numInvocationsAlreadyZero")] != -1);
		return call<R>("numInvocationsAlreadyZero", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto objectAdapterIdNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectAdapterIdNotAvailable")] != -1);
		return call<R>("objectAdapterIdNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto objrefFromForeignOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objrefFromForeignOrb")] != -1);
		return call<R>("objrefFromForeignOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto orbConfiguratorError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbConfiguratorError")] != -1);
		return call<R>("orbConfiguratorError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJ_ADAPTER, typename... Args>
	auto orbConnectError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbConnectError")] != -1);
		return call<R>("orbConnectError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto orbDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbDestroyed")] != -1);
		return call<R>("orbDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto orbIdNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbIdNotAvailable")] != -1);
		return call<R>("orbIdNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto orbInitializerFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbInitializerFailure")] != -1);
		return call<R>("orbInitializerFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto orbInitializerType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbInitializerType")] != -1);
		return call<R>("orbInitializerType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::DATA_CONVERSION, typename... Args>
	auto orbInitialreferenceSyntax(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbInitialreferenceSyntax")] != -1);
		return call<R>("orbInitialreferenceSyntax", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto orbTargetAddrPreferenceInExtractObjectkeyInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orbTargetAddrPreferenceInExtractObjectkeyInvalid")] != -1);
		return call<R>("orbTargetAddrPreferenceInExtractObjectkeyInvalid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto peekstringFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peekstringFailed")] != -1);
		return call<R>("peekstringFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto persistentServerInitError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServerInitError")] != -1);
		return call<R>("persistentServerInitError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto persistentServeridNotSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServeridNotSet")] != -1);
		return call<R>("persistentServeridNotSet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INITIALIZE, typename... Args>
	auto persistentServerportNotSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("persistentServerportNotSet")] != -1);
		return call<R>("persistentServerportNotSet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto positiveEndTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("positiveEndTag")] != -1);
		return call<R>("positiveEndTag", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto problemWithExceptionTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("problemWithExceptionTypecode")] != -1);
		return call<R>("problemWithExceptionTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto readObjectException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObjectException")] != -1);
		return call<R>("readObjectException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto readObjectLoadClassFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObjectLoadClassFailure")] != -1);
		return call<R>("readObjectLoadClassFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto readUndeclaredException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUndeclaredException")] != -1);
		return call<R>("readUndeclaredException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto readValueAndNoRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readValueAndNoRepId")] != -1);
		return call<R>("readValueAndNoRepId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto recursiveTypecodeError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recursiveTypecodeError")] != -1);
		return call<R>("recursiveTypecodeError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto recvMsgError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("recvMsgError")] != -1);
		return call<R>("recvMsgError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto refTypeIndirType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refTypeIndirType")] != -1);
		return call<R>("refTypeIndirType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto remarshalWithNowhereToGo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remarshalWithNowhereToGo")] != -1);
		return call<R>("remarshalWithNowhereToGo", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TRANSIENT, typename... Args>
	auto requestCanceled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestCanceled")] != -1);
		return call<R>("requestCanceled", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto requestRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestRequiresStub")] != -1);
		return call<R>("requestRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto requestdispatcherregistryError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("requestdispatcherregistryError")] != -1);
		return call<R>("requestdispatcherregistryError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto runtimeexception(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("runtimeexception")] != -1);
		return call<R>("runtimeexception", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto securityExceptionInAccept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("securityExceptionInAccept")] != -1);
		return call<R>("securityExceptionInAccept", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto selectionKeyInvalid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("selectionKeyInvalid")] != -1);
		return call<R>("selectionKeyInvalid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::NO_IMPLEMENT, typename... Args>
	auto sendDeferredNotimplemented(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendDeferredNotimplemented")] != -1);
		return call<R>("sendDeferredNotimplemented", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::OBJECT_NOT_EXIST, typename... Args>
	auto servantNotFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantNotFound")] != -1);
		return call<R>("servantNotFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto serverIdNotAvailable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverIdNotAvailable")] != -1);
		return call<R>("serverIdNotAvailable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto serverScNoIiopProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverScNoIiopProfile")] != -1);
		return call<R>("serverScNoIiopProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto serverScTempSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverScTempSize")] != -1);
		return call<R>("serverScTempSize", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto setDelegateRequiresStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegateRequiresStub")] != -1);
		return call<R>("setDelegateRequiresStub", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto setExceptionCalledBadType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExceptionCalledBadType")] != -1);
		return call<R>("setExceptionCalledBadType", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_OPERATION, typename... Args>
	auto setExceptionCalledNullArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExceptionCalledNullArgs")] != -1);
		return call<R>("setExceptionCalledNullArgs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto setResultAfterException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResultAfterException")] != -1);
		return call<R>("setResultAfterException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto setResultCalledMultiple(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResultCalledMultiple")] != -1);
		return call<R>("setResultCalledMultiple", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_INV_ORDER, typename... Args>
	auto setResultCalledNullArgs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResultCalledNullArgs")] != -1);
		return call<R>("setResultCalledNullArgs", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto socketFactoryAndContactInfoListAtSameTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("socketFactoryAndContactInfoListAtSameTime")] != -1);
		return call<R>("socketFactoryAndContactInfoListAtSameTime", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable1")] != -1);
		return call<R>("statementNotReachable1", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable2")] != -1);
		return call<R>("statementNotReachable2", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable3(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable3")] != -1);
		return call<R>("statementNotReachable3", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable4")] != -1);
		return call<R>("statementNotReachable4", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable5(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable5")] != -1);
		return call<R>("statementNotReachable5", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto statementNotReachable6(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("statementNotReachable6")] != -1);
		return call<R>("statementNotReachable6", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto stringExpected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringExpected")] != -1);
		return call<R>("stringExpected", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto stringifyWriteError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringifyWriteError")] != -1);
		return call<R>("stringifyWriteError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto stubCreateError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stubCreateError")] != -1);
		return call<R>("stubCreateError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto svcctxUnmarshalError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("svcctxUnmarshalError")] != -1);
		return call<R>("svcctxUnmarshalError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto threadGroupDestroyFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("threadGroupDestroyFailed")] != -1);
		return call<R>("threadGroupDestroyFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto threadGroupHasActiveThreadsInClose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("threadGroupHasActiveThreadsInClose")] != -1);
		return call<R>("threadGroupHasActiveThreadsInClose", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto threadGroupHasSubGroupsInClose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("threadGroupHasSubGroupsInClose")] != -1);
		return call<R>("threadGroupHasSubGroupsInClose", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto threadGroupIsDestroyed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("threadGroupIsDestroyed")] != -1);
		return call<R>("threadGroupIsDestroyed", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto threadPoolCloseError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("threadPoolCloseError")] != -1);
		return call<R>("threadPoolCloseError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto tkLongDoubleNotSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tkLongDoubleNotSupported")] != -1);
		return call<R>("tkLongDoubleNotSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto transportReadTimeoutExceeded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transportReadTimeoutExceeded")] != -1);
		return call<R>("transportReadTimeoutExceeded", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto typecodeNotSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typecodeNotSupported")] != -1);
		return call<R>("typecodeNotSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_PARAM, typename... Args>
	auto unableFindValueFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableFindValueFactory")] != -1);
		return call<R>("unableFindValueFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unableToLocateRepIdArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableToLocateRepIdArray")] != -1);
		return call<R>("unableToLocateRepIdArray", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unableToSetSocketFactoryOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unableToSetSocketFactoryOrb")] != -1);
		return call<R>("unableToSetSocketFactoryOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unexpectedDiiException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedDiiException")] != -1);
		return call<R>("unexpectedDiiException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unexpectedDirectByteBufferWithNonChannelSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedDirectByteBufferWithNonChannelSocket")] != -1);
		return call<R>("unexpectedDirectByteBufferWithNonChannelSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unexpectedEnclosingValuetype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedEnclosingValuetype")] != -1);
		return call<R>("unexpectedEnclosingValuetype", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unexpectedEof(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedEof")] != -1);
		return call<R>("unexpectedEof", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unexpectedException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedException")] != -1);
		return call<R>("unexpectedException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unexpectedNonDirectByteBufferWithChannelSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedNonDirectByteBufferWithChannelSocket")] != -1);
		return call<R>("unexpectedNonDirectByteBufferWithChannelSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unexpectedUnionDefault(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexpectedUnionDefault")] != -1);
		return call<R>("unexpectedUnionDefault", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unionDiscriminatorError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unionDiscriminatorError")] != -1);
		return call<R>("unionDiscriminatorError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto unknownCodeset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownCodeset")] != -1);
		return call<R>("unknownCodeset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unknownConversionCodeSet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownConversionCodeSet")] != -1);
		return call<R>("unknownConversionCodeSet", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownCorbaExc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownCorbaExc")] != -1);
		return call<R>("unknownCorbaExc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownDsiSysex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownDsiSysex")] != -1);
		return call<R>("unknownDsiSysex", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownExceptionInDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownExceptionInDispatch")] != -1);
		return call<R>("unknownExceptionInDispatch", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unknownNativeCodeset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownNativeCodeset")] != -1);
		return call<R>("unknownNativeCodeset", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownServerError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownServerError")] != -1);
		return call<R>("unknownServerError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto unknownSysex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unknownSysex")] != -1);
		return call<R>("unknownSysex", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::BAD_TYPECODE, typename... Args>
	auto unresolvedRecursiveTypecode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unresolvedRecursiveTypecode")] != -1);
		return call<R>("unresolvedRecursiveTypecode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto unsupportedGiopVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsupportedGiopVersion")] != -1);
		return call<R>("unsupportedGiopVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto valuehandlerReadError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valuehandlerReadError")] != -1);
		return call<R>("valuehandlerReadError", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto valuehandlerReadException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valuehandlerReadException")] != -1);
		return call<R>("valuehandlerReadException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto wcharArrayUnsupportedEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wcharArrayUnsupportedEncoding")] != -1);
		return call<R>("wcharArrayUnsupportedEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto wcharDataInGiop10(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wcharDataInGiop10")] != -1);
		return call<R>("wcharDataInGiop10", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workQueueRequestWorkNoWorkFound(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workQueueRequestWorkNoWorkFound")] != -1);
		return call<R>("workQueueRequestWorkNoWorkFound", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workQueueThreadInterrupted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workQueueThreadInterrupted")] != -1);
		return call<R>("workQueueThreadInterrupted", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadCaughtUnexpectedThrowable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadCaughtUnexpectedThrowable")] != -1);
		return call<R>("workerThreadCaughtUnexpectedThrowable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadCreated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadCreated")] != -1);
		return call<R>("workerThreadCreated", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadCreationFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadCreationFailure")] != -1);
		return call<R>("workerThreadCreationFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadDoWorkThrowable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadDoWorkThrowable")] != -1);
		return call<R>("workerThreadDoWorkThrowable", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadNotNeeded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadNotNeeded")] != -1);
		return call<R>("workerThreadNotNeeded", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadSetNameFailure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadSetNameFailure")] != -1);
		return call<R>("workerThreadSetNameFailure", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto workerThreadThrowableFromRequestWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workerThreadThrowableFromRequestWork")] != -1);
		return call<R>("workerThreadThrowableFromRequestWork", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::COMM_FAILURE, typename... Args>
	auto writeErrorSend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeErrorSend")] != -1);
		return call<R>("writeErrorSend", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::MARSHAL, typename... Args>
	auto writeLocalObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeLocalObject")] != -1);
		return call<R>("writeLocalObject", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto writeUndeclaredException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUndeclaredException")] != -1);
		return call<R>("writeUndeclaredException", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::INTERNAL, typename... Args>
	auto wrongClientsc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrongClientsc")] != -1);
		return call<R>("wrongClientsc", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::UNKNOWN, typename... Args>
	auto wrongInterfaceDef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("wrongInterfaceDef")] != -1);
		return call<R>("wrongInterfaceDef", std::forward<Args>(args)...);
	}

};

#endif
