#ifndef com_sun_corba_se_impl_ior_StubIORImpl_HPP
#define com_sun_corba_se_impl_ior_StubIORImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::StubIORImpl : public jObject<::com::sun::corba::se::impl::ior::StubIORImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "StubIORImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::omg::CORBA::Object)>(), //
		jMethod<::jvoid(::java::io::ObjectInputStream)>("doRead"), //
		jMethod<::jvoid(::java::io::ObjectOutputStream)>("doWrite"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::org::omg::CORBA::portable::Delegate(::org::omg::CORBA::ORB)>("getDelegate"), //
		jMethod<::java::lang::String()>("getRepositoryId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto doRead(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doRead")] != -1);
		return call<R>("doRead", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doWrite(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doWrite")] != -1);
		return call<R>("doWrite", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::Delegate, typename... Args>
	auto getDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegate")] != -1);
		return call<R>("getDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRepositoryId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRepositoryId")] != -1);
		return call<R>("getRepositoryId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
