#ifndef com_sun_corba_se_impl_ior_ObjectReferenceTemplateImpl_HPP
#define com_sun_corba_se_impl_ior_ObjectReferenceTemplateImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::ObjectReferenceTemplateImpl : public jObject<::com::sun::corba::se::impl::ior::ObjectReferenceTemplateImpl, ::com::sun::corba::se::impl::ior::ObjectReferenceProducerBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "ObjectReferenceTemplateImpl";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("repositoryId"), //
	};

	template<typename F = ::java::lang::String>
	static auto repositoryId() {
		static_assert(field_signatures[jField<F>("repositoryId")] != -1);
		return sat<F>("repositoryId");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IORTemplate)>(), //
		jConstructor<::jvoid(::org::omg::CORBA::portable::InputStream)>(), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("_read"), //
		jMethod<::java::lang::String *()>("_truncatable_ids"), //
		jMethod<::org::omg::CORBA::TypeCode()>("_type"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("_write"), //
		jMethod<::java::lang::String *()>("adapter_name"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::spi::ior::IORFactory()>("getIORFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList()>("getIORTemplateList"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("orb_id"), //
		jMethod<::java::lang::String()>("server_id"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto _read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_read")] != -1);
		return call<R>("_read", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto _truncatable_ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_truncatable_ids")] != -1);
		return call<R>("_truncatable_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto _type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_type")] != -1);
		return call<R>("_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_write")] != -1);
		return call<R>("_write", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto adapter_name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapter_name")] != -1);
		return call<R>("adapter_name", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORFactory, typename... Args>
	auto getIORFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORFactory")] != -1);
		return call<R>("getIORFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplateList, typename... Args>
	auto getIORTemplateList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORTemplateList")] != -1);
		return call<R>("getIORTemplateList", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto orb_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb_id")] != -1);
		return call<R>("orb_id", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto server_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("server_id")] != -1);
		return call<R>("server_id", std::forward<Args>(args)...);
	}

};

#endif
