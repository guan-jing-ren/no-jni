#ifndef com_sun_corba_se_impl_ior_EncapsulationUtility_HPP
#define com_sun_corba_se_impl_ior_EncapsulationUtility_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::EncapsulationUtility : public jObject<::com::sun::corba::se::impl::ior::EncapsulationUtility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "EncapsulationUtility";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA_2_3::portable::InputStream(::org::omg::CORBA_2_3::portable::InputStream)>("getEncapsulationStream"), //
		jMethod<::jvoid(::java::util::List, ::com::sun::corba::se::spi::ior::IdentifiableFactoryFinder, ::org::omg::CORBA_2_3::portable::InputStream)>("readIdentifiableSequence"), //
		jMethod<::jbyte *(::org::omg::CORBA_2_3::portable::InputStream)>("readOctets"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::WriteContents, ::org::omg::CORBA_2_3::portable::OutputStream)>("writeEncapsulation"), //
		jMethod<::jvoid(::java::util::List, ::org::omg::CORBA_2_3::portable::OutputStream)>("writeIdentifiableSequence"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::org::omg::CORBA_2_3::portable::OutputStream)>("writeOutputStream"), //
	};

	template<typename R = ::org::omg::CORBA_2_3::portable::InputStream, typename... Args>
	static auto getEncapsulationStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncapsulationStream")] != -1);
		return scall<R>("getEncapsulationStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto readIdentifiableSequence(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readIdentifiableSequence")] != -1);
		return scall<R>("readIdentifiableSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto readOctets(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readOctets")] != -1);
		return scall<R>("readOctets", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeEncapsulation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeEncapsulation")] != -1);
		return scall<R>("writeEncapsulation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeIdentifiableSequence(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeIdentifiableSequence")] != -1);
		return scall<R>("writeIdentifiableSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeOutputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeOutputStream")] != -1);
		return scall<R>("writeOutputStream", std::forward<Args>(args)...);
	}

};

#endif
