#ifndef com_sun_corba_se_impl_ior_iiop_IIOPProfileTemplateImpl_HPP
#define com_sun_corba_se_impl_ior_iiop_IIOPProfileTemplateImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::iiop::IIOPProfileTemplateImpl : public jObject<::com::sun::corba::se::impl::ior::iiop::IIOPProfileTemplateImpl, ::com::sun::corba::se::spi::ior::TaggedProfileTemplateBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior_iiop / "IIOPProfileTemplateImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::com::sun::corba::se::spi::ior::iiop::IIOPAddress)>(), //
		jConstructor<::jvoid(::org::omg::CORBA_2_3::portable::InputStream)>(), //
		jMethod<::com::sun::corba::se::spi::ior::TaggedProfile(::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::com::sun::corba::se::spi::ior::ObjectId)>("create"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jint()>("getId"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPAddress()>("getPrimaryAddress"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::TaggedProfileTemplate)>("isEquivalent"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::com::sun::corba::se::spi::ior::ObjectId, ::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("writeContents"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::TaggedProfile, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return call<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPAddress, typename... Args>
	auto getPrimaryAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimaryAddress")] != -1);
		return call<R>("getPrimaryAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEquivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEquivalent")] != -1);
		return call<R>("isEquivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeContents")] != -1);
		return call<R>("writeContents", std::forward<Args>(args)...);
	}

};

#endif
