#ifndef com_sun_corba_se_impl_ior_iiop_IIOPProfileImpl_HPP
#define com_sun_corba_se_impl_ior_iiop_IIOPProfileImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::iiop::IIOPProfileImpl : public jObject<::com::sun::corba::se::impl::ior::iiop::IIOPProfileImpl, ::com::sun::corba::se::spi::ior::IdentifiableBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior_iiop / "IIOPProfileImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::com::sun::corba::se::spi::ior::ObjectId, ::com::sun::corba::se::spi::ior::iiop::IIOPProfileTemplate)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::org::omg::IOP::TaggedProfile)>(), //
		jConstructor<::jvoid(::org::omg::CORBA_2_3::portable::InputStream)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getCodebase"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::org::omg::IOP::TaggedProfile()>("getIOPProfile"), //
		jMethod<::jint()>("getId"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getORBVersion"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectId()>("getObjectId"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKey()>("getObjectKey"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKeyTemplate()>("getObjectKeyTemplate"), //
		jMethod<::java::lang::Object()>("getServant"), //
		jMethod<::com::sun::corba::se::spi::ior::TaggedProfileTemplate()>("getTaggedProfileTemplate"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::TaggedProfile)>("isEquivalent"), //
		jMethod<::jboolean()>("isLocal"), //
		jMethod<::jvoid()>("makeImmutable"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("writeContents"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCodebase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodebase")] != -1);
		return call<R>("getCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedProfile, typename... Args>
	auto getIOPProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOPProfile")] != -1);
		return call<R>("getIOPProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	auto getORBVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBVersion")] != -1);
		return call<R>("getORBVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectId, typename... Args>
	auto getObjectId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectId")] != -1);
		return call<R>("getObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKey, typename... Args>
	auto getObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKey")] != -1);
		return call<R>("getObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKeyTemplate, typename... Args>
	auto getObjectKeyTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKeyTemplate")] != -1);
		return call<R>("getObjectKeyTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServant")] != -1);
		return call<R>("getServant", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::TaggedProfileTemplate, typename... Args>
	auto getTaggedProfileTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTaggedProfileTemplate")] != -1);
		return call<R>("getTaggedProfileTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEquivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEquivalent")] != -1);
		return call<R>("isEquivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocal")] != -1);
		return call<R>("isLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeImmutable")] != -1);
		return call<R>("makeImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeContents")] != -1);
		return call<R>("writeContents", std::forward<Args>(args)...);
	}

};

#endif
