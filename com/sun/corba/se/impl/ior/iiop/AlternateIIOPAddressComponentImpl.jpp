#ifndef com_sun_corba_se_impl_ior_iiop_AlternateIIOPAddressComponentImpl_HPP
#define com_sun_corba_se_impl_ior_iiop_AlternateIIOPAddressComponentImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::iiop::AlternateIIOPAddressComponentImpl : public jObject<::com::sun::corba::se::impl::ior::iiop::AlternateIIOPAddressComponentImpl, ::com::sun::corba::se::spi::ior::TaggedComponentBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior_iiop / "AlternateIIOPAddressComponentImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::ior::iiop::IIOPAddress)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPAddress()>("getAddress"), //
		jMethod<::jint()>("getId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("writeContents"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPAddress, typename... Args>
	auto getAddress(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddress")] != -1);
		return call<R>("getAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeContents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeContents")] != -1);
		return call<R>("writeContents", std::forward<Args>(args)...);
	}

};

#endif
