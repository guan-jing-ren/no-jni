#ifndef com_sun_corba_se_impl_ior_FreezableList_HPP
#define com_sun_corba_se_impl_ior_FreezableList_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::FreezableList : public jObject<::com::sun::corba::se::impl::ior::FreezableList, ::java::util::AbstractList> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "FreezableList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::List)>(), //
		jConstructor<::jvoid(::java::util::List, ::jboolean)>(), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("add"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isImmutable"), //
		jMethod<::jvoid()>("makeElementsImmutable"), //
		jMethod<::jvoid()>("makeImmutable"), //
		jMethod<::java::lang::Object(::jint)>("remove"), //
		jMethod<::java::lang::Object(::jint, ::java::lang::Object)>("set"), //
		jMethod<::jint()>("size"), //
		jMethod<::java::util::List(::jint, ::jint)>("subList"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isImmutable")] != -1);
		return call<R>("isImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeElementsImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeElementsImmutable")] != -1);
		return call<R>("makeElementsImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeImmutable")] != -1);
		return call<R>("makeImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto set(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set")] != -1);
		return call<R>("set", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto subList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subList")] != -1);
		return call<R>("subList", std::forward<Args>(args)...);
	}

};

#endif
