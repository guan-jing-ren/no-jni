#ifndef com_sun_corba_se_impl_ior_IdentifiableFactoryFinderBase_HPP
#define com_sun_corba_se_impl_ior_IdentifiableFactoryFinderBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::IdentifiableFactoryFinderBase : public jObject<::com::sun::corba::se::impl::ior::IdentifiableFactoryFinderBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "IdentifiableFactoryFinderBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::ior::Identifiable(::jint, ::org::omg::CORBA_2_3::portable::InputStream)>("create"), //
		jMethod<::com::sun::corba::se::spi::ior::Identifiable(::jint, ::org::omg::CORBA_2_3::portable::InputStream)>("handleMissingFactory"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IdentifiableFactory)>("registerFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::Identifiable, typename... Args>
	auto create(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return call<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::Identifiable, typename... Args>
	auto handleMissingFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleMissingFactory")] != -1);
		return call<R>("handleMissingFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerFactory")] != -1);
		return call<R>("registerFactory", std::forward<Args>(args)...);
	}

};

#endif
