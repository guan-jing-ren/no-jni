#ifndef com_sun_corba_se_impl_ior_ObjectKeyTemplateBase_HPP
#define com_sun_corba_se_impl_ior_ObjectKeyTemplateBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::ObjectKeyTemplateBase : public jObject<::com::sun::corba::se::impl::ior::ObjectKeyTemplateBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "ObjectKeyTemplateBase";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::ior::ObjectAdapterId>("JIDL_OAID"), //
		jField<::java::lang::String>("JIDL_ORB_ID"), //
	};

	template<typename F = ::com::sun::corba::se::spi::ior::ObjectAdapterId>
	static auto JIDL_OAID() {
		static_assert(field_signatures[jField<F>("JIDL_OAID")] != -1);
		return sat<F>("JIDL_OAID");
	}

	template<typename F = ::java::lang::String>
	static auto JIDL_ORB_ID() {
		static_assert(field_signatures[jField<F>("JIDL_ORB_ID")] != -1);
		return sat<F>("JIDL_ORB_ID");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jint, ::jint, ::jint, ::java::lang::String, ::com::sun::corba::se::spi::ior::ObjectAdapterId)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte *()>("getAdapterId"), //
		jMethod<::java::lang::String()>("getORBId"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getORBVersion"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectAdapterId()>("getObjectAdapterId"), //
		jMethod<::jint()>("getServerId"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::ObjectId)>("getServerRequestDispatcher"), //
		jMethod<::jint()>("getSubcontractId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::ORBVersion)>("setORBVersion"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectId, ::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterId")] != -1);
		return call<R>("getAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getORBId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBId")] != -1);
		return call<R>("getORBId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	auto getORBVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBVersion")] != -1);
		return call<R>("getORBVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectAdapterId, typename... Args>
	auto getObjectAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterId")] != -1);
		return call<R>("getObjectAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerId")] != -1);
		return call<R>("getServerId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher, typename... Args>
	auto getServerRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerRequestDispatcher")] != -1);
		return call<R>("getServerRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSubcontractId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSubcontractId")] != -1);
		return call<R>("getSubcontractId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setORBVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setORBVersion")] != -1);
		return call<R>("setORBVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
