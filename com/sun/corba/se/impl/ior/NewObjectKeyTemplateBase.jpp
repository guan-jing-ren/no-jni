#ifndef com_sun_corba_se_impl_ior_NewObjectKeyTemplateBase_HPP
#define com_sun_corba_se_impl_ior_NewObjectKeyTemplateBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::NewObjectKeyTemplateBase : public jObject<::com::sun::corba::se::impl::ior::NewObjectKeyTemplateBase, ::com::sun::corba::se::impl::ior::ObjectKeyTemplateBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "NewObjectKeyTemplateBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jint, ::jint, ::jint, ::java::lang::String, ::com::sun::corba::se::spi::ior::ObjectAdapterId)>(), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectId, ::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
