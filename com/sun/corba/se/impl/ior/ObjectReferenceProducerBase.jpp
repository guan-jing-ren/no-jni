#ifndef com_sun_corba_se_impl_ior_ObjectReferenceProducerBase_HPP
#define com_sun_corba_se_impl_ior_ObjectReferenceProducerBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::ObjectReferenceProducerBase : public jObject<::com::sun::corba::se::impl::ior::ObjectReferenceProducerBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "ObjectReferenceProducerBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::com::sun::corba::se::spi::ior::IORFactory()>("getIORFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList()>("getIORTemplateList"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String, ::jbyte *)>("make_object"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::IORFactory, typename... Args>
	auto getIORFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORFactory")] != -1);
		return call<R>("getIORFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplateList, typename... Args>
	auto getIORTemplateList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORTemplateList")] != -1);
		return call<R>("getIORTemplateList", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto make_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("make_object")] != -1);
		return call<R>("make_object", std::forward<Args>(args)...);
	}

};

#endif
