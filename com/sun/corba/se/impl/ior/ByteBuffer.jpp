#ifndef com_sun_corba_se_impl_ior_ByteBuffer_HPP
#define com_sun_corba_se_impl_ior_ByteBuffer_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::ByteBuffer : public jObject<::com::sun::corba::se::impl::ior::ByteBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "ByteBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jint)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::jvoid(::jbyte)>("append"), //
		jMethod<::jvoid(::jint)>("append"), //
		jMethod<::jvoid(::java::lang::String)>("append"), //
		jMethod<::jint()>("capacity"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::jint()>("size"), //
		jMethod<::jbyte *()>("toArray"), //
		jMethod<::jvoid()>("trimToSize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto append(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("append")] != -1);
		return call<R>("append", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto capacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("capacity")] != -1);
		return call<R>("capacity", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trimToSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trimToSize")] != -1);
		return call<R>("trimToSize", std::forward<Args>(args)...);
	}

};

#endif
