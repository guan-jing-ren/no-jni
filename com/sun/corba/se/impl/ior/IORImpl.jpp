#ifndef com_sun_corba_se_impl_ior_IORImpl_HPP
#define com_sun_corba_se_impl_ior_IORImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::ior::IORImpl : public jObject<::com::sun::corba::se::impl::ior::IORImpl, ::com::sun::corba::se::spi::ior::IdentifiableContainerBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_ior / "IORImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String, ::com::sun::corba::se::spi::ior::IORTemplate, ::com::sun::corba::se::spi::ior::ObjectId)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String, ::com::sun::corba::se::spi::ior::IORTemplateList, ::com::sun::corba::se::spi::ior::ObjectId)>(), //
		jConstructor<::jvoid(::org::omg::CORBA_2_3::portable::InputStream)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::org::omg::IOP::IOR()>("getIOPIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList()>("getIORTemplates"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getORB"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfile()>("getProfile"), //
		jMethod<::java::lang::String()>("getTypeId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::IOR)>("isEquivalent"), //
		jMethod<::jboolean()>("isNil"), //
		jMethod<::jvoid()>("makeImmutable"), //
		jMethod<::java::lang::String()>("stringify"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::IOR, typename... Args>
	auto getIOPIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOPIOR")] != -1);
		return call<R>("getIOPIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplateList, typename... Args>
	auto getIORTemplates(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORTemplates")] != -1);
		return call<R>("getIORTemplates", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPProfile, typename... Args>
	auto getProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProfile")] != -1);
		return call<R>("getProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTypeId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeId")] != -1);
		return call<R>("getTypeId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEquivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEquivalent")] != -1);
		return call<R>("isEquivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNil(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNil")] != -1);
		return call<R>("isNil", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto makeImmutable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeImmutable")] != -1);
		return call<R>("makeImmutable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto stringify(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringify")] != -1);
		return call<R>("stringify", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
