#ifndef com_sun_corba_se_impl_transport_SocketOrChannelContactInfoImpl_HPP
#define com_sun_corba_se_impl_transport_SocketOrChannelContactInfoImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::SocketOrChannelContactInfoImpl : public jObject<::com::sun::corba::se::impl::transport::SocketOrChannelContactInfoImpl, ::com::sun::corba::se::impl::transport::CorbaContactInfoBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "SocketOrChannelContactInfoImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfoList, ::com::sun::corba::se::spi::ior::IOR, ::jshort, ::java::lang::String, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfoList, ::java::lang::String, ::java::lang::String, ::jint)>(), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("createConnection"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getConnectionCacheType"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getMonitoringName"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isConnectionBased"), //
		jMethod<::jboolean()>("shouldCacheConnection"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto createConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createConnection")] != -1);
		return call<R>("createConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionCacheType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCacheType")] != -1);
		return call<R>("getConnectionCacheType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMonitoringName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringName")] != -1);
		return call<R>("getMonitoringName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnectionBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnectionBased")] != -1);
		return call<R>("isConnectionBased", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldCacheConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldCacheConnection")] != -1);
		return call<R>("shouldCacheConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
