#ifndef com_sun_corba_se_impl_transport_ListenerThreadImpl_HPP
#define com_sun_corba_se_impl_transport_ListenerThreadImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::ListenerThreadImpl : public jObject<::com::sun::corba::se::impl::transport::ListenerThreadImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "ListenerThreadImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::pept::transport::Acceptor, ::com::sun::corba::se::pept::transport::Selector)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("doWork"), //
		jMethod<::com::sun::corba::se::pept::transport::Acceptor()>("getAcceptor"), //
		jMethod<::jlong()>("getEnqueueTime"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid(::jlong)>("setEnqueueTime"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doWork")] != -1);
		return call<R>("doWork", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Acceptor, typename... Args>
	auto getAcceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptor")] != -1);
		return call<R>("getAcceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnqueueTime")] != -1);
		return call<R>("getEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnqueueTime")] != -1);
		return call<R>("setEnqueueTime", std::forward<Args>(args)...);
	}

};

#endif
