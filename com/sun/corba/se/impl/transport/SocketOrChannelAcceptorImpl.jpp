#ifndef com_sun_corba_se_impl_transport_SocketOrChannelAcceptorImpl_HPP
#define com_sun_corba_se_impl_transport_SocketOrChannelAcceptorImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::SocketOrChannelAcceptorImpl : public jObject<::com::sun::corba::se::impl::transport::SocketOrChannelAcceptorImpl, ::com::sun::corba::se::impl::transport::EventHandlerBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "SocketOrChannelAcceptorImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jint)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jint, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jvoid()>("accept"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IORTemplate, ::com::sun::corba::se::impl::oa::poa::Policies, ::java::lang::String)>("addToIORTemplate"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::protocol::MessageMediator)>("createInputObject"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection)>("createMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::protocol::MessageMediator)>("createOutputObject"), //
		jMethod<::jvoid()>("doWork"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection, ::com::sun::corba::se::pept::protocol::MessageMediator)>("finishCreatingMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::transport::Acceptor()>("getAcceptor"), //
		jMethod<::java::nio::channels::SelectableChannel()>("getChannel"), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("getConnection"), //
		jMethod<::com::sun::corba::se::pept::transport::InboundConnectionCache()>("getConnectionCache"), //
		jMethod<::java::lang::String()>("getConnectionCacheType"), //
		jMethod<::jlong()>("getEnqueueTime"), //
		jMethod<::com::sun::corba::se::pept::transport::EventHandler()>("getEventHandler"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getHostName"), //
		jMethod<::jint()>("getInterestOps"), //
		jMethod<::jint()>("getLocatorPort"), //
		jMethod<::java::lang::String()>("getMonitoringName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getObjectAdapterId"), //
		jMethod<::java::lang::String()>("getObjectAdapterManagerId"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::net::ServerSocket()>("getServerSocket"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jboolean()>("initialize"), //
		jMethod<::jboolean()>("initialized"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::InboundConnectionCache)>("setConnectionCache"), //
		jMethod<::jvoid(::jlong)>("setEnqueueTime"), //
		jMethod<::jvoid(::jint)>("setLocatorPort"), //
		jMethod<::jboolean()>("shouldRegisterAcceptEvent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addToIORTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToIORTemplate")] != -1);
		return call<R>("addToIORTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto createInputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputObject")] != -1);
		return call<R>("createInputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto createMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMessageMediator")] != -1);
		return call<R>("createMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto createOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutputObject")] != -1);
		return call<R>("createOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doWork")] != -1);
		return call<R>("doWork", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto finishCreatingMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishCreatingMessageMediator")] != -1);
		return call<R>("finishCreatingMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Acceptor, typename... Args>
	auto getAcceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptor")] != -1);
		return call<R>("getAcceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SelectableChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::InboundConnectionCache, typename... Args>
	auto getConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCache")] != -1);
		return call<R>("getConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionCacheType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCacheType")] != -1);
		return call<R>("getConnectionCacheType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnqueueTime")] != -1);
		return call<R>("getEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::EventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHostName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostName")] != -1);
		return call<R>("getHostName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInterestOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterestOps")] != -1);
		return call<R>("getInterestOps", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocatorPort")] != -1);
		return call<R>("getLocatorPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMonitoringName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringName")] != -1);
		return call<R>("getMonitoringName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObjectAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterId")] != -1);
		return call<R>("getObjectAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObjectAdapterManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterManagerId")] != -1);
		return call<R>("getObjectAdapterManagerId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::ServerSocket, typename... Args>
	auto getServerSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerSocket")] != -1);
		return call<R>("getServerSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto initialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialized")] != -1);
		return call<R>("initialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectionCache")] != -1);
		return call<R>("setConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnqueueTime")] != -1);
		return call<R>("setEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocatorPort")] != -1);
		return call<R>("setLocatorPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldRegisterAcceptEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldRegisterAcceptEvent")] != -1);
		return call<R>("shouldRegisterAcceptEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
