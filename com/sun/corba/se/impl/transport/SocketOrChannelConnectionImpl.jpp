#ifndef com_sun_corba_se_impl_transport_SocketOrChannelConnectionImpl_HPP
#define com_sun_corba_se_impl_transport_SocketOrChannelConnectionImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl : public jObject<::com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl, ::com::sun::corba::se::impl::transport::EventHandlerBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "SocketOrChannelConnectionImpl";

	constexpr static Enume field_signatures{
		jField<::jboolean>("dprintWriteLocks"), //
	};

	template<typename F = ::jboolean>
	static auto dprintWriteLocks() {
		static_assert(field_signatures[jField<F>("dprintWriteLocks")] != -1);
		return sat<F>("dprintWriteLocks");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::pept::transport::Acceptor, ::java::net::Socket)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::pept::transport::Acceptor, ::java::net::Socket, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfo, ::java::lang::String, ::java::lang::String, ::jint)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfo, ::jboolean, ::jboolean, ::java::lang::String, ::java::lang::String, ::jint)>(), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator()>("clientReply_1_1_Get"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("clientReply_1_1_Put"), //
		jMethod<::jvoid()>("clientReply_1_1_Remove"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::jint)>("clientRequestMapGet"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("closeConnectionResources"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::com::sun::corba::se::pept::protocol::MessageMediator)>("createOutputObject"), //
		jMethod<::jvoid()>("doWork"), //
		jMethod<::jvoid(::java::lang::String)>("dprint"), //
		jMethod<::com::sun::corba::se::pept::transport::Acceptor()>("getAcceptor"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getBroker"), //
		jMethod<::java::nio::channels::SelectableChannel()>("getChannel"), //
		jMethod<::com::sun::org::omg::SendingContext::CodeBase()>("getCodeBase"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getCodeBaseIOR"), //
		jMethod<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext()>("getCodeSetContext"), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("getConnection"), //
		jMethod<::com::sun::corba::se::pept::transport::ConnectionCache()>("getConnectionCache"), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfo()>("getContactInfo"), //
		jMethod<::jlong()>("getEnqueueTime"), //
		jMethod<::com::sun::corba::se::pept::transport::EventHandler()>("getEventHandler"), //
		jMethod<::jint()>("getInterestOps"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getNextRequestId"), //
		jMethod<::com::sun::corba::se::pept::transport::ResponseWaitingRoom()>("getResponseWaitingRoom"), //
		jMethod<::java::net::Socket()>("getSocket"), //
		jMethod<::java::nio::channels::SocketChannel()>("getSocketChannel"), //
		jMethod<::jlong()>("getTimeStamp"), //
		jMethod<::jvoid()>("handleEvent"), //
		jMethod<::jboolean()>("isBusy"), //
		jMethod<::jboolean()>("isPostInitialContexts"), //
		jMethod<::jboolean()>("isServer"), //
		jMethod<::jvoid(::org::omg::CORBA::SystemException, ::jboolean, ::jboolean)>("purgeCalls"), //
		jMethod<::jboolean()>("read"), //
		jMethod<::java::nio::ByteBuffer(::jint, ::jint, ::jint, ::jlong)>("read"), //
		jMethod<::java::nio::ByteBuffer(::java::nio::ByteBuffer, ::jint, ::jint, ::jlong)>("read"), //
		jMethod<::jvoid(::java::io::InputStream, ::jbyte *, ::jint, ::jint, ::jlong)>("readFully"), //
		jMethod<::jvoid(::java::nio::ByteBuffer, ::jint, ::jlong)>("readFully"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("registerWaiter"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jint)>("sendCancelRequest"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::jint)>("sendCancelRequestWithLock"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("sendCloseConnection"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("sendMessageError"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::encoding::OutputObject)>("sendWithoutLock"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::jint)>("serverRequestMapGet"), //
		jMethod<::jvoid(::jint, ::com::sun::corba::se::spi::protocol::CorbaMessageMediator)>("serverRequestMapPut"), //
		jMethod<::jvoid(::jint)>("serverRequestMapRemove"), //
		jMethod<::jvoid()>("serverRequestProcessingBegins"), //
		jMethod<::jvoid()>("serverRequestProcessingEnds"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator()>("serverRequest_1_1_Get"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("serverRequest_1_1_Put"), //
		jMethod<::jvoid()>("serverRequest_1_1_Remove"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("setCodeBaseIOR"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext)>("setCodeSetContext"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::ConnectionCache)>("setConnectionCache"), //
		jMethod<::jvoid(::jlong)>("setEnqueueTime"), //
		jMethod<::jvoid()>("setPostInitialContexts"), //
		jMethod<::jvoid(::java::lang::String)>("setState"), //
		jMethod<::jvoid(::jlong)>("setTimeStamp"), //
		jMethod<::jvoid(::jboolean)>("setUseSelectThreadToWait"), //
		jMethod<::jboolean()>("shouldReadGiopHeaderOnly"), //
		jMethod<::jboolean()>("shouldRegisterReadEvent"), //
		jMethod<::jboolean()>("shouldRegisterServerReadEvent"), //
		jMethod<::jboolean()>("shouldUseDirectByteBuffers"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::MessageMediator)>("unregisterWaiter"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::com::sun::corba::se::pept::protocol::MessageMediator)>("waitForResponse"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("write"), //
		jMethod<::jvoid()>("writeLock"), //
		jMethod<::jvoid()>("writeUnlock"), //
	};

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto clientReply_1_1_Get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientReply_1_1_Get")] != -1);
		return call<R>("clientReply_1_1_Get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clientReply_1_1_Put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientReply_1_1_Put")] != -1);
		return call<R>("clientReply_1_1_Put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clientReply_1_1_Remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientReply_1_1_Remove")] != -1);
		return call<R>("clientReply_1_1_Remove", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto clientRequestMapGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clientRequestMapGet")] != -1);
		return call<R>("clientRequestMapGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeConnectionResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeConnectionResources")] != -1);
		return call<R>("closeConnectionResources", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto createOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutputObject")] != -1);
		return call<R>("createOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto doWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doWork")] != -1);
		return call<R>("doWork", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dprint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dprint")] != -1);
		return call<R>("dprint", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Acceptor, typename... Args>
	auto getAcceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptor")] != -1);
		return call<R>("getAcceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getBroker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroker")] != -1);
		return call<R>("getBroker", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SelectableChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::SendingContext::CodeBase, typename... Args>
	auto getCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBase")] != -1);
		return call<R>("getCodeBase", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getCodeBaseIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseIOR")] != -1);
		return call<R>("getCodeBaseIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo$CodeSetContext, typename... Args>
	auto getCodeSetContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSetContext")] != -1);
		return call<R>("getCodeSetContext", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto getConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnection")] != -1);
		return call<R>("getConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ConnectionCache, typename... Args>
	auto getConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCache")] != -1);
		return call<R>("getConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfo, typename... Args>
	auto getContactInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfo")] != -1);
		return call<R>("getContactInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnqueueTime")] != -1);
		return call<R>("getEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::EventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInterestOps(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterestOps")] != -1);
		return call<R>("getInterestOps", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextRequestId")] != -1);
		return call<R>("getNextRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ResponseWaitingRoom, typename... Args>
	auto getResponseWaitingRoom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResponseWaitingRoom")] != -1);
		return call<R>("getResponseWaitingRoom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::Socket, typename... Args>
	auto getSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSocket")] != -1);
		return call<R>("getSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::channels::SocketChannel, typename... Args>
	auto getSocketChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSocketChannel")] != -1);
		return call<R>("getSocketChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTimeStamp")] != -1);
		return call<R>("getTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isBusy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBusy")] != -1);
		return call<R>("isBusy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPostInitialContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPostInitialContexts")] != -1);
		return call<R>("isPostInitialContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isServer")] != -1);
		return call<R>("isServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto purgeCalls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("purgeCalls")] != -1);
		return call<R>("purgeCalls", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerWaiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerWaiter")] != -1);
		return call<R>("registerWaiter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendCancelRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendCancelRequest")] != -1);
		return call<R>("sendCancelRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendCancelRequestWithLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendCancelRequestWithLock")] != -1);
		return call<R>("sendCancelRequestWithLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendCloseConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendCloseConnection")] != -1);
		return call<R>("sendCloseConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendMessageError(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendMessageError")] != -1);
		return call<R>("sendMessageError", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendWithoutLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendWithoutLock")] != -1);
		return call<R>("sendWithoutLock", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto serverRequestMapGet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequestMapGet")] != -1);
		return call<R>("serverRequestMapGet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequestMapPut(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequestMapPut")] != -1);
		return call<R>("serverRequestMapPut", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequestMapRemove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequestMapRemove")] != -1);
		return call<R>("serverRequestMapRemove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequestProcessingBegins(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequestProcessingBegins")] != -1);
		return call<R>("serverRequestProcessingBegins", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequestProcessingEnds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequestProcessingEnds")] != -1);
		return call<R>("serverRequestProcessingEnds", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto serverRequest_1_1_Get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequest_1_1_Get")] != -1);
		return call<R>("serverRequest_1_1_Get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequest_1_1_Put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequest_1_1_Put")] != -1);
		return call<R>("serverRequest_1_1_Put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto serverRequest_1_1_Remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("serverRequest_1_1_Remove")] != -1);
		return call<R>("serverRequest_1_1_Remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCodeBaseIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCodeBaseIOR")] != -1);
		return call<R>("setCodeBaseIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCodeSetContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCodeSetContext")] != -1);
		return call<R>("setCodeSetContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectionCache")] != -1);
		return call<R>("setConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnqueueTime")] != -1);
		return call<R>("setEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPostInitialContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPostInitialContexts")] != -1);
		return call<R>("setPostInitialContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setState")] != -1);
		return call<R>("setState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTimeStamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTimeStamp")] != -1);
		return call<R>("setTimeStamp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseSelectThreadToWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseSelectThreadToWait")] != -1);
		return call<R>("setUseSelectThreadToWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldReadGiopHeaderOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldReadGiopHeaderOnly")] != -1);
		return call<R>("shouldReadGiopHeaderOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldRegisterReadEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldRegisterReadEvent")] != -1);
		return call<R>("shouldRegisterReadEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldRegisterServerReadEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldRegisterServerReadEvent")] != -1);
		return call<R>("shouldRegisterServerReadEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUseDirectByteBuffers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUseDirectByteBuffers")] != -1);
		return call<R>("shouldUseDirectByteBuffers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterWaiter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterWaiter")] != -1);
		return call<R>("unregisterWaiter", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto waitForResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("waitForResponse")] != -1);
		return call<R>("waitForResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeLock")] != -1);
		return call<R>("writeLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUnlock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUnlock")] != -1);
		return call<R>("writeUnlock", std::forward<Args>(args)...);
	}

};

#endif
