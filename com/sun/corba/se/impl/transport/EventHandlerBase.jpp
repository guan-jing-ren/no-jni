#ifndef com_sun_corba_se_impl_transport_EventHandlerBase_HPP
#define com_sun_corba_se_impl_transport_EventHandlerBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::EventHandlerBase : public jObject<::com::sun::corba::se::impl::transport::EventHandlerBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "EventHandlerBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::nio::channels::SelectionKey()>("getSelectionKey"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::Work()>("getWork"), //
		jMethod<::jvoid()>("handleEvent"), //
		jMethod<::jvoid(::java::nio::channels::SelectionKey)>("setSelectionKey"), //
		jMethod<::jvoid(::jboolean)>("setUseSelectThreadToWait"), //
		jMethod<::jvoid(::jboolean)>("setUseWorkerThreadForEvent"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::threadpool::Work)>("setWork"), //
		jMethod<::jboolean()>("shouldUseSelectThreadToWait"), //
		jMethod<::jboolean()>("shouldUseWorkerThreadForEvent"), //
	};

	template<typename R = ::java::nio::channels::SelectionKey, typename... Args>
	auto getSelectionKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSelectionKey")] != -1);
		return call<R>("getSelectionKey", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::Work, typename... Args>
	auto getWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWork")] != -1);
		return call<R>("getWork", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleEvent")] != -1);
		return call<R>("handleEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSelectionKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSelectionKey")] != -1);
		return call<R>("setSelectionKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseSelectThreadToWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseSelectThreadToWait")] != -1);
		return call<R>("setUseSelectThreadToWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseWorkerThreadForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseWorkerThreadForEvent")] != -1);
		return call<R>("setUseWorkerThreadForEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWork")] != -1);
		return call<R>("setWork", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUseSelectThreadToWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUseSelectThreadToWait")] != -1);
		return call<R>("shouldUseSelectThreadToWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUseWorkerThreadForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUseWorkerThreadForEvent")] != -1);
		return call<R>("shouldUseWorkerThreadForEvent", std::forward<Args>(args)...);
	}

};

#endif
