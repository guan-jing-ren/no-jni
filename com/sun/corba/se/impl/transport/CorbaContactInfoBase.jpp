#ifndef com_sun_corba_se_impl_transport_CorbaContactInfoBase_HPP
#define com_sun_corba_se_impl_transport_CorbaContactInfoBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::CorbaContactInfoBase : public jObject<::com::sun::corba::se::impl::transport::CorbaContactInfoBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "CorbaContactInfoBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::protocol::MessageMediator)>("createInputObject"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection)>("createMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::ContactInfo, ::com::sun::corba::se::pept::transport::Connection, ::java::lang::String, ::jboolean)>("createMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::com::sun::corba::se::pept::protocol::MessageMediator)>("createOutputObject"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection, ::com::sun::corba::se::pept::protocol::MessageMediator)>("finishCreatingMessageMediator"), //
		jMethod<::jshort()>("getAddressingDisposition"), //
		jMethod<::com::sun::corba::se::pept::broker::Broker()>("getBroker"), //
		jMethod<::com::sun::corba::se::pept::protocol::ClientRequestDispatcher()>("getClientRequestDispatcher"), //
		jMethod<::com::sun::corba::se::pept::transport::OutboundConnectionCache()>("getConnectionCache"), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfoList()>("getContactInfoList"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfile()>("getEffectiveProfile"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getEffectiveTargetIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getTargetIOR"), //
		jMethod<::jvoid(::jshort)>("setAddressingDisposition"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::OutboundConnectionCache)>("setConnectionCache"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto createInputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputObject")] != -1);
		return call<R>("createInputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto createMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMessageMediator")] != -1);
		return call<R>("createMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto createOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutputObject")] != -1);
		return call<R>("createOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto finishCreatingMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishCreatingMessageMediator")] != -1);
		return call<R>("finishCreatingMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getAddressingDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddressingDisposition")] != -1);
		return call<R>("getAddressingDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::broker::Broker, typename... Args>
	auto getBroker(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBroker")] != -1);
		return call<R>("getBroker", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, typename... Args>
	auto getClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientRequestDispatcher")] != -1);
		return call<R>("getClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::OutboundConnectionCache, typename... Args>
	auto getConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCache")] != -1);
		return call<R>("getConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfoList, typename... Args>
	auto getContactInfoList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfoList")] != -1);
		return call<R>("getContactInfoList", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPProfile, typename... Args>
	auto getEffectiveProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectiveProfile")] != -1);
		return call<R>("getEffectiveProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getEffectiveTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectiveTargetIOR")] != -1);
		return call<R>("getEffectiveTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetIOR")] != -1);
		return call<R>("getTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAddressingDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAddressingDisposition")] != -1);
		return call<R>("setAddressingDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectionCache")] != -1);
		return call<R>("setConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
