#ifndef com_sun_corba_se_impl_transport_SharedCDRContactInfoImpl_HPP
#define com_sun_corba_se_impl_transport_SharedCDRContactInfoImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::SharedCDRContactInfoImpl : public jObject<::com::sun::corba::se::impl::transport::SharedCDRContactInfoImpl, ::com::sun::corba::se::impl::transport::CorbaContactInfoBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "SharedCDRContactInfoImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfoList, ::com::sun::corba::se::spi::ior::IOR, ::jshort)>(), //
		jMethod<::com::sun::corba::se::pept::transport::Connection()>("createConnection"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::ContactInfo, ::com::sun::corba::se::pept::transport::Connection, ::java::lang::String, ::jboolean)>("createMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::com::sun::corba::se::pept::protocol::MessageMediator)>("createOutputObject"), //
		jMethod<::com::sun::corba::se::pept::protocol::ClientRequestDispatcher()>("getClientRequestDispatcher"), //
		jMethod<::java::lang::String()>("getConnectionCacheType"), //
		jMethod<::java::lang::String()>("getMonitoringName"), //
		jMethod<::jboolean()>("isConnectionBased"), //
		jMethod<::jboolean()>("shouldCacheConnection"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::corba::se::pept::transport::Connection, typename... Args>
	auto createConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createConnection")] != -1);
		return call<R>("createConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto createMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMessageMediator")] != -1);
		return call<R>("createMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto createOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutputObject")] != -1);
		return call<R>("createOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, typename... Args>
	auto getClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientRequestDispatcher")] != -1);
		return call<R>("getClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionCacheType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCacheType")] != -1);
		return call<R>("getConnectionCacheType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMonitoringName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringName")] != -1);
		return call<R>("getMonitoringName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isConnectionBased(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isConnectionBased")] != -1);
		return call<R>("isConnectionBased", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldCacheConnection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldCacheConnection")] != -1);
		return call<R>("shouldCacheConnection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
