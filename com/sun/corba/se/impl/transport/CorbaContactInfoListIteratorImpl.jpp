#ifndef com_sun_corba_se_impl_transport_CorbaContactInfoListIteratorImpl_HPP
#define com_sun_corba_se_impl_transport_CorbaContactInfoListIteratorImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::transport::CorbaContactInfoListIteratorImpl : public jObject<::com::sun::corba::se::impl::transport::CorbaContactInfoListIteratorImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_transport / "CorbaContactInfoListIteratorImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfoList, ::com::sun::corba::se::pept::transport::ContactInfo, ::java::util::List)>(), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfoList()>("getContactInfoList"), //
		jMethod<::java::lang::RuntimeException()>("getFailureException"), //
		jMethod<::jboolean()>("hasNext"), //
		jMethod<::java::lang::Object()>("next"), //
		jMethod<::jvoid()>("remove"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::transport::CorbaContactInfo, ::jshort)>("reportAddrDispositionRetry"), //
		jMethod<::jboolean(::com::sun::corba::se::pept::transport::ContactInfo, ::java::lang::RuntimeException)>("reportException"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::transport::CorbaContactInfo, ::com::sun::corba::se::spi::ior::IOR)>("reportRedirect"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::ContactInfo)>("reportSuccess"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("updateEffectiveTargetIOR"), //
	};

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfoList, typename... Args>
	auto getContactInfoList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContactInfoList")] != -1);
		return call<R>("getContactInfoList", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::RuntimeException, typename... Args>
	auto getFailureException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFailureException")] != -1);
		return call<R>("getFailureException", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reportAddrDispositionRetry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reportAddrDispositionRetry")] != -1);
		return call<R>("reportAddrDispositionRetry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto reportException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reportException")] != -1);
		return call<R>("reportException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reportRedirect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reportRedirect")] != -1);
		return call<R>("reportRedirect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reportSuccess(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reportSuccess")] != -1);
		return call<R>("reportSuccess", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateEffectiveTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateEffectiveTargetIOR")] != -1);
		return call<R>("updateEffectiveTargetIOR", std::forward<Args>(args)...);
	}

};

#endif
