#ifndef com_sun_corba_se_impl_util_JDKBridge_HPP
#define com_sun_corba_se_impl_util_JDKBridge_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::util::JDKBridge : public jObject<::com::sun::corba::se::impl::util::JDKBridge, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_util / "JDKBridge";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getLocalCodebase"), //
		jMethod<::java::lang::Class(::java::lang::String)>("loadClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::String)>("loadClass"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::String, ::java::lang::ClassLoader)>("loadClass"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::jvoid()>("setCodebaseProperties"), //
		jMethod<::jvoid(::java::lang::String)>("setLocalCodebase"), //
		jMethod<::jboolean()>("useCodebaseOnly"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto getLocalCodebase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalCodebase")] != -1);
		return scall<R>("getLocalCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto loadClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadClass")] != -1);
		return scall<R>("loadClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setCodebaseProperties(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCodebaseProperties")] != -1);
		return scall<R>("setCodebaseProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setLocalCodebase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocalCodebase")] != -1);
		return scall<R>("setLocalCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto useCodebaseOnly(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useCodebaseOnly")] != -1);
		return scall<R>("useCodebaseOnly", std::forward<Args>(args)...);
	}

};

#endif
