#ifndef com_sun_corba_se_impl_util_Utility_HPP
#define com_sun_corba_se_impl_util_Utility_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::util::Utility : public jObject<::com::sun::corba::se::impl::util::Utility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_util / "Utility";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DYNAMIC_STUB_SUFFIX"), //
		jField<::java::lang::String>("IDL_STUB_SUFFIX"), //
		jField<::java::lang::String>("RMI_STUB_SUFFIX"), //
		jField<::java::lang::String>("STUB_PREFIX"), //
		jField<::java::lang::String>("TIE_SUFIX"), //
	};

	template<typename F = ::java::lang::String>
	static auto DYNAMIC_STUB_SUFFIX() {
		static_assert(field_signatures[jField<F>("DYNAMIC_STUB_SUFFIX")] != -1);
		return sat<F>("DYNAMIC_STUB_SUFFIX");
	}

	template<typename F = ::java::lang::String>
	static auto IDL_STUB_SUFFIX() {
		static_assert(field_signatures[jField<F>("IDL_STUB_SUFFIX")] != -1);
		return sat<F>("IDL_STUB_SUFFIX");
	}

	template<typename F = ::java::lang::String>
	static auto RMI_STUB_SUFFIX() {
		static_assert(field_signatures[jField<F>("RMI_STUB_SUFFIX")] != -1);
		return sat<F>("RMI_STUB_SUFFIX");
	}

	template<typename F = ::java::lang::String>
	static auto STUB_PREFIX() {
		static_assert(field_signatures[jField<F>("STUB_PREFIX")] != -1);
		return sat<F>("STUB_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto TIE_SUFIX() {
		static_assert(field_signatures[jField<F>("TIE_SUFIX")] != -1);
		return sat<F>("TIE_SUFIX");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::Object(::java::lang::Object, ::org::omg::CORBA::ORB, ::jboolean)>("autoConnect"), //
		jMethod<::jvoid()>("clearCaches"), //
		jMethod<::java::lang::String(::java::lang::String)>("dynamicStubName"), //
		jMethod<::javax::rmi::CORBA::Tie(::org::omg::CORBA::Object)>("getAndForgetTie"), //
		jMethod<::org::omg::CORBA::portable::ValueFactory(::java::lang::Class, ::java::lang::String, ::org::omg::CORBA::ORB, ::java::lang::String)>("getFactory"), //
		jMethod<::org::omg::CORBA::portable::BoxedValueHelper(::java::lang::Class, ::java::lang::String, ::java::lang::String)>("getHelper"), //
		jMethod<::java::lang::String(::java::lang::String)>("idlStubName"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::String, ::java::lang::ClassLoader, ::java::lang::Class, ::java::lang::ClassLoader)>("loadClassForClass"), //
		jMethod<::java::rmi::Remote(::javax::rmi::CORBA::Tie, ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory, ::java::lang::String, ::jboolean)>("loadStub"), //
		jMethod<::java::rmi::Remote(::org::omg::CORBA::Object, ::java::lang::Class)>("loadStub"), //
		jMethod<::java::lang::Class(::java::lang::String, ::java::lang::String, ::java::lang::Class)>("loadStubClass"), //
		jMethod<::javax::rmi::CORBA::Tie(::java::rmi::Remote)>("loadTie"), //
		jMethod<::jvoid()>("printStackTrace"), //
		jMethod<::jvoid(::javax::rmi::CORBA::Tie)>("purgeStubForTie"), //
		jMethod<::jvoid(::javax::rmi::CORBA::Tie)>("purgeTieAndServant"), //
		jMethod<::java::lang::Object(::org::omg::CORBA_2_3::portable::InputStream, ::java::lang::Class)>("readAbstractAndNarrow"), //
		jMethod<::java::lang::Object(::org::omg::CORBA::portable::InputStream, ::java::lang::Class)>("readObjectAndNarrow"), //
		jMethod<::java::lang::String(::java::lang::String)>("stubName"), //
		jMethod<::java::lang::String(::java::lang::String)>("stubNameForCompiler"), //
		jMethod<::java::lang::String(::java::lang::String)>("stubNameFromRepID"), //
		jMethod<::jvoid(::java::lang::String)>("throwNotSerializableForCorba"), //
		jMethod<::java::lang::String(::java::lang::String)>("tieName"), //
		jMethod<::java::lang::String(::java::lang::String)>("tieNameForCompiler"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	static auto autoConnect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("autoConnect")] != -1);
		return scall<R>("autoConnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto clearCaches(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearCaches")] != -1);
		return scall<R>("clearCaches", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto dynamicStubName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dynamicStubName")] != -1);
		return scall<R>("dynamicStubName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::Tie, typename... Args>
	static auto getAndForgetTie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAndForgetTie")] != -1);
		return scall<R>("getAndForgetTie", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::ValueFactory, typename... Args>
	static auto getFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFactory")] != -1);
		return scall<R>("getFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::BoxedValueHelper, typename... Args>
	static auto getHelper(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHelper")] != -1);
		return scall<R>("getHelper", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto idlStubName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("idlStubName")] != -1);
		return scall<R>("idlStubName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto loadClassForClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadClassForClass")] != -1);
		return scall<R>("loadClassForClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	static auto loadStub(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadStub")] != -1);
		return scall<R>("loadStub", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto loadStubClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadStubClass")] != -1);
		return scall<R>("loadStubClass", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::Tie, typename... Args>
	static auto loadTie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadTie")] != -1);
		return scall<R>("loadTie", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto printStackTrace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printStackTrace")] != -1);
		return scall<R>("printStackTrace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto purgeStubForTie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("purgeStubForTie")] != -1);
		return scall<R>("purgeStubForTie", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto purgeTieAndServant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("purgeTieAndServant")] != -1);
		return scall<R>("purgeTieAndServant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto readAbstractAndNarrow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readAbstractAndNarrow")] != -1);
		return scall<R>("readAbstractAndNarrow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto readObjectAndNarrow(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObjectAndNarrow")] != -1);
		return scall<R>("readObjectAndNarrow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto stubName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stubName")] != -1);
		return scall<R>("stubName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto stubNameForCompiler(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stubNameForCompiler")] != -1);
		return scall<R>("stubNameForCompiler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto stubNameFromRepID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stubNameFromRepID")] != -1);
		return scall<R>("stubNameFromRepID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto throwNotSerializableForCorba(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("throwNotSerializableForCorba")] != -1);
		return scall<R>("throwNotSerializableForCorba", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto tieName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tieName")] != -1);
		return scall<R>("tieName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto tieNameForCompiler(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("tieNameForCompiler")] != -1);
		return scall<R>("tieNameForCompiler", std::forward<Args>(args)...);
	}

};

#endif
