#ifndef com_sun_corba_se_impl_util_Version_HPP
#define com_sun_corba_se_impl_util_Version_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::util::Version : public jObject<::com::sun::corba::se::impl::util::Version, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_util / "Version";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BUILD"), //
		jField<::java::lang::String>("BUILD_TIME"), //
		jField<::java::lang::String>("FULL"), //
		jField<::java::lang::String>("PROJECT_NAME"), //
		jField<::java::lang::String>("VERSION"), //
	};

	template<typename F = ::java::lang::String>
	static auto BUILD() {
		static_assert(field_signatures[jField<F>("BUILD")] != -1);
		return sat<F>("BUILD");
	}

	template<typename F = ::java::lang::String>
	static auto BUILD_TIME() {
		static_assert(field_signatures[jField<F>("BUILD_TIME")] != -1);
		return sat<F>("BUILD_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto FULL() {
		static_assert(field_signatures[jField<F>("FULL")] != -1);
		return sat<F>("FULL");
	}

	template<typename F = ::java::lang::String>
	static auto PROJECT_NAME() {
		static_assert(field_signatures[jField<F>("PROJECT_NAME")] != -1);
		return sat<F>("PROJECT_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION() {
		static_assert(field_signatures[jField<F>("VERSION")] != -1);
		return sat<F>("VERSION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("asString"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto asString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asString")] != -1);
		return scall<R>("asString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

};

#endif
