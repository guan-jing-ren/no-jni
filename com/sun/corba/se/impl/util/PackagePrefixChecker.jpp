#ifndef com_sun_corba_se_impl_util_PackagePrefixChecker_HPP
#define com_sun_corba_se_impl_util_PackagePrefixChecker_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::util::PackagePrefixChecker : public jObject<::com::sun::corba::se::impl::util::PackagePrefixChecker, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_util / "PackagePrefixChecker";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String(::java::lang::String)>("correctPackageName"), //
		jMethod<::jboolean(::java::lang::String)>("hasBeenPrefixed"), //
		jMethod<::jboolean(::java::lang::String)>("hasOffendingPrefix"), //
		jMethod<::jboolean(::java::lang::String)>("isOffendingPackage"), //
		jMethod<::java::lang::String()>("packagePrefix"), //
		jMethod<::java::lang::String(::java::lang::String)>("withoutPackagePrefix"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto correctPackageName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("correctPackageName")] != -1);
		return scall<R>("correctPackageName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto hasBeenPrefixed(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasBeenPrefixed")] != -1);
		return scall<R>("hasBeenPrefixed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto hasOffendingPrefix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasOffendingPrefix")] != -1);
		return scall<R>("hasOffendingPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isOffendingPackage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOffendingPackage")] != -1);
		return scall<R>("isOffendingPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto packagePrefix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("packagePrefix")] != -1);
		return scall<R>("packagePrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto withoutPackagePrefix(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("withoutPackagePrefix")] != -1);
		return scall<R>("withoutPackagePrefix", std::forward<Args>(args)...);
	}

};

#endif
