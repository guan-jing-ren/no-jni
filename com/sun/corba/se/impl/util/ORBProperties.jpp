#ifndef com_sun_corba_se_impl_util_ORBProperties_HPP
#define com_sun_corba_se_impl_util_ORBProperties_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::util::ORBProperties : public jObject<::com::sun::corba::se::impl::util::ORBProperties, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_util / "ORBProperties";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ORB_CLASS"), //
		jField<::java::lang::String>("ORB_SINGLETON_CLASS"), //
	};

	template<typename F = ::java::lang::String>
	static auto ORB_CLASS() {
		static_assert(field_signatures[jField<F>("ORB_CLASS")] != -1);
		return sat<F>("ORB_CLASS");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_SINGLETON_CLASS() {
		static_assert(field_signatures[jField<F>("ORB_SINGLETON_CLASS")] != -1);
		return sat<F>("ORB_SINGLETON_CLASS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

};

#endif
