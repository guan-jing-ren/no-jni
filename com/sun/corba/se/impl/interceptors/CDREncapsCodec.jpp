#ifndef com_sun_corba_se_impl_interceptors_CDREncapsCodec_HPP
#define com_sun_corba_se_impl_interceptors_CDREncapsCodec_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::interceptors::CDREncapsCodec : public jObject<::com::sun::corba::se::impl::interceptors::CDREncapsCodec, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_interceptors / "CDREncapsCodec";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::jint, ::jint)>(), //
		jMethod<::org::omg::CORBA::Any(::jbyte *)>("decode"), //
		jMethod<::org::omg::CORBA::Any(::jbyte *, ::org::omg::CORBA::TypeCode)>("decode_value"), //
		jMethod<::jbyte *(::org::omg::CORBA::Any)>("encode"), //
		jMethod<::jbyte *(::org::omg::CORBA::Any)>("encode_value"), //
	};

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto decode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decode")] != -1);
		return call<R>("decode", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto decode_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decode_value")] != -1);
		return call<R>("decode_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto encode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode")] != -1);
		return call<R>("encode", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto encode_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encode_value")] != -1);
		return call<R>("encode_value", std::forward<Args>(args)...);
	}

};

#endif
