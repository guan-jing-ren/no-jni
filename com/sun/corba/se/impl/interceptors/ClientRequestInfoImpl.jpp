#ifndef com_sun_corba_se_impl_interceptors_ClientRequestInfoImpl_HPP
#define com_sun_corba_se_impl_interceptors_ClientRequestInfoImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::interceptors::ClientRequestInfoImpl : public jObject<::com::sun::corba::se::impl::interceptors::ClientRequestInfoImpl, ::com::sun::corba::se::impl::interceptors::RequestInfoImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_interceptors / "ClientRequestInfoImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::omg::IOP::ServiceContext, ::jboolean)>("add_request_service_context"), //
		jMethod<::org::omg::Dynamic::Parameter *()>("arguments"), //
		jMethod<::com::sun::corba::se::spi::legacy::connection::Connection()>("connection"), //
		jMethod<::java::lang::String *()>("contexts"), //
		jMethod<::org::omg::IOP::TaggedProfile()>("effective_profile"), //
		jMethod<::org::omg::CORBA::Object()>("effective_target"), //
		jMethod<::org::omg::CORBA::TypeCode *()>("exceptions"), //
		jMethod<::org::omg::CORBA::Object()>("forward_reference"), //
		jMethod<::org::omg::IOP::TaggedComponent(::jint)>("get_effective_component"), //
		jMethod<::org::omg::IOP::TaggedComponent *(::jint)>("get_effective_components"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_reply_service_context"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("get_request_policy"), //
		jMethod<::org::omg::IOP::ServiceContext(::jint)>("get_request_service_context"), //
		jMethod<::java::lang::String()>("operation"), //
		jMethod<::java::lang::String *()>("operation_context"), //
		jMethod<::org::omg::CORBA::Any()>("received_exception"), //
		jMethod<::java::lang::String()>("received_exception_id"), //
		jMethod<::jint()>("request_id"), //
		jMethod<::jboolean()>("response_expected"), //
		jMethod<::org::omg::CORBA::Any()>("result"), //
		jMethod<::org::omg::CORBA::Object()>("target"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add_request_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_request_service_context")] != -1);
		return call<R>("add_request_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::Dynamic::Parameter *, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::legacy::connection::Connection, typename... Args>
	auto connection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connection")] != -1);
		return call<R>("connection", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto contexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contexts")] != -1);
		return call<R>("contexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedProfile, typename... Args>
	auto effective_profile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("effective_profile")] != -1);
		return call<R>("effective_profile", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto effective_target(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("effective_target")] != -1);
		return call<R>("effective_target", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode *, typename... Args>
	auto exceptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exceptions")] != -1);
		return call<R>("exceptions", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto forward_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forward_reference")] != -1);
		return call<R>("forward_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedComponent, typename... Args>
	auto get_effective_component(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_effective_component")] != -1);
		return call<R>("get_effective_component", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedComponent *, typename... Args>
	auto get_effective_components(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_effective_components")] != -1);
		return call<R>("get_effective_components", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_reply_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_reply_service_context")] != -1);
		return call<R>("get_reply_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto get_request_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_request_policy")] != -1);
		return call<R>("get_request_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::ServiceContext, typename... Args>
	auto get_request_service_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_request_service_context")] != -1);
		return call<R>("get_request_service_context", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto operation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation")] != -1);
		return call<R>("operation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto operation_context(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operation_context")] != -1);
		return call<R>("operation_context", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto received_exception(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("received_exception")] != -1);
		return call<R>("received_exception", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto received_exception_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("received_exception_id")] != -1);
		return call<R>("received_exception_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto request_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("request_id")] != -1);
		return call<R>("request_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto response_expected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("response_expected")] != -1);
		return call<R>("response_expected", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto result(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("result")] != -1);
		return call<R>("result", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto target(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("target")] != -1);
		return call<R>("target", std::forward<Args>(args)...);
	}

};

#endif
