#ifndef com_sun_corba_se_impl_interceptors_PICurrent_HPP
#define com_sun_corba_se_impl_interceptors_PICurrent_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::interceptors::PICurrent : public jObject<::com::sun::corba::se::impl::interceptors::PICurrent, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_interceptors / "PICurrent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Any(::jint)>("get_slot"), //
		jMethod<::jvoid(::jint, ::org::omg::CORBA::Any)>("set_slot"), //
	};

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto get_slot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_slot")] != -1);
		return call<R>("get_slot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set_slot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_slot")] != -1);
		return call<R>("set_slot", std::forward<Args>(args)...);
	}

};

#endif
