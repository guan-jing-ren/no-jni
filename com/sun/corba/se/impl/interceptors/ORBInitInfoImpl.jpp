#ifndef com_sun_corba_se_impl_interceptors_ORBInitInfoImpl_HPP
#define com_sun_corba_se_impl_interceptors_ORBInitInfoImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::interceptors::ORBInitInfoImpl : public jObject<::com::sun::corba::se::impl::interceptors::ORBInitInfoImpl, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_interceptors / "ORBInitInfoImpl";

	constexpr static Enume field_signatures{
		jField<::jint>("STAGE_CLOSED"), //
		jField<::jint>("STAGE_POST_INIT"), //
		jField<::jint>("STAGE_PRE_INIT"), //
	};

	template<typename F = ::jint>
	static auto STAGE_CLOSED() {
		static_assert(field_signatures[jField<F>("STAGE_CLOSED")] != -1);
		return sat<F>("STAGE_CLOSED");
	}

	template<typename F = ::jint>
	static auto STAGE_POST_INIT() {
		static_assert(field_signatures[jField<F>("STAGE_POST_INIT")] != -1);
		return sat<F>("STAGE_POST_INIT");
	}

	template<typename F = ::jint>
	static auto STAGE_PRE_INIT() {
		static_assert(field_signatures[jField<F>("STAGE_PRE_INIT")] != -1);
		return sat<F>("STAGE_PRE_INIT");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::org::omg::PortableInterceptor::ClientRequestInterceptor)>("add_client_request_interceptor"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ClientRequestInterceptor, ::org::omg::CORBA::Policy *)>("add_client_request_interceptor_with_policy"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::IORInterceptor)>("add_ior_interceptor"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::IORInterceptor, ::org::omg::CORBA::Policy *)>("add_ior_interceptor_with_policy"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ServerRequestInterceptor)>("add_server_request_interceptor"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ServerRequestInterceptor, ::org::omg::CORBA::Policy *)>("add_server_request_interceptor_with_policy"), //
		jMethod<::jint()>("allocate_slot_id"), //
		jMethod<::java::lang::String *()>("arguments"), //
		jMethod<::org::omg::IOP::CodecFactory()>("codec_factory"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getORB"), //
		jMethod<::java::lang::String()>("orb_id"), //
		jMethod<::jvoid(::java::lang::String, ::org::omg::CORBA::Object)>("register_initial_reference"), //
		jMethod<::jvoid(::jint, ::org::omg::PortableInterceptor::PolicyFactory)>("register_policy_factory"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("resolve_initial_references"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add_client_request_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_client_request_interceptor")] != -1);
		return call<R>("add_client_request_interceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_client_request_interceptor_with_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_client_request_interceptor_with_policy")] != -1);
		return call<R>("add_client_request_interceptor_with_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_ior_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_ior_interceptor")] != -1);
		return call<R>("add_ior_interceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_ior_interceptor_with_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_ior_interceptor_with_policy")] != -1);
		return call<R>("add_ior_interceptor_with_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_server_request_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_server_request_interceptor")] != -1);
		return call<R>("add_server_request_interceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto add_server_request_interceptor_with_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add_server_request_interceptor_with_policy")] != -1);
		return call<R>("add_server_request_interceptor_with_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto allocate_slot_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocate_slot_id")] != -1);
		return call<R>("allocate_slot_id", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto arguments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arguments")] != -1);
		return call<R>("arguments", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::CodecFactory, typename... Args>
	auto codec_factory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("codec_factory")] != -1);
		return call<R>("codec_factory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto orb_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb_id")] != -1);
		return call<R>("orb_id", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_initial_reference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register_initial_reference")] != -1);
		return call<R>("register_initial_reference", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_policy_factory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register_policy_factory")] != -1);
		return call<R>("register_policy_factory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto resolve_initial_references(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve_initial_references")] != -1);
		return call<R>("resolve_initial_references", std::forward<Args>(args)...);
	}

};

#endif
