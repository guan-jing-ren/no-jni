#ifndef com_sun_corba_se_impl_resolver_FileResolverImpl_HPP
#define com_sun_corba_se_impl_resolver_FileResolverImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::resolver::FileResolverImpl : public jObject<::com::sun::corba::se::impl::resolver::FileResolverImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_resolver / "FileResolverImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::io::File)>(), //
		jMethod<::java::util::Set()>("list"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String)>("resolve"), //
	};

	template<typename R = ::java::util::Set, typename... Args>
	auto list(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("list")] != -1);
		return call<R>("list", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolve")] != -1);
		return call<R>("resolve", std::forward<Args>(args)...);
	}

};

#endif
