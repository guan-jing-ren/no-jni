#ifndef com_sun_corba_se_impl_corba_NamedValueImpl_HPP
#define com_sun_corba_se_impl_corba_NamedValueImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::corba::NamedValueImpl : public jObject<::com::sun::corba::se::impl::corba::NamedValueImpl, ::org::omg::CORBA::NamedValue> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_corba / "NamedValueImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String, ::org::omg::CORBA::Any, ::jint)>(), //
		jMethod<::jint()>("flags"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::org::omg::CORBA::Any()>("value"), //
	};

	template<typename R = ::jint, typename... Args>
	auto flags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("flags")] != -1);
		return call<R>("flags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Any, typename... Args>
	auto value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("value")] != -1);
		return call<R>("value", std::forward<Args>(args)...);
	}

};

#endif
