#ifndef com_sun_corba_se_impl_dynamicany_DynFixedImpl_HPP
#define com_sun_corba_se_impl_dynamicany_DynFixedImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::dynamicany::DynFixedImpl : public jObject<::com::sun::corba::se::impl::dynamicany::DynFixedImpl, ::com::sun::corba::se::impl::dynamicany::DynAnyBasicImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_dynamicany / "DynFixedImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("get_value"), //
		jMethod<::jboolean(::java::lang::String)>("set_value"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto get_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_value")] != -1);
		return call<R>("get_value", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto set_value(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set_value")] != -1);
		return call<R>("set_value", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
