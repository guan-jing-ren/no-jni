#ifndef com_sun_corba_se_impl_dynamicany_DynAnyFactoryImpl_HPP
#define com_sun_corba_se_impl_dynamicany_DynAnyFactoryImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::dynamicany::DynAnyFactoryImpl : public jObject<::com::sun::corba::se::impl::dynamicany::DynAnyFactoryImpl, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_dynamicany / "DynAnyFactoryImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::org::omg::DynamicAny::DynAny(::org::omg::CORBA::Any)>("create_dyn_any"), //
		jMethod<::org::omg::DynamicAny::DynAny(::org::omg::CORBA::TypeCode)>("create_dyn_any_from_type_code"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::DynamicAny::DynAny, typename... Args>
	auto create_dyn_any(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_any")] != -1);
		return call<R>("create_dyn_any", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::DynamicAny::DynAny, typename... Args>
	auto create_dyn_any_from_type_code(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_dyn_any_from_type_code")] != -1);
		return call<R>("create_dyn_any_from_type_code", std::forward<Args>(args)...);
	}

};

#endif
