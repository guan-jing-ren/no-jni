#ifndef com_sun_corba_se_impl_protocol_LocalClientRequestDispatcherBase_HPP
#define com_sun_corba_se_impl_protocol_LocalClientRequestDispatcherBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::LocalClientRequestDispatcherBase : public jObject<::com::sun::corba::se::impl::protocol::LocalClientRequestDispatcherBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol / "LocalClientRequestDispatcherBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jbyte *()>("getObjectId"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("is_local"), //
		jMethod<::jboolean(::org::omg::CORBA::Object)>("useLocalInvocation"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getObjectId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectId")] != -1);
		return call<R>("getObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_local(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("is_local")] != -1);
		return call<R>("is_local", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useLocalInvocation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useLocalInvocation")] != -1);
		return call<R>("useLocalInvocation", std::forward<Args>(args)...);
	}

};

#endif
