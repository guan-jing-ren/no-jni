#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_LocateReplyMessage_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_LocateReplyMessage_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "LocateReplyMessage";

	constexpr static Enume field_signatures{
		jField<::jint>("LOC_NEEDS_ADDRESSING_MODE"), //
		jField<::jint>("LOC_SYSTEM_EXCEPTION"), //
		jField<::jint>("OBJECT_FORWARD"), //
		jField<::jint>("OBJECT_FORWARD_PERM"), //
		jField<::jint>("OBJECT_HERE"), //
		jField<::jint>("UNKNOWN_OBJECT"), //
	};

	template<typename F = ::jint>
	static auto LOC_NEEDS_ADDRESSING_MODE() {
		static_assert(field_signatures[jField<F>("LOC_NEEDS_ADDRESSING_MODE")] != -1);
		return sat<F>("LOC_NEEDS_ADDRESSING_MODE");
	}

	template<typename F = ::jint>
	static auto LOC_SYSTEM_EXCEPTION() {
		static_assert(field_signatures[jField<F>("LOC_SYSTEM_EXCEPTION")] != -1);
		return sat<F>("LOC_SYSTEM_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto OBJECT_FORWARD() {
		static_assert(field_signatures[jField<F>("OBJECT_FORWARD")] != -1);
		return sat<F>("OBJECT_FORWARD");
	}

	template<typename F = ::jint>
	static auto OBJECT_FORWARD_PERM() {
		static_assert(field_signatures[jField<F>("OBJECT_FORWARD_PERM")] != -1);
		return sat<F>("OBJECT_FORWARD_PERM");
	}

	template<typename F = ::jint>
	static auto OBJECT_HERE() {
		static_assert(field_signatures[jField<F>("OBJECT_HERE")] != -1);
		return sat<F>("OBJECT_HERE");
	}

	template<typename F = ::jint>
	static auto UNKNOWN_OBJECT() {
		static_assert(field_signatures[jField<F>("UNKNOWN_OBJECT")] != -1);
		return sat<F>("UNKNOWN_OBJECT");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
