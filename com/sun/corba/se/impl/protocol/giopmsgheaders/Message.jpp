#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_Message_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_Message_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::Message, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "Message";

	constexpr static Enume field_signatures{
		jField<::jbyte>("CDR_ENC_VERSION"), //
		jField<::jbyte>("FLAG_NO_FRAG_BIG_ENDIAN"), //
		jField<::jint>("GIOPBigEndian"), //
		jField<::jint>("GIOPBigMagic"), //
		jField<::jbyte>("GIOPCancelRequest"), //
		jField<::jbyte>("GIOPCloseConnection"), //
		jField<::jbyte>("GIOPFragment"), //
		jField<::jint>("GIOPLittleEndian"), //
		jField<::jint>("GIOPLittleMagic"), //
		jField<::jbyte>("GIOPLocateReply"), //
		jField<::jbyte>("GIOPLocateRequest"), //
		jField<::jbyte>("GIOPMessageError"), //
		jField<::jint>("GIOPMessageHeaderLength"), //
		jField<::jbyte>("GIOPReply"), //
		jField<::jbyte>("GIOPRequest"), //
		jField<::jbyte>("JAVA_ENC_VERSION"), //
		jField<::jbyte>("LITTLE_ENDIAN_BIT"), //
		jField<::jbyte>("MORE_FRAGMENTS_BIT"), //
		jField<::jbyte>("THREAD_POOL_TO_USE_MASK"), //
		jField<::jbyte>("TRAILING_TWO_BIT_BYTE_MASK"), //
		jField<::jint>("defaultBufferSize"), //
	};

	template<typename F = ::jbyte>
	static auto CDR_ENC_VERSION() {
		static_assert(field_signatures[jField<F>("CDR_ENC_VERSION")] != -1);
		return sat<F>("CDR_ENC_VERSION");
	}

	template<typename F = ::jbyte>
	static auto FLAG_NO_FRAG_BIG_ENDIAN() {
		static_assert(field_signatures[jField<F>("FLAG_NO_FRAG_BIG_ENDIAN")] != -1);
		return sat<F>("FLAG_NO_FRAG_BIG_ENDIAN");
	}

	template<typename F = ::jint>
	static auto GIOPBigEndian() {
		static_assert(field_signatures[jField<F>("GIOPBigEndian")] != -1);
		return sat<F>("GIOPBigEndian");
	}

	template<typename F = ::jint>
	static auto GIOPBigMagic() {
		static_assert(field_signatures[jField<F>("GIOPBigMagic")] != -1);
		return sat<F>("GIOPBigMagic");
	}

	template<typename F = ::jbyte>
	static auto GIOPCancelRequest() {
		static_assert(field_signatures[jField<F>("GIOPCancelRequest")] != -1);
		return sat<F>("GIOPCancelRequest");
	}

	template<typename F = ::jbyte>
	static auto GIOPCloseConnection() {
		static_assert(field_signatures[jField<F>("GIOPCloseConnection")] != -1);
		return sat<F>("GIOPCloseConnection");
	}

	template<typename F = ::jbyte>
	static auto GIOPFragment() {
		static_assert(field_signatures[jField<F>("GIOPFragment")] != -1);
		return sat<F>("GIOPFragment");
	}

	template<typename F = ::jint>
	static auto GIOPLittleEndian() {
		static_assert(field_signatures[jField<F>("GIOPLittleEndian")] != -1);
		return sat<F>("GIOPLittleEndian");
	}

	template<typename F = ::jint>
	static auto GIOPLittleMagic() {
		static_assert(field_signatures[jField<F>("GIOPLittleMagic")] != -1);
		return sat<F>("GIOPLittleMagic");
	}

	template<typename F = ::jbyte>
	static auto GIOPLocateReply() {
		static_assert(field_signatures[jField<F>("GIOPLocateReply")] != -1);
		return sat<F>("GIOPLocateReply");
	}

	template<typename F = ::jbyte>
	static auto GIOPLocateRequest() {
		static_assert(field_signatures[jField<F>("GIOPLocateRequest")] != -1);
		return sat<F>("GIOPLocateRequest");
	}

	template<typename F = ::jbyte>
	static auto GIOPMessageError() {
		static_assert(field_signatures[jField<F>("GIOPMessageError")] != -1);
		return sat<F>("GIOPMessageError");
	}

	template<typename F = ::jint>
	static auto GIOPMessageHeaderLength() {
		static_assert(field_signatures[jField<F>("GIOPMessageHeaderLength")] != -1);
		return sat<F>("GIOPMessageHeaderLength");
	}

	template<typename F = ::jbyte>
	static auto GIOPReply() {
		static_assert(field_signatures[jField<F>("GIOPReply")] != -1);
		return sat<F>("GIOPReply");
	}

	template<typename F = ::jbyte>
	static auto GIOPRequest() {
		static_assert(field_signatures[jField<F>("GIOPRequest")] != -1);
		return sat<F>("GIOPRequest");
	}

	template<typename F = ::jbyte>
	static auto JAVA_ENC_VERSION() {
		static_assert(field_signatures[jField<F>("JAVA_ENC_VERSION")] != -1);
		return sat<F>("JAVA_ENC_VERSION");
	}

	template<typename F = ::jbyte>
	static auto LITTLE_ENDIAN_BIT() {
		static_assert(field_signatures[jField<F>("LITTLE_ENDIAN_BIT")] != -1);
		return sat<F>("LITTLE_ENDIAN_BIT");
	}

	template<typename F = ::jbyte>
	static auto MORE_FRAGMENTS_BIT() {
		static_assert(field_signatures[jField<F>("MORE_FRAGMENTS_BIT")] != -1);
		return sat<F>("MORE_FRAGMENTS_BIT");
	}

	template<typename F = ::jbyte>
	static auto THREAD_POOL_TO_USE_MASK() {
		static_assert(field_signatures[jField<F>("THREAD_POOL_TO_USE_MASK")] != -1);
		return sat<F>("THREAD_POOL_TO_USE_MASK");
	}

	template<typename F = ::jbyte>
	static auto TRAILING_TWO_BIT_BYTE_MASK() {
		static_assert(field_signatures[jField<F>("TRAILING_TWO_BIT_BYTE_MASK")] != -1);
		return sat<F>("TRAILING_TWO_BIT_BYTE_MASK");
	}

	template<typename F = ::jint>
	static auto defaultBufferSize() {
		static_assert(field_signatures[jField<F>("defaultBufferSize")] != -1);
		return sat<F>("defaultBufferSize");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::MessageHandler)>("callback"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage()>("createFragmentMessage"), //
		jMethod<::java::nio::ByteBuffer()>("getByteBuffer"), //
		jMethod<::jbyte()>("getEncodingVersion"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("getThreadPoolToUse"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isLittleEndian"), //
		jMethod<::jboolean()>("moreFragmentsToFollow"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("setByteBuffer"), //
		jMethod<::jvoid(::jbyte)>("setEncodingVersion"), //
		jMethod<::jvoid(::java::nio::ByteBuffer, ::jint)>("setSize"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto callback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("callback")] != -1);
		return call<R>("callback", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage, typename... Args>
	auto createFragmentMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFragmentMessage")] != -1);
		return call<R>("createFragmentMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto getByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteBuffer")] != -1);
		return call<R>("getByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getEncodingVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodingVersion")] != -1);
		return call<R>("getEncodingVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThreadPoolToUse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolToUse")] != -1);
		return call<R>("getThreadPoolToUse", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLittleEndian(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLittleEndian")] != -1);
		return call<R>("isLittleEndian", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto moreFragmentsToFollow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moreFragmentsToFollow")] != -1);
		return call<R>("moreFragmentsToFollow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setByteBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setByteBuffer")] != -1);
		return call<R>("setByteBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEncodingVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEncodingVersion")] != -1);
		return call<R>("setEncodingVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
