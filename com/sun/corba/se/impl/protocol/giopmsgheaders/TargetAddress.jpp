#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_TargetAddress_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_TargetAddress_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::TargetAddress : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::TargetAddress, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "TargetAddress";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("_default"), //
		jMethod<::jshort()>("discriminator"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::IORAddressingInfo()>("ior"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::IORAddressingInfo)>("ior"), //
		jMethod<::jbyte *()>("object_key"), //
		jMethod<::jvoid(::jbyte *)>("object_key"), //
		jMethod<::org::omg::IOP::TaggedProfile()>("profile"), //
		jMethod<::jvoid(::org::omg::IOP::TaggedProfile)>("profile"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto _default(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_default")] != -1);
		return call<R>("_default", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto discriminator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("discriminator")] != -1);
		return call<R>("discriminator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::IORAddressingInfo, typename... Args>
	auto ior(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ior")] != -1);
		return call<R>("ior", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto object_key(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("object_key")] != -1);
		return call<R>("object_key", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::IOP::TaggedProfile, typename... Args>
	auto profile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("profile")] != -1);
		return call<R>("profile", std::forward<Args>(args)...);
	}

};

#endif
