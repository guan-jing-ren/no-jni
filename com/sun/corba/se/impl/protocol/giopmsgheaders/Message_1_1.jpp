#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_Message_1_1_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_Message_1_1_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message_1_1 : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::Message_1_1, ::com::sun::corba::se::impl::protocol::giopmsgheaders::MessageBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "Message_1_1";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage()>("createFragmentMessage"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jboolean()>("isLittleEndian"), //
		jMethod<::jboolean()>("moreFragmentsToFollow"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::jvoid(::java::nio::ByteBuffer, ::jint)>("setSize"), //
		jMethod<::jvoid(::jint)>("setThreadPoolToUse"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage, typename... Args>
	auto createFragmentMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFragmentMessage")] != -1);
		return call<R>("createFragmentMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLittleEndian(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLittleEndian")] != -1);
		return call<R>("isLittleEndian", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto moreFragmentsToFollow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moreFragmentsToFollow")] != -1);
		return call<R>("moreFragmentsToFollow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSize")] != -1);
		return call<R>("setSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreadPoolToUse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreadPoolToUse")] != -1);
		return call<R>("setThreadPoolToUse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
