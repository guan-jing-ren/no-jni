#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_ReplyMessage_1_0_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_ReplyMessage_1_0_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage_1_0 : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage_1_0, ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message_1_0> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "ReplyMessage_1_0";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::MessageHandler)>("callback"), //
		jMethod<::jshort()>("getAddrDisposition"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getIOR"), //
		jMethod<::jint()>("getReplyStatus"), //
		jMethod<::jint()>("getRequestId"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContexts()>("getServiceContexts"), //
		jMethod<::org::omg::CORBA::SystemException(::java::lang::String)>("getSystemException"), //
		jMethod<::jvoid(::jint)>("isValidReplyStatus"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("setIOR"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("setServiceContexts"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto callback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("callback")] != -1);
		return call<R>("callback", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getAddrDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddrDisposition")] != -1);
		return call<R>("getAddrDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return call<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReplyStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplyStatus")] != -1);
		return call<R>("getReplyStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestId")] != -1);
		return call<R>("getRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContexts, typename... Args>
	auto getServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceContexts")] != -1);
		return call<R>("getServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::SystemException, typename... Args>
	auto getSystemException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemException")] != -1);
		return call<R>("getSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto isValidReplyStatus(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isValidReplyStatus")] != -1);
		return scall<R>("isValidReplyStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIOR")] != -1);
		return call<R>("setIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServiceContexts")] != -1);
		return call<R>("setServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
