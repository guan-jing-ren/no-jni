#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_RequestMessage_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_RequestMessage_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "RequestMessage";

	constexpr static Enume field_signatures{
		jField<::jbyte>("RESPONSE_EXPECTED_BIT"), //
	};

	template<typename F = ::jbyte>
	static auto RESPONSE_EXPECTED_BIT() {
		static_assert(field_signatures[jField<F>("RESPONSE_EXPECTED_BIT")] != -1);
		return sat<F>("RESPONSE_EXPECTED_BIT");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::ior::ObjectKey()>("getObjectKey"), //
		jMethod<::java::lang::String()>("getOperation"), //
		jMethod<::org::omg::CORBA::Principal()>("getPrincipal"), //
		jMethod<::jint()>("getRequestId"), //
		jMethod<::jbyte *()>("getReserved"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContexts()>("getServiceContexts"), //
		jMethod<::jboolean()>("isResponseExpected"), //
		jMethod<::jvoid(::jint)>("setThreadPoolToUse"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKey, typename... Args>
	auto getObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKey")] != -1);
		return call<R>("getObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperation")] != -1);
		return call<R>("getOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Principal, typename... Args>
	auto getPrincipal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrincipal")] != -1);
		return call<R>("getPrincipal", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestId")] != -1);
		return call<R>("getRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getReserved(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReserved")] != -1);
		return call<R>("getReserved", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContexts, typename... Args>
	auto getServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceContexts")] != -1);
		return call<R>("getServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isResponseExpected(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isResponseExpected")] != -1);
		return call<R>("isResponseExpected", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreadPoolToUse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreadPoolToUse")] != -1);
		return call<R>("setThreadPoolToUse", std::forward<Args>(args)...);
	}

};

#endif
