#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_ReplyMessage_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_ReplyMessage_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "ReplyMessage";

	constexpr static Enume field_signatures{
		jField<::jint>("LOCATION_FORWARD"), //
		jField<::jint>("LOCATION_FORWARD_PERM"), //
		jField<::jint>("NEEDS_ADDRESSING_MODE"), //
		jField<::jint>("NO_EXCEPTION"), //
		jField<::jint>("SYSTEM_EXCEPTION"), //
		jField<::jint>("USER_EXCEPTION"), //
	};

	template<typename F = ::jint>
	static auto LOCATION_FORWARD() {
		static_assert(field_signatures[jField<F>("LOCATION_FORWARD")] != -1);
		return sat<F>("LOCATION_FORWARD");
	}

	template<typename F = ::jint>
	static auto LOCATION_FORWARD_PERM() {
		static_assert(field_signatures[jField<F>("LOCATION_FORWARD_PERM")] != -1);
		return sat<F>("LOCATION_FORWARD_PERM");
	}

	template<typename F = ::jint>
	static auto NEEDS_ADDRESSING_MODE() {
		static_assert(field_signatures[jField<F>("NEEDS_ADDRESSING_MODE")] != -1);
		return sat<F>("NEEDS_ADDRESSING_MODE");
	}

	template<typename F = ::jint>
	static auto NO_EXCEPTION() {
		static_assert(field_signatures[jField<F>("NO_EXCEPTION")] != -1);
		return sat<F>("NO_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto SYSTEM_EXCEPTION() {
		static_assert(field_signatures[jField<F>("SYSTEM_EXCEPTION")] != -1);
		return sat<F>("SYSTEM_EXCEPTION");
	}

	template<typename F = ::jint>
	static auto USER_EXCEPTION() {
		static_assert(field_signatures[jField<F>("USER_EXCEPTION")] != -1);
		return sat<F>("USER_EXCEPTION");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContexts()>("getServiceContexts"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("setIOR"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("setServiceContexts"), //
	};

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContexts, typename... Args>
	auto getServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServiceContexts")] != -1);
		return call<R>("getServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIOR")] != -1);
		return call<R>("setIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServiceContexts")] != -1);
		return call<R>("setServiceContexts", std::forward<Args>(args)...);
	}

};

#endif
