#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_LocateReplyOrReplyMessage_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_LocateReplyOrReplyMessage_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyOrReplyMessage : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyOrReplyMessage, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "LocateReplyOrReplyMessage";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jshort()>("getAddrDisposition"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getIOR"), //
		jMethod<::jint()>("getReplyStatus"), //
		jMethod<::jint()>("getRequestId"), //
		jMethod<::org::omg::CORBA::SystemException(::java::lang::String)>("getSystemException"), //
	};

	template<typename R = ::jshort, typename... Args>
	auto getAddrDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddrDisposition")] != -1);
		return call<R>("getAddrDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return call<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getReplyStatus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplyStatus")] != -1);
		return call<R>("getReplyStatus", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestId")] != -1);
		return call<R>("getRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::SystemException, typename... Args>
	auto getSystemException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemException")] != -1);
		return call<R>("getSystemException", std::forward<Args>(args)...);
	}

};

#endif
