#ifndef com_sun_corba_se_impl_protocol_giopmsgheaders_FragmentMessage_1_2_HPP
#define com_sun_corba_se_impl_protocol_giopmsgheaders_FragmentMessage_1_2_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage_1_2 : public jObject<::com::sun::corba::se::impl::protocol::giopmsgheaders::FragmentMessage_1_2, ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message_1_2> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol_giopmsgheaders / "FragmentMessage_1_2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::MessageHandler)>("callback"), //
		jMethod<::jint()>("getHeaderLength"), //
		jMethod<::jint()>("getRequestId"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto callback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("callback")] != -1);
		return call<R>("callback", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeaderLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeaderLength")] != -1);
		return call<R>("getHeaderLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestId")] != -1);
		return call<R>("getRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
