#ifndef com_sun_corba_se_impl_protocol_SpecialMethod_HPP
#define com_sun_corba_se_impl_protocol_SpecialMethod_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::protocol::SpecialMethod : public jObject<::com::sun::corba::se::impl::protocol::SpecialMethod, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_protocol / "SpecialMethod";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::corba::se::impl::protocol::SpecialMethod(::java::lang::String)>("getSpecialMethod"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::java::lang::Object, ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::jbyte *, ::com::sun::corba::se::spi::oa::ObjectAdapter)>("invoke"), //
		jMethod<::jboolean()>("isNonExistentMethod"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::SpecialMethod, typename... Args>
	static auto getSpecialMethod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSpecialMethod")] != -1);
		return scall<R>("getSpecialMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNonExistentMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNonExistentMethod")] != -1);
		return call<R>("isNonExistentMethod", std::forward<Args>(args)...);
	}

};

#endif
