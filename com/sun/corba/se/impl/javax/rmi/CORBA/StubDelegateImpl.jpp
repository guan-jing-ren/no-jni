#ifndef com_sun_corba_se_impl_javax_rmi_CORBA_StubDelegateImpl_HPP
#define com_sun_corba_se_impl_javax_rmi_CORBA_StubDelegateImpl_HPP

#include "../../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::javax::rmi::CORBA::StubDelegateImpl : public jObject<::com::sun::corba::se::impl::javax::rmi::CORBA::StubDelegateImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_javax_rmi_CORBA / "StubDelegateImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::rmi::CORBA::Stub, ::org::omg::CORBA::ORB)>("connect"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jboolean(::javax::rmi::CORBA::Stub, ::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::impl::ior::StubIORImpl()>("getIOR"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint(::javax::rmi::CORBA::Stub)>("hashCode"), //
		jMethod<::jvoid(::javax::rmi::CORBA::Stub, ::java::io::ObjectInputStream)>("readObject"), //
		jMethod<::java::lang::String(::javax::rmi::CORBA::Stub)>("toString"), //
		jMethod<::jvoid(::javax::rmi::CORBA::Stub, ::java::io::ObjectOutputStream)>("writeObject"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::ior::StubIORImpl, typename... Args>
	auto getIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return call<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObject")] != -1);
		return call<R>("readObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeObject")] != -1);
		return call<R>("writeObject", std::forward<Args>(args)...);
	}

};

#endif
