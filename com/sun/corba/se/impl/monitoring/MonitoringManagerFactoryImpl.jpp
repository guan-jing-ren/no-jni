#ifndef com_sun_corba_se_impl_monitoring_MonitoringManagerFactoryImpl_HPP
#define com_sun_corba_se_impl_monitoring_MonitoringManagerFactoryImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::monitoring::MonitoringManagerFactoryImpl : public jObject<::com::sun::corba::se::impl::monitoring::MonitoringManagerFactoryImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_monitoring / "MonitoringManagerFactoryImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoringManager(::java::lang::String, ::java::lang::String)>("createMonitoringManager"), //
		jMethod<::jvoid(::java::lang::String)>("remove"), //
	};

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoringManager, typename... Args>
	auto createMonitoringManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMonitoringManager")] != -1);
		return call<R>("createMonitoringManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

};

#endif
