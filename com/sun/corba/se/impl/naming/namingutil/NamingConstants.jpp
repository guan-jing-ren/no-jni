#ifndef com_sun_corba_se_impl_naming_namingutil_NamingConstants_HPP
#define com_sun_corba_se_impl_naming_namingutil_NamingConstants_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::namingutil::NamingConstants : public jObject<::com::sun::corba::se::impl::naming::namingutil::NamingConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_namingutil / "NamingConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("IIOP_LENGTH"), //
		jField<::jint>("MAJORNUMBER_SUPPORTED"), //
		jField<::jint>("MINORNUMBERMAX"), //
		jField<::jint>("RIRCOLON_LENGTH"), //
	};

	template<typename F = ::jint>
	static auto IIOP_LENGTH() {
		static_assert(field_signatures[jField<F>("IIOP_LENGTH")] != -1);
		return sat<F>("IIOP_LENGTH");
	}

	template<typename F = ::jint>
	static auto MAJORNUMBER_SUPPORTED() {
		static_assert(field_signatures[jField<F>("MAJORNUMBER_SUPPORTED")] != -1);
		return sat<F>("MAJORNUMBER_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto MINORNUMBERMAX() {
		static_assert(field_signatures[jField<F>("MINORNUMBERMAX")] != -1);
		return sat<F>("MINORNUMBERMAX");
	}

	template<typename F = ::jint>
	static auto RIRCOLON_LENGTH() {
		static_assert(field_signatures[jField<F>("RIRCOLON_LENGTH")] != -1);
		return sat<F>("RIRCOLON_LENGTH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
