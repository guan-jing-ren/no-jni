#ifndef com_sun_corba_se_impl_naming_namingutil_INSURLHandler_HPP
#define com_sun_corba_se_impl_naming_namingutil_INSURLHandler_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::namingutil::INSURLHandler : public jObject<::com::sun::corba::se::impl::naming::namingutil::INSURLHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_namingutil / "INSURLHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::impl::naming::namingutil::INSURLHandler()>("getINSURLHandler"), //
		jMethod<::com::sun::corba::se::impl::naming::namingutil::INSURL(::java::lang::String)>("parseURL"), //
	};

	template<typename R = ::com::sun::corba::se::impl::naming::namingutil::INSURLHandler, typename... Args>
	static auto getINSURLHandler(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getINSURLHandler")] != -1);
		return scall<R>("getINSURLHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::naming::namingutil::INSURL, typename... Args>
	auto parseURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseURL")] != -1);
		return call<R>("parseURL", std::forward<Args>(args)...);
	}

};

#endif
