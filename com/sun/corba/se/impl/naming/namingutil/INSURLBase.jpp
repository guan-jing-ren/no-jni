#ifndef com_sun_corba_se_impl_naming_namingutil_INSURLBase_HPP
#define com_sun_corba_se_impl_naming_namingutil_INSURLBase_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::namingutil::INSURLBase : public jObject<::com::sun::corba::se::impl::naming::namingutil::INSURLBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_namingutil / "INSURLBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("dPrint"), //
		jMethod<::java::util::List()>("getEndpointInfo"), //
		jMethod<::java::lang::String()>("getKeyString"), //
		jMethod<::jboolean()>("getRIRFlag"), //
		jMethod<::java::lang::String()>("getStringifiedName"), //
		jMethod<::jboolean()>("isCorbanameURL"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dPrint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dPrint")] != -1);
		return call<R>("dPrint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getEndpointInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndpointInfo")] != -1);
		return call<R>("getEndpointInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getKeyString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyString")] != -1);
		return call<R>("getKeyString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getRIRFlag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRIRFlag")] != -1);
		return call<R>("getRIRFlag", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStringifiedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStringifiedName")] != -1);
		return call<R>("getStringifiedName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCorbanameURL(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCorbanameURL")] != -1);
		return call<R>("isCorbanameURL", std::forward<Args>(args)...);
	}

};

#endif
