#ifndef com_sun_corba_se_impl_naming_namingutil_IIOPEndpointInfo_HPP
#define com_sun_corba_se_impl_naming_namingutil_IIOPEndpointInfo_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::namingutil::IIOPEndpointInfo : public jObject<::com::sun::corba::se::impl::naming::namingutil::IIOPEndpointInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_namingutil / "IIOPEndpointInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("dump"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::jint()>("getMajor"), //
		jMethod<::jint()>("getMinor"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::jvoid(::java::lang::String)>("setHost"), //
		jMethod<::jvoid(::jint)>("setPort"), //
		jMethod<::jvoid(::jint, ::jint)>("setVersion"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dump(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dump")] != -1);
		return call<R>("dump", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajor")] != -1);
		return call<R>("getMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinor")] != -1);
		return call<R>("getMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHost")] != -1);
		return call<R>("setHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPort")] != -1);
		return call<R>("setPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVersion")] != -1);
		return call<R>("setVersion", std::forward<Args>(args)...);
	}

};

#endif
