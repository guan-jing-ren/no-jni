#ifndef com_sun_corba_se_impl_naming_pcosnaming_NameService_HPP
#define com_sun_corba_se_impl_naming_pcosnaming_NameService_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::pcosnaming::NameService : public jObject<::com::sun::corba::se::impl::naming::pcosnaming::NameService, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_pcosnaming / "NameService";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::java::io::File)>(), //
		jMethod<::org::omg::CosNaming::NamingContext()>("NewContext"), //
		jMethod<::org::omg::CosNaming::NamingContext()>("initialNamingContext"), //
	};

	template<typename R = ::org::omg::CosNaming::NamingContext, typename... Args>
	auto NewContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("NewContext")] != -1);
		return call<R>("NewContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CosNaming::NamingContext, typename... Args>
	auto initialNamingContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialNamingContext")] != -1);
		return call<R>("initialNamingContext", std::forward<Args>(args)...);
	}

};

#endif
