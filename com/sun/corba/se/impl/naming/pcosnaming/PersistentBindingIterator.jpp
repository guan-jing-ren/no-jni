#ifndef com_sun_corba_se_impl_naming_pcosnaming_PersistentBindingIterator_HPP
#define com_sun_corba_se_impl_naming_pcosnaming_PersistentBindingIterator_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::pcosnaming::PersistentBindingIterator : public jObject<::com::sun::corba::se::impl::naming::pcosnaming::PersistentBindingIterator, ::com::sun::corba::se::impl::naming::cosnaming::BindingIteratorImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_pcosnaming / "PersistentBindingIterator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::org::omg::CORBA::ORB, ::java::util::Hashtable, ::org::omg::PortableServer::POA)>(), //
		jMethod<::jvoid()>("Destroy"), //
		jMethod<::jboolean(::org::omg::CosNaming::BindingHolder)>("NextOne"), //
		jMethod<::jint()>("RemainingElements"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto Destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Destroy")] != -1);
		return call<R>("Destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto NextOne(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("NextOne")] != -1);
		return call<R>("NextOne", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto RemainingElements(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("RemainingElements")] != -1);
		return call<R>("RemainingElements", std::forward<Args>(args)...);
	}

};

#endif
