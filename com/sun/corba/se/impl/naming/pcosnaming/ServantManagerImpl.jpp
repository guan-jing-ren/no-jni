#ifndef com_sun_corba_se_impl_naming_pcosnaming_ServantManagerImpl_HPP
#define com_sun_corba_se_impl_naming_pcosnaming_ServantManagerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::pcosnaming::ServantManagerImpl : public jObject<::com::sun::corba::se::impl::naming::pcosnaming::ServantManagerImpl, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_pcosnaming / "ServantManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl(::java::lang::String, ::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl)>("addContext"), //
		jMethod<::java::lang::String()>("getNewObjectKey"), //
		jMethod<::java::lang::String()>("getRootObjectKey"), //
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::POA, ::java::lang::String, ::java::lang::Object, ::org::omg::PortableServer::Servant)>("postinvoke"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *, ::org::omg::PortableServer::POA, ::java::lang::String, ::org::omg::PortableServer::ServantLocatorPackage::CookieHolder)>("preinvoke"), //
		jMethod<::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl(::java::lang::String)>("readInContext"), //
		jMethod<::jvoid(::java::lang::String, ::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl)>("updateContext"), //
	};

	template<typename R = ::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl, typename... Args>
	auto addContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addContext")] != -1);
		return call<R>("addContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getNewObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNewObjectKey")] != -1);
		return call<R>("getNewObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getRootObjectKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootObjectKey")] != -1);
		return scall<R>("getRootObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postinvoke")] != -1);
		return call<R>("postinvoke", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto preinvoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preinvoke")] != -1);
		return call<R>("preinvoke", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::naming::pcosnaming::NamingContextImpl, typename... Args>
	auto readInContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInContext")] != -1);
		return call<R>("readInContext", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateContext")] != -1);
		return call<R>("updateContext", std::forward<Args>(args)...);
	}

};

#endif
