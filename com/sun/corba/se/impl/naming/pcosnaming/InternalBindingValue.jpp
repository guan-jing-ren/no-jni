#ifndef com_sun_corba_se_impl_naming_pcosnaming_InternalBindingValue_HPP
#define com_sun_corba_se_impl_naming_pcosnaming_InternalBindingValue_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::pcosnaming::InternalBindingValue : public jObject<::com::sun::corba::se::impl::naming::pcosnaming::InternalBindingValue, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_pcosnaming / "InternalBindingValue";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("strObjectRef"), //
		jField<::org::omg::CosNaming::BindingType>("theBindingType"), //
	};

	template<typename F = ::java::lang::String>
	auto strObjectRef() const {
		static_assert(field_signatures[jField<F>("strObjectRef")] != -1);
		return at<F>("strObjectRef");
	}

	template<typename F = ::org::omg::CosNaming::BindingType>
	auto theBindingType() const {
		static_assert(field_signatures[jField<F>("theBindingType")] != -1);
		return at<F>("theBindingType");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::org::omg::CosNaming::BindingType, ::java::lang::String)>(), //
		jMethod<::org::omg::CORBA::Object()>("getObjectRef"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("setObjectRef"), //
	};

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto getObjectRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectRef")] != -1);
		return call<R>("getObjectRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setObjectRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setObjectRef")] != -1);
		return call<R>("setObjectRef", std::forward<Args>(args)...);
	}

};

#endif
