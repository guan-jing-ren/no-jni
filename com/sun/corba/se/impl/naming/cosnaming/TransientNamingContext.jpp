#ifndef com_sun_corba_se_impl_naming_cosnaming_TransientNamingContext_HPP
#define com_sun_corba_se_impl_naming_cosnaming_TransientNamingContext_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::cosnaming::TransientNamingContext : public jObject<::com::sun::corba::se::impl::naming::cosnaming::TransientNamingContext, ::com::sun::corba::se::impl::naming::cosnaming::NamingContextImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_cosnaming / "TransientNamingContext";

	constexpr static Enume field_signatures{
		jField<::org::omg::CORBA::Object>("localRoot"), //
	};

	template<typename F = ::org::omg::CORBA::Object>
	auto localRoot() const {
		static_assert(field_signatures[jField<F>("localRoot")] != -1);
		return at<F>("localRoot");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::org::omg::CORBA::Object, ::org::omg::PortableServer::POA)>(), //
		jMethod<::jvoid(::org::omg::CosNaming::NameComponent, ::org::omg::CORBA::Object, ::org::omg::CosNaming::BindingType)>("Bind"), //
		jMethod<::jvoid()>("Destroy"), //
		jMethod<::jboolean()>("IsEmpty"), //
		jMethod<::jvoid(::jint, ::org::omg::CosNaming::BindingListHolder, ::org::omg::CosNaming::BindingIteratorHolder)>("List"), //
		jMethod<::org::omg::CosNaming::NamingContext()>("NewContext"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CosNaming::NameComponent, ::org::omg::CosNaming::BindingTypeHolder)>("Resolve"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::CosNaming::NameComponent)>("Unbind"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto Bind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Bind")] != -1);
		return call<R>("Bind", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto Destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Destroy")] != -1);
		return call<R>("Destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto IsEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("IsEmpty")] != -1);
		return call<R>("IsEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto List(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("List")] != -1);
		return call<R>("List", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CosNaming::NamingContext, typename... Args>
	auto NewContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("NewContext")] != -1);
		return call<R>("NewContext", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto Resolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Resolve")] != -1);
		return call<R>("Resolve", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto Unbind(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("Unbind")] != -1);
		return call<R>("Unbind", std::forward<Args>(args)...);
	}

};

#endif
