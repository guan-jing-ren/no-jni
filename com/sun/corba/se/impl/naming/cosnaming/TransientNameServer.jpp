#ifndef com_sun_corba_se_impl_naming_cosnaming_TransientNameServer_HPP
#define com_sun_corba_se_impl_naming_cosnaming_TransientNameServer_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::cosnaming::TransientNameServer : public jObject<::com::sun::corba::se::impl::naming::cosnaming::TransientNameServer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_cosnaming / "TransientNameServer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String *)>("initDebug"), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
		jMethod<::jvoid(::java::lang::String)>("trace"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto initDebug(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initDebug")] != -1);
		return scall<R>("initDebug", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto trace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trace")] != -1);
		return scall<R>("trace", std::forward<Args>(args)...);
	}

};

#endif
