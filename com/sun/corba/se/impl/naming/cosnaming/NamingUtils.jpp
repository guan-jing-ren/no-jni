#ifndef com_sun_corba_se_impl_naming_cosnaming_NamingUtils_HPP
#define com_sun_corba_se_impl_naming_cosnaming_NamingUtils_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::naming::cosnaming::NamingUtils : public jObject<::com::sun::corba::se::impl::naming::cosnaming::NamingUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_naming_cosnaming / "NamingUtils";

	constexpr static Enume field_signatures{
		jField<::jboolean>("debug"), //
		jField<::java::io::PrintStream>("debugStream"), //
		jField<::java::io::PrintStream>("errStream"), //
	};

	template<typename F = ::jboolean>
	static auto debug() {
		static_assert(field_signatures[jField<F>("debug")] != -1);
		return sat<F>("debug");
	}

	template<typename F = ::java::io::PrintStream>
	static auto debugStream() {
		static_assert(field_signatures[jField<F>("debugStream")] != -1);
		return sat<F>("debugStream");
	}

	template<typename F = ::java::io::PrintStream>
	static auto errStream() {
		static_assert(field_signatures[jField<F>("errStream")] != -1);
		return sat<F>("errStream");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String)>("dprint"), //
		jMethod<::jvoid(::java::lang::String)>("errprint"), //
		jMethod<::jvoid(::java::io::File)>("makeDebugStream"), //
		jMethod<::jvoid(::java::io::File)>("makeErrStream"), //
		jMethod<::jvoid(::java::lang::Exception)>("printException"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto dprint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dprint")] != -1);
		return scall<R>("dprint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto errprint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("errprint")] != -1);
		return scall<R>("errprint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto makeDebugStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeDebugStream")] != -1);
		return scall<R>("makeDebugStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto makeErrStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeErrStream")] != -1);
		return scall<R>("makeErrStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto printException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("printException")] != -1);
		return scall<R>("printException", std::forward<Args>(args)...);
	}

};

#endif
