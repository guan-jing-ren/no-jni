#ifndef com_sun_corba_se_impl_orb_ParserActionFactory_HPP
#define com_sun_corba_se_impl_orb_ParserActionFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserActionFactory : public jObject<::com::sun::corba::se::impl::orb::ParserActionFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserActionFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::impl::orb::ParserAction(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation, ::java::lang::String)>("makeNormalAction"), //
		jMethod<::com::sun::corba::se::impl::orb::ParserAction(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation, ::java::lang::String, ::java::lang::Class)>("makePrefixAction"), //
	};

	template<typename R = ::com::sun::corba::se::impl::orb::ParserAction, typename... Args>
	static auto makeNormalAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeNormalAction")] != -1);
		return scall<R>("makeNormalAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orb::ParserAction, typename... Args>
	static auto makePrefixAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePrefixAction")] != -1);
		return scall<R>("makePrefixAction", std::forward<Args>(args)...);
	}

};

#endif
