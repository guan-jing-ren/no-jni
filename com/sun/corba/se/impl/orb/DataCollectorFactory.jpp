#ifndef com_sun_corba_se_impl_orb_DataCollectorFactory_HPP
#define com_sun_corba_se_impl_orb_DataCollectorFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::DataCollectorFactory : public jObject<::com::sun::corba::se::impl::orb::DataCollectorFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "DataCollectorFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orb::DataCollector(::java::applet::Applet, ::java::util::Properties, ::java::lang::String)>("create"), //
		jMethod<::com::sun::corba::se::spi::orb::DataCollector(::java::util::Properties, ::java::lang::String)>("create"), //
		jMethod<::com::sun::corba::se::spi::orb::DataCollector(::java::lang::String *, ::java::util::Properties, ::java::lang::String)>("create"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orb::DataCollector, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

};

#endif
