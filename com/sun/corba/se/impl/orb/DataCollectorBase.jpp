#ifndef com_sun_corba_se_impl_orb_DataCollectorBase_HPP
#define com_sun_corba_se_impl_orb_DataCollectorBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::DataCollectorBase : public jObject<::com::sun::corba::se::impl::orb::DataCollectorBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "DataCollectorBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::util::Properties, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::java::util::Properties()>("getProperties"), //
		jMethod<::jboolean()>("initialHostIsLocal"), //
		jMethod<::jboolean()>("isApplet"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::PropertyParser)>("setParser"), //
	};

	template<typename R = ::java::util::Properties, typename... Args>
	auto getProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProperties")] != -1);
		return call<R>("getProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto initialHostIsLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialHostIsLocal")] != -1);
		return call<R>("initialHostIsLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isApplet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isApplet")] != -1);
		return call<R>("isApplet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParser")] != -1);
		return call<R>("setParser", std::forward<Args>(args)...);
	}

};

#endif
