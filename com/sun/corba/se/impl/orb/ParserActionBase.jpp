#ifndef com_sun_corba_se_impl_orb_ParserActionBase_HPP
#define com_sun_corba_se_impl_orb_ParserActionBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserActionBase : public jObject<::com::sun::corba::se::impl::orb::ParserActionBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserActionBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jboolean, ::com::sun::corba::se::spi::orb::Operation, ::java::lang::String)>(), //
		jMethod<::java::lang::Object(::java::util::Properties)>("apply"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getFieldName"), //
		jMethod<::java::lang::String()>("getPropertyName"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isPrefix"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto apply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("apply")] != -1);
		return call<R>("apply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFieldName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldName")] != -1);
		return call<R>("getFieldName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPropertyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyName")] != -1);
		return call<R>("getPropertyName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrefix")] != -1);
		return call<R>("isPrefix", std::forward<Args>(args)...);
	}

};

#endif
