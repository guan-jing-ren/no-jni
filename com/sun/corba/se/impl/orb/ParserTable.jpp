#ifndef com_sun_corba_se_impl_orb_ParserTable_HPP
#define com_sun_corba_se_impl_orb_ParserTable_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserTable : public jObject<::com::sun::corba::se::impl::orb::ParserTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::impl::orb::ParserTable()>("get"), //
		jMethod<::com::sun::corba::se::spi::orb::ParserData *()>("getParserData"), //
	};

	template<typename R = ::com::sun::corba::se::impl::orb::ParserTable, typename... Args>
	static auto get(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return scall<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ParserData *, typename... Args>
	auto getParserData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParserData")] != -1);
		return call<R>("getParserData", std::forward<Args>(args)...);
	}

};

#endif
