#ifndef com_sun_corba_se_impl_orb_ParserTable$TestBadServerIdHandler_HPP
#define com_sun_corba_se_impl_orb_ParserTable$TestBadServerIdHandler_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserTable$TestBadServerIdHandler : public jObject<::com::sun::corba::se::impl::orb::ParserTable$TestBadServerIdHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserTable$TestBadServerIdHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::impl::orb::ParserTable)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectKey)>("handle"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handle")] != -1);
		return call<R>("handle", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
