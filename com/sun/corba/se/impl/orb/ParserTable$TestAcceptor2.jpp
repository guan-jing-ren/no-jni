#ifndef com_sun_corba_se_impl_orb_ParserTable$TestAcceptor2_HPP
#define com_sun_corba_se_impl_orb_ParserTable$TestAcceptor2_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserTable$TestAcceptor2 : public jObject<::com::sun::corba::se::impl::orb::ParserTable$TestAcceptor2, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserTable$TestAcceptor2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("accept"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::com::sun::corba::se::pept::encoding::InputObject(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::protocol::MessageMediator)>("createInputObject"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection)>("createMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::encoding::OutputObject(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::protocol::MessageMediator)>("createOutputObject"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::com::sun::corba::se::pept::broker::Broker, ::com::sun::corba::se::pept::transport::Connection, ::com::sun::corba::se::pept::protocol::MessageMediator)>("finishCreatingMessageMediator"), //
		jMethod<::com::sun::corba::se::pept::transport::InboundConnectionCache()>("getConnectionCache"), //
		jMethod<::java::lang::String()>("getConnectionCacheType"), //
		jMethod<::com::sun::corba::se::pept::transport::EventHandler()>("getEventHandler"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("initialize"), //
		jMethod<::jboolean()>("initialized"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::InboundConnectionCache)>("setConnectionCache"), //
		jMethod<::jvoid(::jboolean)>("setUseSelectThreadForConnections"), //
		jMethod<::jvoid(::jboolean)>("setUseWorkerThreadForConnections"), //
		jMethod<::jboolean()>("shouldRegisterAcceptEvent"), //
		jMethod<::jboolean()>("shouldUseSelectThreadForConnections"), //
		jMethod<::jboolean()>("shouldUseWorkerThreadForConnections"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto accept(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("accept")] != -1);
		return call<R>("accept", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::InputObject, typename... Args>
	auto createInputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputObject")] != -1);
		return call<R>("createInputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto createMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMessageMediator")] != -1);
		return call<R>("createMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::encoding::OutputObject, typename... Args>
	auto createOutputObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOutputObject")] != -1);
		return call<R>("createOutputObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto finishCreatingMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finishCreatingMessageMediator")] != -1);
		return call<R>("finishCreatingMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::InboundConnectionCache, typename... Args>
	auto getConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCache")] != -1);
		return call<R>("getConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getConnectionCacheType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCacheType")] != -1);
		return call<R>("getConnectionCacheType", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::EventHandler, typename... Args>
	auto getEventHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEventHandler")] != -1);
		return call<R>("getEventHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto initialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialized")] != -1);
		return call<R>("initialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConnectionCache(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConnectionCache")] != -1);
		return call<R>("setConnectionCache", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseSelectThreadForConnections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseSelectThreadForConnections")] != -1);
		return call<R>("setUseSelectThreadForConnections", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUseWorkerThreadForConnections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUseWorkerThreadForConnections")] != -1);
		return call<R>("setUseWorkerThreadForConnections", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldRegisterAcceptEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldRegisterAcceptEvent")] != -1);
		return call<R>("shouldRegisterAcceptEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUseSelectThreadForConnections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUseSelectThreadForConnections")] != -1);
		return call<R>("shouldUseSelectThreadForConnections", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUseWorkerThreadForConnections(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUseWorkerThreadForConnections")] != -1);
		return call<R>("shouldUseWorkerThreadForConnections", std::forward<Args>(args)...);
	}

};

#endif
