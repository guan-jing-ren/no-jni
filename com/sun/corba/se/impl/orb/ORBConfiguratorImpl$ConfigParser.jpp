#ifndef com_sun_corba_se_impl_orb_ORBConfiguratorImpl$ConfigParser_HPP
#define com_sun_corba_se_impl_orb_ORBConfiguratorImpl$ConfigParser_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ORBConfiguratorImpl$ConfigParser : public jObject<::com::sun::corba::se::impl::orb::ORBConfiguratorImpl$ConfigParser, ::com::sun::corba::se::spi::orb::ParserImplBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ORBConfiguratorImpl$ConfigParser";

	constexpr static Enume field_signatures{
		jField<::java::lang::Class *>("userConfigurators"), //
	};

	template<typename F = ::java::lang::Class *>
	auto userConfigurators() const {
		static_assert(field_signatures[jField<F>("userConfigurators")] != -1);
		return at<F>("userConfigurators");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::orb::PropertyParser()>("makeParser"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orb::PropertyParser, typename... Args>
	auto makeParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeParser")] != -1);
		return call<R>("makeParser", std::forward<Args>(args)...);
	}

};

#endif
