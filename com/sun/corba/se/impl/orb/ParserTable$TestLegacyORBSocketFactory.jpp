#ifndef com_sun_corba_se_impl_orb_ParserTable$TestLegacyORBSocketFactory_HPP
#define com_sun_corba_se_impl_orb_ParserTable$TestLegacyORBSocketFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ParserTable$TestLegacyORBSocketFactory : public jObject<::com::sun::corba::se::impl::orb::ParserTable$TestLegacyORBSocketFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ParserTable$TestLegacyORBSocketFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::net::ServerSocket(::java::lang::String, ::jint)>("createServerSocket"), //
		jMethod<::java::net::Socket(::com::sun::corba::se::spi::transport::SocketInfo)>("createSocket"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::spi::transport::SocketInfo(::org::omg::CORBA::ORB, ::com::sun::corba::se::spi::ior::IOR, ::com::sun::corba::se::spi::transport::SocketInfo)>("getEndPointInfo"), //
		jMethod<::jint()>("hashCode"), //
	};

	template<typename R = ::java::net::ServerSocket, typename... Args>
	auto createServerSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createServerSocket")] != -1);
		return call<R>("createServerSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::Socket, typename... Args>
	auto createSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSocket")] != -1);
		return call<R>("createSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::SocketInfo, typename... Args>
	auto getEndPointInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndPointInfo")] != -1);
		return call<R>("getEndPointInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

};

#endif
