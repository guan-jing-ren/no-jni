#ifndef com_sun_corba_se_impl_orb_ORBVersionImpl_HPP
#define com_sun_corba_se_impl_orb_ORBVersionImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orb::ORBVersionImpl : public jObject<::com::sun::corba::se::impl::orb::ORBVersionImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orb / "ORBVersionImpl";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("FOREIGN"), //
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("JDK1_3_1_01"), //
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("NEW"), //
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("NEWER"), //
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("OLD"), //
		jField<::com::sun::corba::se::spi::orb::ORBVersion>("PEORB"), //
	};

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto FOREIGN() {
		static_assert(field_signatures[jField<F>("FOREIGN")] != -1);
		return sat<F>("FOREIGN");
	}

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto JDK1_3_1_01() {
		static_assert(field_signatures[jField<F>("JDK1_3_1_01")] != -1);
		return sat<F>("JDK1_3_1_01");
	}

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto NEW() {
		static_assert(field_signatures[jField<F>("NEW")] != -1);
		return sat<F>("NEW");
	}

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto NEWER() {
		static_assert(field_signatures[jField<F>("NEWER")] != -1);
		return sat<F>("NEWER");
	}

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto OLD() {
		static_assert(field_signatures[jField<F>("OLD")] != -1);
		return sat<F>("OLD");
	}

	template<typename F = ::com::sun::corba::se::spi::orb::ORBVersion>
	static auto PEORB() {
		static_assert(field_signatures[jField<F>("PEORB")] != -1);
		return sat<F>("PEORB");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jbyte)>(), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte()>("getORBType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::orb::ORBVersion)>("lessThan"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getORBType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBType")] != -1);
		return call<R>("getORBType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto lessThan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lessThan")] != -1);
		return call<R>("lessThan", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
