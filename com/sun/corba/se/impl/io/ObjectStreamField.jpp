#ifndef com_sun_corba_se_impl_io_ObjectStreamField_HPP
#define com_sun_corba_se_impl_io_ObjectStreamField_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::ObjectStreamField : public jObject<::com::sun::corba::se::impl::io::ObjectStreamField, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "ObjectStreamField";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::java::lang::Class()>("getClazz"), //
		jMethod<::jlong()>("getFieldID"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getSignature"), //
		jMethod<::java::lang::Class()>("getType"), //
		jMethod<::jchar()>("getTypeCode"), //
		jMethod<::java::lang::String()>("getTypeString"), //
		jMethod<::jboolean()>("isPrimitive"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean(::com::sun::corba::se::impl::io::ObjectStreamField)>("typeEquals"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getClazz(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClazz")] != -1);
		return call<R>("getClazz", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFieldID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldID")] != -1);
		return call<R>("getFieldID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSignature(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSignature")] != -1);
		return call<R>("getSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto getTypeCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeCode")] != -1);
		return call<R>("getTypeCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTypeString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeString")] != -1);
		return call<R>("getTypeString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPrimitive(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrimitive")] != -1);
		return call<R>("isPrimitive", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto typeEquals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typeEquals")] != -1);
		return call<R>("typeEquals", std::forward<Args>(args)...);
	}

};

#endif
