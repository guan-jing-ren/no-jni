#ifndef com_sun_corba_se_impl_io_ValueUtility_HPP
#define com_sun_corba_se_impl_io_ValueUtility_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::ValueUtility : public jObject<::com::sun::corba::se::impl::io::ValueUtility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "ValueUtility";

	constexpr static Enume field_signatures{
		jField<::jshort>("PRIVATE_MEMBER"), //
		jField<::jshort>("PUBLIC_MEMBER"), //
	};

	template<typename F = ::jshort>
	static auto PRIVATE_MEMBER() {
		static_assert(field_signatures[jField<F>("PRIVATE_MEMBER")] != -1);
		return sat<F>("PRIVATE_MEMBER");
	}

	template<typename F = ::jshort>
	static auto PUBLIC_MEMBER() {
		static_assert(field_signatures[jField<F>("PUBLIC_MEMBER")] != -1);
		return sat<F>("PUBLIC_MEMBER");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::omg::CORBA::TypeCode(::org::omg::CORBA::ORB, ::java::lang::Class, ::javax::rmi::CORBA::ValueHandler)>("createTypeCodeForClass"), //
		jMethod<::org::omg::CORBA::TypeCode(::org::omg::CORBA::ORB, ::java::lang::Class, ::javax::rmi::CORBA::ValueHandler)>("getPrimitiveTypeCodeForClass"), //
		jMethod<::java::lang::String(::org::omg::CORBA::ValueMember)>("getSignature"), //
		jMethod<::jboolean(::java::lang::String, ::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription, ::com::sun::org::omg::SendingContext::CodeBase)>("isAssignableFrom"), //
		jMethod<::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription(::org::omg::CORBA::ORB, ::com::sun::corba::se::impl::io::ObjectStreamClass, ::javax::rmi::CORBA::ValueHandler)>("translate"), //
	};

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	static auto createTypeCodeForClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createTypeCodeForClass")] != -1);
		return scall<R>("createTypeCodeForClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	static auto getPrimitiveTypeCodeForClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPrimitiveTypeCodeForClass")] != -1);
		return scall<R>("getPrimitiveTypeCodeForClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getSignature(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSignature")] != -1);
		return scall<R>("getSignature", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isAssignableFrom(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAssignableFrom")] != -1);
		return scall<R>("isAssignableFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::CORBA::ValueDefPackage::FullValueDescription, typename... Args>
	static auto translate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("translate")] != -1);
		return scall<R>("translate", std::forward<Args>(args)...);
	}

};

#endif
