#ifndef com_sun_corba_se_impl_io_IIOPInputStream_HPP
#define com_sun_corba_se_impl_io_IIOPInputStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::IIOPInputStream : public jObject<::com::sun::corba::se::impl::io::IIOPInputStream, ::com::sun::corba::se::impl::io::InputStreamHook> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "IIOPInputStream";

	constexpr static Enume field_signatures{
		jField<::org::omg::CORBA::TypeCode>("kRemoteTypeCode"), //
		jField<::org::omg::CORBA::TypeCode>("kValueTypeCode"), //
	};

	template<typename F = ::org::omg::CORBA::TypeCode>
	static auto kRemoteTypeCode() {
		static_assert(field_signatures[jField<F>("kRemoteTypeCode")] != -1);
		return sat<F>("kRemoteTypeCode");
	}

	template<typename F = ::org::omg::CORBA::TypeCode>
	static auto kValueTypeCode() {
		static_assert(field_signatures[jField<F>("kValueTypeCode")] != -1);
		return sat<F>("kValueTypeCode");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jboolean(::jboolean)>("enableResolveObjectDelegate"), //
		jMethod<::com::sun::org::omg::SendingContext::CodeBase()>("getSender"), //
		jMethod<::javax::rmi::CORBA::ValueHandler()>("getValueHandler"), //
		jMethod<::jvoid(::jint)>("mark"), //
		jMethod<::jboolean()>("markSupported"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
		jMethod<::jboolean()>("readBoolean"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jchar()>("readChar"), //
		jMethod<::jdouble()>("readDouble"), //
		jMethod<::jfloat()>("readFloat"), //
		jMethod<::jvoid(::jbyte *)>("readFully"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("readFully"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::java::lang::String()>("readLine"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::java::lang::Object()>("readObjectDelegate"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String()>("readUTF"), //
		jMethod<::jint()>("readUnsignedByte"), //
		jMethod<::jint()>("readUnsignedShort"), //
		jMethod<::jvoid(::java::io::ObjectInputValidation, ::jint)>("registerValidation"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::com::sun::org::omg::SendingContext::CodeBase)>("setSender"), //
		jMethod<::jvoid(::jboolean)>("setTestFVDFlag"), //
		jMethod<::jvoid(::javax::rmi::CORBA::ValueHandler)>("setValueHandler"), //
		jMethod<::jvoid(::java::lang::String, ::com::sun::org::omg::SendingContext::CodeBase)>("simpleSkipObject"), //
		jMethod<::jint(::jint)>("skipBytes"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto enableResolveObjectDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableResolveObjectDelegate")] != -1);
		return call<R>("enableResolveObjectDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::org::omg::SendingContext::CodeBase, typename... Args>
	auto getSender(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSender")] != -1);
		return call<R>("getSender", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::ValueHandler, typename... Args>
	auto getValueHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValueHandler")] != -1);
		return call<R>("getValueHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto markSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markSupported")] != -1);
		return call<R>("markSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto readBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readBoolean")] != -1);
		return call<R>("readBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jchar, typename... Args>
	auto readChar(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readChar")] != -1);
		return call<R>("readChar", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto readDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readDouble")] != -1);
		return call<R>("readDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto readFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFloat")] != -1);
		return call<R>("readFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLine")] != -1);
		return call<R>("readLine", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readObjectDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readObjectDelegate")] != -1);
		return call<R>("readObjectDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readUTF(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUTF")] != -1);
		return call<R>("readUTF", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedByte")] != -1);
		return call<R>("readUnsignedByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedShort")] != -1);
		return call<R>("readUnsignedShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerValidation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerValidation")] != -1);
		return call<R>("registerValidation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSender(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSender")] != -1);
		return call<R>("setSender", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setTestFVDFlag(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTestFVDFlag")] != -1);
		return scall<R>("setTestFVDFlag", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValueHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValueHandler")] != -1);
		return call<R>("setValueHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto simpleSkipObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("simpleSkipObject")] != -1);
		return call<R>("simpleSkipObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto skipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipBytes")] != -1);
		return call<R>("skipBytes", std::forward<Args>(args)...);
	}

};

#endif
