#ifndef com_sun_corba_se_impl_io_ValueHandlerImpl_HPP
#define com_sun_corba_se_impl_io_ValueHandlerImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::ValueHandlerImpl : public jObject<::com::sun::corba::se::impl::io::ValueHandlerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "ValueHandlerImpl";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("FORMAT_VERSION_PROPERTY"), //
		jField<::jshort>("kAbstractType"), //
		jField<::jshort>("kRemoteType"), //
		jField<::jshort>("kValueType"), //
	};

	template<typename F = ::java::lang::String>
	static auto FORMAT_VERSION_PROPERTY() {
		static_assert(field_signatures[jField<F>("FORMAT_VERSION_PROPERTY")] != -1);
		return sat<F>("FORMAT_VERSION_PROPERTY");
	}

	template<typename F = ::jshort>
	static auto kAbstractType() {
		static_assert(field_signatures[jField<F>("kAbstractType")] != -1);
		return sat<F>("kAbstractType");
	}

	template<typename F = ::jshort>
	static auto kRemoteType() {
		static_assert(field_signatures[jField<F>("kRemoteType")] != -1);
		return sat<F>("kRemoteType");
	}

	template<typename F = ::jshort>
	static auto kValueType() {
		static_assert(field_signatures[jField<F>("kValueType")] != -1);
		return sat<F>("kValueType");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::Class)>("createForAnyType"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getAnyClassFromType"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getClassFromType"), //
		jMethod<::java::lang::String(::java::lang::String)>("getClassName"), //
		jMethod<::java::lang::String(::java::lang::String)>("getDefinedInId"), //
		jMethod<::jbyte()>("getMaximumStreamFormatVersion"), //
		jMethod<::java::lang::String(::java::lang::Class)>("getRMIRepositoryID"), //
		jMethod<::org::omg::SendingContext::RunTime()>("getRunTimeCodeBase"), //
		jMethod<::java::lang::String(::java::lang::String)>("getSerialVersionUID"), //
		jMethod<::java::lang::String(::java::lang::String)>("getUnqualifiedName"), //
		jMethod<::jboolean(::java::lang::Class)>("isAbstractBase"), //
		jMethod<::jboolean(::java::lang::Class)>("isCustomMarshaled"), //
		jMethod<::jboolean(::java::lang::String)>("isSequence"), //
		jMethod<::java::io::Serializable(::org::omg::CORBA::portable::InputStream, ::jint, ::java::lang::Class, ::java::lang::String, ::org::omg::SendingContext::RunTime)>("readValue"), //
		jMethod<::jboolean(::java::lang::Class, ::java::lang::String)>("useFullValueDescription"), //
		jMethod<::java::io::Serializable(::java::io::Serializable)>("writeReplace"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::io::Serializable)>("writeValue"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream, ::java::io::Serializable, ::jbyte)>("writeValue"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto createForAnyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createForAnyType")] != -1);
		return call<R>("createForAnyType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getAnyClassFromType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnyClassFromType")] != -1);
		return call<R>("getAnyClassFromType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getClassFromType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassFromType")] != -1);
		return call<R>("getClassFromType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefinedInId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefinedInId")] != -1);
		return call<R>("getDefinedInId", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getMaximumStreamFormatVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumStreamFormatVersion")] != -1);
		return call<R>("getMaximumStreamFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRMIRepositoryID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRMIRepositoryID")] != -1);
		return call<R>("getRMIRepositoryID", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::SendingContext::RunTime, typename... Args>
	auto getRunTimeCodeBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRunTimeCodeBase")] != -1);
		return call<R>("getRunTimeCodeBase", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSerialVersionUID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialVersionUID")] != -1);
		return call<R>("getSerialVersionUID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getUnqualifiedName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnqualifiedName")] != -1);
		return call<R>("getUnqualifiedName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isAbstractBase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isAbstractBase")] != -1);
		return call<R>("isAbstractBase", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCustomMarshaled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCustomMarshaled")] != -1);
		return call<R>("isCustomMarshaled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSequence")] != -1);
		return call<R>("isSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto readValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readValue")] != -1);
		return call<R>("readValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useFullValueDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useFullValueDescription")] != -1);
		return call<R>("useFullValueDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto writeReplace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeReplace")] != -1);
		return call<R>("writeReplace", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeValue")] != -1);
		return call<R>("writeValue", std::forward<Args>(args)...);
	}

};

#endif
