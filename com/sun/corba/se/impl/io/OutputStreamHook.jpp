#ifndef com_sun_corba_se_impl_io_OutputStreamHook_HPP
#define com_sun_corba_se_impl_io_OutputStreamHook_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::OutputStreamHook : public jObject<::com::sun::corba::se::impl::io::OutputStreamHook, ::java::io::ObjectOutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "OutputStreamHook";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("defaultWriteObject"), //
		jMethod<::jvoid()>("defaultWriteObjectDelegate"), //
		jMethod<::jbyte()>("getStreamFormatVersion"), //
		jMethod<::java::io::ObjectOutputStream$PutField()>("putFields"), //
		jMethod<::jvoid()>("writeFields"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto defaultWriteObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultWriteObject")] != -1);
		return call<R>("defaultWriteObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto defaultWriteObjectDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultWriteObjectDelegate")] != -1);
		return call<R>("defaultWriteObjectDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getStreamFormatVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamFormatVersion")] != -1);
		return call<R>("getStreamFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectOutputStream$PutField, typename... Args>
	auto putFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putFields")] != -1);
		return call<R>("putFields", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeFields")] != -1);
		return call<R>("writeFields", std::forward<Args>(args)...);
	}

};

#endif
