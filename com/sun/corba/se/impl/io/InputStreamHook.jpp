#ifndef com_sun_corba_se_impl_io_InputStreamHook_HPP
#define com_sun_corba_se_impl_io_InputStreamHook_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::io::InputStreamHook : public jObject<::com::sun::corba::se::impl::io::InputStreamHook, ::java::io::ObjectInputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_io / "InputStreamHook";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("defaultReadObject"), //
		jMethod<::java::io::ObjectInputStream$GetField()>("readFields"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto defaultReadObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("defaultReadObject")] != -1);
		return call<R>("defaultReadObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectInputStream$GetField, typename... Args>
	auto readFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFields")] != -1);
		return call<R>("readFields", std::forward<Args>(args)...);
	}

};

#endif
