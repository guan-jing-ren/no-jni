#ifndef com_sun_corba_se_impl_oa_poa_ActiveObjectMap$Key_HPP
#define com_sun_corba_se_impl_oa_poa_ActiveObjectMap$Key_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key : public jObject<::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "ActiveObjectMap$Key";

	constexpr static Enume field_signatures{
		jField<::jbyte *>("id"), //
	};

	template<typename F = ::jbyte *>
	auto id() const {
		static_assert(field_signatures[jField<F>("id")] != -1);
		return at<F>("id");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
