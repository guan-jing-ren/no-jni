#ifndef com_sun_corba_se_impl_oa_poa_Policies_HPP
#define com_sun_corba_se_impl_oa_poa_Policies_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::Policies : public jObject<::com::sun::corba::se::impl::oa::poa::Policies, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "Policies";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::impl::oa::poa::Policies>("defaultPolicies"), //
		jField<::com::sun::corba::se::impl::oa::poa::Policies>("rootPOAPolicies"), //
	};

	template<typename F = ::com::sun::corba::se::impl::oa::poa::Policies>
	static auto defaultPolicies() {
		static_assert(field_signatures[jField<F>("defaultPolicies")] != -1);
		return sat<F>("defaultPolicies");
	}

	template<typename F = ::com::sun::corba::se::impl::oa::poa::Policies>
	static auto rootPOAPolicies() {
		static_assert(field_signatures[jField<F>("rootPOAPolicies")] != -1);
		return sat<F>("rootPOAPolicies");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("forceZeroPort"), //
		jMethod<::jint()>("getCopierId"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("get_effective_policy"), //
		jMethod<::jboolean()>("isImplicitlyActivated"), //
		jMethod<::jboolean()>("isMultipleIds"), //
		jMethod<::jboolean()>("isOrbControlledThreads"), //
		jMethod<::jboolean()>("isPersistent"), //
		jMethod<::jboolean()>("isSingleThreaded"), //
		jMethod<::jboolean()>("isSystemAssignedIds"), //
		jMethod<::jboolean()>("isTransient"), //
		jMethod<::jboolean()>("isUniqueIds"), //
		jMethod<::jboolean()>("isUserAssignedIds"), //
		jMethod<::jboolean()>("retainServants"), //
		jMethod<::jint()>("servantCachingLevel"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jboolean()>("useActiveMapOnly"), //
		jMethod<::jboolean()>("useDefaultServant"), //
		jMethod<::jboolean()>("useServantManager"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto forceZeroPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forceZeroPort")] != -1);
		return call<R>("forceZeroPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCopierId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCopierId")] != -1);
		return call<R>("getCopierId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto get_effective_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_effective_policy")] != -1);
		return call<R>("get_effective_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isImplicitlyActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isImplicitlyActivated")] != -1);
		return call<R>("isImplicitlyActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMultipleIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMultipleIds")] != -1);
		return call<R>("isMultipleIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOrbControlledThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOrbControlledThreads")] != -1);
		return call<R>("isOrbControlledThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isPersistent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPersistent")] != -1);
		return call<R>("isPersistent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSingleThreaded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSingleThreaded")] != -1);
		return call<R>("isSingleThreaded", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSystemAssignedIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSystemAssignedIds")] != -1);
		return call<R>("isSystemAssignedIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTransient(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransient")] != -1);
		return call<R>("isTransient", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUniqueIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUniqueIds")] != -1);
		return call<R>("isUniqueIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUserAssignedIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUserAssignedIds")] != -1);
		return call<R>("isUserAssignedIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto retainServants(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("retainServants")] != -1);
		return call<R>("retainServants", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto servantCachingLevel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantCachingLevel")] != -1);
		return call<R>("servantCachingLevel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useActiveMapOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useActiveMapOnly")] != -1);
		return call<R>("useActiveMapOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useDefaultServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useDefaultServant")] != -1);
		return call<R>("useDefaultServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useServantManager")] != -1);
		return call<R>("useServantManager", std::forward<Args>(args)...);
	}

};

#endif
