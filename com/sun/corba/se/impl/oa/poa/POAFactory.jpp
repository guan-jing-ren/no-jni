#ifndef com_sun_corba_se_impl_oa_poa_POAFactory_HPP
#define com_sun_corba_se_impl_oa_poa_POAFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POAFactory : public jObject<::com::sun::corba::se::impl::oa::poa::POAFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POAFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::org::omg::PortableServer::POAManager)>("addPoaManager"), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapter(::com::sun::corba::se::spi::ior::ObjectAdapterId)>("find"), //
		jMethod<::org::omg::PortableServer::portable::Delegate()>("getDelegateImpl"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getORB"), //
		jMethod<::org::omg::PortableServer::POA()>("getRootPOA"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException()>("getWrapper"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::ORB)>("init"), //
		jMethod<::org::omg::PortableServer::POA(::org::omg::PortableServer::Servant)>("lookupPOA"), //
		jMethod<::jint()>("newPOAId"), //
		jMethod<::jint()>("newPOAManagerId"), //
		jMethod<::jvoid(::org::omg::PortableServer::POA, ::org::omg::PortableServer::Servant)>("registerPOAForServant"), //
		jMethod<::jvoid()>("registerRootPOA"), //
		jMethod<::jvoid(::org::omg::PortableServer::POAManager)>("removePoaManager"), //
		jMethod<::jvoid(::jboolean)>("shutdown"), //
		jMethod<::jvoid(::org::omg::PortableServer::POA, ::org::omg::PortableServer::Servant)>("unregisterPOAForServant"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addPoaManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPoaManager")] != -1);
		return call<R>("addPoaManager", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapter, typename... Args>
	auto find(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("find")] != -1);
		return call<R>("find", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::portable::Delegate, typename... Args>
	auto getDelegateImpl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegateImpl")] != -1);
		return call<R>("getDelegateImpl", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto getRootPOA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRootPOA")] != -1);
		return call<R>("getRootPOA", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::POASystemException, typename... Args>
	auto getWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWrapper")] != -1);
		return call<R>("getWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto lookupPOA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lookupPOA")] != -1);
		return call<R>("lookupPOA", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto newPOAId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newPOAId")] != -1);
		return call<R>("newPOAId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto newPOAManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newPOAManagerId")] != -1);
		return call<R>("newPOAManagerId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerPOAForServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerPOAForServant")] != -1);
		return call<R>("registerPOAForServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerRootPOA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerRootPOA")] != -1);
		return call<R>("registerRootPOA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removePoaManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removePoaManager")] != -1);
		return call<R>("removePoaManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterPOAForServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterPOAForServant")] != -1);
		return call<R>("unregisterPOAForServant", std::forward<Args>(args)...);
	}

};

#endif
