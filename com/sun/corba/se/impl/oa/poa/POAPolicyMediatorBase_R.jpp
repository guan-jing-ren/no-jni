#ifndef com_sun_corba_se_impl_oa_poa_POAPolicyMediatorBase_R_HPP
#define com_sun_corba_se_impl_oa_poa_POAPolicyMediatorBase_R_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POAPolicyMediatorBase_R : public jObject<::com::sun::corba::se::impl::oa::poa::POAPolicyMediatorBase_R, ::com::sun::corba::se::impl::oa::poa::POAPolicyMediatorBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POAPolicyMediatorBase_R";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::Servant)>("activateObject"), //
		jMethod<::jvoid()>("clearAOM"), //
		jMethod<::org::omg::PortableServer::Servant(::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key)>("deactivateObject"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *)>("deactivateObject"), //
		jMethod<::jvoid()>("returnServant"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("servantToId"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activateObject")] != -1);
		return call<R>("activateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAOM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAOM")] != -1);
		return call<R>("clearAOM", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto deactivateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivateObject")] != -1);
		return call<R>("deactivateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto returnServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnServant")] != -1);
		return call<R>("returnServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto servantToId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantToId")] != -1);
		return call<R>("servantToId", std::forward<Args>(args)...);
	}

};

#endif
