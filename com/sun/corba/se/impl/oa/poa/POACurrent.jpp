#ifndef com_sun_corba_se_impl_oa_poa_POACurrent_HPP
#define com_sun_corba_se_impl_oa_poa_POACurrent_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POACurrent : public jObject<::com::sun::corba::se::impl::oa::poa::POACurrent, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POACurrent";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapter()>("getOA"), //
		jMethod<::jbyte *()>("getObjectId"), //
		jMethod<::java::lang::String()>("getOperation"), //
		jMethod<::org::omg::PortableServer::POA()>("get_POA"), //
		jMethod<::jbyte *()>("get_object_id"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapter, typename... Args>
	auto getOA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOA")] != -1);
		return call<R>("getOA", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getObjectId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectId")] != -1);
		return call<R>("getObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperation")] != -1);
		return call<R>("getOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto get_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_POA")] != -1);
		return call<R>("get_POA", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto get_object_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_object_id")] != -1);
		return call<R>("get_object_id", std::forward<Args>(args)...);
	}

};

#endif
