#ifndef com_sun_corba_se_impl_oa_poa_POAPolicyMediatorBase_HPP
#define com_sun_corba_se_impl_oa_poa_POAPolicyMediatorBase_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POAPolicyMediatorBase : public jObject<::com::sun::corba::se::impl::oa::poa::POAPolicyMediatorBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POAPolicyMediatorBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::jbyte *, ::java::lang::String)>("getInvocationServant"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::Policies()>("getPolicies"), //
		jMethod<::jint()>("getScid"), //
		jMethod<::jint()>("getServerId"), //
		jMethod<::jbyte *()>("newSystemId"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInvocationServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationServant")] != -1);
		return call<R>("getInvocationServant", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::poa::Policies, typename... Args>
	auto getPolicies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicies")] != -1);
		return call<R>("getPolicies", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScid")] != -1);
		return call<R>("getScid", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerId")] != -1);
		return call<R>("getServerId", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto newSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSystemId")] != -1);
		return call<R>("newSystemId", std::forward<Args>(args)...);
	}

};

#endif
