#ifndef com_sun_corba_se_impl_oa_poa_DelegateImpl_HPP
#define com_sun_corba_se_impl_oa_poa_DelegateImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::DelegateImpl : public jObject<::com::sun::corba::se::impl::oa::poa::DelegateImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "DelegateImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::impl::oa::poa::POAFactory)>(), //
		jMethod<::org::omg::PortableServer::POA(::org::omg::PortableServer::Servant)>("default_POA"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("get_interface_def"), //
		jMethod<::jboolean(::org::omg::PortableServer::Servant, ::java::lang::String)>("is_a"), //
		jMethod<::jboolean(::org::omg::PortableServer::Servant)>("non_existent"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("object_id"), //
		jMethod<::org::omg::CORBA::ORB(::org::omg::PortableServer::Servant)>("orb"), //
		jMethod<::org::omg::PortableServer::POA(::org::omg::PortableServer::Servant)>("poa"), //
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("this_object"), //
	};

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto default_POA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("default_POA")] != -1);
		return call<R>("default_POA", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto get_interface_def(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_interface_def")] != -1);
		return call<R>("get_interface_def", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto is_a(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("is_a")] != -1);
		return call<R>("is_a", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto non_existent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("non_existent")] != -1);
		return call<R>("non_existent", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto object_id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("object_id")] != -1);
		return call<R>("object_id", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	auto orb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("orb")] != -1);
		return call<R>("orb", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POA, typename... Args>
	auto poa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("poa")] != -1);
		return call<R>("poa", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto this_object(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("this_object")] != -1);
		return call<R>("this_object", std::forward<Args>(args)...);
	}

};

#endif
