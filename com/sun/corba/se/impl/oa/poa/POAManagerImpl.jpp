#ifndef com_sun_corba_se_impl_oa_poa_POAManagerImpl_HPP
#define com_sun_corba_se_impl_oa_poa_POAManagerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POAManagerImpl : public jObject<::com::sun::corba::se::impl::oa::poa::POAManagerImpl, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POAManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("activate"), //
		jMethod<::jvoid(::jboolean, ::jboolean)>("deactivate"), //
		jMethod<::jvoid(::jboolean)>("discard_requests"), //
		jMethod<::jint()>("getManagerId"), //
		jMethod<::jshort()>("getORTState"), //
		jMethod<::org::omg::PortableServer::POAManagerPackage::State()>("get_state"), //
		jMethod<::jvoid(::jboolean)>("hold_requests"), //
		jMethod<::jvoid()>("implicitActivation"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto deactivate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivate")] != -1);
		return call<R>("deactivate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto discard_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("discard_requests")] != -1);
		return call<R>("discard_requests", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManagerId")] != -1);
		return call<R>("getManagerId", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getORTState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORTState")] != -1);
		return call<R>("getORTState", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::POAManagerPackage::State, typename... Args>
	auto get_state(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_state")] != -1);
		return call<R>("get_state", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto hold_requests(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hold_requests")] != -1);
		return call<R>("hold_requests", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto implicitActivation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("implicitActivation")] != -1);
		return call<R>("implicitActivation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
