#ifndef com_sun_corba_se_impl_oa_poa_ActiveObjectMap_HPP
#define com_sun_corba_se_impl_oa_poa_ActiveObjectMap_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::ActiveObjectMap : public jObject<::com::sun::corba::se::impl::oa::poa::ActiveObjectMap, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "ActiveObjectMap";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::org::omg::PortableServer::Servant)>("contains"), //
		jMethod<::jboolean(::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key)>("containsKey"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::ActiveObjectMap(::com::sun::corba::se::impl::oa::poa::POAImpl, ::jboolean)>("create"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::AOMEntry(::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key)>("get"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key(::com::sun::corba::se::impl::oa::poa::AOMEntry)>("getKey"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key(::org::omg::PortableServer::Servant)>("getKey"), //
		jMethod<::org::omg::PortableServer::Servant(::com::sun::corba::se::impl::oa::poa::AOMEntry)>("getServant"), //
		jMethod<::jboolean(::com::sun::corba::se::impl::oa::poa::AOMEntry)>("hasMultipleIDs"), //
		jMethod<::java::util::Set()>("keySet"), //
		jMethod<::jvoid(::org::omg::PortableServer::Servant, ::com::sun::corba::se::impl::oa::poa::AOMEntry)>("putServant"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key)>("remove"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::poa::ActiveObjectMap, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::poa::AOMEntry, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::poa::ActiveObjectMap$Key, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto getServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServant")] != -1);
		return call<R>("getServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasMultipleIDs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasMultipleIDs")] != -1);
		return call<R>("hasMultipleIDs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto keySet(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("keySet")] != -1);
		return call<R>("keySet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putServant")] != -1);
		return call<R>("putServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto remove(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("remove")] != -1);
		return call<R>("remove", std::forward<Args>(args)...);
	}

};

#endif
