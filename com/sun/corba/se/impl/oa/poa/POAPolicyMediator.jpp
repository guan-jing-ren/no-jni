#ifndef com_sun_corba_se_impl_oa_poa_POAPolicyMediator_HPP
#define com_sun_corba_se_impl_oa_poa_POAPolicyMediator_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::poa::POAPolicyMediator : public jObject<::com::sun::corba::se::impl::oa::poa::POAPolicyMediator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_poa / "POAPolicyMediator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jbyte *, ::org::omg::PortableServer::Servant)>("activateObject"), //
		jMethod<::jvoid()>("clearAOM"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *)>("deactivateObject"), //
		jMethod<::jvoid()>("etherealizeAll"), //
		jMethod<::org::omg::PortableServer::Servant()>("getDefaultServant"), //
		jMethod<::java::lang::Object(::jbyte *, ::java::lang::String)>("getInvocationServant"), //
		jMethod<::com::sun::corba::se::impl::oa::poa::Policies()>("getPolicies"), //
		jMethod<::jint()>("getScid"), //
		jMethod<::org::omg::PortableServer::ServantManager()>("getServantManager"), //
		jMethod<::jint()>("getServerId"), //
		jMethod<::org::omg::PortableServer::Servant(::jbyte *)>("idToServant"), //
		jMethod<::jbyte *()>("newSystemId"), //
		jMethod<::jvoid()>("returnServant"), //
		jMethod<::jbyte *(::org::omg::PortableServer::Servant)>("servantToId"), //
		jMethod<::jvoid(::org::omg::PortableServer::Servant)>("setDefaultServant"), //
		jMethod<::jvoid(::org::omg::PortableServer::ServantManager)>("setServantManager"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activateObject")] != -1);
		return call<R>("activateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearAOM(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearAOM")] != -1);
		return call<R>("clearAOM", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto deactivateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deactivateObject")] != -1);
		return call<R>("deactivateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto etherealizeAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("etherealizeAll")] != -1);
		return call<R>("etherealizeAll", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto getDefaultServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultServant")] != -1);
		return call<R>("getDefaultServant", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getInvocationServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationServant")] != -1);
		return call<R>("getInvocationServant", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::poa::Policies, typename... Args>
	auto getPolicies(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicies")] != -1);
		return call<R>("getPolicies", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScid")] != -1);
		return call<R>("getScid", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::ServantManager, typename... Args>
	auto getServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServantManager")] != -1);
		return call<R>("getServantManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerId")] != -1);
		return call<R>("getServerId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableServer::Servant, typename... Args>
	auto idToServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("idToServant")] != -1);
		return call<R>("idToServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto newSystemId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSystemId")] != -1);
		return call<R>("newSystemId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto returnServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnServant")] != -1);
		return call<R>("returnServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto servantToId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("servantToId")] != -1);
		return call<R>("servantToId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultServant")] != -1);
		return call<R>("setDefaultServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServantManager(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServantManager")] != -1);
		return call<R>("setServantManager", std::forward<Args>(args)...);
	}

};

#endif
