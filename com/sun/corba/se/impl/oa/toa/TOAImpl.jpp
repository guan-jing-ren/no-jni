#ifndef com_sun_corba_se_impl_oa_toa_TOAImpl_HPP
#define com_sun_corba_se_impl_oa_toa_TOAImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::toa::TOAImpl : public jObject<::com::sun::corba::se::impl::oa::toa::TOAImpl, ::com::sun::corba::se::spi::oa::ObjectAdapterBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_toa / "TOAImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::impl::oa::toa::TransientObjectManager, ::java::lang::String)>(), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("connect"), //
		jMethod<::jvoid(::org::omg::CORBA::Object)>("disconnect"), //
		jMethod<::jvoid()>("enter"), //
		jMethod<::jvoid()>("exit"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("getEffectivePolicy"), //
		jMethod<::java::lang::String *(::java::lang::Object, ::jbyte *)>("getInterfaces"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::oa::OAInvocationInfo)>("getInvocationServant"), //
		jMethod<::org::omg::CORBA::Object(::jbyte *)>("getLocalServant"), //
		jMethod<::jint()>("getManagerId"), //
		jMethod<::com::sun::corba::se::spi::copyobject::ObjectCopierFactory()>("getObjectCopierFactory"), //
		jMethod<::jshort()>("getState"), //
		jMethod<::jvoid()>("returnServant"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disconnect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disconnect")] != -1);
		return call<R>("disconnect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enter")] != -1);
		return call<R>("enter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exit")] != -1);
		return call<R>("exit", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto getEffectivePolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectivePolicy")] != -1);
		return call<R>("getEffectivePolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterfaces")] != -1);
		return call<R>("getInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getInvocationServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationServant")] != -1);
		return call<R>("getInvocationServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto getLocalServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalServant")] != -1);
		return call<R>("getLocalServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManagerId")] != -1);
		return call<R>("getManagerId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::copyobject::ObjectCopierFactory, typename... Args>
	auto getObjectCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectCopierFactory")] != -1);
		return call<R>("getObjectCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto returnServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnServant")] != -1);
		return call<R>("returnServant", std::forward<Args>(args)...);
	}

};

#endif
