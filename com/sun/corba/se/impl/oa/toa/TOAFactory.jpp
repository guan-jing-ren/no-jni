#ifndef com_sun_corba_se_impl_oa_toa_TOAFactory_HPP
#define com_sun_corba_se_impl_oa_toa_TOAFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::oa::toa::TOAFactory : public jObject<::com::sun::corba::se::impl::oa::toa::TOAFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_oa_toa / "TOAFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapter(::com::sun::corba::se::spi::ior::ObjectAdapterId)>("find"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getORB"), //
		jMethod<::com::sun::corba::se::impl::oa::toa::TOA()>("getTOA"), //
		jMethod<::com::sun::corba::se::impl::oa::toa::TOA(::java::lang::String)>("getTOA"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::ORB)>("init"), //
		jMethod<::jvoid(::jboolean)>("shutdown"), //
	};

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapter, typename... Args>
	auto find(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("find")] != -1);
		return call<R>("find", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::oa::toa::TOA, typename... Args>
	auto getTOA(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTOA")] != -1);
		return call<R>("getTOA", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

};

#endif
