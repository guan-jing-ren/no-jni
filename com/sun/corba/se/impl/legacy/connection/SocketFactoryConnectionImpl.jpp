#ifndef com_sun_corba_se_impl_legacy_connection_SocketFactoryConnectionImpl_HPP
#define com_sun_corba_se_impl_legacy_connection_SocketFactoryConnectionImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::legacy::connection::SocketFactoryConnectionImpl : public jObject<::com::sun::corba::se::impl::legacy::connection::SocketFactoryConnectionImpl, ::com::sun::corba::se::impl::transport::SocketOrChannelConnectionImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_legacy_connection / "SocketFactoryConnectionImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfo, ::jboolean, ::jboolean)>(), //
		jMethod<::jvoid(::java::lang::String)>("dprint"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto dprint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dprint")] != -1);
		return call<R>("dprint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
