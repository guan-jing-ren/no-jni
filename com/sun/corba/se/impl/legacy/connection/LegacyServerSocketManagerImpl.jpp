#ifndef com_sun_corba_se_impl_legacy_connection_LegacyServerSocketManagerImpl_HPP
#define com_sun_corba_se_impl_legacy_connection_LegacyServerSocketManagerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::legacy::connection::LegacyServerSocketManagerImpl : public jObject<::com::sun::corba::se::impl::legacy::connection::LegacyServerSocketManagerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_legacy_connection / "LegacyServerSocketManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::com::sun::corba::se::spi::legacy::connection::LegacyServerSocketEndPointInfo(::java::lang::String)>("legacyGetEndpoint"), //
		jMethod<::jint(::java::lang::String)>("legacyGetPersistentServerPort"), //
		jMethod<::jint(::java::lang::String)>("legacyGetTransientOrPersistentServerPort"), //
		jMethod<::jint(::java::lang::String)>("legacyGetTransientServerPort"), //
		jMethod<::jboolean(::jint)>("legacyIsLocalServerPort"), //
	};

	template<typename R = ::com::sun::corba::se::spi::legacy::connection::LegacyServerSocketEndPointInfo, typename... Args>
	auto legacyGetEndpoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("legacyGetEndpoint")] != -1);
		return call<R>("legacyGetEndpoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto legacyGetPersistentServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("legacyGetPersistentServerPort")] != -1);
		return call<R>("legacyGetPersistentServerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto legacyGetTransientOrPersistentServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("legacyGetTransientOrPersistentServerPort")] != -1);
		return call<R>("legacyGetTransientOrPersistentServerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto legacyGetTransientServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("legacyGetTransientServerPort")] != -1);
		return call<R>("legacyGetTransientServerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto legacyIsLocalServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("legacyIsLocalServerPort")] != -1);
		return call<R>("legacyIsLocalServerPort", std::forward<Args>(args)...);
	}

};

#endif
