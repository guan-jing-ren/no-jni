#ifndef com_sun_corba_se_impl_legacy_connection_EndPointInfoImpl_HPP
#define com_sun_corba_se_impl_legacy_connection_EndPointInfoImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::legacy::connection::EndPointInfoImpl : public jObject<::com::sun::corba::se::impl::legacy::connection::EndPointInfoImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_legacy_connection / "EndPointInfoImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::jint, ::java::lang::String)>(), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::java::lang::String()>("getHostName"), //
		jMethod<::jint()>("getLocatorPort"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::jint)>("setLocatorPort"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getHostName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostName")] != -1);
		return call<R>("getHostName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocatorPort")] != -1);
		return call<R>("getLocatorPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocatorPort")] != -1);
		return call<R>("setLocatorPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
