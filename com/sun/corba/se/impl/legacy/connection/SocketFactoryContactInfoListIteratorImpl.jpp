#ifndef com_sun_corba_se_impl_legacy_connection_SocketFactoryContactInfoListIteratorImpl_HPP
#define com_sun_corba_se_impl_legacy_connection_SocketFactoryContactInfoListIteratorImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::legacy::connection::SocketFactoryContactInfoListIteratorImpl : public jObject<::com::sun::corba::se::impl::legacy::connection::SocketFactoryContactInfoListIteratorImpl, ::com::sun::corba::se::impl::transport::CorbaContactInfoListIteratorImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_legacy_connection / "SocketFactoryContactInfoListIteratorImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::transport::CorbaContactInfoList)>(), //
		jMethod<::jboolean()>("hasNext"), //
		jMethod<::java::lang::Object()>("next"), //
		jMethod<::jboolean(::com::sun::corba::se::pept::transport::ContactInfo, ::java::lang::RuntimeException)>("reportException"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto reportException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reportException")] != -1);
		return call<R>("reportException", std::forward<Args>(args)...);
	}

};

#endif
