#ifndef com_sun_corba_se_impl_orbutil_concurrent_Sync_HPP
#define com_sun_corba_se_impl_orbutil_concurrent_Sync_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::concurrent::Sync : public jObject<::com::sun::corba::se::impl::orbutil::concurrent::Sync, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_concurrent / "Sync";

	constexpr static Enume field_signatures{
		jField<::jlong>("ONE_CENTURY"), //
		jField<::jlong>("ONE_DAY"), //
		jField<::jlong>("ONE_HOUR"), //
		jField<::jlong>("ONE_MINUTE"), //
		jField<::jlong>("ONE_SECOND"), //
		jField<::jlong>("ONE_WEEK"), //
		jField<::jlong>("ONE_YEAR"), //
	};

	template<typename F = ::jlong>
	static auto ONE_CENTURY() {
		static_assert(field_signatures[jField<F>("ONE_CENTURY")] != -1);
		return sat<F>("ONE_CENTURY");
	}

	template<typename F = ::jlong>
	static auto ONE_DAY() {
		static_assert(field_signatures[jField<F>("ONE_DAY")] != -1);
		return sat<F>("ONE_DAY");
	}

	template<typename F = ::jlong>
	static auto ONE_HOUR() {
		static_assert(field_signatures[jField<F>("ONE_HOUR")] != -1);
		return sat<F>("ONE_HOUR");
	}

	template<typename F = ::jlong>
	static auto ONE_MINUTE() {
		static_assert(field_signatures[jField<F>("ONE_MINUTE")] != -1);
		return sat<F>("ONE_MINUTE");
	}

	template<typename F = ::jlong>
	static auto ONE_SECOND() {
		static_assert(field_signatures[jField<F>("ONE_SECOND")] != -1);
		return sat<F>("ONE_SECOND");
	}

	template<typename F = ::jlong>
	static auto ONE_WEEK() {
		static_assert(field_signatures[jField<F>("ONE_WEEK")] != -1);
		return sat<F>("ONE_WEEK");
	}

	template<typename F = ::jlong>
	static auto ONE_YEAR() {
		static_assert(field_signatures[jField<F>("ONE_YEAR")] != -1);
		return sat<F>("ONE_YEAR");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("acquire"), //
		jMethod<::jboolean(::jlong)>("attempt"), //
		jMethod<::jvoid()>("release"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acquire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquire")] != -1);
		return call<R>("acquire", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto attempt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attempt")] != -1);
		return call<R>("attempt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("release")] != -1);
		return call<R>("release", std::forward<Args>(args)...);
	}

};

#endif
