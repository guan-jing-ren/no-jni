#ifndef com_sun_corba_se_impl_orbutil_concurrent_DebugMutex_HPP
#define com_sun_corba_se_impl_orbutil_concurrent_DebugMutex_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::concurrent::DebugMutex : public jObject<::com::sun::corba::se::impl::orbutil::concurrent::DebugMutex, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_concurrent / "DebugMutex";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("acquire"), //
		jMethod<::jboolean(::jlong)>("attempt"), //
		jMethod<::jvoid()>("release"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto acquire(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acquire")] != -1);
		return call<R>("acquire", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto attempt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attempt")] != -1);
		return call<R>("attempt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto release(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("release")] != -1);
		return call<R>("release", std::forward<Args>(args)...);
	}

};

#endif
