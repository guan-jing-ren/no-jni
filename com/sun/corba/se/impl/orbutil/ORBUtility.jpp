#ifndef com_sun_corba_se_impl_orbutil_ORBUtility_HPP
#define com_sun_corba_se_impl_orbutil_ORBUtility_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::ORBUtility : public jObject<::com::sun::corba::se::impl::orbutil::ORBUtility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "ORBUtility";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jbyte *, ::jint)>("bytesToInt"), //
		jMethod<::java::lang::String(::java::lang::String)>("classNameOf"), //
		jMethod<::jint(::java::lang::String, ::java::lang::String)>("compareVersion"), //
		jMethod<::jint(::jint *, ::jint *)>("compareVersion"), //
		jMethod<::java::lang::String *(::java::lang::String *, ::java::lang::String *)>("concatenateStringArrays"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR(::com::sun::corba::se::spi::orb::ORB, ::org::omg::CORBA::Object)>("connectAndGetIOR"), //
		jMethod<::javax::rmi::CORBA::ValueHandler()>("createValueHandler"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("dprint"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String, ::java::lang::Throwable)>("dprint"), //
		jMethod<::jvoid(::java::lang::String)>("dprint"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("dprint"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("dprintTrace"), //
		jMethod<::org::omg::CORBA::SystemException(::org::omg::CORBA::Any)>("extractSystemException"), //
		jMethod<::java::lang::String(::java::lang::Class)>("getClassSecurityInfo"), //
		jMethod<::jbyte(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IOR)>("getEncodingVersion"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR(::org::omg::CORBA::Object)>("getIOR"), //
		jMethod<::jbyte()>("getMaxStreamFormatVersion"), //
		jMethod<::java::lang::String(::java::lang::Thread)>("getThreadName"), //
		jMethod<::jint(::jchar)>("hexOf"), //
		jMethod<::jvoid(::org::omg::CORBA::SystemException, ::org::omg::CORBA::Any)>("insertSystemException"), //
		jMethod<::jvoid(::jint, ::jbyte *, ::jint)>("intToBytes"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::orb::ORB)>("isForeignORB"), //
		jMethod<::jboolean(::jchar)>("isPrintable"), //
		jMethod<::jboolean(::java::lang::String)>("isSystemException"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaClientDelegate(::com::sun::corba::se::spi::ior::IOR)>("makeClientDelegate"), //
		jMethod<::org::omg::CORBA::Object(::com::sun::corba::se::spi::ior::IOR)>("makeObjectReference"), //
		jMethod<::java::lang::String(::com::sun::corba::se::spi::protocol::CorbaMessageMediator)>("operationNameAndRequestId"), //
		jMethod<::jint *(::java::lang::String)>("parseVersion"), //
		jMethod<::org::omg::CORBA::SystemException(::org::omg::CORBA::portable::InputStream)>("readSystemException"), //
		jMethod<::java::lang::String(::java::lang::String)>("repositoryIdOf"), //
		jMethod<::jvoid(::java::lang::String)>("throwNotSerializableForCorba"), //
		jMethod<::jvoid(::org::omg::CORBA::SystemException, ::org::omg::CORBA::portable::OutputStream)>("writeSystemException"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto bytesToInt(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("bytesToInt")] != -1);
		return scall<R>("bytesToInt", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto classNameOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classNameOf")] != -1);
		return scall<R>("classNameOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto compareVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareVersion")] != -1);
		return scall<R>("compareVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto concatenateStringArrays(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("concatenateStringArrays")] != -1);
		return scall<R>("concatenateStringArrays", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	static auto connectAndGetIOR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectAndGetIOR")] != -1);
		return scall<R>("connectAndGetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::ValueHandler, typename... Args>
	static auto createValueHandler(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createValueHandler")] != -1);
		return scall<R>("createValueHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto dprint(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dprint")] != -1);
		return scall<R>("dprint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto dprintTrace(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dprintTrace")] != -1);
		return scall<R>("dprintTrace", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::SystemException, typename... Args>
	static auto extractSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("extractSystemException")] != -1);
		return scall<R>("extractSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getClassSecurityInfo(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassSecurityInfo")] != -1);
		return scall<R>("getClassSecurityInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	static auto getEncodingVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodingVersion")] != -1);
		return scall<R>("getEncodingVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	static auto getIOR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return scall<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	static auto getMaxStreamFormatVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxStreamFormatVersion")] != -1);
		return scall<R>("getMaxStreamFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getThreadName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadName")] != -1);
		return scall<R>("getThreadName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto hexOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hexOf")] != -1);
		return scall<R>("hexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto insertSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertSystemException")] != -1);
		return scall<R>("insertSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto intToBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intToBytes")] != -1);
		return scall<R>("intToBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isForeignORB(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isForeignORB")] != -1);
		return scall<R>("isForeignORB", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isPrintable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isPrintable")] != -1);
		return scall<R>("isPrintable", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSystemException")] != -1);
		return scall<R>("isSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaClientDelegate, typename... Args>
	static auto makeClientDelegate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeClientDelegate")] != -1);
		return scall<R>("makeClientDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	static auto makeObjectReference(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectReference")] != -1);
		return scall<R>("makeObjectReference", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto operationNameAndRequestId(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("operationNameAndRequestId")] != -1);
		return scall<R>("operationNameAndRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	static auto parseVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseVersion")] != -1);
		return scall<R>("parseVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::SystemException, typename... Args>
	static auto readSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readSystemException")] != -1);
		return scall<R>("readSystemException", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto repositoryIdOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("repositoryIdOf")] != -1);
		return scall<R>("repositoryIdOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto throwNotSerializableForCorba(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("throwNotSerializableForCorba")] != -1);
		return scall<R>("throwNotSerializableForCorba", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeSystemException(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeSystemException")] != -1);
		return scall<R>("writeSystemException", std::forward<Args>(args)...);
	}

};

#endif
