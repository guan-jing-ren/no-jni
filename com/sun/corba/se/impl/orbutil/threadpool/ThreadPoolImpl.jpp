#ifndef com_sun_corba_se_impl_orbutil_threadpool_ThreadPoolImpl_HPP
#define com_sun_corba_se_impl_orbutil_threadpool_ThreadPoolImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl : public jObject<::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_threadpool / "ThreadPoolImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::jlong, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::ThreadGroup, ::java::lang::String)>(), //
		jMethod<::jlong()>("averageWorkCompletionTime"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("currentNumberOfThreads"), //
		jMethod<::jlong()>("currentProcessedCount"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::WorkQueue()>("getAnyWorkQueue"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::WorkQueue(::jint)>("getWorkQueue"), //
		jMethod<::jlong()>("idleTimeoutForThreads"), //
		jMethod<::jint()>("maximumNumberOfThreads"), //
		jMethod<::jint()>("minimumNumberOfThreads"), //
		jMethod<::jint()>("numberOfAvailableThreads"), //
		jMethod<::jint()>("numberOfBusyThreads"), //
		jMethod<::jint()>("numberOfWorkQueues"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto averageWorkCompletionTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averageWorkCompletionTime")] != -1);
		return call<R>("averageWorkCompletionTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto currentNumberOfThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentNumberOfThreads")] != -1);
		return call<R>("currentNumberOfThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto currentProcessedCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("currentProcessedCount")] != -1);
		return call<R>("currentProcessedCount", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::WorkQueue, typename... Args>
	auto getAnyWorkQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAnyWorkQueue")] != -1);
		return call<R>("getAnyWorkQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::WorkQueue, typename... Args>
	auto getWorkQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWorkQueue")] != -1);
		return call<R>("getWorkQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto idleTimeoutForThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("idleTimeoutForThreads")] != -1);
		return call<R>("idleTimeoutForThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto maximumNumberOfThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maximumNumberOfThreads")] != -1);
		return call<R>("maximumNumberOfThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto minimumNumberOfThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumNumberOfThreads")] != -1);
		return call<R>("minimumNumberOfThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto numberOfAvailableThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberOfAvailableThreads")] != -1);
		return call<R>("numberOfAvailableThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto numberOfBusyThreads(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberOfBusyThreads")] != -1);
		return call<R>("numberOfBusyThreads", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto numberOfWorkQueues(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("numberOfWorkQueues")] != -1);
		return call<R>("numberOfWorkQueues", std::forward<Args>(args)...);
	}

};

#endif
