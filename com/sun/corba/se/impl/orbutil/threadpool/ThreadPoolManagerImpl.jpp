#ifndef com_sun_corba_se_impl_orbutil_threadpool_ThreadPoolManagerImpl_HPP
#define com_sun_corba_se_impl_orbutil_threadpool_ThreadPoolManagerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolManagerImpl : public jObject<::com::sun::corba::se::impl::orbutil::threadpool::ThreadPoolManagerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_threadpool / "ThreadPoolManagerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool()>("getDefaultThreadPool"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool(::jint)>("getThreadPool"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool(::java::lang::String)>("getThreadPool"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser(::jint)>("getThreadPoolChooser"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser(::java::lang::String)>("getThreadPoolChooser"), //
		jMethod<::jint(::java::lang::String)>("getThreadPoolChooserNumericId"), //
		jMethod<::jint(::java::lang::String)>("getThreadPoolNumericId"), //
		jMethod<::java::lang::String(::jint)>("getThreadPoolStringId"), //
		jMethod<::jvoid(::java::lang::String, ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser)>("setThreadPoolChooser"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool, typename... Args>
	auto getDefaultThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultThreadPool")] != -1);
		return call<R>("getDefaultThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool, typename... Args>
	auto getThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPool")] != -1);
		return call<R>("getThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser, typename... Args>
	auto getThreadPoolChooser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolChooser")] != -1);
		return call<R>("getThreadPoolChooser", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThreadPoolChooserNumericId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolChooserNumericId")] != -1);
		return call<R>("getThreadPoolChooserNumericId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThreadPoolNumericId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolNumericId")] != -1);
		return call<R>("getThreadPoolNumericId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getThreadPoolStringId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolStringId")] != -1);
		return call<R>("getThreadPoolStringId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreadPoolChooser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreadPoolChooser")] != -1);
		return call<R>("setThreadPoolChooser", std::forward<Args>(args)...);
	}

};

#endif
