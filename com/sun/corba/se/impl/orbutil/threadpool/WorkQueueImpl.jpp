#ifndef com_sun_corba_se_impl_orbutil_threadpool_WorkQueueImpl_HPP
#define com_sun_corba_se_impl_orbutil_threadpool_WorkQueueImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl : public jObject<::com::sun::corba::se::impl::orbutil::threadpool::WorkQueueImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_threadpool / "WorkQueueImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool, ::java::lang::String)>(), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::threadpool::Work)>("addWork"), //
		jMethod<::jlong()>("averageTimeInQueue"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool()>("getThreadPool"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool)>("setThreadPool"), //
		jMethod<::jlong()>("totalWorkItemsAdded"), //
		jMethod<::jint()>("workItemsInQueue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addWork")] != -1);
		return call<R>("addWork", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto averageTimeInQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("averageTimeInQueue")] != -1);
		return call<R>("averageTimeInQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool, typename... Args>
	auto getThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPool")] != -1);
		return call<R>("getThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setThreadPool")] != -1);
		return call<R>("setThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto totalWorkItemsAdded(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("totalWorkItemsAdded")] != -1);
		return call<R>("totalWorkItemsAdded", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto workItemsInQueue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("workItemsInQueue")] != -1);
		return call<R>("workItemsInQueue", std::forward<Args>(args)...);
	}

};

#endif
