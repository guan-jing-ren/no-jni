#ifndef com_sun_corba_se_impl_orbutil_CacheTable_HPP
#define com_sun_corba_se_impl_orbutil_CacheTable_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::CacheTable : public jObject<::com::sun::corba::se::impl::orbutil::CacheTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "CacheTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::jboolean)>(), //
		jMethod<::jboolean(::java::lang::Object)>("containsKey"), //
		jMethod<::jboolean(::jint)>("containsOrderedVal"), //
		jMethod<::jboolean(::jint)>("containsVal"), //
		jMethod<::jvoid()>("done"), //
		jMethod<::java::lang::Object(::jint)>("getKey"), //
		jMethod<::jint(::java::lang::Object)>("getVal"), //
		jMethod<::jvoid(::java::lang::Object, ::jint)>("put"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsOrderedVal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsOrderedVal")] != -1);
		return call<R>("containsOrderedVal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsVal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsVal")] != -1);
		return call<R>("containsVal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto done(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("done")] != -1);
		return call<R>("done", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKey")] != -1);
		return call<R>("getKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVal")] != -1);
		return call<R>("getVal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

};

#endif
