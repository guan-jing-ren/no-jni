#ifndef com_sun_corba_se_impl_orbutil_RepositoryIdUtility_HPP
#define com_sun_corba_se_impl_orbutil_RepositoryIdUtility_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::RepositoryIdUtility : public jObject<::com::sun::corba::se::impl::orbutil::RepositoryIdUtility, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "RepositoryIdUtility";

	constexpr static Enume field_signatures{
		jField<::jint>("NO_TYPE_INFO"), //
		jField<::jint>("PARTIAL_LIST_TYPE_INFO"), //
		jField<::jint>("SINGLE_REP_TYPE_INFO"), //
	};

	template<typename F = ::jint>
	static auto NO_TYPE_INFO() {
		static_assert(field_signatures[jField<F>("NO_TYPE_INFO")] != -1);
		return sat<F>("NO_TYPE_INFO");
	}

	template<typename F = ::jint>
	static auto PARTIAL_LIST_TYPE_INFO() {
		static_assert(field_signatures[jField<F>("PARTIAL_LIST_TYPE_INFO")] != -1);
		return sat<F>("PARTIAL_LIST_TYPE_INFO");
	}

	template<typename F = ::jint>
	static auto SINGLE_REP_TYPE_INFO() {
		static_assert(field_signatures[jField<F>("SINGLE_REP_TYPE_INFO")] != -1);
		return sat<F>("SINGLE_REP_TYPE_INFO");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getCodeBaseRMIChunkedId"), //
		jMethod<::jint()>("getCodeBaseRMIChunkedNoRepStrId"), //
		jMethod<::jint()>("getCodeBaseRMIUnchunkedId"), //
		jMethod<::jint()>("getCodeBaseRMIUnchunkedNoRepStrId"), //
		jMethod<::jint()>("getStandardRMIChunkedId"), //
		jMethod<::jint()>("getStandardRMIChunkedNoRepStrId"), //
		jMethod<::jint()>("getStandardRMIUnchunkedId"), //
		jMethod<::jint()>("getStandardRMIUnchunkedNoRepStrId"), //
		jMethod<::jint(::jint)>("getTypeInfo"), //
		jMethod<::jboolean(::jint)>("isChunkedEncoding"), //
		jMethod<::jboolean(::jint)>("isCodeBasePresent"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIChunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIChunkedId")] != -1);
		return call<R>("getCodeBaseRMIChunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIChunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIChunkedNoRepStrId")] != -1);
		return call<R>("getCodeBaseRMIChunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIUnchunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIUnchunkedId")] != -1);
		return call<R>("getCodeBaseRMIUnchunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIUnchunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIUnchunkedNoRepStrId")] != -1);
		return call<R>("getCodeBaseRMIUnchunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIChunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIChunkedId")] != -1);
		return call<R>("getStandardRMIChunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIChunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIChunkedNoRepStrId")] != -1);
		return call<R>("getStandardRMIChunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIUnchunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIUnchunkedId")] != -1);
		return call<R>("getStandardRMIUnchunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIUnchunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIUnchunkedNoRepStrId")] != -1);
		return call<R>("getStandardRMIUnchunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeInfo")] != -1);
		return call<R>("getTypeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isChunkedEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isChunkedEncoding")] != -1);
		return call<R>("isChunkedEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCodeBasePresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCodeBasePresent")] != -1);
		return call<R>("isCodeBasePresent", std::forward<Args>(args)...);
	}

};

#endif
