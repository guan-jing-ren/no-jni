#ifndef com_sun_corba_se_impl_orbutil_ObjectStreamClassUtil_1_3_HPP
#define com_sun_corba_se_impl_orbutil_ObjectStreamClassUtil_1_3_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::ObjectStreamClassUtil_1_3 : public jObject<::com::sun::corba::se::impl::orbutil::ObjectStreamClassUtil_1_3, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "ObjectStreamClassUtil_1_3";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jlong(::java::lang::Class)>("computeSerialVersionUID"), //
		jMethod<::jlong(::jboolean, ::java::lang::Class)>("computeStructuralUID"), //
	};

	template<typename R = ::jlong, typename... Args>
	static auto computeSerialVersionUID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSerialVersionUID")] != -1);
		return scall<R>("computeSerialVersionUID", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto computeStructuralUID(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeStructuralUID")] != -1);
		return scall<R>("computeStructuralUID", std::forward<Args>(args)...);
	}

};

#endif
