#ifndef com_sun_corba_se_impl_orbutil_StackImpl_HPP
#define com_sun_corba_se_impl_orbutil_StackImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::StackImpl : public jObject<::com::sun::corba::se::impl::orbutil::StackImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "StackImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean()>("empty"), //
		jMethod<::java::lang::Object()>("peek"), //
		jMethod<::java::lang::Object()>("pop"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("push"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto empty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("empty")] != -1);
		return call<R>("empty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto peek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("peek")] != -1);
		return call<R>("peek", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto pop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("pop")] != -1);
		return call<R>("pop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto push(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("push")] != -1);
		return call<R>("push", std::forward<Args>(args)...);
	}

};

#endif
