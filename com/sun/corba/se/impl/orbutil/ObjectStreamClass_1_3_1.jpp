#ifndef com_sun_corba_se_impl_orbutil_ObjectStreamClass_1_3_1_HPP
#define com_sun_corba_se_impl_orbutil_ObjectStreamClass_1_3_1_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::ObjectStreamClass_1_3_1 : public jObject<::com::sun::corba::se::impl::orbutil::ObjectStreamClass_1_3_1, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "ObjectStreamClass_1_3_1";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::impl::orbutil::ObjectStreamField *>("NO_FIELDS"), //
		jField<::jlong>("kDefaultUID"), //
	};

	template<typename F = ::com::sun::corba::se::impl::orbutil::ObjectStreamField *>
	static auto NO_FIELDS() {
		static_assert(field_signatures[jField<F>("NO_FIELDS")] != -1);
		return sat<F>("NO_FIELDS");
	}

	template<typename F = ::jlong>
	static auto kDefaultUID() {
		static_assert(field_signatures[jField<F>("kDefaultUID")] != -1);
		return sat<F>("kDefaultUID");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Class()>("forClass"), //
		jMethod<::jlong()>("getActualSerialVersionUID"), //
		jMethod<::jlong(::java::lang::Class)>("getActualSerialVersionUID"), //
		jMethod<::java::lang::String()>("getActualSerialVersionUIDStr"), //
		jMethod<::com::sun::corba::se::impl::orbutil::ObjectStreamField(::java::lang::String)>("getField"), //
		jMethod<::com::sun::corba::se::impl::orbutil::ObjectStreamField *()>("getFields"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jlong()>("getSerialVersionUID"), //
		jMethod<::jlong(::java::lang::Class)>("getSerialVersionUID"), //
		jMethod<::java::lang::String()>("getSerialVersionUIDStr"), //
		jMethod<::jboolean(::org::omg::CORBA::ValueMember)>("hasField"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("readResolve"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::io::Serializable(::java::io::Serializable)>("writeReplace"), //
	};

	template<typename R = ::java::lang::Class, typename... Args>
	auto forClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forClass")] != -1);
		return call<R>("forClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getActualSerialVersionUID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualSerialVersionUID")] != -1);
		return call<R>("getActualSerialVersionUID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getActualSerialVersionUIDStr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActualSerialVersionUIDStr")] != -1);
		return call<R>("getActualSerialVersionUIDStr", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orbutil::ObjectStreamField, typename... Args>
	auto getField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getField")] != -1);
		return call<R>("getField", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orbutil::ObjectStreamField *, typename... Args>
	auto getFields(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFields")] != -1);
		return call<R>("getFields", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSerialVersionUID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialVersionUID")] != -1);
		return call<R>("getSerialVersionUID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getSerialVersionUIDStr(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSerialVersionUIDStr")] != -1);
		return call<R>("getSerialVersionUIDStr", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasField(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasField")] != -1);
		return call<R>("hasField", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto readResolve(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readResolve")] != -1);
		return call<R>("readResolve", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::Serializable, typename... Args>
	auto writeReplace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeReplace")] != -1);
		return call<R>("writeReplace", std::forward<Args>(args)...);
	}

};

#endif
