#ifndef com_sun_corba_se_impl_orbutil_ORBConstants_HPP
#define com_sun_corba_se_impl_orbutil_ORBConstants_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::ORBConstants : public jObject<::com::sun::corba::se::impl::orbutil::ORBConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "ORBConstants";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("ACCEPTOR_CLASS_PREFIX_PROPERTY"), //
		jField<::java::lang::String>("ACCEPTOR_SOCKET_TYPE_PROPERTY"), //
		jField<::java::lang::String>("ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY"), //
		jField<::java::lang::String>("ACTIVATED_PROPERTY"), //
		jField<::jshort>("ADDR_DISP_HANDLE_ALL"), //
		jField<::jshort>("ADDR_DISP_IOR"), //
		jField<::jshort>("ADDR_DISP_OBJKEY"), //
		jField<::jshort>("ADDR_DISP_PROFILE"), //
		jField<::java::lang::String>("ALLOW_LOCAL_OPTIMIZATION"), //
		jField<::java::lang::String>("ALWAYS_SEND_CODESET_CTX_PROPERTY"), //
		jField<::java::lang::String>("BAD_SERVER_ID_HANDLER_CLASS_PROPERTY"), //
		jField<::java::lang::String>("CHAR_CODESETS"), //
		jField<::java::lang::String>("CODEC_FACTORY_NAME"), //
		jField<::java::lang::String>("CONNECTION_SOCKET_TYPE_PROPERTY"), //
		jField<::java::lang::String>("CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY"), //
		jField<::java::lang::String>("CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY"), //
		jField<::jint>("CONTAINER_ID_SERVICE_CONTEXT"), //
		jField<::jint>("COPY_OBJECT_POLICY"), //
		jField<::java::lang::String>("DB_DIR_PROPERTY"), //
		jField<::java::lang::String>("DB_PROPERTY"), //
		jField<::java::lang::String>("DEBUG_PROPERTY"), //
		jField<::jint>("DEFAULT_ACTIVATION_PORT"), //
		jField<::jboolean>("DEFAULT_ALWAYS_SEND_CODESET_CTX"), //
		jField<::java::lang::String>("DEFAULT_DB_DIR"), //
		jField<::java::lang::String>("DEFAULT_DB_NAME"), //
		jField<::jint>("DEFAULT_GIOP_11_BUFFMGR"), //
		jField<::jint>("DEFAULT_GIOP_12_BUFFMGR"), //
		jField<::jint>("DEFAULT_INACTIVITY_TIMEOUT"), //
		jField<::jint>("DEFAULT_INITIAL_PORT"), //
		jField<::java::lang::String>("DEFAULT_INIT_REF_PROPERTY"), //
		jField<::jint>("DEFAULT_INS_GIOP_MAJOR_VERSION"), //
		jField<::jint>("DEFAULT_INS_GIOP_MINOR_VERSION"), //
		jField<::java::lang::String>("DEFAULT_INS_HOST"), //
		jField<::jint>("DEFAULT_INS_PORT"), //
		jField<::jint>("DEFAULT_SCID"), //
		jField<::jint>("DEFAULT_SERVER_POLLING_TIME"), //
		jField<::jint>("DEFAULT_SERVER_STARTUP_DELAY"), //
		jField<::jboolean>("DEFAULT_USE_BYTE_ORDER_MARKERS"), //
		jField<::jboolean>("DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS"), //
		jField<::java::lang::String>("DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY"), //
		jField<::java::lang::String>("DYNAMIC_STUB_FACTORY_FACTORY_CLASS"), //
		jField<::java::lang::String>("DYN_ANY_FACTORY_NAME"), //
		jField<::java::lang::String>("ENABLE_JAVA_SERIALIZATION_PROPERTY"), //
		jField<::jint>("FIRST_POA_SCID"), //
		jField<::java::lang::String>("GIOP_11_BUFFMGR"), //
		jField<::java::lang::String>("GIOP_12_BUFFMGR"), //
		jField<::jint>("GIOP_12_MSG_BODY_ALIGNMENT"), //
		jField<::java::lang::String>("GIOP_BUFFER_SIZE"), //
		jField<::jint>("GIOP_DEFAULT_BUFFER_SIZE"), //
		jField<::jint>("GIOP_DEFAULT_FRAGMENT_SIZE"), //
		jField<::jint>("GIOP_FRAGMENT_DIVISOR"), //
		jField<::jint>("GIOP_FRAGMENT_MINIMUM_SIZE"), //
		jField<::java::lang::String>("GIOP_FRAGMENT_SIZE"), //
		jField<::java::lang::String>("GIOP_TARGET_ADDRESSING"), //
		jField<::java::lang::String>("GIOP_VERSION"), //
		jField<::java::lang::String>("HIGH_WATER_MARK_PROPERTY"), //
		jField<::java::lang::String>("IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY"), //
		jField<::jint>("IISC_PERSISTENT_SCID"), //
		jField<::jint>("IISC_TRANSIENT_SCID"), //
		jField<::java::lang::String>("INITIAL_HOST_PROPERTY"), //
		jField<::java::lang::String>("INITIAL_NAME_SERVICE_NAME"), //
		jField<::java::lang::String>("INITIAL_ORB_DB"), //
		jField<::java::lang::String>("INITIAL_PORT_PROPERTY"), //
		jField<::java::lang::String>("INITIAL_SERVICES_PROPERTY"), //
		jField<::java::lang::String>("IOR_TO_SOCKET_INFO_CLASS_PROPERTY"), //
		jField<::java::lang::String>("JTS_CLASS_PROPERTY"), //
		jField<::java::lang::String>("LEGACY_SOCKET_FACTORY_CLASS_PROPERTY"), //
		jField<::jint>("LEGACY_SUN_NOT_SERIALIZABLE"), //
		jField<::java::lang::String>("LISTEN_ON_ALL_INTERFACES"), //
		jField<::java::lang::String>("LISTEN_SOCKET_PROPERTY"), //
		jField<::java::lang::String>("LOG_LEVEL_PROPERTY"), //
		jField<::java::lang::String>("LOG_RESOURCE_FILE"), //
		jField<::java::lang::String>("LOW_WATER_MARK_PROPERTY"), //
		jField<::jint>("MAJORNUMBER_SUPPORTED"), //
		jField<::jint>("MAX_POA_SCID"), //
		jField<::jint>("MINORNUMBERMAX"), //
		jField<::jint>("MINSC_PERSISTENT_SCID"), //
		jField<::jint>("MINSC_TRANSIENT_SCID"), //
		jField<::java::lang::String>("NAME_SERVICE_SERVER_ID"), //
		jField<::jint>("NEO_FIRST_SERVICE_CONTEXT"), //
		jField<::java::lang::String>("NUMBER_TO_RECLAIM_PROPERTY"), //
		jField<::jint>("NUM_NEO_SERVICE_CONTEXTS"), //
		jField<::java::lang::String>("OLD_ORB_ID_PROPERTY"), //
		jField<::java::lang::String>("ORBD_PORT_PROPERTY"), //
		jField<::java::lang::String>("ORBID_DB_FILE_NAME"), //
		jField<::java::lang::String>("ORBID_DIR_BASE"), //
		jField<::java::lang::String>("ORB_ID_PROPERTY"), //
		jField<::java::lang::String>("ORB_INIT_REF_PROPERTY"), //
		jField<::java::lang::String>("ORB_SERVER_ID_PROPERTY"), //
		jField<::java::lang::String>("ORG_OMG_CORBA_PREFIX"), //
		jField<::java::lang::String>("ORG_OMG_PREFIX"), //
		jField<::jint>("PERSISTENT"), //
		jField<::java::lang::String>("PERSISTENT_NAME_SERVICE_NAME"), //
		jField<::jint>("PERSISTENT_SCID"), //
		jField<::java::lang::String>("PERSISTENT_SERVER_PORT_PROPERTY"), //
		jField<::java::lang::String>("PI_CURRENT_NAME"), //
		jField<::java::lang::String>("PI_ORB_INITIALIZER_CLASS_PREFIX"), //
		jField<::java::lang::String>("POA_CURRENT_NAME"), //
		jField<::jint>("REQUEST_PARTITIONING_MAX_THREAD_POOL_ID"), //
		jField<::jint>("REQUEST_PARTITIONING_MIN_THREAD_POOL_ID"), //
		jField<::jint>("REQUEST_PARTITIONING_POLICY"), //
		jField<::jint>("RI_NAMESERVICE_PORT"), //
		jField<::java::lang::String>("ROOT_POA_NAME"), //
		jField<::jint>("SC_PERSISTENT_SCID"), //
		jField<::jint>("SC_TRANSIENT_SCID"), //
		jField<::jint>("SERVANT_CACHING_POLICY"), //
		jField<::java::lang::String>("SERVER_ACTIVATOR_NAME"), //
		jField<::java::lang::String>("SERVER_DEF_VERIFY_PROPERTY"), //
		jField<::java::lang::String>("SERVER_HOST_PROPERTY"), //
		jField<::java::lang::String>("SERVER_ID_PROPERTY"), //
		jField<::java::lang::String>("SERVER_LOCATOR_NAME"), //
		jField<::java::lang::String>("SERVER_LOG_DIR"), //
		jField<::java::lang::String>("SERVER_NAME_PROPERTY"), //
		jField<::java::lang::String>("SERVER_POLLING_TIME"), //
		jField<::java::lang::String>("SERVER_PORT_PROPERTY"), //
		jField<::java::lang::String>("SERVER_REPOSITORY_NAME"), //
		jField<::java::lang::String>("SERVER_STARTUP_DELAY"), //
		jField<::java::lang::String>("SOCKET"), //
		jField<::java::lang::String>("SOCKETCHANNEL"), //
		jField<::java::lang::String>("SOCKET_FACTORY_CLASS_PROPERTY"), //
		jField<::jbyte>("STREAM_FORMAT_VERSION_1"), //
		jField<::jbyte>("STREAM_FORMAT_VERSION_2"), //
		jField<::java::lang::String>("STRINGIFY_PREFIX"), //
		jField<::java::lang::String>("SUN_LC_PREFIX"), //
		jField<::java::lang::String>("SUN_LC_VERSION_PREFIX"), //
		jField<::java::lang::String>("SUN_PREFIX"), //
		jField<::jint>("SUN_SERVICE_CONTEXT_ID_BASE"), //
		jField<::jint>("SUN_TAGGED_COMPONENT_ID_BASE"), //
		jField<::jint>("TAG_CONTAINER_ID"), //
		jField<::jint>("TAG_JAVA_SERIALIZATION_ID"), //
		jField<::jint>("TAG_ORB_VERSION"), //
		jField<::jint>("TAG_REQUEST_PARTITIONING_ID"), //
		jField<::java::lang::String>("THREADPOOL_DEFAULT_NAME"), //
		jField<::jint>("TOA_SCID"), //
		jField<::java::lang::String>("TRANSACTION_CURRENT_NAME"), //
		jField<::jint>("TRANSIENT"), //
		jField<::java::lang::String>("TRANSIENT_NAME_SERVICE_NAME"), //
		jField<::jint>("TRANSIENT_SCID"), //
		jField<::jint>("TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT"), //
		jField<::jint>("TRANSPORT_TCP_INITIAL_TIME_TO_WAIT"), //
		jField<::jint>("TRANSPORT_TCP_MAX_TIME_TO_WAIT"), //
		jField<::java::lang::String>("TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY"), //
		jField<::jint>("TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR"), //
		jField<::java::lang::String>("USE_BOMS"), //
		jField<::java::lang::String>("USE_BOMS_IN_ENCAPS"), //
		jField<::java::lang::String>("USE_DYNAMIC_STUB_PROPERTY"), //
		jField<::java::lang::String>("USE_NIO_SELECT_TO_WAIT_PROPERTY"), //
		jField<::java::lang::String>("USE_REP_ID"), //
		jField<::java::lang::String>("WCHAR_CODESETS"), //
		jField<::java::lang::String>("WORKQUEUE_DEFAULT_NAME"), //
		jField<::jint>("ZERO_PORT_POLICY"), //
	};

	template<typename F = ::java::lang::String>
	static auto ACCEPTOR_CLASS_PREFIX_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCEPTOR_CLASS_PREFIX_PROPERTY")] != -1);
		return sat<F>("ACCEPTOR_CLASS_PREFIX_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCEPTOR_SOCKET_TYPE_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCEPTOR_SOCKET_TYPE_PROPERTY")] != -1);
		return sat<F>("ACCEPTOR_SOCKET_TYPE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY")] != -1);
		return sat<F>("ACCEPTOR_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ACTIVATED_PROPERTY() {
		static_assert(field_signatures[jField<F>("ACTIVATED_PROPERTY")] != -1);
		return sat<F>("ACTIVATED_PROPERTY");
	}

	template<typename F = ::jshort>
	static auto ADDR_DISP_HANDLE_ALL() {
		static_assert(field_signatures[jField<F>("ADDR_DISP_HANDLE_ALL")] != -1);
		return sat<F>("ADDR_DISP_HANDLE_ALL");
	}

	template<typename F = ::jshort>
	static auto ADDR_DISP_IOR() {
		static_assert(field_signatures[jField<F>("ADDR_DISP_IOR")] != -1);
		return sat<F>("ADDR_DISP_IOR");
	}

	template<typename F = ::jshort>
	static auto ADDR_DISP_OBJKEY() {
		static_assert(field_signatures[jField<F>("ADDR_DISP_OBJKEY")] != -1);
		return sat<F>("ADDR_DISP_OBJKEY");
	}

	template<typename F = ::jshort>
	static auto ADDR_DISP_PROFILE() {
		static_assert(field_signatures[jField<F>("ADDR_DISP_PROFILE")] != -1);
		return sat<F>("ADDR_DISP_PROFILE");
	}

	template<typename F = ::java::lang::String>
	static auto ALLOW_LOCAL_OPTIMIZATION() {
		static_assert(field_signatures[jField<F>("ALLOW_LOCAL_OPTIMIZATION")] != -1);
		return sat<F>("ALLOW_LOCAL_OPTIMIZATION");
	}

	template<typename F = ::java::lang::String>
	static auto ALWAYS_SEND_CODESET_CTX_PROPERTY() {
		static_assert(field_signatures[jField<F>("ALWAYS_SEND_CODESET_CTX_PROPERTY")] != -1);
		return sat<F>("ALWAYS_SEND_CODESET_CTX_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto BAD_SERVER_ID_HANDLER_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("BAD_SERVER_ID_HANDLER_CLASS_PROPERTY")] != -1);
		return sat<F>("BAD_SERVER_ID_HANDLER_CLASS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CHAR_CODESETS() {
		static_assert(field_signatures[jField<F>("CHAR_CODESETS")] != -1);
		return sat<F>("CHAR_CODESETS");
	}

	template<typename F = ::java::lang::String>
	static auto CODEC_FACTORY_NAME() {
		static_assert(field_signatures[jField<F>("CODEC_FACTORY_NAME")] != -1);
		return sat<F>("CODEC_FACTORY_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_SOCKET_TYPE_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONNECTION_SOCKET_TYPE_PROPERTY")] != -1);
		return sat<F>("CONNECTION_SOCKET_TYPE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY")] != -1);
		return sat<F>("CONNECTION_SOCKET_USE_WORKER_THREAD_FOR_EVENT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY")] != -1);
		return sat<F>("CONTACT_INFO_LIST_FACTORY_CLASS_PROPERTY");
	}

	template<typename F = ::jint>
	static auto CONTAINER_ID_SERVICE_CONTEXT() {
		static_assert(field_signatures[jField<F>("CONTAINER_ID_SERVICE_CONTEXT")] != -1);
		return sat<F>("CONTAINER_ID_SERVICE_CONTEXT");
	}

	template<typename F = ::jint>
	static auto COPY_OBJECT_POLICY() {
		static_assert(field_signatures[jField<F>("COPY_OBJECT_POLICY")] != -1);
		return sat<F>("COPY_OBJECT_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto DB_DIR_PROPERTY() {
		static_assert(field_signatures[jField<F>("DB_DIR_PROPERTY")] != -1);
		return sat<F>("DB_DIR_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DB_PROPERTY() {
		static_assert(field_signatures[jField<F>("DB_PROPERTY")] != -1);
		return sat<F>("DB_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DEBUG_PROPERTY() {
		static_assert(field_signatures[jField<F>("DEBUG_PROPERTY")] != -1);
		return sat<F>("DEBUG_PROPERTY");
	}

	template<typename F = ::jint>
	static auto DEFAULT_ACTIVATION_PORT() {
		static_assert(field_signatures[jField<F>("DEFAULT_ACTIVATION_PORT")] != -1);
		return sat<F>("DEFAULT_ACTIVATION_PORT");
	}

	template<typename F = ::jboolean>
	static auto DEFAULT_ALWAYS_SEND_CODESET_CTX() {
		static_assert(field_signatures[jField<F>("DEFAULT_ALWAYS_SEND_CODESET_CTX")] != -1);
		return sat<F>("DEFAULT_ALWAYS_SEND_CODESET_CTX");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_DB_DIR() {
		static_assert(field_signatures[jField<F>("DEFAULT_DB_DIR")] != -1);
		return sat<F>("DEFAULT_DB_DIR");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_DB_NAME() {
		static_assert(field_signatures[jField<F>("DEFAULT_DB_NAME")] != -1);
		return sat<F>("DEFAULT_DB_NAME");
	}

	template<typename F = ::jint>
	static auto DEFAULT_GIOP_11_BUFFMGR() {
		static_assert(field_signatures[jField<F>("DEFAULT_GIOP_11_BUFFMGR")] != -1);
		return sat<F>("DEFAULT_GIOP_11_BUFFMGR");
	}

	template<typename F = ::jint>
	static auto DEFAULT_GIOP_12_BUFFMGR() {
		static_assert(field_signatures[jField<F>("DEFAULT_GIOP_12_BUFFMGR")] != -1);
		return sat<F>("DEFAULT_GIOP_12_BUFFMGR");
	}

	template<typename F = ::jint>
	static auto DEFAULT_INACTIVITY_TIMEOUT() {
		static_assert(field_signatures[jField<F>("DEFAULT_INACTIVITY_TIMEOUT")] != -1);
		return sat<F>("DEFAULT_INACTIVITY_TIMEOUT");
	}

	template<typename F = ::jint>
	static auto DEFAULT_INITIAL_PORT() {
		static_assert(field_signatures[jField<F>("DEFAULT_INITIAL_PORT")] != -1);
		return sat<F>("DEFAULT_INITIAL_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_INIT_REF_PROPERTY() {
		static_assert(field_signatures[jField<F>("DEFAULT_INIT_REF_PROPERTY")] != -1);
		return sat<F>("DEFAULT_INIT_REF_PROPERTY");
	}

	template<typename F = ::jint>
	static auto DEFAULT_INS_GIOP_MAJOR_VERSION() {
		static_assert(field_signatures[jField<F>("DEFAULT_INS_GIOP_MAJOR_VERSION")] != -1);
		return sat<F>("DEFAULT_INS_GIOP_MAJOR_VERSION");
	}

	template<typename F = ::jint>
	static auto DEFAULT_INS_GIOP_MINOR_VERSION() {
		static_assert(field_signatures[jField<F>("DEFAULT_INS_GIOP_MINOR_VERSION")] != -1);
		return sat<F>("DEFAULT_INS_GIOP_MINOR_VERSION");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_INS_HOST() {
		static_assert(field_signatures[jField<F>("DEFAULT_INS_HOST")] != -1);
		return sat<F>("DEFAULT_INS_HOST");
	}

	template<typename F = ::jint>
	static auto DEFAULT_INS_PORT() {
		static_assert(field_signatures[jField<F>("DEFAULT_INS_PORT")] != -1);
		return sat<F>("DEFAULT_INS_PORT");
	}

	template<typename F = ::jint>
	static auto DEFAULT_SCID() {
		static_assert(field_signatures[jField<F>("DEFAULT_SCID")] != -1);
		return sat<F>("DEFAULT_SCID");
	}

	template<typename F = ::jint>
	static auto DEFAULT_SERVER_POLLING_TIME() {
		static_assert(field_signatures[jField<F>("DEFAULT_SERVER_POLLING_TIME")] != -1);
		return sat<F>("DEFAULT_SERVER_POLLING_TIME");
	}

	template<typename F = ::jint>
	static auto DEFAULT_SERVER_STARTUP_DELAY() {
		static_assert(field_signatures[jField<F>("DEFAULT_SERVER_STARTUP_DELAY")] != -1);
		return sat<F>("DEFAULT_SERVER_STARTUP_DELAY");
	}

	template<typename F = ::jboolean>
	static auto DEFAULT_USE_BYTE_ORDER_MARKERS() {
		static_assert(field_signatures[jField<F>("DEFAULT_USE_BYTE_ORDER_MARKERS")] != -1);
		return sat<F>("DEFAULT_USE_BYTE_ORDER_MARKERS");
	}

	template<typename F = ::jboolean>
	static auto DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS() {
		static_assert(field_signatures[jField<F>("DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS")] != -1);
		return sat<F>("DEFAULT_USE_BYTE_ORDER_MARKERS_IN_ENCAPS");
	}

	template<typename F = ::java::lang::String>
	static auto DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY() {
		static_assert(field_signatures[jField<F>("DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY")] != -1);
		return sat<F>("DISABLE_DIRECT_BYTE_BUFFER_USE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto DYNAMIC_STUB_FACTORY_FACTORY_CLASS() {
		static_assert(field_signatures[jField<F>("DYNAMIC_STUB_FACTORY_FACTORY_CLASS")] != -1);
		return sat<F>("DYNAMIC_STUB_FACTORY_FACTORY_CLASS");
	}

	template<typename F = ::java::lang::String>
	static auto DYN_ANY_FACTORY_NAME() {
		static_assert(field_signatures[jField<F>("DYN_ANY_FACTORY_NAME")] != -1);
		return sat<F>("DYN_ANY_FACTORY_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto ENABLE_JAVA_SERIALIZATION_PROPERTY() {
		static_assert(field_signatures[jField<F>("ENABLE_JAVA_SERIALIZATION_PROPERTY")] != -1);
		return sat<F>("ENABLE_JAVA_SERIALIZATION_PROPERTY");
	}

	template<typename F = ::jint>
	static auto FIRST_POA_SCID() {
		static_assert(field_signatures[jField<F>("FIRST_POA_SCID")] != -1);
		return sat<F>("FIRST_POA_SCID");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_11_BUFFMGR() {
		static_assert(field_signatures[jField<F>("GIOP_11_BUFFMGR")] != -1);
		return sat<F>("GIOP_11_BUFFMGR");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_12_BUFFMGR() {
		static_assert(field_signatures[jField<F>("GIOP_12_BUFFMGR")] != -1);
		return sat<F>("GIOP_12_BUFFMGR");
	}

	template<typename F = ::jint>
	static auto GIOP_12_MSG_BODY_ALIGNMENT() {
		static_assert(field_signatures[jField<F>("GIOP_12_MSG_BODY_ALIGNMENT")] != -1);
		return sat<F>("GIOP_12_MSG_BODY_ALIGNMENT");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_BUFFER_SIZE() {
		static_assert(field_signatures[jField<F>("GIOP_BUFFER_SIZE")] != -1);
		return sat<F>("GIOP_BUFFER_SIZE");
	}

	template<typename F = ::jint>
	static auto GIOP_DEFAULT_BUFFER_SIZE() {
		static_assert(field_signatures[jField<F>("GIOP_DEFAULT_BUFFER_SIZE")] != -1);
		return sat<F>("GIOP_DEFAULT_BUFFER_SIZE");
	}

	template<typename F = ::jint>
	static auto GIOP_DEFAULT_FRAGMENT_SIZE() {
		static_assert(field_signatures[jField<F>("GIOP_DEFAULT_FRAGMENT_SIZE")] != -1);
		return sat<F>("GIOP_DEFAULT_FRAGMENT_SIZE");
	}

	template<typename F = ::jint>
	static auto GIOP_FRAGMENT_DIVISOR() {
		static_assert(field_signatures[jField<F>("GIOP_FRAGMENT_DIVISOR")] != -1);
		return sat<F>("GIOP_FRAGMENT_DIVISOR");
	}

	template<typename F = ::jint>
	static auto GIOP_FRAGMENT_MINIMUM_SIZE() {
		static_assert(field_signatures[jField<F>("GIOP_FRAGMENT_MINIMUM_SIZE")] != -1);
		return sat<F>("GIOP_FRAGMENT_MINIMUM_SIZE");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_FRAGMENT_SIZE() {
		static_assert(field_signatures[jField<F>("GIOP_FRAGMENT_SIZE")] != -1);
		return sat<F>("GIOP_FRAGMENT_SIZE");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_TARGET_ADDRESSING() {
		static_assert(field_signatures[jField<F>("GIOP_TARGET_ADDRESSING")] != -1);
		return sat<F>("GIOP_TARGET_ADDRESSING");
	}

	template<typename F = ::java::lang::String>
	static auto GIOP_VERSION() {
		static_assert(field_signatures[jField<F>("GIOP_VERSION")] != -1);
		return sat<F>("GIOP_VERSION");
	}

	template<typename F = ::java::lang::String>
	static auto HIGH_WATER_MARK_PROPERTY() {
		static_assert(field_signatures[jField<F>("HIGH_WATER_MARK_PROPERTY")] != -1);
		return sat<F>("HIGH_WATER_MARK_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY")] != -1);
		return sat<F>("IIOP_PRIMARY_TO_CONTACT_INFO_CLASS_PROPERTY");
	}

	template<typename F = ::jint>
	static auto IISC_PERSISTENT_SCID() {
		static_assert(field_signatures[jField<F>("IISC_PERSISTENT_SCID")] != -1);
		return sat<F>("IISC_PERSISTENT_SCID");
	}

	template<typename F = ::jint>
	static auto IISC_TRANSIENT_SCID() {
		static_assert(field_signatures[jField<F>("IISC_TRANSIENT_SCID")] != -1);
		return sat<F>("IISC_TRANSIENT_SCID");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_HOST_PROPERTY() {
		static_assert(field_signatures[jField<F>("INITIAL_HOST_PROPERTY")] != -1);
		return sat<F>("INITIAL_HOST_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_NAME_SERVICE_NAME() {
		static_assert(field_signatures[jField<F>("INITIAL_NAME_SERVICE_NAME")] != -1);
		return sat<F>("INITIAL_NAME_SERVICE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_ORB_DB() {
		static_assert(field_signatures[jField<F>("INITIAL_ORB_DB")] != -1);
		return sat<F>("INITIAL_ORB_DB");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_PORT_PROPERTY() {
		static_assert(field_signatures[jField<F>("INITIAL_PORT_PROPERTY")] != -1);
		return sat<F>("INITIAL_PORT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto INITIAL_SERVICES_PROPERTY() {
		static_assert(field_signatures[jField<F>("INITIAL_SERVICES_PROPERTY")] != -1);
		return sat<F>("INITIAL_SERVICES_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto IOR_TO_SOCKET_INFO_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("IOR_TO_SOCKET_INFO_CLASS_PROPERTY")] != -1);
		return sat<F>("IOR_TO_SOCKET_INFO_CLASS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto JTS_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("JTS_CLASS_PROPERTY")] != -1);
		return sat<F>("JTS_CLASS_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LEGACY_SOCKET_FACTORY_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("LEGACY_SOCKET_FACTORY_CLASS_PROPERTY")] != -1);
		return sat<F>("LEGACY_SOCKET_FACTORY_CLASS_PROPERTY");
	}

	template<typename F = ::jint>
	static auto LEGACY_SUN_NOT_SERIALIZABLE() {
		static_assert(field_signatures[jField<F>("LEGACY_SUN_NOT_SERIALIZABLE")] != -1);
		return sat<F>("LEGACY_SUN_NOT_SERIALIZABLE");
	}

	template<typename F = ::java::lang::String>
	static auto LISTEN_ON_ALL_INTERFACES() {
		static_assert(field_signatures[jField<F>("LISTEN_ON_ALL_INTERFACES")] != -1);
		return sat<F>("LISTEN_ON_ALL_INTERFACES");
	}

	template<typename F = ::java::lang::String>
	static auto LISTEN_SOCKET_PROPERTY() {
		static_assert(field_signatures[jField<F>("LISTEN_SOCKET_PROPERTY")] != -1);
		return sat<F>("LISTEN_SOCKET_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LOG_LEVEL_PROPERTY() {
		static_assert(field_signatures[jField<F>("LOG_LEVEL_PROPERTY")] != -1);
		return sat<F>("LOG_LEVEL_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto LOG_RESOURCE_FILE() {
		static_assert(field_signatures[jField<F>("LOG_RESOURCE_FILE")] != -1);
		return sat<F>("LOG_RESOURCE_FILE");
	}

	template<typename F = ::java::lang::String>
	static auto LOW_WATER_MARK_PROPERTY() {
		static_assert(field_signatures[jField<F>("LOW_WATER_MARK_PROPERTY")] != -1);
		return sat<F>("LOW_WATER_MARK_PROPERTY");
	}

	template<typename F = ::jint>
	static auto MAJORNUMBER_SUPPORTED() {
		static_assert(field_signatures[jField<F>("MAJORNUMBER_SUPPORTED")] != -1);
		return sat<F>("MAJORNUMBER_SUPPORTED");
	}

	template<typename F = ::jint>
	static auto MAX_POA_SCID() {
		static_assert(field_signatures[jField<F>("MAX_POA_SCID")] != -1);
		return sat<F>("MAX_POA_SCID");
	}

	template<typename F = ::jint>
	static auto MINORNUMBERMAX() {
		static_assert(field_signatures[jField<F>("MINORNUMBERMAX")] != -1);
		return sat<F>("MINORNUMBERMAX");
	}

	template<typename F = ::jint>
	static auto MINSC_PERSISTENT_SCID() {
		static_assert(field_signatures[jField<F>("MINSC_PERSISTENT_SCID")] != -1);
		return sat<F>("MINSC_PERSISTENT_SCID");
	}

	template<typename F = ::jint>
	static auto MINSC_TRANSIENT_SCID() {
		static_assert(field_signatures[jField<F>("MINSC_TRANSIENT_SCID")] != -1);
		return sat<F>("MINSC_TRANSIENT_SCID");
	}

	template<typename F = ::java::lang::String>
	static auto NAME_SERVICE_SERVER_ID() {
		static_assert(field_signatures[jField<F>("NAME_SERVICE_SERVER_ID")] != -1);
		return sat<F>("NAME_SERVICE_SERVER_ID");
	}

	template<typename F = ::jint>
	static auto NEO_FIRST_SERVICE_CONTEXT() {
		static_assert(field_signatures[jField<F>("NEO_FIRST_SERVICE_CONTEXT")] != -1);
		return sat<F>("NEO_FIRST_SERVICE_CONTEXT");
	}

	template<typename F = ::java::lang::String>
	static auto NUMBER_TO_RECLAIM_PROPERTY() {
		static_assert(field_signatures[jField<F>("NUMBER_TO_RECLAIM_PROPERTY")] != -1);
		return sat<F>("NUMBER_TO_RECLAIM_PROPERTY");
	}

	template<typename F = ::jint>
	static auto NUM_NEO_SERVICE_CONTEXTS() {
		static_assert(field_signatures[jField<F>("NUM_NEO_SERVICE_CONTEXTS")] != -1);
		return sat<F>("NUM_NEO_SERVICE_CONTEXTS");
	}

	template<typename F = ::java::lang::String>
	static auto OLD_ORB_ID_PROPERTY() {
		static_assert(field_signatures[jField<F>("OLD_ORB_ID_PROPERTY")] != -1);
		return sat<F>("OLD_ORB_ID_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD_PORT_PROPERTY() {
		static_assert(field_signatures[jField<F>("ORBD_PORT_PROPERTY")] != -1);
		return sat<F>("ORBD_PORT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORBID_DB_FILE_NAME() {
		static_assert(field_signatures[jField<F>("ORBID_DB_FILE_NAME")] != -1);
		return sat<F>("ORBID_DB_FILE_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto ORBID_DIR_BASE() {
		static_assert(field_signatures[jField<F>("ORBID_DIR_BASE")] != -1);
		return sat<F>("ORBID_DIR_BASE");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_ID_PROPERTY() {
		static_assert(field_signatures[jField<F>("ORB_ID_PROPERTY")] != -1);
		return sat<F>("ORB_ID_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_INIT_REF_PROPERTY() {
		static_assert(field_signatures[jField<F>("ORB_INIT_REF_PROPERTY")] != -1);
		return sat<F>("ORB_INIT_REF_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_SERVER_ID_PROPERTY() {
		static_assert(field_signatures[jField<F>("ORB_SERVER_ID_PROPERTY")] != -1);
		return sat<F>("ORB_SERVER_ID_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto ORG_OMG_CORBA_PREFIX() {
		static_assert(field_signatures[jField<F>("ORG_OMG_CORBA_PREFIX")] != -1);
		return sat<F>("ORG_OMG_CORBA_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto ORG_OMG_PREFIX() {
		static_assert(field_signatures[jField<F>("ORG_OMG_PREFIX")] != -1);
		return sat<F>("ORG_OMG_PREFIX");
	}

	template<typename F = ::jint>
	static auto PERSISTENT() {
		static_assert(field_signatures[jField<F>("PERSISTENT")] != -1);
		return sat<F>("PERSISTENT");
	}

	template<typename F = ::java::lang::String>
	static auto PERSISTENT_NAME_SERVICE_NAME() {
		static_assert(field_signatures[jField<F>("PERSISTENT_NAME_SERVICE_NAME")] != -1);
		return sat<F>("PERSISTENT_NAME_SERVICE_NAME");
	}

	template<typename F = ::jint>
	static auto PERSISTENT_SCID() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SCID")] != -1);
		return sat<F>("PERSISTENT_SCID");
	}

	template<typename F = ::java::lang::String>
	static auto PERSISTENT_SERVER_PORT_PROPERTY() {
		static_assert(field_signatures[jField<F>("PERSISTENT_SERVER_PORT_PROPERTY")] != -1);
		return sat<F>("PERSISTENT_SERVER_PORT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto PI_CURRENT_NAME() {
		static_assert(field_signatures[jField<F>("PI_CURRENT_NAME")] != -1);
		return sat<F>("PI_CURRENT_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto PI_ORB_INITIALIZER_CLASS_PREFIX() {
		static_assert(field_signatures[jField<F>("PI_ORB_INITIALIZER_CLASS_PREFIX")] != -1);
		return sat<F>("PI_ORB_INITIALIZER_CLASS_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto POA_CURRENT_NAME() {
		static_assert(field_signatures[jField<F>("POA_CURRENT_NAME")] != -1);
		return sat<F>("POA_CURRENT_NAME");
	}

	template<typename F = ::jint>
	static auto REQUEST_PARTITIONING_MAX_THREAD_POOL_ID() {
		static_assert(field_signatures[jField<F>("REQUEST_PARTITIONING_MAX_THREAD_POOL_ID")] != -1);
		return sat<F>("REQUEST_PARTITIONING_MAX_THREAD_POOL_ID");
	}

	template<typename F = ::jint>
	static auto REQUEST_PARTITIONING_MIN_THREAD_POOL_ID() {
		static_assert(field_signatures[jField<F>("REQUEST_PARTITIONING_MIN_THREAD_POOL_ID")] != -1);
		return sat<F>("REQUEST_PARTITIONING_MIN_THREAD_POOL_ID");
	}

	template<typename F = ::jint>
	static auto REQUEST_PARTITIONING_POLICY() {
		static_assert(field_signatures[jField<F>("REQUEST_PARTITIONING_POLICY")] != -1);
		return sat<F>("REQUEST_PARTITIONING_POLICY");
	}

	template<typename F = ::jint>
	static auto RI_NAMESERVICE_PORT() {
		static_assert(field_signatures[jField<F>("RI_NAMESERVICE_PORT")] != -1);
		return sat<F>("RI_NAMESERVICE_PORT");
	}

	template<typename F = ::java::lang::String>
	static auto ROOT_POA_NAME() {
		static_assert(field_signatures[jField<F>("ROOT_POA_NAME")] != -1);
		return sat<F>("ROOT_POA_NAME");
	}

	template<typename F = ::jint>
	static auto SC_PERSISTENT_SCID() {
		static_assert(field_signatures[jField<F>("SC_PERSISTENT_SCID")] != -1);
		return sat<F>("SC_PERSISTENT_SCID");
	}

	template<typename F = ::jint>
	static auto SC_TRANSIENT_SCID() {
		static_assert(field_signatures[jField<F>("SC_TRANSIENT_SCID")] != -1);
		return sat<F>("SC_TRANSIENT_SCID");
	}

	template<typename F = ::jint>
	static auto SERVANT_CACHING_POLICY() {
		static_assert(field_signatures[jField<F>("SERVANT_CACHING_POLICY")] != -1);
		return sat<F>("SERVANT_CACHING_POLICY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_ACTIVATOR_NAME() {
		static_assert(field_signatures[jField<F>("SERVER_ACTIVATOR_NAME")] != -1);
		return sat<F>("SERVER_ACTIVATOR_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_DEF_VERIFY_PROPERTY() {
		static_assert(field_signatures[jField<F>("SERVER_DEF_VERIFY_PROPERTY")] != -1);
		return sat<F>("SERVER_DEF_VERIFY_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_HOST_PROPERTY() {
		static_assert(field_signatures[jField<F>("SERVER_HOST_PROPERTY")] != -1);
		return sat<F>("SERVER_HOST_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_ID_PROPERTY() {
		static_assert(field_signatures[jField<F>("SERVER_ID_PROPERTY")] != -1);
		return sat<F>("SERVER_ID_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_LOCATOR_NAME() {
		static_assert(field_signatures[jField<F>("SERVER_LOCATOR_NAME")] != -1);
		return sat<F>("SERVER_LOCATOR_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_LOG_DIR() {
		static_assert(field_signatures[jField<F>("SERVER_LOG_DIR")] != -1);
		return sat<F>("SERVER_LOG_DIR");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_NAME_PROPERTY() {
		static_assert(field_signatures[jField<F>("SERVER_NAME_PROPERTY")] != -1);
		return sat<F>("SERVER_NAME_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_POLLING_TIME() {
		static_assert(field_signatures[jField<F>("SERVER_POLLING_TIME")] != -1);
		return sat<F>("SERVER_POLLING_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_PORT_PROPERTY() {
		static_assert(field_signatures[jField<F>("SERVER_PORT_PROPERTY")] != -1);
		return sat<F>("SERVER_PORT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_REPOSITORY_NAME() {
		static_assert(field_signatures[jField<F>("SERVER_REPOSITORY_NAME")] != -1);
		return sat<F>("SERVER_REPOSITORY_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_STARTUP_DELAY() {
		static_assert(field_signatures[jField<F>("SERVER_STARTUP_DELAY")] != -1);
		return sat<F>("SERVER_STARTUP_DELAY");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET() {
		static_assert(field_signatures[jField<F>("SOCKET")] != -1);
		return sat<F>("SOCKET");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKETCHANNEL() {
		static_assert(field_signatures[jField<F>("SOCKETCHANNEL")] != -1);
		return sat<F>("SOCKETCHANNEL");
	}

	template<typename F = ::java::lang::String>
	static auto SOCKET_FACTORY_CLASS_PROPERTY() {
		static_assert(field_signatures[jField<F>("SOCKET_FACTORY_CLASS_PROPERTY")] != -1);
		return sat<F>("SOCKET_FACTORY_CLASS_PROPERTY");
	}

	template<typename F = ::jbyte>
	static auto STREAM_FORMAT_VERSION_1() {
		static_assert(field_signatures[jField<F>("STREAM_FORMAT_VERSION_1")] != -1);
		return sat<F>("STREAM_FORMAT_VERSION_1");
	}

	template<typename F = ::jbyte>
	static auto STREAM_FORMAT_VERSION_2() {
		static_assert(field_signatures[jField<F>("STREAM_FORMAT_VERSION_2")] != -1);
		return sat<F>("STREAM_FORMAT_VERSION_2");
	}

	template<typename F = ::java::lang::String>
	static auto STRINGIFY_PREFIX() {
		static_assert(field_signatures[jField<F>("STRINGIFY_PREFIX")] != -1);
		return sat<F>("STRINGIFY_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto SUN_LC_PREFIX() {
		static_assert(field_signatures[jField<F>("SUN_LC_PREFIX")] != -1);
		return sat<F>("SUN_LC_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto SUN_LC_VERSION_PREFIX() {
		static_assert(field_signatures[jField<F>("SUN_LC_VERSION_PREFIX")] != -1);
		return sat<F>("SUN_LC_VERSION_PREFIX");
	}

	template<typename F = ::java::lang::String>
	static auto SUN_PREFIX() {
		static_assert(field_signatures[jField<F>("SUN_PREFIX")] != -1);
		return sat<F>("SUN_PREFIX");
	}

	template<typename F = ::jint>
	static auto SUN_SERVICE_CONTEXT_ID_BASE() {
		static_assert(field_signatures[jField<F>("SUN_SERVICE_CONTEXT_ID_BASE")] != -1);
		return sat<F>("SUN_SERVICE_CONTEXT_ID_BASE");
	}

	template<typename F = ::jint>
	static auto SUN_TAGGED_COMPONENT_ID_BASE() {
		static_assert(field_signatures[jField<F>("SUN_TAGGED_COMPONENT_ID_BASE")] != -1);
		return sat<F>("SUN_TAGGED_COMPONENT_ID_BASE");
	}

	template<typename F = ::jint>
	static auto TAG_CONTAINER_ID() {
		static_assert(field_signatures[jField<F>("TAG_CONTAINER_ID")] != -1);
		return sat<F>("TAG_CONTAINER_ID");
	}

	template<typename F = ::jint>
	static auto TAG_JAVA_SERIALIZATION_ID() {
		static_assert(field_signatures[jField<F>("TAG_JAVA_SERIALIZATION_ID")] != -1);
		return sat<F>("TAG_JAVA_SERIALIZATION_ID");
	}

	template<typename F = ::jint>
	static auto TAG_ORB_VERSION() {
		static_assert(field_signatures[jField<F>("TAG_ORB_VERSION")] != -1);
		return sat<F>("TAG_ORB_VERSION");
	}

	template<typename F = ::jint>
	static auto TAG_REQUEST_PARTITIONING_ID() {
		static_assert(field_signatures[jField<F>("TAG_REQUEST_PARTITIONING_ID")] != -1);
		return sat<F>("TAG_REQUEST_PARTITIONING_ID");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_DEFAULT_NAME() {
		static_assert(field_signatures[jField<F>("THREADPOOL_DEFAULT_NAME")] != -1);
		return sat<F>("THREADPOOL_DEFAULT_NAME");
	}

	template<typename F = ::jint>
	static auto TOA_SCID() {
		static_assert(field_signatures[jField<F>("TOA_SCID")] != -1);
		return sat<F>("TOA_SCID");
	}

	template<typename F = ::java::lang::String>
	static auto TRANSACTION_CURRENT_NAME() {
		static_assert(field_signatures[jField<F>("TRANSACTION_CURRENT_NAME")] != -1);
		return sat<F>("TRANSACTION_CURRENT_NAME");
	}

	template<typename F = ::jint>
	static auto TRANSIENT() {
		static_assert(field_signatures[jField<F>("TRANSIENT")] != -1);
		return sat<F>("TRANSIENT");
	}

	template<typename F = ::java::lang::String>
	static auto TRANSIENT_NAME_SERVICE_NAME() {
		static_assert(field_signatures[jField<F>("TRANSIENT_NAME_SERVICE_NAME")] != -1);
		return sat<F>("TRANSIENT_NAME_SERVICE_NAME");
	}

	template<typename F = ::jint>
	static auto TRANSIENT_SCID() {
		static_assert(field_signatures[jField<F>("TRANSIENT_SCID")] != -1);
		return sat<F>("TRANSIENT_SCID");
	}

	template<typename F = ::jint>
	static auto TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT() {
		static_assert(field_signatures[jField<F>("TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT")] != -1);
		return sat<F>("TRANSPORT_TCP_GIOP_HEADER_MAX_TIME_TO_WAIT");
	}

	template<typename F = ::jint>
	static auto TRANSPORT_TCP_INITIAL_TIME_TO_WAIT() {
		static_assert(field_signatures[jField<F>("TRANSPORT_TCP_INITIAL_TIME_TO_WAIT")] != -1);
		return sat<F>("TRANSPORT_TCP_INITIAL_TIME_TO_WAIT");
	}

	template<typename F = ::jint>
	static auto TRANSPORT_TCP_MAX_TIME_TO_WAIT() {
		static_assert(field_signatures[jField<F>("TRANSPORT_TCP_MAX_TIME_TO_WAIT")] != -1);
		return sat<F>("TRANSPORT_TCP_MAX_TIME_TO_WAIT");
	}

	template<typename F = ::java::lang::String>
	static auto TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY() {
		static_assert(field_signatures[jField<F>("TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY")] != -1);
		return sat<F>("TRANSPORT_TCP_READ_TIMEOUTS_PROPERTY");
	}

	template<typename F = ::jint>
	static auto TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR() {
		static_assert(field_signatures[jField<F>("TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR")] != -1);
		return sat<F>("TRANSPORT_TCP_TIME_TO_WAIT_BACKOFF_FACTOR");
	}

	template<typename F = ::java::lang::String>
	static auto USE_BOMS() {
		static_assert(field_signatures[jField<F>("USE_BOMS")] != -1);
		return sat<F>("USE_BOMS");
	}

	template<typename F = ::java::lang::String>
	static auto USE_BOMS_IN_ENCAPS() {
		static_assert(field_signatures[jField<F>("USE_BOMS_IN_ENCAPS")] != -1);
		return sat<F>("USE_BOMS_IN_ENCAPS");
	}

	template<typename F = ::java::lang::String>
	static auto USE_DYNAMIC_STUB_PROPERTY() {
		static_assert(field_signatures[jField<F>("USE_DYNAMIC_STUB_PROPERTY")] != -1);
		return sat<F>("USE_DYNAMIC_STUB_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto USE_NIO_SELECT_TO_WAIT_PROPERTY() {
		static_assert(field_signatures[jField<F>("USE_NIO_SELECT_TO_WAIT_PROPERTY")] != -1);
		return sat<F>("USE_NIO_SELECT_TO_WAIT_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto USE_REP_ID() {
		static_assert(field_signatures[jField<F>("USE_REP_ID")] != -1);
		return sat<F>("USE_REP_ID");
	}

	template<typename F = ::java::lang::String>
	static auto WCHAR_CODESETS() {
		static_assert(field_signatures[jField<F>("WCHAR_CODESETS")] != -1);
		return sat<F>("WCHAR_CODESETS");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_DEFAULT_NAME() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_DEFAULT_NAME")] != -1);
		return sat<F>("WORKQUEUE_DEFAULT_NAME");
	}

	template<typename F = ::jint>
	static auto ZERO_PORT_POLICY() {
		static_assert(field_signatures[jField<F>("ZERO_PORT_POLICY")] != -1);
		return sat<F>("ZERO_PORT_POLICY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::jint)>("isTransient"), //
		jMethod<::jint(::jint)>("makePersistent"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto isTransient(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTransient")] != -1);
		return scall<R>("isTransient", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto makePersistent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePersistent")] != -1);
		return scall<R>("makePersistent", std::forward<Args>(args)...);
	}

};

#endif
