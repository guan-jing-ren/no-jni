#ifndef com_sun_corba_se_impl_orbutil_LogKeywords_HPP
#define com_sun_corba_se_impl_orbutil_LogKeywords_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::LogKeywords : public jObject<::com::sun::corba::se::impl::orbutil::LogKeywords, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "LogKeywords";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("LIFECYCLE_CREATE"), //
		jField<::java::lang::String>("LIFECYCLE_CREATE_FAILURE"), //
		jField<::java::lang::String>("LIFECYCLE_CREATE_SUCCESS"), //
		jField<::java::lang::String>("LIFECYCLE_DESTROY"), //
		jField<::java::lang::String>("LIFECYCLE_DESTROY_FAILURE"), //
		jField<::java::lang::String>("LIFECYCLE_DESTROY_SUCCESS"), //
		jField<::java::lang::String>("LIFECYCLE_INITIALIZE"), //
		jField<::java::lang::String>("LIFECYCLE_INITIALIZE_FAILURE"), //
		jField<::java::lang::String>("LIFECYCLE_INITIALIZE_SUCCESS"), //
		jField<::java::lang::String>("LIFECYCLE_SHUTDOWN"), //
		jField<::java::lang::String>("LIFECYCLE_SHUTDOWN_FAILURE"), //
		jField<::java::lang::String>("LIFECYCLE_SHUTDOWN_SUCCESS"), //
		jField<::java::lang::String>("NAMING_BIND"), //
		jField<::java::lang::String>("NAMING_BIND_FAILURE"), //
		jField<::java::lang::String>("NAMING_BIND_SUCCESS"), //
		jField<::java::lang::String>("NAMING_LIST"), //
		jField<::java::lang::String>("NAMING_LIST_FAILURE"), //
		jField<::java::lang::String>("NAMING_LIST_SUCCESS"), //
		jField<::java::lang::String>("NAMING_REBIND"), //
		jField<::java::lang::String>("NAMING_REBIND_FAILURE"), //
		jField<::java::lang::String>("NAMING_REBIND_SUCCESS"), //
		jField<::java::lang::String>("NAMING_RESOLVE"), //
		jField<::java::lang::String>("NAMING_RESOLVE_FAILURE"), //
		jField<::java::lang::String>("NAMING_RESOLVE_SUCCESS"), //
		jField<::java::lang::String>("NAMING_UNBIND"), //
		jField<::java::lang::String>("NAMING_UNBIND_FAILURE"), //
		jField<::java::lang::String>("NAMING_UNBIND_SUCCESS"), //
	};

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_CREATE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_CREATE")] != -1);
		return sat<F>("LIFECYCLE_CREATE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_CREATE_FAILURE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_CREATE_FAILURE")] != -1);
		return sat<F>("LIFECYCLE_CREATE_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_CREATE_SUCCESS() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_CREATE_SUCCESS")] != -1);
		return sat<F>("LIFECYCLE_CREATE_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_DESTROY() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_DESTROY")] != -1);
		return sat<F>("LIFECYCLE_DESTROY");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_DESTROY_FAILURE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_DESTROY_FAILURE")] != -1);
		return sat<F>("LIFECYCLE_DESTROY_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_DESTROY_SUCCESS() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_DESTROY_SUCCESS")] != -1);
		return sat<F>("LIFECYCLE_DESTROY_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_INITIALIZE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_INITIALIZE")] != -1);
		return sat<F>("LIFECYCLE_INITIALIZE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_INITIALIZE_FAILURE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_INITIALIZE_FAILURE")] != -1);
		return sat<F>("LIFECYCLE_INITIALIZE_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_INITIALIZE_SUCCESS() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_INITIALIZE_SUCCESS")] != -1);
		return sat<F>("LIFECYCLE_INITIALIZE_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_SHUTDOWN() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_SHUTDOWN")] != -1);
		return sat<F>("LIFECYCLE_SHUTDOWN");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_SHUTDOWN_FAILURE() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_SHUTDOWN_FAILURE")] != -1);
		return sat<F>("LIFECYCLE_SHUTDOWN_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto LIFECYCLE_SHUTDOWN_SUCCESS() {
		static_assert(field_signatures[jField<F>("LIFECYCLE_SHUTDOWN_SUCCESS")] != -1);
		return sat<F>("LIFECYCLE_SHUTDOWN_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_BIND() {
		static_assert(field_signatures[jField<F>("NAMING_BIND")] != -1);
		return sat<F>("NAMING_BIND");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_BIND_FAILURE() {
		static_assert(field_signatures[jField<F>("NAMING_BIND_FAILURE")] != -1);
		return sat<F>("NAMING_BIND_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_BIND_SUCCESS() {
		static_assert(field_signatures[jField<F>("NAMING_BIND_SUCCESS")] != -1);
		return sat<F>("NAMING_BIND_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_LIST() {
		static_assert(field_signatures[jField<F>("NAMING_LIST")] != -1);
		return sat<F>("NAMING_LIST");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_LIST_FAILURE() {
		static_assert(field_signatures[jField<F>("NAMING_LIST_FAILURE")] != -1);
		return sat<F>("NAMING_LIST_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_LIST_SUCCESS() {
		static_assert(field_signatures[jField<F>("NAMING_LIST_SUCCESS")] != -1);
		return sat<F>("NAMING_LIST_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_REBIND() {
		static_assert(field_signatures[jField<F>("NAMING_REBIND")] != -1);
		return sat<F>("NAMING_REBIND");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_REBIND_FAILURE() {
		static_assert(field_signatures[jField<F>("NAMING_REBIND_FAILURE")] != -1);
		return sat<F>("NAMING_REBIND_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_REBIND_SUCCESS() {
		static_assert(field_signatures[jField<F>("NAMING_REBIND_SUCCESS")] != -1);
		return sat<F>("NAMING_REBIND_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_RESOLVE() {
		static_assert(field_signatures[jField<F>("NAMING_RESOLVE")] != -1);
		return sat<F>("NAMING_RESOLVE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_RESOLVE_FAILURE() {
		static_assert(field_signatures[jField<F>("NAMING_RESOLVE_FAILURE")] != -1);
		return sat<F>("NAMING_RESOLVE_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_RESOLVE_SUCCESS() {
		static_assert(field_signatures[jField<F>("NAMING_RESOLVE_SUCCESS")] != -1);
		return sat<F>("NAMING_RESOLVE_SUCCESS");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_UNBIND() {
		static_assert(field_signatures[jField<F>("NAMING_UNBIND")] != -1);
		return sat<F>("NAMING_UNBIND");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_UNBIND_FAILURE() {
		static_assert(field_signatures[jField<F>("NAMING_UNBIND_FAILURE")] != -1);
		return sat<F>("NAMING_UNBIND_FAILURE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_UNBIND_SUCCESS() {
		static_assert(field_signatures[jField<F>("NAMING_UNBIND_SUCCESS")] != -1);
		return sat<F>("NAMING_UNBIND_SUCCESS");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
