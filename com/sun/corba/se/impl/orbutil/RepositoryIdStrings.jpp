#ifndef com_sun_corba_se_impl_orbutil_RepositoryIdStrings_HPP
#define com_sun_corba_se_impl_orbutil_RepositoryIdStrings_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::RepositoryIdStrings : public jObject<::com::sun::corba::se::impl::orbutil::RepositoryIdStrings, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "RepositoryIdStrings";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::Class)>("createForAnyType"), //
		jMethod<::java::lang::String(::java::io::Serializable)>("createForJavaType"), //
		jMethod<::java::lang::String(::java::lang::Class)>("createForJavaType"), //
		jMethod<::java::lang::String(::java::lang::Class)>("createSequenceRepID"), //
		jMethod<::java::lang::String(::java::lang::Object)>("createSequenceRepID"), //
		jMethod<::java::lang::String()>("getClassDescValueRepId"), //
		jMethod<::com::sun::corba::se::impl::orbutil::RepositoryIdInterface(::java::lang::String)>("getFromString"), //
		jMethod<::java::lang::String()>("getWStringValueRepId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto createForAnyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createForAnyType")] != -1);
		return call<R>("createForAnyType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto createForJavaType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createForJavaType")] != -1);
		return call<R>("createForJavaType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto createSequenceRepID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSequenceRepID")] != -1);
		return call<R>("createSequenceRepID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassDescValueRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassDescValueRepId")] != -1);
		return call<R>("getClassDescValueRepId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orbutil::RepositoryIdInterface, typename... Args>
	auto getFromString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFromString")] != -1);
		return call<R>("getFromString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWStringValueRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWStringValueRepId")] != -1);
		return call<R>("getWStringValueRepId", std::forward<Args>(args)...);
	}

};

#endif
