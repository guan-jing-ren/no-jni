#ifndef com_sun_corba_se_impl_orbutil_graph_GraphImpl_HPP
#define com_sun_corba_se_impl_orbutil_graph_GraphImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::graph::GraphImpl : public jObject<::com::sun::corba::se::impl::orbutil::graph::GraphImpl, ::java::util::AbstractSet> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_graph / "GraphImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Collection)>(), //
		jMethod<::jboolean(::java::lang::Object)>("add"), //
		jMethod<::com::sun::corba::se::impl::orbutil::graph::NodeData(::com::sun::corba::se::impl::orbutil::graph::Node)>("getNodeData"), //
		jMethod<::java::util::Set()>("getRoots"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::jint()>("size"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orbutil::graph::NodeData, typename... Args>
	auto getNodeData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNodeData")] != -1);
		return call<R>("getNodeData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getRoots(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoots")] != -1);
		return call<R>("getRoots", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

};

#endif
