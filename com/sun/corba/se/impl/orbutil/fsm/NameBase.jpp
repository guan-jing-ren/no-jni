#ifndef com_sun_corba_se_impl_orbutil_fsm_NameBase_HPP
#define com_sun_corba_se_impl_orbutil_fsm_NameBase_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::fsm::NameBase : public jObject<::com::sun::corba::se::impl::orbutil::fsm::NameBase, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil_fsm / "NameBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
