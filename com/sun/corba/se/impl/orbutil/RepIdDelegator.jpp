#ifndef com_sun_corba_se_impl_orbutil_RepIdDelegator_HPP
#define com_sun_corba_se_impl_orbutil_RepIdDelegator_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::impl::orbutil::RepIdDelegator : public jObject<::com::sun::corba::se::impl::orbutil::RepIdDelegator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_impl_orbutil / "RepIdDelegator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String(::java::lang::Class)>("createForAnyType"), //
		jMethod<::java::lang::String(::java::io::Serializable)>("createForJavaType"), //
		jMethod<::java::lang::String(::java::lang::Class)>("createForJavaType"), //
		jMethod<::java::lang::String(::java::lang::Class)>("createSequenceRepID"), //
		jMethod<::java::lang::String(::java::lang::Object)>("createSequenceRepID"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::java::lang::String()>("getClassDescValueRepId"), //
		jMethod<::java::lang::Class()>("getClassFromType"), //
		jMethod<::java::lang::Class(::java::lang::Class, ::java::lang::String)>("getClassFromType"), //
		jMethod<::java::lang::Class(::java::lang::String)>("getClassFromType"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::jint()>("getCodeBaseRMIChunkedId"), //
		jMethod<::jint()>("getCodeBaseRMIChunkedNoRepStrId"), //
		jMethod<::jint()>("getCodeBaseRMIUnchunkedId"), //
		jMethod<::jint()>("getCodeBaseRMIUnchunkedNoRepStrId"), //
		jMethod<::com::sun::corba::se::impl::orbutil::RepositoryIdInterface(::java::lang::String)>("getFromString"), //
		jMethod<::jint()>("getStandardRMIChunkedId"), //
		jMethod<::jint()>("getStandardRMIChunkedNoRepStrId"), //
		jMethod<::jint()>("getStandardRMIUnchunkedId"), //
		jMethod<::jint()>("getStandardRMIUnchunkedNoRepStrId"), //
		jMethod<::jint(::jint)>("getTypeInfo"), //
		jMethod<::java::lang::String()>("getWStringValueRepId"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean(::jint)>("isChunkedEncoding"), //
		jMethod<::jboolean(::jint)>("isCodeBasePresent"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto createForAnyType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createForAnyType")] != -1);
		return call<R>("createForAnyType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto createForJavaType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createForJavaType")] != -1);
		return call<R>("createForJavaType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto createSequenceRepID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSequenceRepID")] != -1);
		return call<R>("createSequenceRepID", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassDescValueRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassDescValueRepId")] != -1);
		return call<R>("getClassDescValueRepId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getClassFromType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassFromType")] != -1);
		return call<R>("getClassFromType", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIChunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIChunkedId")] != -1);
		return call<R>("getCodeBaseRMIChunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIChunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIChunkedNoRepStrId")] != -1);
		return call<R>("getCodeBaseRMIChunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIUnchunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIUnchunkedId")] != -1);
		return call<R>("getCodeBaseRMIUnchunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCodeBaseRMIUnchunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeBaseRMIUnchunkedNoRepStrId")] != -1);
		return call<R>("getCodeBaseRMIUnchunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::orbutil::RepositoryIdInterface, typename... Args>
	auto getFromString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFromString")] != -1);
		return call<R>("getFromString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIChunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIChunkedId")] != -1);
		return call<R>("getStandardRMIChunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIChunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIChunkedNoRepStrId")] != -1);
		return call<R>("getStandardRMIChunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIUnchunkedId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIUnchunkedId")] != -1);
		return call<R>("getStandardRMIUnchunkedId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getStandardRMIUnchunkedNoRepStrId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardRMIUnchunkedNoRepStrId")] != -1);
		return call<R>("getStandardRMIUnchunkedNoRepStrId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTypeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeInfo")] != -1);
		return call<R>("getTypeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getWStringValueRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWStringValueRepId")] != -1);
		return call<R>("getWStringValueRepId", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isChunkedEncoding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isChunkedEncoding")] != -1);
		return call<R>("isChunkedEncoding", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isCodeBasePresent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isCodeBasePresent")] != -1);
		return call<R>("isCodeBasePresent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
