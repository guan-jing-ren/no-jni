#ifndef com_sun_corba_se_spi_monitoring_MonitoredObject_HPP
#define com_sun_corba_se_spi_monitoring_MonitoredObject_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::MonitoredObject : public jObject<::com::sun::corba::se::spi::monitoring::MonitoredObject, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "MonitoredObject";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::spi::monitoring::MonitoredAttribute)>("addAttribute"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::monitoring::MonitoredObject)>("addChild"), //
		jMethod<::jvoid()>("clearState"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredAttribute(::java::lang::String)>("getAttribute"), //
		jMethod<::java::util::Collection()>("getAttributes"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredObject(::java::lang::String)>("getChild"), //
		jMethod<::java::util::Collection()>("getChildren"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredObject()>("getParent"), //
		jMethod<::jvoid(::java::lang::String)>("removeAttribute"), //
		jMethod<::jvoid(::java::lang::String)>("removeChild"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::monitoring::MonitoredObject)>("setParent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addChild")] != -1);
		return call<R>("addChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearState")] != -1);
		return call<R>("clearState", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredAttribute, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredObject, typename... Args>
	auto getChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChild")] != -1);
		return call<R>("getChild", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getChildren(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChildren")] != -1);
		return call<R>("getChildren", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredObject, typename... Args>
	auto getParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getParent")] != -1);
		return call<R>("getParent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeChild(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeChild")] != -1);
		return call<R>("removeChild", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setParent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setParent")] != -1);
		return call<R>("setParent", std::forward<Args>(args)...);
	}

};

#endif
