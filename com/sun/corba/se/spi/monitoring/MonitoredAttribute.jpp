#ifndef com_sun_corba_se_spi_monitoring_MonitoredAttribute_HPP
#define com_sun_corba_se_spi_monitoring_MonitoredAttribute_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::MonitoredAttribute : public jObject<::com::sun::corba::se::spi::monitoring::MonitoredAttribute, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "MonitoredAttribute";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("clearState"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfo()>("getAttributeInfo"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::Object()>("getValue"), //
		jMethod<::jvoid(::java::lang::Object)>("setValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto clearState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearState")] != -1);
		return call<R>("clearState", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfo, typename... Args>
	auto getAttributeInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributeInfo")] != -1);
		return call<R>("getAttributeInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setValue")] != -1);
		return call<R>("setValue", std::forward<Args>(args)...);
	}

};

#endif
