#ifndef com_sun_corba_se_spi_monitoring_MonitoredAttributeInfo_HPP
#define com_sun_corba_se_spi_monitoring_MonitoredAttributeInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfo : public jObject<::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "MonitoredAttributeInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::jboolean()>("isStatistic"), //
		jMethod<::jboolean()>("isWritable"), //
		jMethod<::java::lang::Class()>("type"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStatistic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStatistic")] != -1);
		return call<R>("isStatistic", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWritable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWritable")] != -1);
		return call<R>("isWritable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("type")] != -1);
		return call<R>("type", std::forward<Args>(args)...);
	}

};

#endif
