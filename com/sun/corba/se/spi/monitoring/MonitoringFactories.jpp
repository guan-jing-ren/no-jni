#ifndef com_sun_corba_se_spi_monitoring_MonitoringFactories_HPP
#define com_sun_corba_se_spi_monitoring_MonitoringFactories_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::MonitoringFactories : public jObject<::com::sun::corba::se::spi::monitoring::MonitoringFactories, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "MonitoringFactories";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfoFactory()>("getMonitoredAttributeInfoFactory"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoredObjectFactory()>("getMonitoredObjectFactory"), //
		jMethod<::com::sun::corba::se::spi::monitoring::MonitoringManagerFactory()>("getMonitoringManagerFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredAttributeInfoFactory, typename... Args>
	static auto getMonitoredAttributeInfoFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoredAttributeInfoFactory")] != -1);
		return scall<R>("getMonitoredAttributeInfoFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoredObjectFactory, typename... Args>
	static auto getMonitoredObjectFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoredObjectFactory")] != -1);
		return scall<R>("getMonitoredObjectFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::monitoring::MonitoringManagerFactory, typename... Args>
	static auto getMonitoringManagerFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringManagerFactory")] != -1);
		return scall<R>("getMonitoringManagerFactory", std::forward<Args>(args)...);
	}

};

#endif
