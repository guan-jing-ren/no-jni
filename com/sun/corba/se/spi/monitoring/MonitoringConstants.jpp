#ifndef com_sun_corba_se_spi_monitoring_MonitoringConstants_HPP
#define com_sun_corba_se_spi_monitoring_MonitoringConstants_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::MonitoringConstants : public jObject<::com::sun::corba::se::spi::monitoring::MonitoringConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "MonitoringConstants";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("CONNECTION_MONITORING_DESCRIPTION"), //
		jField<::java::lang::String>("CONNECTION_MONITORING_ROOT"), //
		jField<::java::lang::String>("CONNECTION_MONITORING_ROOT_DESCRIPTION"), //
		jField<::java::lang::String>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS"), //
		jField<::java::lang::String>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION"), //
		jField<::java::lang::String>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS"), //
		jField<::java::lang::String>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION"), //
		jField<::java::lang::String>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS"), //
		jField<::java::lang::String>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION"), //
		jField<::java::lang::String>("DEFAULT_MONITORING_ROOT"), //
		jField<::java::lang::String>("DEFAULT_MONITORING_ROOT_DESCRIPTION"), //
		jField<::java::lang::String>("INBOUND_CONNECTION_MONITORING_ROOT"), //
		jField<::java::lang::String>("INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION"), //
		jField<::java::lang::String>("OUTBOUND_CONNECTION_MONITORING_ROOT"), //
		jField<::java::lang::String>("OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME"), //
		jField<::java::lang::String>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_CURRENT_NUMBER_OF_THREADS"), //
		jField<::java::lang::String>("THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_CURRENT_PROCESSED_COUNT"), //
		jField<::java::lang::String>("THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_MONITORING_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_MONITORING_ROOT"), //
		jField<::java::lang::String>("THREADPOOL_MONITORING_ROOT_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS"), //
		jField<::java::lang::String>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION"), //
		jField<::java::lang::String>("THREADPOOL_NUMBER_OF_BUSY_THREADS"), //
		jField<::java::lang::String>("THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION"), //
		jField<::java::lang::String>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE"), //
		jField<::java::lang::String>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION"), //
		jField<::java::lang::String>("WORKQUEUE_MONITORING_DESCRIPTION"), //
		jField<::java::lang::String>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED"), //
		jField<::java::lang::String>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION"), //
		jField<::java::lang::String>("WORKQUEUE_WORK_ITEMS_IN_QUEUE"), //
		jField<::java::lang::String>("WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION"), //
	};

	template<typename F = ::java::lang::String>
	static auto CONNECTION_MONITORING_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("CONNECTION_MONITORING_DESCRIPTION")] != -1);
		return sat<F>("CONNECTION_MONITORING_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_MONITORING_ROOT() {
		static_assert(field_signatures[jField<F>("CONNECTION_MONITORING_ROOT")] != -1);
		return sat<F>("CONNECTION_MONITORING_ROOT");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_MONITORING_ROOT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("CONNECTION_MONITORING_ROOT_DESCRIPTION")] != -1);
		return sat<F>("CONNECTION_MONITORING_ROOT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_NUMBER_OF_BUSY_CONNECTIONS() {
		static_assert(field_signatures[jField<F>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS")] != -1);
		return sat<F>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION")] != -1);
		return sat<F>("CONNECTION_NUMBER_OF_BUSY_CONNECTIONS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_NUMBER_OF_IDLE_CONNECTIONS() {
		static_assert(field_signatures[jField<F>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS")] != -1);
		return sat<F>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION")] != -1);
		return sat<F>("CONNECTION_NUMBER_OF_IDLE_CONNECTIONS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS() {
		static_assert(field_signatures[jField<F>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS")] != -1);
		return sat<F>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS");
	}

	template<typename F = ::java::lang::String>
	static auto CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION")] != -1);
		return sat<F>("CONNECTION_TOTAL_NUMBER_OF_CONNECTIONS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_MONITORING_ROOT() {
		static_assert(field_signatures[jField<F>("DEFAULT_MONITORING_ROOT")] != -1);
		return sat<F>("DEFAULT_MONITORING_ROOT");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_MONITORING_ROOT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("DEFAULT_MONITORING_ROOT_DESCRIPTION")] != -1);
		return sat<F>("DEFAULT_MONITORING_ROOT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto INBOUND_CONNECTION_MONITORING_ROOT() {
		static_assert(field_signatures[jField<F>("INBOUND_CONNECTION_MONITORING_ROOT")] != -1);
		return sat<F>("INBOUND_CONNECTION_MONITORING_ROOT");
	}

	template<typename F = ::java::lang::String>
	static auto INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION")] != -1);
		return sat<F>("INBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto OUTBOUND_CONNECTION_MONITORING_ROOT() {
		static_assert(field_signatures[jField<F>("OUTBOUND_CONNECTION_MONITORING_ROOT")] != -1);
		return sat<F>("OUTBOUND_CONNECTION_MONITORING_ROOT");
	}

	template<typename F = ::java::lang::String>
	static auto OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION")] != -1);
		return sat<F>("OUTBOUND_CONNECTION_MONITORING_ROOT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_AVERAGE_WORK_COMPLETION_TIME() {
		static_assert(field_signatures[jField<F>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME")] != -1);
		return sat<F>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_AVERAGE_WORK_COMPLETION_TIME_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_CURRENT_NUMBER_OF_THREADS() {
		static_assert(field_signatures[jField<F>("THREADPOOL_CURRENT_NUMBER_OF_THREADS")] != -1);
		return sat<F>("THREADPOOL_CURRENT_NUMBER_OF_THREADS");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_CURRENT_NUMBER_OF_THREADS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_CURRENT_PROCESSED_COUNT() {
		static_assert(field_signatures[jField<F>("THREADPOOL_CURRENT_PROCESSED_COUNT")] != -1);
		return sat<F>("THREADPOOL_CURRENT_PROCESSED_COUNT");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_CURRENT_PROCESSED_COUNT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_MONITORING_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_MONITORING_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_MONITORING_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_MONITORING_ROOT() {
		static_assert(field_signatures[jField<F>("THREADPOOL_MONITORING_ROOT")] != -1);
		return sat<F>("THREADPOOL_MONITORING_ROOT");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_MONITORING_ROOT_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_MONITORING_ROOT_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_MONITORING_ROOT_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_NUMBER_OF_AVAILABLE_THREADS() {
		static_assert(field_signatures[jField<F>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS")] != -1);
		return sat<F>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_NUMBER_OF_AVAILABLE_THREADS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_NUMBER_OF_BUSY_THREADS() {
		static_assert(field_signatures[jField<F>("THREADPOOL_NUMBER_OF_BUSY_THREADS")] != -1);
		return sat<F>("THREADPOOL_NUMBER_OF_BUSY_THREADS");
	}

	template<typename F = ::java::lang::String>
	static auto THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION")] != -1);
		return sat<F>("THREADPOOL_NUMBER_OF_BUSY_THREADS_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_AVERAGE_TIME_IN_QUEUE() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE")] != -1);
		return sat<F>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION")] != -1);
		return sat<F>("WORKQUEUE_AVERAGE_TIME_IN_QUEUE_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_MONITORING_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_MONITORING_DESCRIPTION")] != -1);
		return sat<F>("WORKQUEUE_MONITORING_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_TOTAL_WORK_ITEMS_ADDED() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED")] != -1);
		return sat<F>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION")] != -1);
		return sat<F>("WORKQUEUE_TOTAL_WORK_ITEMS_ADDED_DESCRIPTION");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_WORK_ITEMS_IN_QUEUE() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_WORK_ITEMS_IN_QUEUE")] != -1);
		return sat<F>("WORKQUEUE_WORK_ITEMS_IN_QUEUE");
	}

	template<typename F = ::java::lang::String>
	static auto WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION() {
		static_assert(field_signatures[jField<F>("WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION")] != -1);
		return sat<F>("WORKQUEUE_WORK_ITEMS_IN_QUEUE_DESCRIPTION");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
