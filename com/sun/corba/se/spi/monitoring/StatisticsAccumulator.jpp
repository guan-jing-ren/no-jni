#ifndef com_sun_corba_se_spi_monitoring_StatisticsAccumulator_HPP
#define com_sun_corba_se_spi_monitoring_StatisticsAccumulator_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::monitoring::StatisticsAccumulator : public jObject<::com::sun::corba::se::spi::monitoring::StatisticsAccumulator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_monitoring / "StatisticsAccumulator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jvoid(::jdouble)>("sample"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble, ::jdouble, ::jlong, ::jdouble, ::jdouble)>("unitTestValidate"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sample")] != -1);
		return call<R>("sample", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unitTestValidate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unitTestValidate")] != -1);
		return call<R>("unitTestValidate", std::forward<Args>(args)...);
	}

};

#endif
