#ifndef com_sun_corba_se_spi_transport_TransportDefault_HPP
#define com_sun_corba_se_spi_transport_TransportDefault_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::TransportDefault : public jObject<::com::sun::corba::se::spi::transport::TransportDefault, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "TransportDefault";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::protocol::ClientDelegateFactory(::com::sun::corba::se::spi::orb::ORB)>("makeClientDelegateFactory"), //
		jMethod<::com::sun::corba::se::spi::transport::CorbaContactInfoListFactory(::com::sun::corba::se::spi::orb::ORB)>("makeCorbaContactInfoListFactory"), //
		jMethod<::com::sun::corba::se::spi::transport::IORTransformer(::com::sun::corba::se::spi::orb::ORB)>("makeIORTransformer"), //
		jMethod<::com::sun::corba::se::spi::transport::ReadTimeoutsFactory()>("makeReadTimeoutsFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::protocol::ClientDelegateFactory, typename... Args>
	static auto makeClientDelegateFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeClientDelegateFactory")] != -1);
		return scall<R>("makeClientDelegateFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::CorbaContactInfoListFactory, typename... Args>
	static auto makeCorbaContactInfoListFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeCorbaContactInfoListFactory")] != -1);
		return scall<R>("makeCorbaContactInfoListFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::IORTransformer, typename... Args>
	static auto makeIORTransformer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIORTransformer")] != -1);
		return scall<R>("makeIORTransformer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::ReadTimeoutsFactory, typename... Args>
	static auto makeReadTimeoutsFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeReadTimeoutsFactory")] != -1);
		return scall<R>("makeReadTimeoutsFactory", std::forward<Args>(args)...);
	}

};

#endif
