#ifndef com_sun_corba_se_spi_transport_SocketInfo_HPP
#define com_sun_corba_se_spi_transport_SocketInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::SocketInfo : public jObject<::com::sun::corba::se::spi::transport::SocketInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "SocketInfo";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("IIOP_CLEAR_TEXT"), //
	};

	template<typename F = ::java::lang::String>
	static auto IIOP_CLEAR_TEXT() {
		static_assert(field_signatures[jField<F>("IIOP_CLEAR_TEXT")] != -1);
		return sat<F>("IIOP_CLEAR_TEXT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getType"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

};

#endif
