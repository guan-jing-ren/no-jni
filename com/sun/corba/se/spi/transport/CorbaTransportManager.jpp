#ifndef com_sun_corba_se_spi_transport_CorbaTransportManager_HPP
#define com_sun_corba_se_spi_transport_CorbaTransportManager_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::CorbaTransportManager : public jObject<::com::sun::corba::se::spi::transport::CorbaTransportManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "CorbaTransportManager";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("SOCKET_OR_CHANNEL_CONNECTION_CACHE"), //
	};

	template<typename F = ::java::lang::String>
	static auto SOCKET_OR_CHANNEL_CONNECTION_CACHE() {
		static_assert(field_signatures[jField<F>("SOCKET_OR_CHANNEL_CONNECTION_CACHE")] != -1);
		return sat<F>("SOCKET_OR_CHANNEL_CONNECTION_CACHE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IORTemplate, ::com::sun::corba::se::impl::oa::poa::Policies, ::java::lang::String, ::java::lang::String, ::com::sun::corba::se::spi::ior::ObjectAdapterId)>("addToIORTemplate"), //
		jMethod<::java::util::Collection(::java::lang::String, ::com::sun::corba::se::spi::ior::ObjectAdapterId)>("getAcceptors"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addToIORTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToIORTemplate")] != -1);
		return call<R>("addToIORTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto getAcceptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptors")] != -1);
		return call<R>("getAcceptors", std::forward<Args>(args)...);
	}

};

#endif
