#ifndef com_sun_corba_se_spi_transport_ReadTimeouts_HPP
#define com_sun_corba_se_spi_transport_ReadTimeouts_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::ReadTimeouts : public jObject<::com::sun::corba::se::spi::transport::ReadTimeouts, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "ReadTimeouts";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jdouble()>("get_backoff_factor"), //
		jMethod<::jint()>("get_initial_time_to_wait"), //
		jMethod<::jint()>("get_max_giop_header_time_to_wait"), //
		jMethod<::jint()>("get_max_time_to_wait"), //
	};

	template<typename R = ::jdouble, typename... Args>
	auto get_backoff_factor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_backoff_factor")] != -1);
		return call<R>("get_backoff_factor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_initial_time_to_wait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_initial_time_to_wait")] != -1);
		return call<R>("get_initial_time_to_wait", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_max_giop_header_time_to_wait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_max_giop_header_time_to_wait")] != -1);
		return call<R>("get_max_giop_header_time_to_wait", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto get_max_time_to_wait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get_max_time_to_wait")] != -1);
		return call<R>("get_max_time_to_wait", std::forward<Args>(args)...);
	}

};

#endif
