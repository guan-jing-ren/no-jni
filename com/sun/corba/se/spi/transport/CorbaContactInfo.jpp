#ifndef com_sun_corba_se_spi_transport_CorbaContactInfo_HPP
#define com_sun_corba_se_spi_transport_CorbaContactInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::CorbaContactInfo : public jObject<::com::sun::corba::se::spi::transport::CorbaContactInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "CorbaContactInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jshort()>("getAddressingDisposition"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfile()>("getEffectiveProfile"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getEffectiveTargetIOR"), //
		jMethod<::java::lang::String()>("getMonitoringName"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getTargetIOR"), //
		jMethod<::jvoid(::jshort)>("setAddressingDisposition"), //
	};

	template<typename R = ::jshort, typename... Args>
	auto getAddressingDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddressingDisposition")] != -1);
		return call<R>("getAddressingDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPProfile, typename... Args>
	auto getEffectiveProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectiveProfile")] != -1);
		return call<R>("getEffectiveProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getEffectiveTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectiveTargetIOR")] != -1);
		return call<R>("getEffectiveTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMonitoringName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringName")] != -1);
		return call<R>("getMonitoringName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetIOR")] != -1);
		return call<R>("getTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAddressingDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAddressingDisposition")] != -1);
		return call<R>("setAddressingDisposition", std::forward<Args>(args)...);
	}

};

#endif
