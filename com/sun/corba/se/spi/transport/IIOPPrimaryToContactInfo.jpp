#ifndef com_sun_corba_se_spi_transport_IIOPPrimaryToContactInfo_HPP
#define com_sun_corba_se_spi_transport_IIOPPrimaryToContactInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo : public jObject<::com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "IIOPPrimaryToContactInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::com::sun::corba::se::pept::transport::ContactInfo, ::com::sun::corba::se::pept::transport::ContactInfo, ::java::util::List)>("hasNext"), //
		jMethod<::com::sun::corba::se::pept::transport::ContactInfo(::com::sun::corba::se::pept::transport::ContactInfo, ::com::sun::corba::se::pept::transport::ContactInfo, ::java::util::List)>("next"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::transport::ContactInfo)>("reset"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto hasNext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNext")] != -1);
		return call<R>("hasNext", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::ContactInfo, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
