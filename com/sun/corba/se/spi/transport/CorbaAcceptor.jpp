#ifndef com_sun_corba_se_spi_transport_CorbaAcceptor_HPP
#define com_sun_corba_se_spi_transport_CorbaAcceptor_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::CorbaAcceptor : public jObject<::com::sun::corba::se::spi::transport::CorbaAcceptor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "CorbaAcceptor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IORTemplate, ::com::sun::corba::se::impl::oa::poa::Policies, ::java::lang::String)>("addToIORTemplate"), //
		jMethod<::java::lang::String()>("getMonitoringName"), //
		jMethod<::java::lang::String()>("getObjectAdapterId"), //
		jMethod<::java::lang::String()>("getObjectAdapterManagerId"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addToIORTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToIORTemplate")] != -1);
		return call<R>("addToIORTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getMonitoringName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMonitoringName")] != -1);
		return call<R>("getMonitoringName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObjectAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterId")] != -1);
		return call<R>("getObjectAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getObjectAdapterManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterManagerId")] != -1);
		return call<R>("getObjectAdapterManagerId", std::forward<Args>(args)...);
	}

};

#endif
