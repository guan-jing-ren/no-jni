#ifndef com_sun_corba_se_spi_transport_CorbaResponseWaitingRoom_HPP
#define com_sun_corba_se_spi_transport_CorbaResponseWaitingRoom_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::CorbaResponseWaitingRoom : public jObject<::com::sun::corba::se::spi::transport::CorbaResponseWaitingRoom, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "CorbaResponseWaitingRoom";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::pept::protocol::MessageMediator(::jint)>("getMessageMediator"), //
		jMethod<::jvoid(::org::omg::CORBA::SystemException)>("signalExceptionToAllWaiters"), //
	};

	template<typename R = ::com::sun::corba::se::pept::protocol::MessageMediator, typename... Args>
	auto getMessageMediator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMessageMediator")] != -1);
		return call<R>("getMessageMediator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto signalExceptionToAllWaiters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("signalExceptionToAllWaiters")] != -1);
		return call<R>("signalExceptionToAllWaiters", std::forward<Args>(args)...);
	}

};

#endif
