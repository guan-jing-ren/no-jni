#ifndef com_sun_corba_se_spi_transport_CorbaContactInfoList_HPP
#define com_sun_corba_se_spi_transport_CorbaContactInfoList_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::transport::CorbaContactInfoList : public jObject<::com::sun::corba::se::spi::transport::CorbaContactInfoList, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_transport / "CorbaContactInfoList";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getEffectiveTargetIOR"), //
		jMethod<::com::sun::corba::se::spi::protocol::LocalClientRequestDispatcher()>("getLocalClientRequestDispatcher"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getTargetIOR"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("setEffectiveTargetIOR"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::IOR)>("setTargetIOR"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getEffectiveTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectiveTargetIOR")] != -1);
		return call<R>("getEffectiveTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::LocalClientRequestDispatcher, typename... Args>
	auto getLocalClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalClientRequestDispatcher")] != -1);
		return call<R>("getLocalClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetIOR")] != -1);
		return call<R>("getTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEffectiveTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEffectiveTargetIOR")] != -1);
		return call<R>("setEffectiveTargetIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTargetIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTargetIOR")] != -1);
		return call<R>("setTargetIOR", std::forward<Args>(args)...);
	}

};

#endif
