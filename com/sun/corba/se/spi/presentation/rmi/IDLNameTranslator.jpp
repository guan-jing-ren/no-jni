#ifndef com_sun_corba_se_spi_presentation_rmi_IDLNameTranslator_HPP
#define com_sun_corba_se_spi_presentation_rmi_IDLNameTranslator_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator : public jObject<::com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "IDLNameTranslator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::reflect::Method)>("getIDLName"), //
		jMethod<::java::lang::Class *()>("getInterfaces"), //
		jMethod<::java::lang::reflect::Method(::java::lang::String)>("getMethod"), //
		jMethod<::java::lang::reflect::Method *()>("getMethods"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getIDLName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIDLName")] != -1);
		return call<R>("getIDLName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class *, typename... Args>
	auto getInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterfaces")] != -1);
		return call<R>("getInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Method, typename... Args>
	auto getMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethod")] != -1);
		return call<R>("getMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::reflect::Method *, typename... Args>
	auto getMethods(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMethods")] != -1);
		return call<R>("getMethods", std::forward<Args>(args)...);
	}

};

#endif
