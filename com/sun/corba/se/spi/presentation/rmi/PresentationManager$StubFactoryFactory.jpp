#ifndef com_sun_corba_se_spi_presentation_rmi_PresentationManager$StubFactoryFactory_HPP
#define com_sun_corba_se_spi_presentation_rmi_PresentationManager$StubFactoryFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory : public jObject<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "PresentationManager$StubFactoryFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory(::java::lang::String, ::jboolean, ::java::lang::String, ::java::lang::Class, ::java::lang::ClassLoader)>("createStubFactory"), //
		jMethod<::jboolean()>("createsDynamicStubs"), //
		jMethod<::java::lang::String(::java::lang::String)>("getStubName"), //
		jMethod<::javax::rmi::CORBA::Tie(::java::lang::Class)>("getTie"), //
	};

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory, typename... Args>
	auto createStubFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createStubFactory")] != -1);
		return call<R>("createStubFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto createsDynamicStubs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createsDynamicStubs")] != -1);
		return call<R>("createsDynamicStubs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getStubName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStubName")] != -1);
		return call<R>("getStubName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::rmi::CORBA::Tie, typename... Args>
	auto getTie(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTie")] != -1);
		return call<R>("getTie", std::forward<Args>(args)...);
	}

};

#endif
