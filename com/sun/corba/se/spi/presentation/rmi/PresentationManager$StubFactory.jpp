#ifndef com_sun_corba_se_spi_presentation_rmi_PresentationManager$StubFactory_HPP
#define com_sun_corba_se_spi_presentation_rmi_PresentationManager$StubFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory : public jObject<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "PresentationManager$StubFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String *()>("getTypeIds"), //
		jMethod<::org::omg::CORBA::Object()>("makeStub"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto getTypeIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeIds")] != -1);
		return call<R>("getTypeIds", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto makeStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeStub")] != -1);
		return call<R>("makeStub", std::forward<Args>(args)...);
	}

};

#endif
