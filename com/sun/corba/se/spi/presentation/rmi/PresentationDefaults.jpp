#ifndef com_sun_corba_se_spi_presentation_rmi_PresentationDefaults_HPP
#define com_sun_corba_se_spi_presentation_rmi_PresentationDefaults_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::PresentationDefaults : public jObject<::com::sun::corba::se::spi::presentation::rmi::PresentationDefaults, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "PresentationDefaults";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory()>("getProxyStubFactoryFactory"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory()>("getStaticStubFactoryFactory"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory(::java::lang::Class)>("makeStaticStubFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory, typename... Args>
	static auto getProxyStubFactoryFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxyStubFactoryFactory")] != -1);
		return scall<R>("getProxyStubFactoryFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactoryFactory, typename... Args>
	static auto getStaticStubFactoryFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStaticStubFactoryFactory")] != -1);
		return scall<R>("getStaticStubFactoryFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$StubFactory, typename... Args>
	static auto makeStaticStubFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeStaticStubFactory")] != -1);
		return scall<R>("makeStaticStubFactory", std::forward<Args>(args)...);
	}

};

#endif
