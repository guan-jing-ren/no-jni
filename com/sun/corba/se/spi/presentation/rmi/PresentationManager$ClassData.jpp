#ifndef com_sun_corba_se_spi_presentation_rmi_PresentationManager$ClassData_HPP
#define com_sun_corba_se_spi_presentation_rmi_PresentationManager$ClassData_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData : public jObject<::com::sun::corba::se::spi::presentation::rmi::PresentationManager$ClassData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "PresentationManager$ClassData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::util::Map()>("getDictionary"), //
		jMethod<::com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator()>("getIDLNameTranslator"), //
		jMethod<::com::sun::corba::se::spi::orbutil::proxy::InvocationHandlerFactory()>("getInvocationHandlerFactory"), //
		jMethod<::java::lang::Class()>("getMyClass"), //
		jMethod<::java::lang::String *()>("getTypeIds"), //
	};

	template<typename R = ::java::util::Map, typename... Args>
	auto getDictionary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDictionary")] != -1);
		return call<R>("getDictionary", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::presentation::rmi::IDLNameTranslator, typename... Args>
	auto getIDLNameTranslator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIDLNameTranslator")] != -1);
		return call<R>("getIDLNameTranslator", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::proxy::InvocationHandlerFactory, typename... Args>
	auto getInvocationHandlerFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationHandlerFactory")] != -1);
		return call<R>("getInvocationHandlerFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getMyClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMyClass")] != -1);
		return call<R>("getMyClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getTypeIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeIds")] != -1);
		return call<R>("getTypeIds", std::forward<Args>(args)...);
	}

};

#endif
