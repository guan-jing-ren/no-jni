#ifndef com_sun_corba_se_spi_presentation_rmi_StubAdapter_HPP
#define com_sun_corba_se_spi_presentation_rmi_StubAdapter_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::presentation::rmi::StubAdapter : public jObject<::com::sun::corba::se::spi::presentation::rmi::StubAdapter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_presentation_rmi / "StubAdapter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Object(::org::omg::PortableServer::Servant)>("activateServant"), //
		jMethod<::org::omg::CORBA::Object(::javax::rmi::CORBA::Tie)>("activateTie"), //
		jMethod<::jvoid(::java::lang::Object, ::org::omg::CORBA::ORB)>("connect"), //
		jMethod<::org::omg::CORBA::portable::Delegate(::java::lang::Object)>("getDelegate"), //
		jMethod<::org::omg::CORBA::ORB(::java::lang::Object)>("getORB"), //
		jMethod<::java::lang::String *(::java::lang::Object)>("getTypeIds"), //
		jMethod<::jboolean(::java::lang::Object)>("isLocal"), //
		jMethod<::jboolean(::java::lang::Object)>("isStub"), //
		jMethod<::jboolean(::java::lang::Class)>("isStubClass"), //
		jMethod<::org::omg::CORBA::portable::OutputStream(::java::lang::Object, ::java::lang::String, ::jboolean)>("request"), //
		jMethod<::jvoid(::java::lang::Object, ::org::omg::CORBA::portable::Delegate)>("setDelegate"), //
	};

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	static auto activateServant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activateServant")] != -1);
		return scall<R>("activateServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	static auto activateTie(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activateTie")] != -1);
		return scall<R>("activateTie", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto connect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return scall<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::Delegate, typename... Args>
	static auto getDelegate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegate")] != -1);
		return scall<R>("getDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::ORB, typename... Args>
	static auto getORB(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return scall<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	static auto getTypeIds(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTypeIds")] != -1);
		return scall<R>("getTypeIds", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isLocal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocal")] != -1);
		return scall<R>("isLocal", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isStub(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStub")] != -1);
		return scall<R>("isStub", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isStubClass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStubClass")] != -1);
		return scall<R>("isStubClass", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	static auto request(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("request")] != -1);
		return scall<R>("request", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDelegate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegate")] != -1);
		return scall<R>("setDelegate", std::forward<Args>(args)...);
	}

};

#endif
