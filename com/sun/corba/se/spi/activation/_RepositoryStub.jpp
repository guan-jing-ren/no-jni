#ifndef com_sun_corba_se_spi_activation__RepositoryStub_HPP
#define com_sun_corba_se_spi_activation__RepositoryStub_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::_RepositoryStub : public jObject<::com::sun::corba::se::spi::activation::_RepositoryStub, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation / "_RepositoryStub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::java::lang::String *()>("getApplicationNames"), //
		jMethod<::com::sun::corba::se::spi::activation::RepositoryPackage::ServerDef(::jint)>("getServer"), //
		jMethod<::jint(::java::lang::String)>("getServerID"), //
		jMethod<::jvoid(::jint)>("install"), //
		jMethod<::jboolean(::jint)>("isInstalled"), //
		jMethod<::jint *()>("listRegisteredServers"), //
		jMethod<::jint(::com::sun::corba::se::spi::activation::RepositoryPackage::ServerDef)>("registerServer"), //
		jMethod<::jvoid(::jint)>("uninstall"), //
		jMethod<::jvoid(::jint)>("unregisterServer"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getApplicationNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getApplicationNames")] != -1);
		return call<R>("getApplicationNames", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::activation::RepositoryPackage::ServerDef, typename... Args>
	auto getServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServer")] != -1);
		return call<R>("getServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerID")] != -1);
		return call<R>("getServerID", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInstalled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInstalled")] != -1);
		return call<R>("isInstalled", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto listRegisteredServers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listRegisteredServers")] != -1);
		return call<R>("listRegisteredServers", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto registerServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerServer")] != -1);
		return call<R>("registerServer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstall")] != -1);
		return call<R>("uninstall", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterServer")] != -1);
		return call<R>("unregisterServer", std::forward<Args>(args)...);
	}

};

#endif
