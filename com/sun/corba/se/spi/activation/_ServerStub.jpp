#ifndef com_sun_corba_se_spi_activation__ServerStub_HPP
#define com_sun_corba_se_spi_activation__ServerStub_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::_ServerStub : public jObject<::com::sun::corba::se::spi::activation::_ServerStub, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation / "_ServerStub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::jvoid()>("install"), //
		jMethod<::jvoid()>("shutdown"), //
		jMethod<::jvoid()>("uninstall"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstall")] != -1);
		return call<R>("uninstall", std::forward<Args>(args)...);
	}

};

#endif
