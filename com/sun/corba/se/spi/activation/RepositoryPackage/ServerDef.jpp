#ifndef com_sun_corba_se_spi_activation_RepositoryPackage_ServerDef_HPP
#define com_sun_corba_se_spi_activation_RepositoryPackage_ServerDef_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::RepositoryPackage::ServerDef : public jObject<::com::sun::corba::se::spi::activation::RepositoryPackage::ServerDef, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation_RepositoryPackage / "ServerDef";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("applicationName"), //
		jField<::java::lang::String>("serverArgs"), //
		jField<::java::lang::String>("serverClassPath"), //
		jField<::java::lang::String>("serverName"), //
		jField<::java::lang::String>("serverVmArgs"), //
	};

	template<typename F = ::java::lang::String>
	auto applicationName() const {
		static_assert(field_signatures[jField<F>("applicationName")] != -1);
		return at<F>("applicationName");
	}

	template<typename F = ::java::lang::String>
	auto serverArgs() const {
		static_assert(field_signatures[jField<F>("serverArgs")] != -1);
		return at<F>("serverArgs");
	}

	template<typename F = ::java::lang::String>
	auto serverClassPath() const {
		static_assert(field_signatures[jField<F>("serverClassPath")] != -1);
		return at<F>("serverClassPath");
	}

	template<typename F = ::java::lang::String>
	auto serverName() const {
		static_assert(field_signatures[jField<F>("serverName")] != -1);
		return at<F>("serverName");
	}

	template<typename F = ::java::lang::String>
	auto serverVmArgs() const {
		static_assert(field_signatures[jField<F>("serverVmArgs")] != -1);
		return at<F>("serverVmArgs");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String, ::java::lang::String)>(), //
	};

};

#endif
