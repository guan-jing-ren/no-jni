#ifndef com_sun_corba_se_spi_activation_RepositoryPackage_StringSeqHolder_HPP
#define com_sun_corba_se_spi_activation_RepositoryPackage_StringSeqHolder_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::RepositoryPackage::StringSeqHolder : public jObject<::com::sun::corba::se::spi::activation::RepositoryPackage::StringSeqHolder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation_RepositoryPackage / "StringSeqHolder";

	constexpr static Enume field_signatures{
		jField<::java::lang::String *>("value"), //
	};

	template<typename F = ::java::lang::String *>
	auto value() const {
		static_assert(field_signatures[jField<F>("value")] != -1);
		return at<F>("value");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::lang::String *)>(), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("_read"), //
		jMethod<::org::omg::CORBA::TypeCode()>("_type"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("_write"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto _read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_read")] != -1);
		return call<R>("_read", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::TypeCode, typename... Args>
	auto _type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_type")] != -1);
		return call<R>("_type", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto _write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_write")] != -1);
		return call<R>("_write", std::forward<Args>(args)...);
	}

};

#endif
