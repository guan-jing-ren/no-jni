#ifndef com_sun_corba_se_spi_activation_LocatorOperations_HPP
#define com_sun_corba_se_spi_activation_LocatorOperations_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::LocatorOperations : public jObject<::com::sun::corba::se::spi::activation::LocatorOperations, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation / "LocatorOperations";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::java::lang::String)>("getEndpoint"), //
		jMethod<::jint(::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB, ::java::lang::String)>("getServerPortForType"), //
		jMethod<::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocation(::jint, ::java::lang::String)>("locateServer"), //
		jMethod<::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB(::jint, ::java::lang::String)>("locateServerForORB"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getEndpoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndpoint")] != -1);
		return call<R>("getEndpoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerPortForType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerPortForType")] != -1);
		return call<R>("getServerPortForType", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocation, typename... Args>
	auto locateServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locateServer")] != -1);
		return call<R>("locateServer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::activation::LocatorPackage::ServerLocationPerORB, typename... Args>
	auto locateServerForORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("locateServerForORB")] != -1);
		return call<R>("locateServerForORB", std::forward<Args>(args)...);
	}

};

#endif
