#ifndef com_sun_corba_se_spi_activation__ActivatorStub_HPP
#define com_sun_corba_se_spi_activation__ActivatorStub_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::activation::_ActivatorStub : public jObject<::com::sun::corba::se::spi::activation::_ActivatorStub, ::org::omg::CORBA::portable::ObjectImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_activation / "_ActivatorStub";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String *()>("_ids"), //
		jMethod<::jvoid(::jint)>("activate"), //
		jMethod<::jvoid(::jint, ::com::sun::corba::se::spi::activation::Server)>("active"), //
		jMethod<::jint *()>("getActiveServers"), //
		jMethod<::java::lang::String *(::jint)>("getORBNames"), //
		jMethod<::jvoid(::jint)>("install"), //
		jMethod<::jvoid(::jint, ::java::lang::String, ::com::sun::corba::se::spi::activation::EndPointInfo *)>("registerEndpoints"), //
		jMethod<::jvoid(::jint)>("shutdown"), //
		jMethod<::jvoid(::jint)>("uninstall"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto _ids(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("_ids")] != -1);
		return call<R>("_ids", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto activate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activate")] != -1);
		return call<R>("activate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto active(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("active")] != -1);
		return call<R>("active", std::forward<Args>(args)...);
	}

	template<typename R = ::jint *, typename... Args>
	auto getActiveServers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getActiveServers")] != -1);
		return call<R>("getActiveServers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getORBNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBNames")] != -1);
		return call<R>("getORBNames", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto install(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("install")] != -1);
		return call<R>("install", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerEndpoints(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerEndpoints")] != -1);
		return call<R>("registerEndpoints", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto shutdown(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shutdown")] != -1);
		return call<R>("shutdown", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninstall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninstall")] != -1);
		return call<R>("uninstall", std::forward<Args>(args)...);
	}

};

#endif
