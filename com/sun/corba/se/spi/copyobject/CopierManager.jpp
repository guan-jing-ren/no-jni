#ifndef com_sun_corba_se_spi_copyobject_CopierManager_HPP
#define com_sun_corba_se_spi_copyobject_CopierManager_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::copyobject::CopierManager : public jObject<::com::sun::corba::se::spi::copyobject::CopierManager, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_copyobject / "CopierManager";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getDefaultId"), //
		jMethod<::com::sun::corba::se::spi::copyobject::ObjectCopierFactory()>("getDefaultObjectCopierFactory"), //
		jMethod<::com::sun::corba::se::spi::copyobject::ObjectCopierFactory(::jint)>("getObjectCopierFactory"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::copyobject::ObjectCopierFactory, ::jint)>("registerObjectCopierFactory"), //
		jMethod<::jvoid(::jint)>("setDefaultId"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDefaultId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultId")] != -1);
		return call<R>("getDefaultId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::copyobject::ObjectCopierFactory, typename... Args>
	auto getDefaultObjectCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultObjectCopierFactory")] != -1);
		return call<R>("getDefaultObjectCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::copyobject::ObjectCopierFactory, typename... Args>
	auto getObjectCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectCopierFactory")] != -1);
		return call<R>("getObjectCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerObjectCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerObjectCopierFactory")] != -1);
		return call<R>("registerObjectCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultId")] != -1);
		return call<R>("setDefaultId", std::forward<Args>(args)...);
	}

};

#endif
