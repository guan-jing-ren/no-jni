#ifndef com_sun_corba_se_spi_orbutil_proxy_CompositeInvocationHandlerImpl_HPP
#define com_sun_corba_se_spi_orbutil_proxy_CompositeInvocationHandlerImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::proxy::CompositeInvocationHandlerImpl : public jObject<::com::sun::corba::se::spi::orbutil::proxy::CompositeInvocationHandlerImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_proxy / "CompositeInvocationHandlerImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::Class, ::java::lang::reflect::InvocationHandler)>("addInvocationHandler"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::reflect::Method, ::java::lang::Object *)>("invoke"), //
		jMethod<::jvoid(::java::lang::reflect::InvocationHandler)>("setDefaultHandler"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addInvocationHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInvocationHandler")] != -1);
		return call<R>("addInvocationHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultHandler")] != -1);
		return call<R>("setDefaultHandler", std::forward<Args>(args)...);
	}

};

#endif
