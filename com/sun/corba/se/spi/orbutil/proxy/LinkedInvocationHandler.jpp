#ifndef com_sun_corba_se_spi_orbutil_proxy_LinkedInvocationHandler_HPP
#define com_sun_corba_se_spi_orbutil_proxy_LinkedInvocationHandler_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::proxy::LinkedInvocationHandler : public jObject<::com::sun::corba::se::spi::orbutil::proxy::LinkedInvocationHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_proxy / "LinkedInvocationHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::reflect::Proxy()>("getProxy"), //
		jMethod<::jvoid(::java::lang::reflect::Proxy)>("setProxy"), //
	};

	template<typename R = ::java::lang::reflect::Proxy, typename... Args>
	auto getProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProxy")] != -1);
		return call<R>("getProxy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProxy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProxy")] != -1);
		return call<R>("setProxy", std::forward<Args>(args)...);
	}

};

#endif
