#ifndef com_sun_corba_se_spi_orbutil_threadpool_ThreadPoolChooser_HPP
#define com_sun_corba_se_spi_orbutil_threadpool_ThreadPoolChooser_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser : public jObject<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPoolChooser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_threadpool / "ThreadPoolChooser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool()>("getThreadPool"), //
		jMethod<::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool(::jint)>("getThreadPool"), //
		jMethod<::java::lang::String *()>("getThreadPoolIds"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orbutil::threadpool::ThreadPool, typename... Args>
	auto getThreadPool(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPool")] != -1);
		return call<R>("getThreadPool", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getThreadPoolIds(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolIds")] != -1);
		return call<R>("getThreadPoolIds", std::forward<Args>(args)...);
	}

};

#endif
