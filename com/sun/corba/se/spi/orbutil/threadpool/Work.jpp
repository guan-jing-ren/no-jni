#ifndef com_sun_corba_se_spi_orbutil_threadpool_Work_HPP
#define com_sun_corba_se_spi_orbutil_threadpool_Work_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::threadpool::Work : public jObject<::com::sun::corba::se::spi::orbutil::threadpool::Work, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_threadpool / "Work";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("doWork"), //
		jMethod<::jlong()>("getEnqueueTime"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid(::jlong)>("setEnqueueTime"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto doWork(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doWork")] != -1);
		return call<R>("doWork", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEnqueueTime")] != -1);
		return call<R>("getEnqueueTime", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEnqueueTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEnqueueTime")] != -1);
		return call<R>("setEnqueueTime", std::forward<Args>(args)...);
	}

};

#endif
