#ifndef com_sun_corba_se_spi_orbutil_closure_ClosureFactory_HPP
#define com_sun_corba_se_spi_orbutil_closure_ClosureFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::closure::ClosureFactory : public jObject<::com::sun::corba::se::spi::orbutil::closure::ClosureFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_closure / "ClosureFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orbutil::closure::Closure(::java::lang::Object)>("makeConstant"), //
		jMethod<::com::sun::corba::se::spi::orbutil::closure::Closure(::com::sun::corba::se::spi::orbutil::closure::Closure)>("makeFuture"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orbutil::closure::Closure, typename... Args>
	static auto makeConstant(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeConstant")] != -1);
		return scall<R>("makeConstant", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::closure::Closure, typename... Args>
	static auto makeFuture(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeFuture")] != -1);
		return scall<R>("makeFuture", std::forward<Args>(args)...);
	}

};

#endif
