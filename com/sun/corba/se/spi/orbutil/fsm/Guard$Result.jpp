#ifndef com_sun_corba_se_spi_orbutil_fsm_Guard$Result_HPP
#define com_sun_corba_se_spi_orbutil_fsm_Guard$Result_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result : public jObject<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_fsm / "Guard$Result";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>("DEFERED"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>("DISABLED"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>("ENABLED"), //
	};

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>
	static auto DEFERED() {
		static_assert(field_signatures[jField<F>("DEFERED")] != -1);
		return sat<F>("DEFERED");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>
	static auto DISABLED() {
		static_assert(field_signatures[jField<F>("DISABLED")] != -1);
		return sat<F>("DISABLED");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result>
	static auto ENABLED() {
		static_assert(field_signatures[jField<F>("ENABLED")] != -1);
		return sat<F>("ENABLED");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result()>("complement"), //
		jMethod<::com::sun::corba::se::spi::orbutil::fsm::Guard$Result(::jboolean)>("convert"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result, typename... Args>
	auto complement(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("complement")] != -1);
		return call<R>("complement", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::fsm::Guard$Result, typename... Args>
	static auto convert(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convert")] != -1);
		return scall<R>("convert", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
