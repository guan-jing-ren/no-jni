#ifndef com_sun_corba_se_spi_orbutil_fsm_StateImpl_HPP
#define com_sun_corba_se_spi_orbutil_fsm_StateImpl_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::fsm::StateImpl : public jObject<::com::sun::corba::se::spi::orbutil::fsm::StateImpl, ::com::sun::corba::se::impl::orbutil::fsm::NameBase> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_fsm / "StateImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String)>(), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::Input, ::com::sun::corba::se::impl::orbutil::fsm::GuardedAction)>("addGuardedAction"), //
		jMethod<::com::sun::corba::se::spi::orbutil::fsm::Action()>("getDefaultAction"), //
		jMethod<::com::sun::corba::se::spi::orbutil::fsm::State()>("getDefaultNextState"), //
		jMethod<::java::util::Set(::com::sun::corba::se::spi::orbutil::fsm::Input)>("getGuardedActions"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::FSM)>("postAction"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::FSM)>("preAction"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::Action)>("setDefaultAction"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::State)>("setDefaultNextState"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addGuardedAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addGuardedAction")] != -1);
		return call<R>("addGuardedAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::fsm::Action, typename... Args>
	auto getDefaultAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultAction")] != -1);
		return call<R>("getDefaultAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::fsm::State, typename... Args>
	auto getDefaultNextState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultNextState")] != -1);
		return call<R>("getDefaultNextState", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getGuardedActions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGuardedActions")] != -1);
		return call<R>("getGuardedActions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postAction")] != -1);
		return call<R>("postAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preAction")] != -1);
		return call<R>("preAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultAction")] != -1);
		return call<R>("setDefaultAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultNextState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultNextState")] != -1);
		return call<R>("setDefaultNextState", std::forward<Args>(args)...);
	}

};

#endif
