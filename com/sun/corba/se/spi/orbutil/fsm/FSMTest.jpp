#ifndef com_sun_corba_se_spi_orbutil_fsm_FSMTest_HPP
#define com_sun_corba_se_spi_orbutil_fsm_FSMTest_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::fsm::FSMTest : public jObject<::com::sun::corba::se::spi::orbutil::fsm::FSMTest, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_fsm / "FSMTest";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::orbutil::fsm::Input>("INPUT1"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::Input>("INPUT2"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::Input>("INPUT3"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::Input>("INPUT4"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::State>("STATE1"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::State>("STATE2"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::State>("STATE3"), //
		jField<::com::sun::corba::se::spi::orbutil::fsm::State>("STATE4"), //
	};

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Input>
	static auto INPUT1() {
		static_assert(field_signatures[jField<F>("INPUT1")] != -1);
		return sat<F>("INPUT1");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Input>
	static auto INPUT2() {
		static_assert(field_signatures[jField<F>("INPUT2")] != -1);
		return sat<F>("INPUT2");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Input>
	static auto INPUT3() {
		static_assert(field_signatures[jField<F>("INPUT3")] != -1);
		return sat<F>("INPUT3");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::Input>
	static auto INPUT4() {
		static_assert(field_signatures[jField<F>("INPUT4")] != -1);
		return sat<F>("INPUT4");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::State>
	static auto STATE1() {
		static_assert(field_signatures[jField<F>("STATE1")] != -1);
		return sat<F>("STATE1");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::State>
	static auto STATE2() {
		static_assert(field_signatures[jField<F>("STATE2")] != -1);
		return sat<F>("STATE2");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::State>
	static auto STATE3() {
		static_assert(field_signatures[jField<F>("STATE3")] != -1);
		return sat<F>("STATE3");
	}

	template<typename F = ::com::sun::corba::se::spi::orbutil::fsm::State>
	static auto STATE4() {
		static_assert(field_signatures[jField<F>("STATE4")] != -1);
		return sat<F>("STATE4");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::String *)>("main"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto main(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("main")] != -1);
		return scall<R>("main", std::forward<Args>(args)...);
	}

};

#endif
