#ifndef com_sun_corba_se_spi_orbutil_fsm_FSM_HPP
#define com_sun_corba_se_spi_orbutil_fsm_FSM_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orbutil::fsm::FSM : public jObject<::com::sun::corba::se::spi::orbutil::fsm::FSM, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orbutil_fsm / "FSM";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::spi::orbutil::fsm::Input)>("doIt"), //
		jMethod<::com::sun::corba::se::spi::orbutil::fsm::State()>("getState"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto doIt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("doIt")] != -1);
		return call<R>("doIt", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orbutil::fsm::State, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

};

#endif
