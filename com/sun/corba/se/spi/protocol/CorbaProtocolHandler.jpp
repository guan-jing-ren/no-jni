#ifndef com_sun_corba_se_spi_protocol_CorbaProtocolHandler_HPP
#define com_sun_corba_se_spi_protocol_CorbaProtocolHandler_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::CorbaProtocolHandler : public jObject<::com::sun::corba::se::spi::protocol::CorbaProtocolHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "CorbaProtocolHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::com::sun::corba::se::spi::ior::IOR, ::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("createLocationForward"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("createResponse"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::org::omg::CORBA::SystemException, ::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("createSystemExceptionResponse"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::org::omg::CORBA::portable::UnknownException)>("createUnknownExceptionResponse"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaMessageMediator(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::com::sun::corba::se::spi::servicecontext::ServiceContexts)>("createUserExceptionResponse"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateRequestMessage, ::com::sun::corba::se::spi::protocol::CorbaMessageMediator)>("handleRequest"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage, ::com::sun::corba::se::spi::protocol::CorbaMessageMediator)>("handleRequest"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::java::lang::Throwable, ::org::omg::CORBA::CompletionStatus)>("handleThrowableDuringServerDispatch"), //
	};

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto createLocationForward(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createLocationForward")] != -1);
		return call<R>("createLocationForward", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto createResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createResponse")] != -1);
		return call<R>("createResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto createSystemExceptionResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSystemExceptionResponse")] != -1);
		return call<R>("createSystemExceptionResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto createUnknownExceptionResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUnknownExceptionResponse")] != -1);
		return call<R>("createUnknownExceptionResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaMessageMediator, typename... Args>
	auto createUserExceptionResponse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUserExceptionResponse")] != -1);
		return call<R>("createUserExceptionResponse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleRequest")] != -1);
		return call<R>("handleRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleThrowableDuringServerDispatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleThrowableDuringServerDispatch")] != -1);
		return call<R>("handleThrowableDuringServerDispatch", std::forward<Args>(args)...);
	}

};

#endif
