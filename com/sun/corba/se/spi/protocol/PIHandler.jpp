#ifndef com_sun_corba_se_spi_protocol_PIHandler_HPP
#define com_sun_corba_se_spi_protocol_PIHandler_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::PIHandler : public jObject<::com::sun::corba::se::spi::protocol::PIHandler, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "PIHandler";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint, ::jshort)>("adapterManagerStateChanged"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ObjectReferenceTemplate *, ::jshort)>("adapterStateChanged"), //
		jMethod<::jint()>("allocateServerRequestId"), //
		jMethod<::jvoid()>("cleanupClientPIRequest"), //
		jMethod<::jvoid()>("cleanupServerPIRequest"), //
		jMethod<::org::omg::CORBA::Policy(::jint, ::org::omg::CORBA::Any)>("create_policy"), //
		jMethod<::jvoid()>("destroyInterceptors"), //
		jMethod<::jvoid()>("disableInterceptorsThisThread"), //
		jMethod<::jvoid()>("enableInterceptorsThisThread"), //
		jMethod<::org::omg::PortableInterceptor::Current()>("getPICurrent"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::com::sun::corba::se::spi::oa::ObjectAdapter, ::jbyte *, ::com::sun::corba::se::spi::ior::ObjectKeyTemplate)>("initializeServerPIInfo"), //
		jMethod<::jvoid(::jboolean)>("initiateClientPIRequest"), //
		jMethod<::java::lang::Exception(::jint, ::java::lang::Exception)>("invokeClientPIEndingPoint"), //
		jMethod<::jvoid()>("invokeClientPIStartingPoint"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage)>("invokeServerPIEndingPoint"), //
		jMethod<::jvoid()>("invokeServerPIIntermediatePoint"), //
		jMethod<::jvoid()>("invokeServerPIStartingPoint"), //
		jMethod<::java::lang::Exception(::jint, ::java::lang::Exception)>("makeCompletedClientRequest"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::oa::ObjectAdapter)>("objectAdapterCreated"), //
		jMethod<::jvoid(::jint, ::org::omg::PortableInterceptor::PolicyFactory)>("registerPolicyFactory"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::Interceptor, ::jint)>("register_interceptor"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::corba::RequestImpl)>("setClientPIInfo"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaMessageMediator)>("setClientPIInfo"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("setServerPIExceptionInfo"), //
		jMethod<::jvoid(::java::lang::Exception)>("setServerPIInfo"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::String)>("setServerPIInfo"), //
		jMethod<::jvoid(::org::omg::CORBA::Any)>("setServerPIInfo"), //
		jMethod<::jvoid(::org::omg::CORBA::NVList)>("setServerPIInfo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto adapterManagerStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterManagerStateChanged")] != -1);
		return call<R>("adapterManagerStateChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto adapterStateChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("adapterStateChanged")] != -1);
		return call<R>("adapterStateChanged", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto allocateServerRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allocateServerRequestId")] != -1);
		return call<R>("allocateServerRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cleanupClientPIRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cleanupClientPIRequest")] != -1);
		return call<R>("cleanupClientPIRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto cleanupServerPIRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("cleanupServerPIRequest")] != -1);
		return call<R>("cleanupServerPIRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto create_policy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create_policy")] != -1);
		return call<R>("create_policy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroyInterceptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroyInterceptors")] != -1);
		return call<R>("destroyInterceptors", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto disableInterceptorsThisThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableInterceptorsThisThread")] != -1);
		return call<R>("disableInterceptorsThisThread", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto enableInterceptorsThisThread(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enableInterceptorsThisThread")] != -1);
		return call<R>("enableInterceptorsThisThread", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::Current, typename... Args>
	auto getPICurrent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPICurrent")] != -1);
		return call<R>("getPICurrent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initializeServerPIInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initializeServerPIInfo")] != -1);
		return call<R>("initializeServerPIInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initiateClientPIRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initiateClientPIRequest")] != -1);
		return call<R>("initiateClientPIRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Exception, typename... Args>
	auto invokeClientPIEndingPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeClientPIEndingPoint")] != -1);
		return call<R>("invokeClientPIEndingPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeClientPIStartingPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeClientPIStartingPoint")] != -1);
		return call<R>("invokeClientPIStartingPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeServerPIEndingPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeServerPIEndingPoint")] != -1);
		return call<R>("invokeServerPIEndingPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeServerPIIntermediatePoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeServerPIIntermediatePoint")] != -1);
		return call<R>("invokeServerPIIntermediatePoint", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto invokeServerPIStartingPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invokeServerPIStartingPoint")] != -1);
		return call<R>("invokeServerPIStartingPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Exception, typename... Args>
	auto makeCompletedClientRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeCompletedClientRequest")] != -1);
		return call<R>("makeCompletedClientRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto objectAdapterCreated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectAdapterCreated")] != -1);
		return call<R>("objectAdapterCreated", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerPolicyFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerPolicyFactory")] != -1);
		return call<R>("registerPolicyFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_interceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register_interceptor")] != -1);
		return call<R>("register_interceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setClientPIInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setClientPIInfo")] != -1);
		return call<R>("setClientPIInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServerPIExceptionInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServerPIExceptionInfo")] != -1);
		return call<R>("setServerPIExceptionInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServerPIInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServerPIInfo")] != -1);
		return call<R>("setServerPIInfo", std::forward<Args>(args)...);
	}

};

#endif
