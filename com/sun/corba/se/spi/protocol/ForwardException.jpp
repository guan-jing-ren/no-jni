#ifndef com_sun_corba_se_spi_protocol_ForwardException_HPP
#define com_sun_corba_se_spi_protocol_ForwardException_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::ForwardException : public jObject<::com::sun::corba::se::spi::protocol::ForwardException, ::java::lang::RuntimeException> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "ForwardException";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IOR)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB, ::org::omg::CORBA::Object)>(), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getIOR"), //
		jMethod<::org::omg::CORBA::Object()>("getObject"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return call<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto getObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObject")] != -1);
		return call<R>("getObject", std::forward<Args>(args)...);
	}

};

#endif
