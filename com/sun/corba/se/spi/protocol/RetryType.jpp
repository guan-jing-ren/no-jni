#ifndef com_sun_corba_se_spi_protocol_RetryType_HPP
#define com_sun_corba_se_spi_protocol_RetryType_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::RetryType : public jObject<::com::sun::corba::se::spi::protocol::RetryType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "RetryType";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::protocol::RetryType>("AFTER_RESPONSE"), //
		jField<::com::sun::corba::se::spi::protocol::RetryType>("BEFORE_RESPONSE"), //
		jField<::com::sun::corba::se::spi::protocol::RetryType>("NONE"), //
	};

	template<typename F = ::com::sun::corba::se::spi::protocol::RetryType>
	static auto AFTER_RESPONSE() {
		static_assert(field_signatures[jField<F>("AFTER_RESPONSE")] != -1);
		return sat<F>("AFTER_RESPONSE");
	}

	template<typename F = ::com::sun::corba::se::spi::protocol::RetryType>
	static auto BEFORE_RESPONSE() {
		static_assert(field_signatures[jField<F>("BEFORE_RESPONSE")] != -1);
		return sat<F>("BEFORE_RESPONSE");
	}

	template<typename F = ::com::sun::corba::se::spi::protocol::RetryType>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("isRetry"), //
		jMethod<::com::sun::corba::se::spi::protocol::RetryType(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::corba::se::spi::protocol::RetryType *()>("values"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto isRetry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRetry")] != -1);
		return call<R>("isRetry", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::RetryType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::RetryType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
