#ifndef com_sun_corba_se_spi_protocol_RequestDispatcherRegistry_HPP
#define com_sun_corba_se_spi_protocol_RequestDispatcherRegistry_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::RequestDispatcherRegistry : public jObject<::com::sun::corba::se::spi::protocol::RequestDispatcherRegistry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "RequestDispatcherRegistry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::pept::protocol::ClientRequestDispatcher(::jint)>("getClientRequestDispatcher"), //
		jMethod<::com::sun::corba::se::spi::protocol::LocalClientRequestDispatcherFactory(::jint)>("getLocalClientRequestDispatcherFactory"), //
		jMethod<::java::util::Set()>("getObjectAdapterFactories"), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapterFactory(::jint)>("getObjectAdapterFactory"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher(::jint)>("getServerRequestDispatcher"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher(::java::lang::String)>("getServerRequestDispatcher"), //
		jMethod<::jvoid(::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, ::jint)>("registerClientRequestDispatcher"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::LocalClientRequestDispatcherFactory, ::jint)>("registerLocalClientRequestDispatcherFactory"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::oa::ObjectAdapterFactory, ::jint)>("registerObjectAdapterFactory"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher, ::jint)>("registerServerRequestDispatcher"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher, ::java::lang::String)>("registerServerRequestDispatcher"), //
	};

	template<typename R = ::com::sun::corba::se::pept::protocol::ClientRequestDispatcher, typename... Args>
	auto getClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClientRequestDispatcher")] != -1);
		return call<R>("getClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::LocalClientRequestDispatcherFactory, typename... Args>
	auto getLocalClientRequestDispatcherFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalClientRequestDispatcherFactory")] != -1);
		return call<R>("getLocalClientRequestDispatcherFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto getObjectAdapterFactories(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterFactories")] != -1);
		return call<R>("getObjectAdapterFactories", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapterFactory, typename... Args>
	auto getObjectAdapterFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapterFactory")] != -1);
		return call<R>("getObjectAdapterFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher, typename... Args>
	auto getServerRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerRequestDispatcher")] != -1);
		return call<R>("getServerRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerClientRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerClientRequestDispatcher")] != -1);
		return call<R>("registerClientRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerLocalClientRequestDispatcherFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerLocalClientRequestDispatcherFactory")] != -1);
		return call<R>("registerLocalClientRequestDispatcherFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerObjectAdapterFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerObjectAdapterFactory")] != -1);
		return call<R>("registerObjectAdapterFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerServerRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerServerRequestDispatcher")] != -1);
		return call<R>("registerServerRequestDispatcher", std::forward<Args>(args)...);
	}

};

#endif
