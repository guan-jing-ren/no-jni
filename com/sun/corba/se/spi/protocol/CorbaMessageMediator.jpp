#ifndef com_sun_corba_se_spi_protocol_CorbaMessageMediator_HPP
#define com_sun_corba_se_spi_protocol_CorbaMessageMediator_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::protocol::CorbaMessageMediator : public jObject<::com::sun::corba::se::spi::protocol::CorbaMessageMediator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_protocol / "CorbaMessageMediator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::portable::OutputStream()>("createExceptionReply"), //
		jMethod<::org::omg::CORBA::portable::OutputStream()>("createReply"), //
		jMethod<::jboolean()>("executePIInResponseConstructor"), //
		jMethod<::jboolean()>("executeRemoveThreadInfoInResponseConstructor"), //
		jMethod<::jboolean()>("executeReturnServantInResponseConstructor"), //
		jMethod<::jshort()>("getAddrDisposition"), //
		jMethod<::jshort()>("getAddrDispositionReply"), //
		jMethod<::java::nio::ByteBuffer()>("getDispatchBuffer"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::Message()>("getDispatchHeader"), //
		jMethod<::jbyte()>("getEncodingVersion"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR()>("getForwardedIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage()>("getLocateReplyHeader"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKey()>("getObjectKey"), //
		jMethod<::java::lang::String()>("getOperationName"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaProtocolHandler()>("getProtocolHandler"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage()>("getReplyHeader"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContexts()>("getReplyServiceContexts"), //
		jMethod<::com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage()>("getRequestHeader"), //
		jMethod<::jint()>("getRequestId"), //
		jMethod<::java::lang::Integer()>("getRequestIdInteger"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContexts()>("getRequestServiceContexts"), //
		jMethod<::jbyte()>("getStreamFormatVersion"), //
		jMethod<::jbyte()>("getStreamFormatVersionForReply"), //
		jMethod<::org::omg::CORBA::SystemException()>("getSystemExceptionReply"), //
		jMethod<::jint()>("getThreadPoolToUse"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::InputStream)>("handleDIIReply"), //
		jMethod<::jboolean()>("isDIIRequest"), //
		jMethod<::jboolean()>("isDifferentAddrDispositionRequestedReply"), //
		jMethod<::jboolean()>("isLocationForwardReply"), //
		jMethod<::jboolean()>("isOneWay"), //
		jMethod<::jboolean()>("isSystemExceptionReply"), //
		jMethod<::jboolean()>("isUserExceptionReply"), //
		jMethod<::jvoid()>("sendCancelRequestIfFinalFragmentNotSent"), //
		jMethod<::jvoid(::java::lang::Exception)>("setDIIException"), //
		jMethod<::jvoid(::org::omg::CORBA::Request)>("setDIIInfo"), //
		jMethod<::jvoid(::java::nio::ByteBuffer)>("setDispatchBuffer"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::Message)>("setDispatchHeader"), //
		jMethod<::jvoid(::jboolean)>("setExecutePIInResponseConstructor"), //
		jMethod<::jvoid(::jboolean)>("setExecuteRemoveThreadInfoInResponseConstructor"), //
		jMethod<::jvoid(::jboolean)>("setExecuteReturnServantInResponseConstructor"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::protocol::CorbaProtocolHandler)>("setProtocolHandler"), //
		jMethod<::jvoid(::java::lang::String)>("setReplyExceptionDetailMessage"), //
		jMethod<::jvoid(::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyOrReplyMessage)>("setReplyHeader"), //
		jMethod<::java::lang::Exception(::java::lang::String, ::org::omg::CORBA_2_3::portable::InputStream)>("unmarshalDIIUserException"), //
	};

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto createExceptionReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createExceptionReply")] != -1);
		return call<R>("createExceptionReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::portable::OutputStream, typename... Args>
	auto createReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createReply")] != -1);
		return call<R>("createReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto executePIInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executePIInResponseConstructor")] != -1);
		return call<R>("executePIInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto executeRemoveThreadInfoInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executeRemoveThreadInfoInResponseConstructor")] != -1);
		return call<R>("executeRemoveThreadInfoInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto executeReturnServantInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("executeReturnServantInResponseConstructor")] != -1);
		return call<R>("executeReturnServantInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getAddrDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddrDisposition")] != -1);
		return call<R>("getAddrDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getAddrDispositionReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAddrDispositionReply")] != -1);
		return call<R>("getAddrDispositionReply", std::forward<Args>(args)...);
	}

	template<typename R = ::java::nio::ByteBuffer, typename... Args>
	auto getDispatchBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDispatchBuffer")] != -1);
		return call<R>("getDispatchBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::Message, typename... Args>
	auto getDispatchHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDispatchHeader")] != -1);
		return call<R>("getDispatchHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getEncodingVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEncodingVersion")] != -1);
		return call<R>("getEncodingVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	auto getForwardedIOR(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getForwardedIOR")] != -1);
		return call<R>("getForwardedIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::LocateReplyMessage, typename... Args>
	auto getLocateReplyHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocateReplyHeader")] != -1);
		return call<R>("getLocateReplyHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKey, typename... Args>
	auto getObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKey")] != -1);
		return call<R>("getObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOperationName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperationName")] != -1);
		return call<R>("getOperationName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaProtocolHandler, typename... Args>
	auto getProtocolHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProtocolHandler")] != -1);
		return call<R>("getProtocolHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::ReplyMessage, typename... Args>
	auto getReplyHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplyHeader")] != -1);
		return call<R>("getReplyHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContexts, typename... Args>
	auto getReplyServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReplyServiceContexts")] != -1);
		return call<R>("getReplyServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::protocol::giopmsgheaders::RequestMessage, typename... Args>
	auto getRequestHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestHeader")] != -1);
		return call<R>("getRequestHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRequestId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestId")] != -1);
		return call<R>("getRequestId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getRequestIdInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestIdInteger")] != -1);
		return call<R>("getRequestIdInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContexts, typename... Args>
	auto getRequestServiceContexts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRequestServiceContexts")] != -1);
		return call<R>("getRequestServiceContexts", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getStreamFormatVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamFormatVersion")] != -1);
		return call<R>("getStreamFormatVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getStreamFormatVersionForReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamFormatVersionForReply")] != -1);
		return call<R>("getStreamFormatVersionForReply", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::SystemException, typename... Args>
	auto getSystemExceptionReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemExceptionReply")] != -1);
		return call<R>("getSystemExceptionReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getThreadPoolToUse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getThreadPoolToUse")] != -1);
		return call<R>("getThreadPoolToUse", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto handleDIIReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("handleDIIReply")] != -1);
		return call<R>("handleDIIReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDIIRequest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDIIRequest")] != -1);
		return call<R>("isDIIRequest", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDifferentAddrDispositionRequestedReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDifferentAddrDispositionRequestedReply")] != -1);
		return call<R>("isDifferentAddrDispositionRequestedReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocationForwardReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocationForwardReply")] != -1);
		return call<R>("isLocationForwardReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOneWay(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOneWay")] != -1);
		return call<R>("isOneWay", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSystemExceptionReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSystemExceptionReply")] != -1);
		return call<R>("isSystemExceptionReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isUserExceptionReply(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isUserExceptionReply")] != -1);
		return call<R>("isUserExceptionReply", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto sendCancelRequestIfFinalFragmentNotSent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sendCancelRequestIfFinalFragmentNotSent")] != -1);
		return call<R>("sendCancelRequestIfFinalFragmentNotSent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDIIException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDIIException")] != -1);
		return call<R>("setDIIException", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDIIInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDIIInfo")] != -1);
		return call<R>("setDIIInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDispatchBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDispatchBuffer")] != -1);
		return call<R>("setDispatchBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDispatchHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDispatchHeader")] != -1);
		return call<R>("setDispatchHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExecutePIInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExecutePIInResponseConstructor")] != -1);
		return call<R>("setExecutePIInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExecuteRemoveThreadInfoInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExecuteRemoveThreadInfoInResponseConstructor")] != -1);
		return call<R>("setExecuteRemoveThreadInfoInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExecuteReturnServantInResponseConstructor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExecuteReturnServantInResponseConstructor")] != -1);
		return call<R>("setExecuteReturnServantInResponseConstructor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProtocolHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProtocolHandler")] != -1);
		return call<R>("setProtocolHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReplyExceptionDetailMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReplyExceptionDetailMessage")] != -1);
		return call<R>("setReplyExceptionDetailMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setReplyHeader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setReplyHeader")] != -1);
		return call<R>("setReplyHeader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Exception, typename... Args>
	auto unmarshalDIIUserException(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unmarshalDIIUserException")] != -1);
		return call<R>("unmarshalDIIUserException", std::forward<Args>(args)...);
	}

};

#endif
