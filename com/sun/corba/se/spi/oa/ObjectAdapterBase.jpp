#ifndef com_sun_corba_se_spi_oa_ObjectAdapterBase_HPP
#define com_sun_corba_se_spi_oa_ObjectAdapterBase_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::oa::ObjectAdapterBase : public jObject<::com::sun::corba::se::spi::oa::ObjectAdapterBase, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_oa / "ObjectAdapterBase";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::jvoid()>("enter"), //
		jMethod<::jvoid()>("exit"), //
		jMethod<::jbyte *()>("getAdapterId"), //
		jMethod<::org::omg::PortableInterceptor::ObjectReferenceTemplate()>("getAdapterTemplate"), //
		jMethod<::org::omg::PortableInterceptor::ObjectReferenceFactory()>("getCurrentFactory"), //
		jMethod<::org::omg::CORBA::Policy(::jint)>("getEffectivePolicy"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplate()>("getIORTemplate"), //
		jMethod<::java::lang::String *(::java::lang::Object, ::jbyte *)>("getInterfaces"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::oa::OAInvocationInfo)>("getInvocationServant"), //
		jMethod<::org::omg::CORBA::Object(::jbyte *)>("getLocalServant"), //
		jMethod<::jint()>("getManagerId"), //
		jMethod<::com::sun::corba::se::spi::orb::ORB()>("getORB"), //
		jMethod<::jshort()>("getState"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::jboolean, ::com::sun::corba::se::impl::oa::poa::Policies, ::java::lang::String, ::java::lang::String, ::com::sun::corba::se::spi::ior::ObjectAdapterId)>("initializeTemplate"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException()>("invocationWrapper"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException()>("iorWrapper"), //
		jMethod<::com::sun::corba::se::impl::logging::POASystemException()>("lifecycleWrapper"), //
		jMethod<::com::sun::corba::se::spi::oa::OAInvocationInfo(::jbyte *)>("makeInvocationInfo"), //
		jMethod<::org::omg::CORBA::Object(::java::lang::String, ::jbyte *)>("makeObject"), //
		jMethod<::com::sun::corba::se::impl::logging::OMGSystemException()>("omgInvocationWrapper"), //
		jMethod<::com::sun::corba::se::impl::logging::OMGSystemException()>("omgLifecycleWrapper"), //
		jMethod<::jvoid()>("returnServant"), //
		jMethod<::jvoid(::org::omg::PortableInterceptor::ObjectReferenceFactory)>("setCurrentFactory"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto enter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("enter")] != -1);
		return call<R>("enter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exit(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exit")] != -1);
		return call<R>("exit", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getAdapterId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterId")] != -1);
		return call<R>("getAdapterId", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::ObjectReferenceTemplate, typename... Args>
	auto getAdapterTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterTemplate")] != -1);
		return call<R>("getAdapterTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::ObjectReferenceFactory, typename... Args>
	auto getCurrentFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrentFactory")] != -1);
		return call<R>("getCurrentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto getEffectivePolicy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEffectivePolicy")] != -1);
		return call<R>("getEffectivePolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplate, typename... Args>
	auto getIORTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORTemplate")] != -1);
		return call<R>("getIORTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInterfaces")] != -1);
		return call<R>("getInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto getInvocationServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInvocationServant")] != -1);
		return call<R>("getInvocationServant", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto getLocalServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalServant")] != -1);
		return call<R>("getLocalServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getManagerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getManagerId")] != -1);
		return call<R>("getManagerId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORB, typename... Args>
	auto getORB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORB")] != -1);
		return call<R>("getORB", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getState(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getState")] != -1);
		return call<R>("getState", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initializeTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initializeTemplate")] != -1);
		return call<R>("initializeTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::POASystemException, typename... Args>
	auto invocationWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invocationWrapper")] != -1);
		return call<R>("invocationWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::POASystemException, typename... Args>
	auto iorWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iorWrapper")] != -1);
		return call<R>("iorWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::POASystemException, typename... Args>
	auto lifecycleWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lifecycleWrapper")] != -1);
		return call<R>("lifecycleWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::OAInvocationInfo, typename... Args>
	auto makeInvocationInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeInvocationInfo")] != -1);
		return call<R>("makeInvocationInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	auto makeObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObject")] != -1);
		return call<R>("makeObject", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::OMGSystemException, typename... Args>
	auto omgInvocationWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("omgInvocationWrapper")] != -1);
		return call<R>("omgInvocationWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::logging::OMGSystemException, typename... Args>
	auto omgLifecycleWrapper(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("omgLifecycleWrapper")] != -1);
		return call<R>("omgLifecycleWrapper", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto returnServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("returnServant")] != -1);
		return call<R>("returnServant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCurrentFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCurrentFactory")] != -1);
		return call<R>("setCurrentFactory", std::forward<Args>(args)...);
	}

};

#endif
