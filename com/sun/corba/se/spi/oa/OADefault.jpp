#ifndef com_sun_corba_se_spi_oa_OADefault_HPP
#define com_sun_corba_se_spi_oa_OADefault_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::oa::OADefault : public jObject<::com::sun::corba::se::spi::oa::OADefault, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_oa / "OADefault";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapterFactory(::com::sun::corba::se::spi::orb::ORB)>("makePOAFactory"), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapterFactory(::com::sun::corba::se::spi::orb::ORB)>("makeTOAFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapterFactory, typename... Args>
	static auto makePOAFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makePOAFactory")] != -1);
		return scall<R>("makePOAFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapterFactory, typename... Args>
	static auto makeTOAFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeTOAFactory")] != -1);
		return scall<R>("makeTOAFactory", std::forward<Args>(args)...);
	}

};

#endif
