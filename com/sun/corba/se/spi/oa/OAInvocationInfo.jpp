#ifndef com_sun_corba_se_spi_oa_OAInvocationInfo_HPP
#define com_sun_corba_se_spi_oa_OAInvocationInfo_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::oa::OAInvocationInfo : public jObject<::com::sun::corba::se::spi::oa::OAInvocationInfo, ::org::omg::CORBA::portable::ServantObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_oa / "OAInvocationInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::oa::OAInvocationInfo, ::java::lang::String)>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::oa::ObjectAdapter, ::jbyte *)>(), //
		jMethod<::org::omg::PortableServer::ServantLocatorPackage::CookieHolder()>("getCookieHolder"), //
		jMethod<::com::sun::corba::se::spi::copyobject::ObjectCopierFactory()>("getCopierFactory"), //
		jMethod<::java::lang::String()>("getOperation"), //
		jMethod<::java::lang::Object()>("getServantContainer"), //
		jMethod<::jbyte *()>("id"), //
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapter()>("oa"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::copyobject::ObjectCopierFactory)>("setCopierFactory"), //
		jMethod<::jvoid(::java::lang::String)>("setOperation"), //
		jMethod<::jvoid(::java::lang::Object)>("setServant"), //
	};

	template<typename R = ::org::omg::PortableServer::ServantLocatorPackage::CookieHolder, typename... Args>
	auto getCookieHolder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCookieHolder")] != -1);
		return call<R>("getCookieHolder", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::copyobject::ObjectCopierFactory, typename... Args>
	auto getCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCopierFactory")] != -1);
		return call<R>("getCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperation")] != -1);
		return call<R>("getOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getServantContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServantContainer")] != -1);
		return call<R>("getServantContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto id(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("id")] != -1);
		return call<R>("id", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapter, typename... Args>
	auto oa(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("oa")] != -1);
		return call<R>("oa", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCopierFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCopierFactory")] != -1);
		return call<R>("setCopierFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOperation")] != -1);
		return call<R>("setOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setServant")] != -1);
		return call<R>("setServant", std::forward<Args>(args)...);
	}

};

#endif
