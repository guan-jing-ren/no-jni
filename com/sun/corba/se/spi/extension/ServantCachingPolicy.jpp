#ifndef com_sun_corba_se_spi_extension_ServantCachingPolicy_HPP
#define com_sun_corba_se_spi_extension_ServantCachingPolicy_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::extension::ServantCachingPolicy : public jObject<::com::sun::corba::se::spi::extension::ServantCachingPolicy, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_extension / "ServantCachingPolicy";

	constexpr static Enume field_signatures{
		jField<::jint>("FULL_SEMANTICS"), //
		jField<::jint>("INFO_ONLY_SEMANTICS"), //
		jField<::jint>("MINIMAL_SEMANTICS"), //
		jField<::jint>("NO_SERVANT_CACHING"), //
	};

	template<typename F = ::jint>
	static auto FULL_SEMANTICS() {
		static_assert(field_signatures[jField<F>("FULL_SEMANTICS")] != -1);
		return sat<F>("FULL_SEMANTICS");
	}

	template<typename F = ::jint>
	static auto INFO_ONLY_SEMANTICS() {
		static_assert(field_signatures[jField<F>("INFO_ONLY_SEMANTICS")] != -1);
		return sat<F>("INFO_ONLY_SEMANTICS");
	}

	template<typename F = ::jint>
	static auto MINIMAL_SEMANTICS() {
		static_assert(field_signatures[jField<F>("MINIMAL_SEMANTICS")] != -1);
		return sat<F>("MINIMAL_SEMANTICS");
	}

	template<typename F = ::jint>
	static auto NO_SERVANT_CACHING() {
		static_assert(field_signatures[jField<F>("NO_SERVANT_CACHING")] != -1);
		return sat<F>("NO_SERVANT_CACHING");
	}

	constexpr static Enume method_signatures{
		jMethod<::org::omg::CORBA::Policy()>("copy"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::com::sun::corba::se::spi::extension::ServantCachingPolicy()>("getFullPolicy"), //
		jMethod<::com::sun::corba::se::spi::extension::ServantCachingPolicy()>("getInfoOnlyPolicy"), //
		jMethod<::com::sun::corba::se::spi::extension::ServantCachingPolicy()>("getMinimalPolicy"), //
		jMethod<::com::sun::corba::se::spi::extension::ServantCachingPolicy()>("getPolicy"), //
		jMethod<::jint()>("getType"), //
		jMethod<::jint()>("policy_type"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String()>("typeToName"), //
	};

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::extension::ServantCachingPolicy, typename... Args>
	static auto getFullPolicy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFullPolicy")] != -1);
		return scall<R>("getFullPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::extension::ServantCachingPolicy, typename... Args>
	static auto getInfoOnlyPolicy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInfoOnlyPolicy")] != -1);
		return scall<R>("getInfoOnlyPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::extension::ServantCachingPolicy, typename... Args>
	static auto getMinimalPolicy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimalPolicy")] != -1);
		return scall<R>("getMinimalPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::extension::ServantCachingPolicy, typename... Args>
	static auto getPolicy(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolicy")] != -1);
		return scall<R>("getPolicy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto policy_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policy_type")] != -1);
		return call<R>("policy_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto typeToName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("typeToName")] != -1);
		return call<R>("typeToName", std::forward<Args>(args)...);
	}

};

#endif
