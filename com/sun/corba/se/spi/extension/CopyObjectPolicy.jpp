#ifndef com_sun_corba_se_spi_extension_CopyObjectPolicy_HPP
#define com_sun_corba_se_spi_extension_CopyObjectPolicy_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::extension::CopyObjectPolicy : public jObject<::com::sun::corba::se::spi::extension::CopyObjectPolicy, ::org::omg::CORBA::LocalObject> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_extension / "CopyObjectPolicy";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::org::omg::CORBA::Policy()>("copy"), //
		jMethod<::jvoid()>("destroy"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::jint()>("policy_type"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::org::omg::CORBA::Policy, typename... Args>
	auto copy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("copy")] != -1);
		return call<R>("copy", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto destroy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("destroy")] != -1);
		return call<R>("destroy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto policy_type(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("policy_type")] != -1);
		return call<R>("policy_type", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
