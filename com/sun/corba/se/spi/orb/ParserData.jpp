#ifndef com_sun_corba_se_spi_orb_ParserData_HPP
#define com_sun_corba_se_spi_orb_ParserData_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orb::ParserData : public jObject<::com::sun::corba::se::spi::orb::ParserData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orb / "ParserData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::PropertyParser)>("addToParser"), //
		jMethod<::jvoid(::java::util::Properties)>("addToProperties"), //
		jMethod<::java::lang::Object()>("getDefaultValue"), //
		jMethod<::java::lang::String()>("getFieldName"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("getOperation"), //
		jMethod<::java::lang::String()>("getPropertyName"), //
		jMethod<::java::lang::Object()>("getTestValue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addToParser(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToParser")] != -1);
		return call<R>("addToParser", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addToProperties(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToProperties")] != -1);
		return call<R>("addToProperties", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDefaultValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return call<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFieldName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFieldName")] != -1);
		return call<R>("getFieldName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	auto getOperation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOperation")] != -1);
		return call<R>("getOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getPropertyName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyName")] != -1);
		return call<R>("getPropertyName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getTestValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTestValue")] != -1);
		return call<R>("getTestValue", std::forward<Args>(args)...);
	}

};

#endif
