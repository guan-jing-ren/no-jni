#ifndef com_sun_corba_se_spi_orb_ORBVersionFactory_HPP
#define com_sun_corba_se_spi_orb_ORBVersionFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orb::ORBVersionFactory : public jObject<::com::sun::corba::se::spi::orb::ORBVersionFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orb / "ORBVersionFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion(::org::omg::CORBA::portable::InputStream)>("create"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getFOREIGN"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getJDK1_3_1_01"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getNEW"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getNEWER"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getOLD"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getORBVersion"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getPEORB"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto create(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("create")] != -1);
		return scall<R>("create", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getFOREIGN(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFOREIGN")] != -1);
		return scall<R>("getFOREIGN", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getJDK1_3_1_01(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getJDK1_3_1_01")] != -1);
		return scall<R>("getJDK1_3_1_01", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getNEW(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNEW")] != -1);
		return scall<R>("getNEW", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getNEWER(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNEWER")] != -1);
		return scall<R>("getNEWER", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getOLD(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOLD")] != -1);
		return scall<R>("getOLD", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getORBVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBVersion")] != -1);
		return scall<R>("getORBVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	static auto getPEORB(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPEORB")] != -1);
		return scall<R>("getPEORB", std::forward<Args>(args)...);
	}

};

#endif
