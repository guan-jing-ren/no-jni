#ifndef com_sun_corba_se_spi_orb_OperationFactory_HPP
#define com_sun_corba_se_spi_orb_OperationFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orb::OperationFactory : public jObject<::com::sun::corba::se::spi::orb::OperationFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orb / "OperationFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("URLAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("booleanAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("classAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::com::sun::corba::se::spi::orb::Operation, ::com::sun::corba::se::spi::orb::Operation)>("compose"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("convertIntegerToShort"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("identityAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::jint)>("indexAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("integerAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::jint, ::jint)>("integerRangeAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation)>("listAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::com::sun::corba::se::spi::orb::Operation)>("mapAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::com::sun::corba::se::spi::orb::Operation *)>("mapSequenceAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::com::sun::corba::se::spi::orb::Operation)>("maskErrorAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation *)>("sequenceAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("setFlagAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("stringAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("suffixAction"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation()>("valueAction"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto URLAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("URLAction")] != -1);
		return scall<R>("URLAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto booleanAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("booleanAction")] != -1);
		return scall<R>("booleanAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto classAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("classAction")] != -1);
		return scall<R>("classAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto compose(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compose")] != -1);
		return scall<R>("compose", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto convertIntegerToShort(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertIntegerToShort")] != -1);
		return scall<R>("convertIntegerToShort", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto identityAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("identityAction")] != -1);
		return scall<R>("identityAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto indexAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexAction")] != -1);
		return scall<R>("indexAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto integerAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("integerAction")] != -1);
		return scall<R>("integerAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto integerRangeAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("integerRangeAction")] != -1);
		return scall<R>("integerRangeAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto listAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("listAction")] != -1);
		return scall<R>("listAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto mapAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapAction")] != -1);
		return scall<R>("mapAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto mapSequenceAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapSequenceAction")] != -1);
		return scall<R>("mapSequenceAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto maskErrorAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maskErrorAction")] != -1);
		return scall<R>("maskErrorAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto sequenceAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("sequenceAction")] != -1);
		return scall<R>("sequenceAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto setFlagAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFlagAction")] != -1);
		return scall<R>("setFlagAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto stringAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringAction")] != -1);
		return scall<R>("stringAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto suffixAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("suffixAction")] != -1);
		return scall<R>("suffixAction", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto valueAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueAction")] != -1);
		return scall<R>("valueAction", std::forward<Args>(args)...);
	}

};

#endif
