#ifndef com_sun_corba_se_spi_orb_ORBData_HPP
#define com_sun_corba_se_spi_orb_ORBData_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orb::ORBData : public jObject<::com::sun::corba::se::spi::orb::ORBData, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orb / "ORBData";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("acceptorSocketType"), //
		jMethod<::jboolean()>("acceptorSocketUseSelectThreadToWait"), //
		jMethod<::jboolean()>("acceptorSocketUseWorkerThreadForEvent"), //
		jMethod<::jboolean()>("alwaysSendCodeSetServiceContext"), //
		jMethod<::java::lang::String()>("connectionSocketType"), //
		jMethod<::jboolean()>("connectionSocketUseSelectThreadToWait"), //
		jMethod<::jboolean()>("connectionSocketUseWorkerThreadForEvent"), //
		jMethod<::jboolean()>("disableDirectByteBufferUse"), //
		jMethod<::com::sun::corba::se::pept::transport::Acceptor *()>("getAcceptors"), //
		jMethod<::java::lang::Class()>("getBadServerIdHandler"), //
		jMethod<::com::sun::corba::se::impl::encoding::CodeSetComponentInfo()>("getCodeSetComponentInfo"), //
		jMethod<::com::sun::corba::se::spi::transport::CorbaContactInfoListFactory()>("getCorbaContactInfoListFactory"), //
		jMethod<::jshort()>("getGIOPAddressDisposition"), //
		jMethod<::jint(::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("getGIOPBuffMgrStrategy"), //
		jMethod<::jint()>("getGIOPBufferSize"), //
		jMethod<::jint()>("getGIOPFragmentSize"), //
		jMethod<::jshort()>("getGIOPTargetAddressPreference"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::jint()>("getHighWaterMark"), //
		jMethod<::com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo()>("getIIOPPrimaryToContactInfo"), //
		jMethod<::com::sun::corba::se::spi::transport::IORToSocketInfo()>("getIORToSocketInfo"), //
		jMethod<::com::sun::corba::se::spi::legacy::connection::ORBSocketFactory()>("getLegacySocketFactory"), //
		jMethod<::java::lang::String()>("getListenOnAllInterfaces"), //
		jMethod<::jint()>("getLowWaterMark"), //
		jMethod<::jint()>("getNumberToReclaim"), //
		jMethod<::java::lang::String *()>("getORBDebugFlags"), //
		jMethod<::java::lang::String()>("getORBDefaultInitialReference"), //
		jMethod<::java::lang::String()>("getORBId"), //
		jMethod<::java::lang::String()>("getORBInitialHost"), //
		jMethod<::jint()>("getORBInitialPort"), //
		jMethod<::com::sun::corba::se::spi::orb::StringPair *()>("getORBInitialReferences"), //
		jMethod<::org::omg::PortableInterceptor::ORBInitializer *()>("getORBInitializers"), //
		jMethod<::java::lang::String()>("getORBServerHost"), //
		jMethod<::jboolean()>("getORBServerIdPropertySpecified"), //
		jMethod<::jint()>("getORBServerPort"), //
		jMethod<::jboolean()>("getPersistentPortInitialized"), //
		jMethod<::jint()>("getPersistentServerId"), //
		jMethod<::jboolean()>("getPersistentServerIdInitialized"), //
		jMethod<::jint()>("getPersistentServerPort"), //
		jMethod<::jboolean()>("getServerIsORBActivated"), //
		jMethod<::com::sun::corba::se::spi::transport::ORBSocketFactory()>("getSocketFactory"), //
		jMethod<::com::sun::corba::se::spi::transport::ReadTimeouts()>("getTransportTCPReadTimeouts"), //
		jMethod<::com::sun::corba::se::impl::legacy::connection::USLPort *()>("getUserSpecifiedListenPorts"), //
		jMethod<::jboolean()>("isJavaSerializationEnabled"), //
		jMethod<::jboolean()>("isLocalOptimizationAllowed"), //
		jMethod<::jboolean()>("useByteOrderMarkers"), //
		jMethod<::jboolean()>("useByteOrderMarkersInEncapsulations"), //
		jMethod<::jboolean()>("useRepId"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto acceptorSocketType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorSocketType")] != -1);
		return call<R>("acceptorSocketType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto acceptorSocketUseSelectThreadToWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorSocketUseSelectThreadToWait")] != -1);
		return call<R>("acceptorSocketUseSelectThreadToWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto acceptorSocketUseWorkerThreadForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("acceptorSocketUseWorkerThreadForEvent")] != -1);
		return call<R>("acceptorSocketUseWorkerThreadForEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto alwaysSendCodeSetServiceContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("alwaysSendCodeSetServiceContext")] != -1);
		return call<R>("alwaysSendCodeSetServiceContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto connectionSocketType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionSocketType")] != -1);
		return call<R>("connectionSocketType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto connectionSocketUseSelectThreadToWait(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionSocketUseSelectThreadToWait")] != -1);
		return call<R>("connectionSocketUseSelectThreadToWait", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto connectionSocketUseWorkerThreadForEvent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connectionSocketUseWorkerThreadForEvent")] != -1);
		return call<R>("connectionSocketUseWorkerThreadForEvent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto disableDirectByteBufferUse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("disableDirectByteBufferUse")] != -1);
		return call<R>("disableDirectByteBufferUse", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::pept::transport::Acceptor *, typename... Args>
	auto getAcceptors(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAcceptors")] != -1);
		return call<R>("getAcceptors", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getBadServerIdHandler(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBadServerIdHandler")] != -1);
		return call<R>("getBadServerIdHandler", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::encoding::CodeSetComponentInfo, typename... Args>
	auto getCodeSetComponentInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodeSetComponentInfo")] != -1);
		return call<R>("getCodeSetComponentInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::CorbaContactInfoListFactory, typename... Args>
	auto getCorbaContactInfoListFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCorbaContactInfoListFactory")] != -1);
		return call<R>("getCorbaContactInfoListFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getGIOPAddressDisposition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPAddressDisposition")] != -1);
		return call<R>("getGIOPAddressDisposition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGIOPBuffMgrStrategy(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPBuffMgrStrategy")] != -1);
		return call<R>("getGIOPBuffMgrStrategy", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGIOPBufferSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPBufferSize")] != -1);
		return call<R>("getGIOPBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getGIOPFragmentSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPFragmentSize")] != -1);
		return call<R>("getGIOPFragmentSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getGIOPTargetAddressPreference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPTargetAddressPreference")] != -1);
		return call<R>("getGIOPTargetAddressPreference", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHighWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighWaterMark")] != -1);
		return call<R>("getHighWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::IIOPPrimaryToContactInfo, typename... Args>
	auto getIIOPPrimaryToContactInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIIOPPrimaryToContactInfo")] != -1);
		return call<R>("getIIOPPrimaryToContactInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::IORToSocketInfo, typename... Args>
	auto getIORToSocketInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORToSocketInfo")] != -1);
		return call<R>("getIORToSocketInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::legacy::connection::ORBSocketFactory, typename... Args>
	auto getLegacySocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLegacySocketFactory")] != -1);
		return call<R>("getLegacySocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getListenOnAllInterfaces(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getListenOnAllInterfaces")] != -1);
		return call<R>("getListenOnAllInterfaces", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLowWaterMark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowWaterMark")] != -1);
		return call<R>("getLowWaterMark", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumberToReclaim(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumberToReclaim")] != -1);
		return call<R>("getNumberToReclaim", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getORBDebugFlags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBDebugFlags")] != -1);
		return call<R>("getORBDebugFlags", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getORBDefaultInitialReference(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBDefaultInitialReference")] != -1);
		return call<R>("getORBDefaultInitialReference", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getORBId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBId")] != -1);
		return call<R>("getORBId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getORBInitialHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBInitialHost")] != -1);
		return call<R>("getORBInitialHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getORBInitialPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBInitialPort")] != -1);
		return call<R>("getORBInitialPort", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::StringPair *, typename... Args>
	auto getORBInitialReferences(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBInitialReferences")] != -1);
		return call<R>("getORBInitialReferences", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::ORBInitializer *, typename... Args>
	auto getORBInitializers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBInitializers")] != -1);
		return call<R>("getORBInitializers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getORBServerHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBServerHost")] != -1);
		return call<R>("getORBServerHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getORBServerIdPropertySpecified(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBServerIdPropertySpecified")] != -1);
		return call<R>("getORBServerIdPropertySpecified", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getORBServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBServerPort")] != -1);
		return call<R>("getORBServerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPersistentPortInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPersistentPortInitialized")] != -1);
		return call<R>("getPersistentPortInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPersistentServerId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPersistentServerId")] != -1);
		return call<R>("getPersistentServerId", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPersistentServerIdInitialized(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPersistentServerIdInitialized")] != -1);
		return call<R>("getPersistentServerIdInitialized", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPersistentServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPersistentServerPort")] != -1);
		return call<R>("getPersistentServerPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getServerIsORBActivated(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerIsORBActivated")] != -1);
		return call<R>("getServerIsORBActivated", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::ORBSocketFactory, typename... Args>
	auto getSocketFactory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSocketFactory")] != -1);
		return call<R>("getSocketFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::ReadTimeouts, typename... Args>
	auto getTransportTCPReadTimeouts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransportTCPReadTimeouts")] != -1);
		return call<R>("getTransportTCPReadTimeouts", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::legacy::connection::USLPort *, typename... Args>
	auto getUserSpecifiedListenPorts(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUserSpecifiedListenPorts")] != -1);
		return call<R>("getUserSpecifiedListenPorts", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isJavaSerializationEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isJavaSerializationEnabled")] != -1);
		return call<R>("isJavaSerializationEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocalOptimizationAllowed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocalOptimizationAllowed")] != -1);
		return call<R>("isLocalOptimizationAllowed", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useByteOrderMarkers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useByteOrderMarkers")] != -1);
		return call<R>("useByteOrderMarkers", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useByteOrderMarkersInEncapsulations(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useByteOrderMarkersInEncapsulations")] != -1);
		return call<R>("useByteOrderMarkersInEncapsulations", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto useRepId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("useRepId")] != -1);
		return call<R>("useRepId", std::forward<Args>(args)...);
	}

};

#endif
