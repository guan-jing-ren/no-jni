#ifndef com_sun_corba_se_spi_orb_PropertyParser_HPP
#define com_sun_corba_se_spi_orb_PropertyParser_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::orb::PropertyParser : public jObject<::com::sun::corba::se::spi::orb::PropertyParser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_orb / "PropertyParser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::orb::PropertyParser(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation, ::java::lang::String)>("add"), //
		jMethod<::com::sun::corba::se::spi::orb::PropertyParser(::java::lang::String, ::com::sun::corba::se::spi::orb::Operation, ::java::lang::String, ::java::lang::Class)>("addPrefix"), //
		jMethod<::java::util::Iterator()>("iterator"), //
		jMethod<::java::util::Map(::java::util::Properties)>("parse"), //
	};

	template<typename R = ::com::sun::corba::se::spi::orb::PropertyParser, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::PropertyParser, typename... Args>
	auto addPrefix(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addPrefix")] != -1);
		return call<R>("addPrefix", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

};

#endif
