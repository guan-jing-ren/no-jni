#ifndef com_sun_corba_se_spi_ior_IORFactories_HPP
#define com_sun_corba_se_spi_ior_IORFactories_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::IORFactories : public jObject<::com::sun::corba::se::spi::ior::IORFactories, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior / "IORFactories";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::ior::IOR(::org::omg::CORBA::Object)>("getIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IORFactory(::org::omg::PortableInterceptor::ObjectReferenceTemplate)>("getIORFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList(::org::omg::PortableInterceptor::ObjectReferenceFactory)>("getIORTemplateList"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR(::com::sun::corba::se::spi::orb::ORB)>("makeIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String)>("makeIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IOR(::org::omg::CORBA_2_3::portable::InputStream)>("makeIOR"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplate(::com::sun::corba::se::spi::ior::ObjectKeyTemplate)>("makeIORTemplate"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplate(::org::omg::CORBA_2_3::portable::InputStream)>("makeIORTemplate"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList()>("makeIORTemplateList"), //
		jMethod<::com::sun::corba::se::spi::ior::IORTemplateList(::org::omg::CORBA_2_3::portable::InputStream)>("makeIORTemplateList"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectId(::jbyte *)>("makeObjectId"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKey(::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::com::sun::corba::se::spi::ior::ObjectId)>("makeObjectKey"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKeyFactory(::com::sun::corba::se::spi::orb::ORB)>("makeObjectKeyFactory"), //
		jMethod<::org::omg::CORBA::Object(::com::sun::corba::se::spi::ior::IOR)>("makeObjectReference"), //
		jMethod<::org::omg::PortableInterceptor::ObjectReferenceFactory(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IORTemplateList)>("makeObjectReferenceFactory"), //
		jMethod<::org::omg::PortableInterceptor::ObjectReferenceTemplate(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IORTemplate)>("makeObjectReferenceTemplate"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::orb::ORB)>("registerValueFactories"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	static auto getIOR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOR")] != -1);
		return scall<R>("getIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORFactory, typename... Args>
	static auto getIORFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORFactory")] != -1);
		return scall<R>("getIORFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplateList, typename... Args>
	static auto getIORTemplateList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIORTemplateList")] != -1);
		return scall<R>("getIORTemplateList", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IOR, typename... Args>
	static auto makeIOR(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIOR")] != -1);
		return scall<R>("makeIOR", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplate, typename... Args>
	static auto makeIORTemplate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIORTemplate")] != -1);
		return scall<R>("makeIORTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IORTemplateList, typename... Args>
	static auto makeIORTemplateList(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIORTemplateList")] != -1);
		return scall<R>("makeIORTemplateList", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectId, typename... Args>
	static auto makeObjectId(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectId")] != -1);
		return scall<R>("makeObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKey, typename... Args>
	static auto makeObjectKey(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectKey")] != -1);
		return scall<R>("makeObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKeyFactory, typename... Args>
	static auto makeObjectKeyFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectKeyFactory")] != -1);
		return scall<R>("makeObjectKeyFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::CORBA::Object, typename... Args>
	static auto makeObjectReference(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectReference")] != -1);
		return scall<R>("makeObjectReference", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::ObjectReferenceFactory, typename... Args>
	static auto makeObjectReferenceFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectReferenceFactory")] != -1);
		return scall<R>("makeObjectReferenceFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::org::omg::PortableInterceptor::ObjectReferenceTemplate, typename... Args>
	static auto makeObjectReferenceTemplate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeObjectReferenceTemplate")] != -1);
		return scall<R>("makeObjectReferenceTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto registerValueFactories(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerValueFactories")] != -1);
		return scall<R>("registerValueFactories", std::forward<Args>(args)...);
	}

};

#endif
