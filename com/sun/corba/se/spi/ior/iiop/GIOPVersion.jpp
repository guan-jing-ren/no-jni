#ifndef com_sun_corba_se_spi_ior_iiop_GIOPVersion_HPP
#define com_sun_corba_se_spi_ior_iiop_GIOPVersion_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::iiop::GIOPVersion : public jObject<::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior_iiop / "GIOPVersion";

	constexpr static Enume field_signatures{
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("DEFAULT_VERSION"), //
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("V13_XX"), //
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("V1_0"), //
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("V1_1"), //
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("V1_2"), //
		jField<::com::sun::corba::se::spi::ior::iiop::GIOPVersion>("V1_3"), //
		jField<::jint>("VERSION_13_XX"), //
		jField<::jint>("VERSION_1_0"), //
		jField<::jint>("VERSION_1_1"), //
		jField<::jint>("VERSION_1_2"), //
		jField<::jint>("VERSION_1_3"), //
	};

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto DEFAULT_VERSION() {
		static_assert(field_signatures[jField<F>("DEFAULT_VERSION")] != -1);
		return sat<F>("DEFAULT_VERSION");
	}

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto V13_XX() {
		static_assert(field_signatures[jField<F>("V13_XX")] != -1);
		return sat<F>("V13_XX");
	}

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto V1_0() {
		static_assert(field_signatures[jField<F>("V1_0")] != -1);
		return sat<F>("V1_0");
	}

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto V1_1() {
		static_assert(field_signatures[jField<F>("V1_1")] != -1);
		return sat<F>("V1_1");
	}

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto V1_2() {
		static_assert(field_signatures[jField<F>("V1_2")] != -1);
		return sat<F>("V1_2");
	}

	template<typename F = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion>
	static auto V1_3() {
		static_assert(field_signatures[jField<F>("V1_3")] != -1);
		return sat<F>("V1_3");
	}

	template<typename F = ::jint>
	static auto VERSION_13_XX() {
		static_assert(field_signatures[jField<F>("VERSION_13_XX")] != -1);
		return sat<F>("VERSION_13_XX");
	}

	template<typename F = ::jint>
	static auto VERSION_1_0() {
		static_assert(field_signatures[jField<F>("VERSION_1_0")] != -1);
		return sat<F>("VERSION_1_0");
	}

	template<typename F = ::jint>
	static auto VERSION_1_1() {
		static_assert(field_signatures[jField<F>("VERSION_1_1")] != -1);
		return sat<F>("VERSION_1_1");
	}

	template<typename F = ::jint>
	static auto VERSION_1_2() {
		static_assert(field_signatures[jField<F>("VERSION_1_2")] != -1);
		return sat<F>("VERSION_1_2");
	}

	template<typename F = ::jint>
	static auto VERSION_1_3() {
		static_assert(field_signatures[jField<F>("VERSION_1_3")] != -1);
		return sat<F>("VERSION_1_3");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jbyte, ::jbyte)>(), //
		jConstructor<::jvoid(::jint, ::jint)>(), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::IOR)>("chooseRequestVersion"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion(::jbyte, ::jbyte)>("getInstance"), //
		jMethod<::jbyte()>("getMajor"), //
		jMethod<::jbyte()>("getMinor"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("intValue"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("lessThan"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion(::java::lang::String)>("parseVersion"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::InputStream)>("read"), //
		jMethod<::jboolean()>("supportsIORIIOPProfileComponents"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::org::omg::CORBA::portable::OutputStream)>("write"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	static auto chooseRequestVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("chooseRequestVersion")] != -1);
		return scall<R>("chooseRequestVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajor")] != -1);
		return call<R>("getMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinor")] != -1);
		return call<R>("getMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto intValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("intValue")] != -1);
		return call<R>("intValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto lessThan(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lessThan")] != -1);
		return call<R>("lessThan", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	static auto parseVersion(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parseVersion")] != -1);
		return scall<R>("parseVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto supportsIORIIOPProfileComponents(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsIORIIOPProfileComponents")] != -1);
		return call<R>("supportsIORIIOPProfileComponents", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
