#ifndef com_sun_corba_se_spi_ior_iiop_IIOPFactories_HPP
#define com_sun_corba_se_spi_ior_iiop_IIOPFactories_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::iiop::IIOPFactories : public jObject<::com::sun::corba::se::spi::ior::iiop::IIOPFactories, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior_iiop / "IIOPFactories";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::ior::iiop::AlternateIIOPAddressComponent(::com::sun::corba::se::spi::ior::iiop::IIOPAddress)>("makeAlternateIIOPAddressComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeAlternateIIOPAddressComponentFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::CodeSetsComponent(::com::sun::corba::se::spi::orb::ORB)>("makeCodeSetsComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeCodeSetsComponentFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPAddress(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String, ::jint)>("makeIIOPAddress"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPAddress(::org::omg::CORBA_2_3::portable::InputStream)>("makeIIOPAddress"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfile(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::ObjectKeyTemplate, ::com::sun::corba::se::spi::ior::ObjectId, ::com::sun::corba::se::spi::ior::iiop::IIOPProfileTemplate)>("makeIIOPProfile"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfile(::com::sun::corba::se::spi::orb::ORB, ::org::omg::IOP::TaggedProfile)>("makeIIOPProfile"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeIIOPProfileFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::IIOPProfileTemplate(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, ::com::sun::corba::se::spi::ior::iiop::IIOPAddress)>("makeIIOPProfileTemplate"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeIIOPProfileTemplateFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::JavaCodebaseComponent(::java::lang::String)>("makeJavaCodebaseComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeJavaCodebaseComponentFactory"), //
		jMethod<::com::sun::corba::se::impl::ior::iiop::JavaSerializationComponent()>("makeJavaSerializationComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeJavaSerializationComponentFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::MaxStreamFormatVersionComponent()>("makeMaxStreamFormatVersionComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeMaxStreamFormatVersionComponentFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::ORBTypeComponent(::jint)>("makeORBTypeComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeORBTypeComponentFactory"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::RequestPartitioningComponent(::jint)>("makeRequestPartitioningComponent"), //
		jMethod<::com::sun::corba::se::spi::ior::IdentifiableFactory()>("makeRequestPartitioningComponentFactory"), //
	};

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::AlternateIIOPAddressComponent, typename... Args>
	static auto makeAlternateIIOPAddressComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeAlternateIIOPAddressComponent")] != -1);
		return scall<R>("makeAlternateIIOPAddressComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeAlternateIIOPAddressComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeAlternateIIOPAddressComponentFactory")] != -1);
		return scall<R>("makeAlternateIIOPAddressComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::CodeSetsComponent, typename... Args>
	static auto makeCodeSetsComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeCodeSetsComponent")] != -1);
		return scall<R>("makeCodeSetsComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeCodeSetsComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeCodeSetsComponentFactory")] != -1);
		return scall<R>("makeCodeSetsComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPAddress, typename... Args>
	static auto makeIIOPAddress(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIIOPAddress")] != -1);
		return scall<R>("makeIIOPAddress", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPProfile, typename... Args>
	static auto makeIIOPProfile(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIIOPProfile")] != -1);
		return scall<R>("makeIIOPProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeIIOPProfileFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIIOPProfileFactory")] != -1);
		return scall<R>("makeIIOPProfileFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::IIOPProfileTemplate, typename... Args>
	static auto makeIIOPProfileTemplate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIIOPProfileTemplate")] != -1);
		return scall<R>("makeIIOPProfileTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeIIOPProfileTemplateFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeIIOPProfileTemplateFactory")] != -1);
		return scall<R>("makeIIOPProfileTemplateFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::JavaCodebaseComponent, typename... Args>
	static auto makeJavaCodebaseComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeJavaCodebaseComponent")] != -1);
		return scall<R>("makeJavaCodebaseComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeJavaCodebaseComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeJavaCodebaseComponentFactory")] != -1);
		return scall<R>("makeJavaCodebaseComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::impl::ior::iiop::JavaSerializationComponent, typename... Args>
	static auto makeJavaSerializationComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeJavaSerializationComponent")] != -1);
		return scall<R>("makeJavaSerializationComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeJavaSerializationComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeJavaSerializationComponentFactory")] != -1);
		return scall<R>("makeJavaSerializationComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::MaxStreamFormatVersionComponent, typename... Args>
	static auto makeMaxStreamFormatVersionComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeMaxStreamFormatVersionComponent")] != -1);
		return scall<R>("makeMaxStreamFormatVersionComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeMaxStreamFormatVersionComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeMaxStreamFormatVersionComponentFactory")] != -1);
		return scall<R>("makeMaxStreamFormatVersionComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::ORBTypeComponent, typename... Args>
	static auto makeORBTypeComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeORBTypeComponent")] != -1);
		return scall<R>("makeORBTypeComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeORBTypeComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeORBTypeComponentFactory")] != -1);
		return scall<R>("makeORBTypeComponentFactory", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::RequestPartitioningComponent, typename... Args>
	static auto makeRequestPartitioningComponent(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeRequestPartitioningComponent")] != -1);
		return scall<R>("makeRequestPartitioningComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::IdentifiableFactory, typename... Args>
	static auto makeRequestPartitioningComponentFactory(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeRequestPartitioningComponentFactory")] != -1);
		return scall<R>("makeRequestPartitioningComponentFactory", std::forward<Args>(args)...);
	}

};

#endif
