#ifndef com_sun_corba_se_spi_ior_iiop_IIOPProfile_HPP
#define com_sun_corba_se_spi_ior_iiop_IIOPProfile_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::iiop::IIOPProfile : public jObject<::com::sun::corba::se::spi::ior::iiop::IIOPProfile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior_iiop / "IIOPProfile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getCodebase"), //
		jMethod<::com::sun::corba::se::spi::ior::iiop::GIOPVersion()>("getGIOPVersion"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getORBVersion"), //
		jMethod<::java::lang::Object()>("getServant"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getCodebase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCodebase")] != -1);
		return call<R>("getCodebase", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::iiop::GIOPVersion, typename... Args>
	auto getGIOPVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGIOPVersion")] != -1);
		return call<R>("getGIOPVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	auto getORBVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getORBVersion")] != -1);
		return call<R>("getORBVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getServant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServant")] != -1);
		return call<R>("getServant", std::forward<Args>(args)...);
	}

};

#endif
