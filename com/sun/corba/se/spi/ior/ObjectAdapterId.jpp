#ifndef com_sun_corba_se_spi_ior_ObjectAdapterId_HPP
#define com_sun_corba_se_spi_ior_ObjectAdapterId_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::ObjectAdapterId : public jObject<::com::sun::corba::se::spi::ior::ObjectAdapterId, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior / "ObjectAdapterId";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String *()>("getAdapterName"), //
		jMethod<::jint()>("getNumLevels"), //
		jMethod<::java::util::Iterator()>("iterator"), //
	};

	template<typename R = ::java::lang::String *, typename... Args>
	auto getAdapterName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAdapterName")] != -1);
		return call<R>("getAdapterName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumLevels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumLevels")] != -1);
		return call<R>("getNumLevels", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto iterator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("iterator")] != -1);
		return call<R>("iterator", std::forward<Args>(args)...);
	}

};

#endif
