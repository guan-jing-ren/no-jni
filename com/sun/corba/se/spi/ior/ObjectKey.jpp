#ifndef com_sun_corba_se_spi_ior_ObjectKey_HPP
#define com_sun_corba_se_spi_ior_ObjectKey_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::ObjectKey : public jObject<::com::sun::corba::se::spi::ior::ObjectKey, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior / "ObjectKey";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jbyte *(::org::omg::CORBA::ORB)>("getBytes"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectId()>("getId"), //
		jMethod<::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher(::com::sun::corba::se::spi::orb::ORB)>("getServerRequestDispatcher"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKeyTemplate()>("getTemplate"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectId, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::protocol::CorbaServerRequestDispatcher, typename... Args>
	auto getServerRequestDispatcher(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerRequestDispatcher")] != -1);
		return call<R>("getServerRequestDispatcher", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKeyTemplate, typename... Args>
	auto getTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTemplate")] != -1);
		return call<R>("getTemplate", std::forward<Args>(args)...);
	}

};

#endif
