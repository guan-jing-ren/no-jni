#ifndef com_sun_corba_se_spi_ior_TaggedProfile_HPP
#define com_sun_corba_se_spi_ior_TaggedProfile_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::ior::TaggedProfile : public jObject<::com::sun::corba::se::spi::ior::TaggedProfile, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_ior / "TaggedProfile";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::org::omg::IOP::TaggedProfile()>("getIOPProfile"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectId()>("getObjectId"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKey()>("getObjectKey"), //
		jMethod<::com::sun::corba::se::spi::ior::ObjectKeyTemplate()>("getObjectKeyTemplate"), //
		jMethod<::com::sun::corba::se::spi::ior::TaggedProfileTemplate()>("getTaggedProfileTemplate"), //
		jMethod<::jboolean(::com::sun::corba::se::spi::ior::TaggedProfile)>("isEquivalent"), //
		jMethod<::jboolean()>("isLocal"), //
	};

	template<typename R = ::org::omg::IOP::TaggedProfile, typename... Args>
	auto getIOPProfile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIOPProfile")] != -1);
		return call<R>("getIOPProfile", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectId, typename... Args>
	auto getObjectId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectId")] != -1);
		return call<R>("getObjectId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKey, typename... Args>
	auto getObjectKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKey")] != -1);
		return call<R>("getObjectKey", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::ObjectKeyTemplate, typename... Args>
	auto getObjectKeyTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectKeyTemplate")] != -1);
		return call<R>("getObjectKeyTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::ior::TaggedProfileTemplate, typename... Args>
	auto getTaggedProfileTemplate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTaggedProfileTemplate")] != -1);
		return call<R>("getTaggedProfileTemplate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEquivalent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEquivalent")] != -1);
		return call<R>("isEquivalent", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLocal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLocal")] != -1);
		return call<R>("isLocal", std::forward<Args>(args)...);
	}

};

#endif
