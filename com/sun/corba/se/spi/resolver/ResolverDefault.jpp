#ifndef com_sun_corba_se_spi_resolver_ResolverDefault_HPP
#define com_sun_corba_se_spi_resolver_ResolverDefault_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::resolver::ResolverDefault : public jObject<::com::sun::corba::se::spi::resolver::ResolverDefault, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_resolver / "ResolverDefault";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::corba::se::spi::resolver::Resolver(::com::sun::corba::se::spi::orb::ORB, ::java::lang::String, ::jint)>("makeBootstrapResolver"), //
		jMethod<::com::sun::corba::se::spi::resolver::Resolver(::com::sun::corba::se::spi::resolver::Resolver, ::com::sun::corba::se::spi::resolver::Resolver)>("makeCompositeResolver"), //
		jMethod<::com::sun::corba::se::spi::resolver::Resolver(::com::sun::corba::se::spi::orb::ORB, ::java::io::File)>("makeFileResolver"), //
		jMethod<::com::sun::corba::se::spi::orb::Operation(::com::sun::corba::se::spi::orb::ORB, ::com::sun::corba::se::spi::resolver::Resolver)>("makeINSURLOperation"), //
		jMethod<::com::sun::corba::se::spi::resolver::LocalResolver()>("makeLocalResolver"), //
		jMethod<::com::sun::corba::se::spi::resolver::Resolver(::com::sun::corba::se::spi::orb::Operation, ::java::lang::String)>("makeORBDefaultInitRefResolver"), //
		jMethod<::com::sun::corba::se::spi::resolver::Resolver(::com::sun::corba::se::spi::orb::Operation, ::com::sun::corba::se::spi::orb::StringPair *)>("makeORBInitRefResolver"), //
		jMethod<::com::sun::corba::se::spi::resolver::LocalResolver(::com::sun::corba::se::spi::resolver::Resolver, ::com::sun::corba::se::spi::resolver::LocalResolver)>("makeSplitLocalResolver"), //
	};

	template<typename R = ::com::sun::corba::se::spi::resolver::Resolver, typename... Args>
	static auto makeBootstrapResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeBootstrapResolver")] != -1);
		return scall<R>("makeBootstrapResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::Resolver, typename... Args>
	static auto makeCompositeResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeCompositeResolver")] != -1);
		return scall<R>("makeCompositeResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::Resolver, typename... Args>
	static auto makeFileResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeFileResolver")] != -1);
		return scall<R>("makeFileResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::Operation, typename... Args>
	static auto makeINSURLOperation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeINSURLOperation")] != -1);
		return scall<R>("makeINSURLOperation", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::LocalResolver, typename... Args>
	static auto makeLocalResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeLocalResolver")] != -1);
		return scall<R>("makeLocalResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::Resolver, typename... Args>
	static auto makeORBDefaultInitRefResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeORBDefaultInitRefResolver")] != -1);
		return scall<R>("makeORBDefaultInitRefResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::Resolver, typename... Args>
	static auto makeORBInitRefResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeORBInitRefResolver")] != -1);
		return scall<R>("makeORBInitRefResolver", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::resolver::LocalResolver, typename... Args>
	static auto makeSplitLocalResolver(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeSplitLocalResolver")] != -1);
		return scall<R>("makeSplitLocalResolver", std::forward<Args>(args)...);
	}

};

#endif
