#ifndef com_sun_corba_se_spi_servicecontext_ORBVersionServiceContext_HPP
#define com_sun_corba_se_spi_servicecontext_ORBVersionServiceContext_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::servicecontext::ORBVersionServiceContext : public jObject<::com::sun::corba::se::spi::servicecontext::ORBVersionServiceContext, ::com::sun::corba::se::spi::servicecontext::ServiceContext> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_servicecontext / "ORBVersionServiceContext";

	constexpr static Enume field_signatures{
		jField<::jint>("SERVICE_CONTEXT_ID"), //
	};

	template<typename F = ::jint>
	static auto SERVICE_CONTEXT_ID() {
		static_assert(field_signatures[jField<F>("SERVICE_CONTEXT_ID")] != -1);
		return sat<F>("SERVICE_CONTEXT_ID");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORBVersion)>(), //
		jConstructor<::jvoid(::org::omg::CORBA_2_3::portable::InputStream, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>(), //
		jMethod<::jint()>("getId"), //
		jMethod<::com::sun::corba::se::spi::orb::ORBVersion()>("getVersion"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("writeData"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::orb::ORBVersion, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeData")] != -1);
		return call<R>("writeData", std::forward<Args>(args)...);
	}

};

#endif
