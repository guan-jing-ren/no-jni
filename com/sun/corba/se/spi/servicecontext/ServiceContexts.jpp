#ifndef com_sun_corba_se_spi_servicecontext_ServiceContexts_HPP
#define com_sun_corba_se_spi_servicecontext_ServiceContexts_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::servicecontext::ServiceContexts : public jObject<::com::sun::corba::se::spi::servicecontext::ServiceContexts, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_servicecontext / "ServiceContexts";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jConstructor<::jvoid(::org::omg::CORBA_2_3::portable::InputStream)>(), //
		jMethod<::jvoid()>("addAlignmentPadding"), //
		jMethod<::jvoid(::jint)>("delete"), //
		jMethod<::jvoid(::java::lang::Integer)>("delete"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContext(::jint)>("get"), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContext(::java::lang::Integer)>("get"), //
		jMethod<::jvoid(::com::sun::corba::se::spi::servicecontext::ServiceContext)>("put"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream, ::com::sun::corba::se::spi::ior::iiop::GIOPVersion)>("write"), //
		jMethod<::jvoid(::org::omg::CORBA_2_3::portable::OutputStream)>("writeNullServiceContext"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAlignmentPadding(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAlignmentPadding")] != -1);
		return call<R>("addAlignmentPadding", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto delete_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delete")] != -1);
		return call<R>("delete", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContext, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto put(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("put")] != -1);
		return call<R>("put", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto writeNullServiceContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeNullServiceContext")] != -1);
		return scall<R>("writeNullServiceContext", std::forward<Args>(args)...);
	}

};

#endif
