#ifndef com_sun_corba_se_spi_servicecontext_ServiceContextRegistry_HPP
#define com_sun_corba_se_spi_servicecontext_ServiceContextRegistry_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::servicecontext::ServiceContextRegistry : public jObject<::com::sun::corba::se::spi::servicecontext::ServiceContextRegistry, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_servicecontext / "ServiceContextRegistry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::corba::se::spi::orb::ORB)>(), //
		jMethod<::com::sun::corba::se::spi::servicecontext::ServiceContextData(::jint)>("findServiceContextData"), //
		jMethod<::jvoid(::java::lang::Class)>("register"), //
	};

	template<typename R = ::com::sun::corba::se::spi::servicecontext::ServiceContextData, typename... Args>
	auto findServiceContextData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findServiceContextData")] != -1);
		return call<R>("findServiceContextData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return call<R>("register", std::forward<Args>(args)...);
	}

};

#endif
