#ifndef com_sun_corba_se_spi_legacy_connection_LegacyServerSocketEndPointInfo_HPP
#define com_sun_corba_se_spi_legacy_connection_LegacyServerSocketEndPointInfo_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::legacy::connection::LegacyServerSocketEndPointInfo : public jObject<::com::sun::corba::se::spi::legacy::connection::LegacyServerSocketEndPointInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_legacy_connection / "LegacyServerSocketEndPointInfo";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BOOT_NAMING"), //
		jField<::java::lang::String>("DEFAULT_ENDPOINT"), //
		jField<::java::lang::String>("NO_NAME"), //
	};

	template<typename F = ::java::lang::String>
	static auto BOOT_NAMING() {
		static_assert(field_signatures[jField<F>("BOOT_NAMING")] != -1);
		return sat<F>("BOOT_NAMING");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_ENDPOINT() {
		static_assert(field_signatures[jField<F>("DEFAULT_ENDPOINT")] != -1);
		return sat<F>("DEFAULT_ENDPOINT");
	}

	template<typename F = ::java::lang::String>
	static auto NO_NAME() {
		static_assert(field_signatures[jField<F>("NO_NAME")] != -1);
		return sat<F>("NO_NAME");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getHostName"), //
		jMethod<::jint()>("getLocatorPort"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jvoid(::jint)>("setLocatorPort"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHostName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHostName")] != -1);
		return call<R>("getHostName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocatorPort")] != -1);
		return call<R>("getLocatorPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLocatorPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLocatorPort")] != -1);
		return call<R>("setLocatorPort", std::forward<Args>(args)...);
	}

};

#endif
