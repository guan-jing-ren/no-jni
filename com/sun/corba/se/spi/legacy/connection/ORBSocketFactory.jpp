#ifndef com_sun_corba_se_spi_legacy_connection_ORBSocketFactory_HPP
#define com_sun_corba_se_spi_legacy_connection_ORBSocketFactory_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::legacy::connection::ORBSocketFactory : public jObject<::com::sun::corba::se::spi::legacy::connection::ORBSocketFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_legacy_connection / "ORBSocketFactory";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("IIOP_CLEAR_TEXT"), //
	};

	template<typename F = ::java::lang::String>
	static auto IIOP_CLEAR_TEXT() {
		static_assert(field_signatures[jField<F>("IIOP_CLEAR_TEXT")] != -1);
		return sat<F>("IIOP_CLEAR_TEXT");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::net::ServerSocket(::java::lang::String, ::jint)>("createServerSocket"), //
		jMethod<::java::net::Socket(::com::sun::corba::se::spi::transport::SocketInfo)>("createSocket"), //
		jMethod<::com::sun::corba::se::spi::transport::SocketInfo(::org::omg::CORBA::ORB, ::com::sun::corba::se::spi::ior::IOR, ::com::sun::corba::se::spi::transport::SocketInfo)>("getEndPointInfo"), //
	};

	template<typename R = ::java::net::ServerSocket, typename... Args>
	auto createServerSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createServerSocket")] != -1);
		return call<R>("createServerSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::java::net::Socket, typename... Args>
	auto createSocket(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSocket")] != -1);
		return call<R>("createSocket", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::corba::se::spi::transport::SocketInfo, typename... Args>
	auto getEndPointInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndPointInfo")] != -1);
		return call<R>("getEndPointInfo", std::forward<Args>(args)...);
	}

};

#endif
