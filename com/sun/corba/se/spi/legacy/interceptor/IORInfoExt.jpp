#ifndef com_sun_corba_se_spi_legacy_interceptor_IORInfoExt_HPP
#define com_sun_corba_se_spi_legacy_interceptor_IORInfoExt_HPP

#include "../../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::legacy::interceptor::IORInfoExt : public jObject<::com::sun::corba::se::spi::legacy::interceptor::IORInfoExt, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_legacy_interceptor / "IORInfoExt";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::corba::se::spi::oa::ObjectAdapter()>("getObjectAdapter"), //
		jMethod<::jint(::java::lang::String)>("getServerPort"), //
	};

	template<typename R = ::com::sun::corba::se::spi::oa::ObjectAdapter, typename... Args>
	auto getObjectAdapter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectAdapter")] != -1);
		return call<R>("getObjectAdapter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getServerPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerPort")] != -1);
		return call<R>("getServerPort", std::forward<Args>(args)...);
	}

};

#endif
