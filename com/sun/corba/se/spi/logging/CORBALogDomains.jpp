#ifndef com_sun_corba_se_spi_logging_CORBALogDomains_HPP
#define com_sun_corba_se_spi_logging_CORBALogDomains_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::corba::se::spi::logging::CORBALogDomains : public jObject<::com::sun::corba::se::spi::logging::CORBALogDomains, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_corba_se_spi_logging / "CORBALogDomains";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("NAMING"), //
		jField<::java::lang::String>("NAMING_LIFECYCLE"), //
		jField<::java::lang::String>("NAMING_READ"), //
		jField<::java::lang::String>("NAMING_UPDATE"), //
		jField<::java::lang::String>("OA"), //
		jField<::java::lang::String>("OA_INVOCATION"), //
		jField<::java::lang::String>("OA_IOR"), //
		jField<::java::lang::String>("OA_LIFECYCLE"), //
		jField<::java::lang::String>("ORB"), //
		jField<::java::lang::String>("ORBD"), //
		jField<::java::lang::String>("ORBD_ACTIVATOR"), //
		jField<::java::lang::String>("ORBD_LOCATOR"), //
		jField<::java::lang::String>("ORBD_REPOSITORY"), //
		jField<::java::lang::String>("ORBD_SERVERTOOL"), //
		jField<::java::lang::String>("ORB_LIFECYCLE"), //
		jField<::java::lang::String>("ORB_RESOLVER"), //
		jField<::java::lang::String>("RMIIIOP"), //
		jField<::java::lang::String>("RMIIIOP_DELEGATE"), //
		jField<::java::lang::String>("RPC"), //
		jField<::java::lang::String>("RPC_ENCODING"), //
		jField<::java::lang::String>("RPC_PRESENTATION"), //
		jField<::java::lang::String>("RPC_PROTOCOL"), //
		jField<::java::lang::String>("RPC_TRANSPORT"), //
		jField<::java::lang::String>("TOP_LEVEL_DOMAIN"), //
		jField<::java::lang::String>("UTIL"), //
	};

	template<typename F = ::java::lang::String>
	static auto NAMING() {
		static_assert(field_signatures[jField<F>("NAMING")] != -1);
		return sat<F>("NAMING");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_LIFECYCLE() {
		static_assert(field_signatures[jField<F>("NAMING_LIFECYCLE")] != -1);
		return sat<F>("NAMING_LIFECYCLE");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_READ() {
		static_assert(field_signatures[jField<F>("NAMING_READ")] != -1);
		return sat<F>("NAMING_READ");
	}

	template<typename F = ::java::lang::String>
	static auto NAMING_UPDATE() {
		static_assert(field_signatures[jField<F>("NAMING_UPDATE")] != -1);
		return sat<F>("NAMING_UPDATE");
	}

	template<typename F = ::java::lang::String>
	static auto OA() {
		static_assert(field_signatures[jField<F>("OA")] != -1);
		return sat<F>("OA");
	}

	template<typename F = ::java::lang::String>
	static auto OA_INVOCATION() {
		static_assert(field_signatures[jField<F>("OA_INVOCATION")] != -1);
		return sat<F>("OA_INVOCATION");
	}

	template<typename F = ::java::lang::String>
	static auto OA_IOR() {
		static_assert(field_signatures[jField<F>("OA_IOR")] != -1);
		return sat<F>("OA_IOR");
	}

	template<typename F = ::java::lang::String>
	static auto OA_LIFECYCLE() {
		static_assert(field_signatures[jField<F>("OA_LIFECYCLE")] != -1);
		return sat<F>("OA_LIFECYCLE");
	}

	template<typename F = ::java::lang::String>
	static auto ORB() {
		static_assert(field_signatures[jField<F>("ORB")] != -1);
		return sat<F>("ORB");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD() {
		static_assert(field_signatures[jField<F>("ORBD")] != -1);
		return sat<F>("ORBD");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD_ACTIVATOR() {
		static_assert(field_signatures[jField<F>("ORBD_ACTIVATOR")] != -1);
		return sat<F>("ORBD_ACTIVATOR");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD_LOCATOR() {
		static_assert(field_signatures[jField<F>("ORBD_LOCATOR")] != -1);
		return sat<F>("ORBD_LOCATOR");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD_REPOSITORY() {
		static_assert(field_signatures[jField<F>("ORBD_REPOSITORY")] != -1);
		return sat<F>("ORBD_REPOSITORY");
	}

	template<typename F = ::java::lang::String>
	static auto ORBD_SERVERTOOL() {
		static_assert(field_signatures[jField<F>("ORBD_SERVERTOOL")] != -1);
		return sat<F>("ORBD_SERVERTOOL");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_LIFECYCLE() {
		static_assert(field_signatures[jField<F>("ORB_LIFECYCLE")] != -1);
		return sat<F>("ORB_LIFECYCLE");
	}

	template<typename F = ::java::lang::String>
	static auto ORB_RESOLVER() {
		static_assert(field_signatures[jField<F>("ORB_RESOLVER")] != -1);
		return sat<F>("ORB_RESOLVER");
	}

	template<typename F = ::java::lang::String>
	static auto RMIIIOP() {
		static_assert(field_signatures[jField<F>("RMIIIOP")] != -1);
		return sat<F>("RMIIIOP");
	}

	template<typename F = ::java::lang::String>
	static auto RMIIIOP_DELEGATE() {
		static_assert(field_signatures[jField<F>("RMIIIOP_DELEGATE")] != -1);
		return sat<F>("RMIIIOP_DELEGATE");
	}

	template<typename F = ::java::lang::String>
	static auto RPC() {
		static_assert(field_signatures[jField<F>("RPC")] != -1);
		return sat<F>("RPC");
	}

	template<typename F = ::java::lang::String>
	static auto RPC_ENCODING() {
		static_assert(field_signatures[jField<F>("RPC_ENCODING")] != -1);
		return sat<F>("RPC_ENCODING");
	}

	template<typename F = ::java::lang::String>
	static auto RPC_PRESENTATION() {
		static_assert(field_signatures[jField<F>("RPC_PRESENTATION")] != -1);
		return sat<F>("RPC_PRESENTATION");
	}

	template<typename F = ::java::lang::String>
	static auto RPC_PROTOCOL() {
		static_assert(field_signatures[jField<F>("RPC_PROTOCOL")] != -1);
		return sat<F>("RPC_PROTOCOL");
	}

	template<typename F = ::java::lang::String>
	static auto RPC_TRANSPORT() {
		static_assert(field_signatures[jField<F>("RPC_TRANSPORT")] != -1);
		return sat<F>("RPC_TRANSPORT");
	}

	template<typename F = ::java::lang::String>
	static auto TOP_LEVEL_DOMAIN() {
		static_assert(field_signatures[jField<F>("TOP_LEVEL_DOMAIN")] != -1);
		return sat<F>("TOP_LEVEL_DOMAIN");
	}

	template<typename F = ::java::lang::String>
	static auto UTIL() {
		static_assert(field_signatures[jField<F>("UTIL")] != -1);
		return sat<F>("UTIL");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
