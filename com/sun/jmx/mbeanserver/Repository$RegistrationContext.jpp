#ifndef com_sun_jmx_mbeanserver_Repository$RegistrationContext_HPP
#define com_sun_jmx_mbeanserver_Repository$RegistrationContext_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::Repository$RegistrationContext : public jObject<::com::sun::jmx::mbeanserver::Repository$RegistrationContext, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "Repository$RegistrationContext";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("registering"), //
		jMethod<::jvoid()>("unregistered"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto registering(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registering")] != -1);
		return call<R>("registering", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregistered")] != -1);
		return call<R>("unregistered", std::forward<Args>(args)...);
	}

};

#endif
