#ifndef com_sun_jmx_mbeanserver_MBeanSupport_HPP
#define com_sun_jmx_mbeanserver_MBeanSupport_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::MBeanSupport : public jObject<::com::sun::jmx::mbeanserver::MBeanSupport, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "MBeanSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::Object(::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::java::lang::String *)>("getAttributes"), //
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::javax::management::MBeanInfo()>("getMBeanInfo"), //
		jMethod<::java::lang::Class()>("getMBeanInterface"), //
		jMethod<::java::lang::Object()>("getResource"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("invoke"), //
		jMethod<::jboolean()>("isMXBean"), //
		jMethod<::jvoid()>("postDeregister"), //
		jMethod<::jvoid(::java::lang::Boolean)>("postRegister"), //
		jMethod<::jvoid()>("preDeregister"), //
		jMethod<::javax::management::ObjectName(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister"), //
		jMethod<::jvoid(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister2"), //
		jMethod<::jvoid(::javax::management::MBeanServer, ::javax::management::ObjectName)>("register"), //
		jMethod<::jvoid()>("registerFailed"), //
		jMethod<::jvoid(::javax::management::Attribute)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::AttributeList)>("setAttributes"), //
		jMethod<::jvoid()>("unregister"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	auto getMBeanInterface(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInterface")] != -1);
		return call<R>("getMBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResource")] != -1);
		return call<R>("getResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMXBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMXBean")] != -1);
		return call<R>("isMXBean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postDeregister")] != -1);
		return call<R>("postDeregister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto postRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("postRegister")] != -1);
		return call<R>("postRegister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preDeregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preDeregister")] != -1);
		return call<R>("preDeregister", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectName, typename... Args>
	auto preRegister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preRegister")] != -1);
		return call<R>("preRegister", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preRegister2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preRegister2")] != -1);
		return call<R>("preRegister2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return call<R>("register", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerFailed")] != -1);
		return call<R>("registerFailed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregister")] != -1);
		return call<R>("unregister", std::forward<Args>(args)...);
	}

};

#endif
