#ifndef com_sun_jmx_mbeanserver_Introspector_HPP
#define com_sun_jmx_mbeanserver_Introspector_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::Introspector : public jObject<::com::sun::jmx::mbeanserver::Introspector, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "Introspector";

	constexpr static Enume field_signatures{
		jField<::jboolean>("ALLOW_NONPUBLIC_MBEAN"), //
	};

	template<typename F = ::jboolean>
	static auto ALLOW_NONPUBLIC_MBEAN() {
		static_assert(field_signatures[jField<F>("ALLOW_NONPUBLIC_MBEAN")] != -1);
		return sat<F>("ALLOW_NONPUBLIC_MBEAN");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::Class)>("checkCompliance"), //
		jMethod<::javax::management::Descriptor(::java::lang::annotation::Annotation *)>("descriptorForAnnotations"), //
		jMethod<::javax::management::Descriptor(::java::lang::reflect::AnnotatedElement)>("descriptorForElement"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::String)>("elementFromComplex"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("getMBeanInterface"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("getMXBeanInterface"), //
		jMethod<::java::lang::Class(::java::lang::Class)>("getStandardMBeanInterface"), //
		jMethod<::jboolean(::java::lang::Class)>("isDynamic"), //
		jMethod<::javax::management::DynamicMBean(::java::lang::Object)>("makeDynamicMBean"), //
		jMethod<::javax::management::MBeanInfo(::java::lang::Class)>("testCompliance"), //
		jMethod<::javax::management::MBeanInfo(::java::lang::Class, ::java::lang::Class)>("testCompliance"), //
		jMethod<::jvoid(::java::lang::Class)>("testComplianceMBeanInterface"), //
		jMethod<::jvoid(::java::lang::Class)>("testComplianceMXBeanInterface"), //
		jMethod<::jvoid(::java::lang::Class)>("testCreation"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto checkCompliance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkCompliance")] != -1);
		return scall<R>("checkCompliance", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Descriptor, typename... Args>
	static auto descriptorForAnnotations(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("descriptorForAnnotations")] != -1);
		return scall<R>("descriptorForAnnotations", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::Descriptor, typename... Args>
	static auto descriptorForElement(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("descriptorForElement")] != -1);
		return scall<R>("descriptorForElement", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	static auto elementFromComplex(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("elementFromComplex")] != -1);
		return scall<R>("elementFromComplex", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto getMBeanInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInterface")] != -1);
		return scall<R>("getMBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto getMXBeanInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMXBeanInterface")] != -1);
		return scall<R>("getMXBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Class, typename... Args>
	static auto getStandardMBeanInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardMBeanInterface")] != -1);
		return scall<R>("getStandardMBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isDynamic(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDynamic")] != -1);
		return scall<R>("isDynamic", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::DynamicMBean, typename... Args>
	static auto makeDynamicMBean(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("makeDynamicMBean")] != -1);
		return scall<R>("makeDynamicMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	static auto testCompliance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("testCompliance")] != -1);
		return scall<R>("testCompliance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto testComplianceMBeanInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("testComplianceMBeanInterface")] != -1);
		return scall<R>("testComplianceMBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto testComplianceMXBeanInterface(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("testComplianceMXBeanInterface")] != -1);
		return scall<R>("testComplianceMXBeanInterface", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto testCreation(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("testCreation")] != -1);
		return scall<R>("testCreation", std::forward<Args>(args)...);
	}

};

#endif
