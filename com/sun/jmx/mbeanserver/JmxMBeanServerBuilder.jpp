#ifndef com_sun_jmx_mbeanserver_JmxMBeanServerBuilder_HPP
#define com_sun_jmx_mbeanserver_JmxMBeanServerBuilder_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::JmxMBeanServerBuilder : public jObject<::com::sun::jmx::mbeanserver::JmxMBeanServerBuilder, ::javax::management::MBeanServerBuilder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "JmxMBeanServerBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::management::MBeanServer(::java::lang::String, ::javax::management::MBeanServer, ::javax::management::MBeanServerDelegate)>("newMBeanServer"), //
		jMethod<::javax::management::MBeanServerDelegate()>("newMBeanServerDelegate"), //
	};

	template<typename R = ::javax::management::MBeanServer, typename... Args>
	auto newMBeanServer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newMBeanServer")] != -1);
		return call<R>("newMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServerDelegate, typename... Args>
	auto newMBeanServerDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newMBeanServerDelegate")] != -1);
		return call<R>("newMBeanServerDelegate", std::forward<Args>(args)...);
	}

};

#endif
