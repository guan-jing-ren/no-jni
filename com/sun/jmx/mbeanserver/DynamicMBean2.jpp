#ifndef com_sun_jmx_mbeanserver_DynamicMBean2_HPP
#define com_sun_jmx_mbeanserver_DynamicMBean2_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::DynamicMBean2 : public jObject<::com::sun::jmx::mbeanserver::DynamicMBean2, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "DynamicMBean2";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getClassName"), //
		jMethod<::java::lang::Object()>("getResource"), //
		jMethod<::jvoid(::javax::management::MBeanServer, ::javax::management::ObjectName)>("preRegister2"), //
		jMethod<::jvoid()>("registerFailed"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getClassName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassName")] != -1);
		return call<R>("getClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResource")] != -1);
		return call<R>("getResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto preRegister2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preRegister2")] != -1);
		return call<R>("preRegister2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerFailed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerFailed")] != -1);
		return call<R>("registerFailed", std::forward<Args>(args)...);
	}

};

#endif
