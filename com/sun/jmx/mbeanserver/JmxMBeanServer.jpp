#ifndef com_sun_jmx_mbeanserver_JmxMBeanServer_HPP
#define com_sun_jmx_mbeanserver_JmxMBeanServer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::JmxMBeanServer : public jObject<::com::sun::jmx::mbeanserver::JmxMBeanServer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "JmxMBeanServer";

	constexpr static Enume field_signatures{
		jField<::jboolean>("DEFAULT_FAIR_LOCK_POLICY"), //
	};

	template<typename F = ::jboolean>
	static auto DEFAULT_FAIR_LOCK_POLICY() {
		static_assert(field_signatures[jField<F>("DEFAULT_FAIR_LOCK_POLICY")] != -1);
		return sat<F>("DEFAULT_FAIR_LOCK_POLICY");
	}

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("addNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName, ::javax::management::NotificationFilter, ::java::lang::Object)>("addNotificationListener"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::javax::management::ObjectName)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::javax::management::ObjectName, ::java::lang::Object *, ::java::lang::String *)>("createMBean"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::String, ::javax::management::ObjectName, ::java::lang::Object *, ::java::lang::String *)>("createMBean"), //
		jMethod<::java::io::ObjectInputStream(::java::lang::String, ::javax::management::ObjectName, ::jbyte *)>("deserialize"), //
		jMethod<::java::io::ObjectInputStream(::java::lang::String, ::jbyte *)>("deserialize"), //
		jMethod<::java::io::ObjectInputStream(::javax::management::ObjectName, ::jbyte *)>("deserialize"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName, ::java::lang::String)>("getAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::ObjectName, ::java::lang::String *)>("getAttributes"), //
		jMethod<::java::lang::ClassLoader(::javax::management::ObjectName)>("getClassLoader"), //
		jMethod<::java::lang::ClassLoader(::javax::management::ObjectName)>("getClassLoaderFor"), //
		jMethod<::javax::management::loading::ClassLoaderRepository()>("getClassLoaderRepository"), //
		jMethod<::java::lang::String()>("getDefaultDomain"), //
		jMethod<::java::lang::String *()>("getDomains"), //
		jMethod<::java::lang::Integer()>("getMBeanCount"), //
		jMethod<::javax::management::MBeanInfo(::javax::management::ObjectName)>("getMBeanInfo"), //
		jMethod<::com::sun::jmx::mbeanserver::MBeanInstantiator()>("getMBeanInstantiator"), //
		jMethod<::javax::management::MBeanServerDelegate()>("getMBeanServerDelegate"), //
		jMethod<::javax::management::MBeanServer()>("getMBeanServerInterceptor"), //
		jMethod<::javax::management::ObjectInstance(::javax::management::ObjectName)>("getObjectInstance"), //
		jMethod<::java::lang::Object(::java::lang::String)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::javax::management::ObjectName)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::javax::management::ObjectName, ::java::lang::Object *, ::java::lang::String *)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("instantiate"), //
		jMethod<::jboolean()>("interceptorsEnabled"), //
		jMethod<::java::lang::Object(::javax::management::ObjectName, ::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("invoke"), //
		jMethod<::jboolean(::javax::management::ObjectName, ::java::lang::String)>("isInstanceOf"), //
		jMethod<::jboolean(::javax::management::ObjectName)>("isRegistered"), //
		jMethod<::javax::management::MBeanServer(::java::lang::String, ::javax::management::MBeanServer, ::javax::management::MBeanServerDelegate, ::jboolean)>("newMBeanServer"), //
		jMethod<::javax::management::MBeanServerDelegate()>("newMBeanServerDelegate"), //
		jMethod<::java::util::Set(::javax::management::ObjectName, ::javax::management::QueryExp)>("queryMBeans"), //
		jMethod<::java::util::Set(::javax::management::ObjectName, ::javax::management::QueryExp)>("queryNames"), //
		jMethod<::javax::management::ObjectInstance(::java::lang::Object, ::javax::management::ObjectName)>("registerMBean"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::NotificationListener)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::NotificationListener, ::javax::management::NotificationFilter, ::java::lang::Object)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::ObjectName, ::javax::management::NotificationFilter, ::java::lang::Object)>("removeNotificationListener"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::javax::management::Attribute)>("setAttribute"), //
		jMethod<::javax::management::AttributeList(::javax::management::ObjectName, ::javax::management::AttributeList)>("setAttributes"), //
		jMethod<::jvoid(::javax::management::MBeanServer)>("setMBeanServerInterceptor"), //
		jMethod<::jvoid(::javax::management::ObjectName)>("unregisterMBean"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotificationListener")] != -1);
		return call<R>("addNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectInstance, typename... Args>
	auto createMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createMBean")] != -1);
		return call<R>("createMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::ObjectInputStream, typename... Args>
	auto deserialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deserialize")] != -1);
		return call<R>("deserialize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoader")] != -1);
		return call<R>("getClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoaderFor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoaderFor")] != -1);
		return call<R>("getClassLoaderFor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::loading::ClassLoaderRepository, typename... Args>
	auto getClassLoaderRepository(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoaderRepository")] != -1);
		return call<R>("getClassLoaderRepository", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDefaultDomain(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultDomain")] != -1);
		return call<R>("getDefaultDomain", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String *, typename... Args>
	auto getDomains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomains")] != -1);
		return call<R>("getDomains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Integer, typename... Args>
	auto getMBeanCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanCount")] != -1);
		return call<R>("getMBeanCount", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanInfo, typename... Args>
	auto getMBeanInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInfo")] != -1);
		return call<R>("getMBeanInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::jmx::mbeanserver::MBeanInstantiator, typename... Args>
	auto getMBeanInstantiator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanInstantiator")] != -1);
		return call<R>("getMBeanInstantiator", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServerDelegate, typename... Args>
	auto getMBeanServerDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanServerDelegate")] != -1);
		return call<R>("getMBeanServerDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServer, typename... Args>
	auto getMBeanServerInterceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMBeanServerInterceptor")] != -1);
		return call<R>("getMBeanServerInterceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectInstance, typename... Args>
	auto getObjectInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getObjectInstance")] != -1);
		return call<R>("getObjectInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto instantiate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("instantiate")] != -1);
		return call<R>("instantiate", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto interceptorsEnabled(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("interceptorsEnabled")] != -1);
		return call<R>("interceptorsEnabled", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto invoke(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("invoke")] != -1);
		return call<R>("invoke", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isInstanceOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isInstanceOf")] != -1);
		return call<R>("isInstanceOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isRegistered(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isRegistered")] != -1);
		return call<R>("isRegistered", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServer, typename... Args>
	static auto newMBeanServer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newMBeanServer")] != -1);
		return scall<R>("newMBeanServer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::MBeanServerDelegate, typename... Args>
	static auto newMBeanServerDelegate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newMBeanServerDelegate")] != -1);
		return scall<R>("newMBeanServerDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto queryMBeans(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("queryMBeans")] != -1);
		return call<R>("queryMBeans", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Set, typename... Args>
	auto queryNames(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("queryNames")] != -1);
		return call<R>("queryNames", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::ObjectInstance, typename... Args>
	auto registerMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerMBean")] != -1);
		return call<R>("registerMBean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotificationListener")] != -1);
		return call<R>("removeNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttribute")] != -1);
		return call<R>("setAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::AttributeList, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMBeanServerInterceptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMBeanServerInterceptor")] != -1);
		return call<R>("setMBeanServerInterceptor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregisterMBean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregisterMBean")] != -1);
		return call<R>("unregisterMBean", std::forward<Args>(args)...);
	}

};

#endif
