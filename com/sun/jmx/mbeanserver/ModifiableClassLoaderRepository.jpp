#ifndef com_sun_jmx_mbeanserver_ModifiableClassLoaderRepository_HPP
#define com_sun_jmx_mbeanserver_ModifiableClassLoaderRepository_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::ModifiableClassLoaderRepository : public jObject<::com::sun::jmx::mbeanserver::ModifiableClassLoaderRepository, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "ModifiableClassLoaderRepository";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::ClassLoader)>("addClassLoader"), //
		jMethod<::jvoid(::javax::management::ObjectName, ::java::lang::ClassLoader)>("addClassLoader"), //
		jMethod<::java::lang::ClassLoader(::javax::management::ObjectName)>("getClassLoader"), //
		jMethod<::jvoid(::java::lang::ClassLoader)>("removeClassLoader"), //
		jMethod<::jvoid(::javax::management::ObjectName)>("removeClassLoader"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addClassLoader")] != -1);
		return call<R>("addClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	auto getClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoader")] != -1);
		return call<R>("getClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeClassLoader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeClassLoader")] != -1);
		return call<R>("removeClassLoader", std::forward<Args>(args)...);
	}

};

#endif
