#ifndef com_sun_jmx_mbeanserver_MXBeanSupport_HPP
#define com_sun_jmx_mbeanserver_MXBeanSupport_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::mbeanserver::MXBeanSupport : public jObject<::com::sun::jmx::mbeanserver::MXBeanSupport, ::com::sun::jmx::mbeanserver::MBeanSupport> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_mbeanserver / "MXBeanSupport";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::Object, ::java::lang::Class)>(), //
		jMethod<::jvoid(::javax::management::MBeanServer, ::javax::management::ObjectName)>("register"), //
		jMethod<::jvoid()>("unregister"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto register_(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("register")] != -1);
		return call<R>("register", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unregister(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unregister")] != -1);
		return call<R>("unregister", std::forward<Args>(args)...);
	}

};

#endif
