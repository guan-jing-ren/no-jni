#ifndef com_sun_jmx_defaults_JmxProperties_HPP
#define com_sun_jmx_defaults_JmxProperties_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::defaults::JmxProperties : public jObject<::com::sun::jmx::defaults::JmxProperties, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_defaults / "JmxProperties";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("JMX_IMPL_NAME"), //
		jField<::java::lang::String>("JMX_IMPL_VENDOR"), //
		jField<::java::lang::String>("JMX_IMPL_VERSION"), //
		jField<::java::lang::String>("JMX_INITIAL_BUILDER"), //
		jField<::java::lang::String>("JMX_SPEC_NAME"), //
		jField<::java::lang::String>("JMX_SPEC_VENDOR"), //
		jField<::java::lang::String>("JMX_SPEC_VERSION"), //
		jField<::java::util::logging::Logger>("MBEANSERVER_LOGGER"), //
		jField<::java::lang::String>("MBEANSERVER_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("MISC_LOGGER"), //
		jField<::java::lang::String>("MISC_LOGGER_NAME"), //
		jField<::java::lang::String>("MLET_LIB_DIR"), //
		jField<::java::util::logging::Logger>("MLET_LOGGER"), //
		jField<::java::lang::String>("MLET_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("MODELMBEAN_LOGGER"), //
		jField<::java::lang::String>("MODELMBEAN_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("MONITOR_LOGGER"), //
		jField<::java::lang::String>("MONITOR_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("NOTIFICATION_LOGGER"), //
		jField<::java::lang::String>("NOTIFICATION_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("RELATION_LOGGER"), //
		jField<::java::lang::String>("RELATION_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("SNMP_ADAPTOR_LOGGER"), //
		jField<::java::lang::String>("SNMP_ADAPTOR_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("SNMP_LOGGER"), //
		jField<::java::lang::String>("SNMP_LOGGER_NAME"), //
		jField<::java::util::logging::Logger>("TIMER_LOGGER"), //
		jField<::java::lang::String>("TIMER_LOGGER_NAME"), //
	};

	template<typename F = ::java::lang::String>
	static auto JMX_IMPL_NAME() {
		static_assert(field_signatures[jField<F>("JMX_IMPL_NAME")] != -1);
		return sat<F>("JMX_IMPL_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_IMPL_VENDOR() {
		static_assert(field_signatures[jField<F>("JMX_IMPL_VENDOR")] != -1);
		return sat<F>("JMX_IMPL_VENDOR");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_IMPL_VERSION() {
		static_assert(field_signatures[jField<F>("JMX_IMPL_VERSION")] != -1);
		return sat<F>("JMX_IMPL_VERSION");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_INITIAL_BUILDER() {
		static_assert(field_signatures[jField<F>("JMX_INITIAL_BUILDER")] != -1);
		return sat<F>("JMX_INITIAL_BUILDER");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_NAME() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_NAME")] != -1);
		return sat<F>("JMX_SPEC_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_VENDOR() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_VENDOR")] != -1);
		return sat<F>("JMX_SPEC_VENDOR");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_VERSION() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_VERSION")] != -1);
		return sat<F>("JMX_SPEC_VERSION");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto MBEANSERVER_LOGGER() {
		static_assert(field_signatures[jField<F>("MBEANSERVER_LOGGER")] != -1);
		return sat<F>("MBEANSERVER_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto MBEANSERVER_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("MBEANSERVER_LOGGER_NAME")] != -1);
		return sat<F>("MBEANSERVER_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto MISC_LOGGER() {
		static_assert(field_signatures[jField<F>("MISC_LOGGER")] != -1);
		return sat<F>("MISC_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto MISC_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("MISC_LOGGER_NAME")] != -1);
		return sat<F>("MISC_LOGGER_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto MLET_LIB_DIR() {
		static_assert(field_signatures[jField<F>("MLET_LIB_DIR")] != -1);
		return sat<F>("MLET_LIB_DIR");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto MLET_LOGGER() {
		static_assert(field_signatures[jField<F>("MLET_LOGGER")] != -1);
		return sat<F>("MLET_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto MLET_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("MLET_LOGGER_NAME")] != -1);
		return sat<F>("MLET_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto MODELMBEAN_LOGGER() {
		static_assert(field_signatures[jField<F>("MODELMBEAN_LOGGER")] != -1);
		return sat<F>("MODELMBEAN_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto MODELMBEAN_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("MODELMBEAN_LOGGER_NAME")] != -1);
		return sat<F>("MODELMBEAN_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto MONITOR_LOGGER() {
		static_assert(field_signatures[jField<F>("MONITOR_LOGGER")] != -1);
		return sat<F>("MONITOR_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto MONITOR_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("MONITOR_LOGGER_NAME")] != -1);
		return sat<F>("MONITOR_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto NOTIFICATION_LOGGER() {
		static_assert(field_signatures[jField<F>("NOTIFICATION_LOGGER")] != -1);
		return sat<F>("NOTIFICATION_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto NOTIFICATION_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("NOTIFICATION_LOGGER_NAME")] != -1);
		return sat<F>("NOTIFICATION_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto RELATION_LOGGER() {
		static_assert(field_signatures[jField<F>("RELATION_LOGGER")] != -1);
		return sat<F>("RELATION_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto RELATION_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("RELATION_LOGGER_NAME")] != -1);
		return sat<F>("RELATION_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto SNMP_ADAPTOR_LOGGER() {
		static_assert(field_signatures[jField<F>("SNMP_ADAPTOR_LOGGER")] != -1);
		return sat<F>("SNMP_ADAPTOR_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_ADAPTOR_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("SNMP_ADAPTOR_LOGGER_NAME")] != -1);
		return sat<F>("SNMP_ADAPTOR_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto SNMP_LOGGER() {
		static_assert(field_signatures[jField<F>("SNMP_LOGGER")] != -1);
		return sat<F>("SNMP_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto SNMP_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("SNMP_LOGGER_NAME")] != -1);
		return sat<F>("SNMP_LOGGER_NAME");
	}

	template<typename F = ::java::util::logging::Logger>
	static auto TIMER_LOGGER() {
		static_assert(field_signatures[jField<F>("TIMER_LOGGER")] != -1);
		return sat<F>("TIMER_LOGGER");
	}

	template<typename F = ::java::lang::String>
	static auto TIMER_LOGGER_NAME() {
		static_assert(field_signatures[jField<F>("TIMER_LOGGER_NAME")] != -1);
		return sat<F>("TIMER_LOGGER_NAME");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
