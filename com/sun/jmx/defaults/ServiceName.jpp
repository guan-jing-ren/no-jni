#ifndef com_sun_jmx_defaults_ServiceName_HPP
#define com_sun_jmx_defaults_ServiceName_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::defaults::ServiceName : public jObject<::com::sun::jmx::defaults::ServiceName, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_defaults / "ServiceName";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("DELEGATE"), //
		jField<::java::lang::String>("DOMAIN"), //
		jField<::java::lang::String>("JMX_IMPL_NAME"), //
		jField<::java::lang::String>("JMX_IMPL_VENDOR"), //
		jField<::java::lang::String>("JMX_SPEC_NAME"), //
		jField<::java::lang::String>("JMX_SPEC_VENDOR"), //
		jField<::java::lang::String>("JMX_SPEC_VERSION"), //
		jField<::java::lang::String>("MLET"), //
	};

	template<typename F = ::java::lang::String>
	static auto DELEGATE() {
		static_assert(field_signatures[jField<F>("DELEGATE")] != -1);
		return sat<F>("DELEGATE");
	}

	template<typename F = ::java::lang::String>
	static auto DOMAIN() {
		static_assert(field_signatures[jField<F>("DOMAIN")] != -1);
		return sat<F>("DOMAIN");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_IMPL_NAME() {
		static_assert(field_signatures[jField<F>("JMX_IMPL_NAME")] != -1);
		return sat<F>("JMX_IMPL_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_IMPL_VENDOR() {
		static_assert(field_signatures[jField<F>("JMX_IMPL_VENDOR")] != -1);
		return sat<F>("JMX_IMPL_VENDOR");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_NAME() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_NAME")] != -1);
		return sat<F>("JMX_SPEC_NAME");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_VENDOR() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_VENDOR")] != -1);
		return sat<F>("JMX_SPEC_VENDOR");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SPEC_VERSION() {
		static_assert(field_signatures[jField<F>("JMX_SPEC_VERSION")] != -1);
		return sat<F>("JMX_SPEC_VERSION");
	}

	template<typename F = ::java::lang::String>
	static auto MLET() {
		static_assert(field_signatures[jField<F>("MLET")] != -1);
		return sat<F>("MLET");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
