#ifndef com_sun_jmx_interceptor_MBeanServerInterceptor_HPP
#define com_sun_jmx_interceptor_MBeanServerInterceptor_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::jmx::interceptor::MBeanServerInterceptor : public jObject<::com::sun::jmx::interceptor::MBeanServerInterceptor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_interceptor / "MBeanServerInterceptor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::io::ObjectInputStream(::java::lang::String, ::javax::management::ObjectName, ::jbyte *)>("deserialize"), //
		jMethod<::java::io::ObjectInputStream(::java::lang::String, ::jbyte *)>("deserialize"), //
		jMethod<::java::io::ObjectInputStream(::javax::management::ObjectName, ::jbyte *)>("deserialize"), //
		jMethod<::javax::management::loading::ClassLoaderRepository()>("getClassLoaderRepository"), //
		jMethod<::java::lang::Object(::java::lang::String)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::javax::management::ObjectName)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::javax::management::ObjectName, ::java::lang::Object *, ::java::lang::String *)>("instantiate"), //
		jMethod<::java::lang::Object(::java::lang::String, ::java::lang::Object *, ::java::lang::String *)>("instantiate"), //
	};

	template<typename R = ::java::io::ObjectInputStream, typename... Args>
	auto deserialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("deserialize")] != -1);
		return call<R>("deserialize", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::loading::ClassLoaderRepository, typename... Args>
	auto getClassLoaderRepository(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getClassLoaderRepository")] != -1);
		return call<R>("getClassLoaderRepository", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto instantiate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("instantiate")] != -1);
		return call<R>("instantiate", std::forward<Args>(args)...);
	}

};

#endif
