#ifndef com_sun_jmx_remote_protocol_iiop_IIOPProxyImpl_HPP
#define com_sun_jmx_remote_protocol_iiop_IIOPProxyImpl_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::protocol::iiop::IIOPProxyImpl : public jObject<::com::sun::jmx::remote::protocol::iiop::IIOPProxyImpl, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_protocol_iiop / "IIOPProxyImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("connect"), //
		jMethod<::java::lang::Object(::java::lang::String *, ::java::util::Properties)>("createOrb"), //
		jMethod<::jvoid(::java::rmi::Remote)>("exportObject"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getDelegate"), //
		jMethod<::java::lang::Object(::java::lang::Object)>("getOrb"), //
		jMethod<::jboolean(::java::lang::Object)>("isOrb"), //
		jMethod<::jboolean(::java::lang::Object)>("isStub"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::Class)>("narrow"), //
		jMethod<::java::lang::String(::java::lang::Object, ::java::lang::Object)>("objectToString"), //
		jMethod<::jvoid(::java::lang::Object, ::java::lang::Object)>("setDelegate"), //
		jMethod<::java::lang::Object(::java::lang::Object, ::java::lang::String)>("stringToObject"), //
		jMethod<::java::rmi::Remote(::java::rmi::Remote)>("toStub"), //
		jMethod<::jvoid(::java::rmi::Remote)>("unexportObject"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto connect(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("connect")] != -1);
		return call<R>("connect", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto createOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createOrb")] != -1);
		return call<R>("createOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto exportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("exportObject")] != -1);
		return call<R>("exportObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegate")] != -1);
		return call<R>("getDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrb")] != -1);
		return call<R>("getOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOrb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOrb")] != -1);
		return call<R>("isOrb", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isStub")] != -1);
		return call<R>("isStub", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto narrow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("narrow")] != -1);
		return call<R>("narrow", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto objectToString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("objectToString")] != -1);
		return call<R>("objectToString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDelegate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegate")] != -1);
		return call<R>("setDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto stringToObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringToObject")] != -1);
		return call<R>("stringToObject", std::forward<Args>(args)...);
	}

	template<typename R = ::java::rmi::Remote, typename... Args>
	auto toStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toStub")] != -1);
		return call<R>("toStub", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unexportObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unexportObject")] != -1);
		return call<R>("unexportObject", std::forward<Args>(args)...);
	}

};

#endif
