#ifndef com_sun_jmx_remote_security_NotificationAccessController_HPP
#define com_sun_jmx_remote_security_NotificationAccessController_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::security::NotificationAccessController : public jObject<::com::sun::jmx::remote::security::NotificationAccessController, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_security / "NotificationAccessController";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::java::lang::String, ::javax::management::ObjectName, ::javax::security::auth::Subject)>("addNotificationListener"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::ObjectName, ::javax::management::Notification, ::javax::security::auth::Subject)>("fetchNotification"), //
		jMethod<::jvoid(::java::lang::String, ::javax::management::ObjectName, ::javax::security::auth::Subject)>("removeNotificationListener"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addNotificationListener")] != -1);
		return call<R>("addNotificationListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fetchNotification(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fetchNotification")] != -1);
		return call<R>("fetchNotification", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeNotificationListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeNotificationListener")] != -1);
		return call<R>("removeNotificationListener", std::forward<Args>(args)...);
	}

};

#endif
