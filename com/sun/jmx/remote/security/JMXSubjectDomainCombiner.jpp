#ifndef com_sun_jmx_remote_security_JMXSubjectDomainCombiner_HPP
#define com_sun_jmx_remote_security_JMXSubjectDomainCombiner_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::security::JMXSubjectDomainCombiner : public jObject<::com::sun::jmx::remote::security::JMXSubjectDomainCombiner, ::javax::security::auth::SubjectDomainCombiner> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_security / "JMXSubjectDomainCombiner";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::security::auth::Subject)>(), //
		jMethod<::java::security::ProtectionDomain *(::java::security::ProtectionDomain *, ::java::security::ProtectionDomain *)>("combine"), //
		jMethod<::java::security::AccessControlContext(::javax::security::auth::Subject)>("getContext"), //
		jMethod<::java::security::AccessControlContext(::javax::security::auth::Subject)>("getDomainCombinerContext"), //
	};

	template<typename R = ::java::security::ProtectionDomain *, typename... Args>
	auto combine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("combine")] != -1);
		return call<R>("combine", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::AccessControlContext, typename... Args>
	static auto getContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getContext")] != -1);
		return scall<R>("getContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::AccessControlContext, typename... Args>
	static auto getDomainCombinerContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDomainCombinerContext")] != -1);
		return scall<R>("getDomainCombinerContext", std::forward<Args>(args)...);
	}

};

#endif
