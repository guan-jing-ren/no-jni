#ifndef com_sun_jmx_remote_security_SubjectDelegator_HPP
#define com_sun_jmx_remote_security_SubjectDelegator_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::security::SubjectDelegator : public jObject<::com::sun::jmx::remote::security::SubjectDelegator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_security / "SubjectDelegator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::javax::security::auth::Subject)>("checkRemoveCallerContext"), //
		jMethod<::java::security::AccessControlContext(::java::security::AccessControlContext, ::javax::security::auth::Subject, ::jboolean)>("delegatedContext"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto checkRemoveCallerContext(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkRemoveCallerContext")] != -1);
		return scall<R>("checkRemoveCallerContext", std::forward<Args>(args)...);
	}

	template<typename R = ::java::security::AccessControlContext, typename... Args>
	auto delegatedContext(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("delegatedContext")] != -1);
		return call<R>("delegatedContext", std::forward<Args>(args)...);
	}

};

#endif
