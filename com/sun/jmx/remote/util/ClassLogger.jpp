#ifndef com_sun_jmx_remote_util_ClassLogger_HPP
#define com_sun_jmx_remote_util_ClassLogger_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::util::ClassLogger : public jObject<::com::sun::jmx::remote::util::ClassLogger, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_util / "ClassLogger";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("config"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("config"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("config"), //
		jMethod<::jboolean()>("configOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("debug"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("debug"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("debug"), //
		jMethod<::jboolean()>("debugOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("error"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("error"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("error"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("fine"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("fine"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("fine"), //
		jMethod<::jboolean()>("fineOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("finer"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("finer"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("finer"), //
		jMethod<::jboolean()>("finerOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("finest"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("finest"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("finest"), //
		jMethod<::jboolean()>("finestOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("info"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("info"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("info"), //
		jMethod<::jboolean()>("infoOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("severe"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("severe"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("severe"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("trace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("trace"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("trace"), //
		jMethod<::jboolean()>("traceOn"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("warning"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::Throwable)>("warning"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Throwable)>("warning"), //
		jMethod<::jboolean()>("warningOn"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto config(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("config")] != -1);
		return call<R>("config", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto configOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("configOn")] != -1);
		return call<R>("configOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto debug(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("debug")] != -1);
		return call<R>("debug", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto debugOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("debugOn")] != -1);
		return call<R>("debugOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto error(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("error")] != -1);
		return call<R>("error", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto fine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fine")] != -1);
		return call<R>("fine", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto fineOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fineOn")] != -1);
		return call<R>("fineOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finer")] != -1);
		return call<R>("finer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto finerOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finerOn")] != -1);
		return call<R>("finerOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finest(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finest")] != -1);
		return call<R>("finest", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto finestOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finestOn")] != -1);
		return call<R>("finestOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto info(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("info")] != -1);
		return call<R>("info", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto infoOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("infoOn")] != -1);
		return call<R>("infoOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto severe(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("severe")] != -1);
		return call<R>("severe", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trace(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trace")] != -1);
		return call<R>("trace", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto traceOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("traceOn")] != -1);
		return call<R>("traceOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto warning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("warning")] != -1);
		return call<R>("warning", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto warningOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("warningOn")] != -1);
		return call<R>("warningOn", std::forward<Args>(args)...);
	}

};

#endif
