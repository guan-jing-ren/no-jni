#ifndef com_sun_jmx_remote_util_EnvHelp_HPP
#define com_sun_jmx_remote_util_EnvHelp_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::jmx::remote::util::EnvHelp : public jObject<::com::sun::jmx::remote::util::EnvHelp, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_jmx_remote_util / "EnvHelp";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BUFFER_SIZE_PROPERTY"), //
		jField<::java::lang::String>("CLIENT_CONNECTION_CHECK_PERIOD"), //
		jField<::java::lang::String>("CREDENTIAL_TYPES"), //
		jField<::java::lang::String>("DEFAULT_HIDDEN_ATTRIBUTES"), //
		jField<::java::lang::String>("DEFAULT_ORB"), //
		jField<::java::lang::String>("FETCH_TIMEOUT"), //
		jField<::java::lang::String>("HIDDEN_ATTRIBUTES"), //
		jField<::java::lang::String>("JMX_SERVER_DAEMON"), //
		jField<::java::lang::String>("MAX_FETCH_NOTIFS"), //
		jField<::java::lang::String>("NOTIF_ACCESS_CONTROLLER"), //
		jField<::java::lang::String>("SERVER_CONNECTION_TIMEOUT"), //
	};

	template<typename F = ::java::lang::String>
	static auto BUFFER_SIZE_PROPERTY() {
		static_assert(field_signatures[jField<F>("BUFFER_SIZE_PROPERTY")] != -1);
		return sat<F>("BUFFER_SIZE_PROPERTY");
	}

	template<typename F = ::java::lang::String>
	static auto CLIENT_CONNECTION_CHECK_PERIOD() {
		static_assert(field_signatures[jField<F>("CLIENT_CONNECTION_CHECK_PERIOD")] != -1);
		return sat<F>("CLIENT_CONNECTION_CHECK_PERIOD");
	}

	template<typename F = ::java::lang::String>
	static auto CREDENTIAL_TYPES() {
		static_assert(field_signatures[jField<F>("CREDENTIAL_TYPES")] != -1);
		return sat<F>("CREDENTIAL_TYPES");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_HIDDEN_ATTRIBUTES() {
		static_assert(field_signatures[jField<F>("DEFAULT_HIDDEN_ATTRIBUTES")] != -1);
		return sat<F>("DEFAULT_HIDDEN_ATTRIBUTES");
	}

	template<typename F = ::java::lang::String>
	static auto DEFAULT_ORB() {
		static_assert(field_signatures[jField<F>("DEFAULT_ORB")] != -1);
		return sat<F>("DEFAULT_ORB");
	}

	template<typename F = ::java::lang::String>
	static auto FETCH_TIMEOUT() {
		static_assert(field_signatures[jField<F>("FETCH_TIMEOUT")] != -1);
		return sat<F>("FETCH_TIMEOUT");
	}

	template<typename F = ::java::lang::String>
	static auto HIDDEN_ATTRIBUTES() {
		static_assert(field_signatures[jField<F>("HIDDEN_ATTRIBUTES")] != -1);
		return sat<F>("HIDDEN_ATTRIBUTES");
	}

	template<typename F = ::java::lang::String>
	static auto JMX_SERVER_DAEMON() {
		static_assert(field_signatures[jField<F>("JMX_SERVER_DAEMON")] != -1);
		return sat<F>("JMX_SERVER_DAEMON");
	}

	template<typename F = ::java::lang::String>
	static auto MAX_FETCH_NOTIFS() {
		static_assert(field_signatures[jField<F>("MAX_FETCH_NOTIFS")] != -1);
		return sat<F>("MAX_FETCH_NOTIFS");
	}

	template<typename F = ::java::lang::String>
	static auto NOTIF_ACCESS_CONTROLLER() {
		static_assert(field_signatures[jField<F>("NOTIF_ACCESS_CONTROLLER")] != -1);
		return sat<F>("NOTIF_ACCESS_CONTROLLER");
	}

	template<typename F = ::java::lang::String>
	static auto SERVER_CONNECTION_TIMEOUT() {
		static_assert(field_signatures[jField<F>("SERVER_CONNECTION_TIMEOUT")] != -1);
		return sat<F>("SERVER_CONNECTION_TIMEOUT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::util::Map)>("checkAttributes"), //
		jMethod<::jboolean(::java::lang::String)>("computeBooleanFromString"), //
		jMethod<::jboolean(::java::lang::String, ::jboolean)>("computeBooleanFromString"), //
		jMethod<::java::util::Map(::java::util::Map)>("filterAttributes"), //
		jMethod<::java::lang::Throwable(::java::lang::Throwable)>("getCause"), //
		jMethod<::jlong(::java::util::Map)>("getConnectionCheckPeriod"), //
		jMethod<::jlong(::java::util::Map)>("getFetchTimeout"), //
		jMethod<::jlong(::java::util::Map, ::java::lang::String, ::jlong, ::jlong, ::jlong)>("getIntegerAttribute"), //
		jMethod<::jint(::java::util::Map)>("getMaxFetchNotifNumber"), //
		jMethod<::jint(::java::util::Map)>("getNotifBufferSize"), //
		jMethod<::com::sun::jmx::remote::security::NotificationAccessController(::java::util::Map)>("getNotificationAccessController"), //
		jMethod<::jlong(::java::util::Map)>("getServerConnectionTimeout"), //
		jMethod<::java::lang::Throwable(::java::lang::Throwable, ::java::lang::Throwable)>("initCause"), //
		jMethod<::jboolean(::java::util::Map)>("isServerDaemon"), //
		jMethod<::java::util::Hashtable(::java::util::Map)>("mapToHashtable"), //
		jMethod<::java::lang::ClassLoader(::java::util::Map)>("resolveClientClassLoader"), //
		jMethod<::java::lang::ClassLoader(::java::util::Map, ::javax::management::MBeanServer)>("resolveServerClassLoader"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto checkAttributes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("checkAttributes")] != -1);
		return scall<R>("checkAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto computeBooleanFromString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeBooleanFromString")] != -1);
		return scall<R>("computeBooleanFromString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	static auto filterAttributes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filterAttributes")] != -1);
		return scall<R>("filterAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	static auto getCause(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCause")] != -1);
		return scall<R>("getCause", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getConnectionCheckPeriod(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConnectionCheckPeriod")] != -1);
		return scall<R>("getConnectionCheckPeriod", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getFetchTimeout(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFetchTimeout")] != -1);
		return scall<R>("getFetchTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getIntegerAttribute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntegerAttribute")] != -1);
		return scall<R>("getIntegerAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getMaxFetchNotifNumber(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxFetchNotifNumber")] != -1);
		return scall<R>("getMaxFetchNotifNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getNotifBufferSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotifBufferSize")] != -1);
		return scall<R>("getNotifBufferSize", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::jmx::remote::security::NotificationAccessController, typename... Args>
	static auto getNotificationAccessController(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNotificationAccessController")] != -1);
		return scall<R>("getNotificationAccessController", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getServerConnectionTimeout(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getServerConnectionTimeout")] != -1);
		return scall<R>("getServerConnectionTimeout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Throwable, typename... Args>
	static auto initCause(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initCause")] != -1);
		return scall<R>("initCause", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isServerDaemon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isServerDaemon")] != -1);
		return scall<R>("isServerDaemon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Hashtable, typename... Args>
	static auto mapToHashtable(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mapToHashtable")] != -1);
		return scall<R>("mapToHashtable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	static auto resolveClientClassLoader(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveClientClassLoader")] != -1);
		return scall<R>("resolveClientClassLoader", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::ClassLoader, typename... Args>
	static auto resolveServerClassLoader(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resolveServerClassLoader")] != -1);
		return scall<R>("resolveServerClassLoader", std::forward<Args>(args)...);
	}

};

#endif
