#ifndef com_sun_management_GcInfo_HPP
#define com_sun_management_GcInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::management::GcInfo : public jObject<::com::sun::management::GcInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_management / "GcInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String)>("containsKey"), //
		jMethod<::jboolean(::java::lang::Object)>("containsValue"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::management::GcInfo(::javax::management::openmbean::CompositeData)>("from"), //
		jMethod<::java::lang::Object(::java::lang::String)>("get"), //
		jMethod<::java::lang::Object *(::java::lang::String *)>("getAll"), //
		jMethod<::javax::management::openmbean::CompositeType()>("getCompositeType"), //
		jMethod<::jlong()>("getDuration"), //
		jMethod<::jlong()>("getEndTime"), //
		jMethod<::jlong()>("getId"), //
		jMethod<::java::util::Map()>("getMemoryUsageAfterGc"), //
		jMethod<::java::util::Map()>("getMemoryUsageBeforeGc"), //
		jMethod<::jlong()>("getStartTime"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::javax::management::openmbean::CompositeData(::javax::management::openmbean::CompositeType)>("toCompositeData"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::util::Collection()>("values"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto containsKey(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsKey")] != -1);
		return call<R>("containsKey", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto containsValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("containsValue")] != -1);
		return call<R>("containsValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::GcInfo, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object *, typename... Args>
	auto getAll(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAll")] != -1);
		return call<R>("getAll", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeType, typename... Args>
	auto getCompositeType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCompositeType")] != -1);
		return call<R>("getCompositeType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getDuration(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDuration")] != -1);
		return call<R>("getDuration", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEndTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndTime")] != -1);
		return call<R>("getEndTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getId(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getId")] != -1);
		return call<R>("getId", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getMemoryUsageAfterGc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryUsageAfterGc")] != -1);
		return call<R>("getMemoryUsageAfterGc", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getMemoryUsageBeforeGc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemoryUsageBeforeGc")] != -1);
		return call<R>("getMemoryUsageBeforeGc", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartTime")] != -1);
		return call<R>("getStartTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	auto toCompositeData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return call<R>("toCompositeData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Collection, typename... Args>
	auto values(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return call<R>("values", std::forward<Args>(args)...);
	}

};

#endif
