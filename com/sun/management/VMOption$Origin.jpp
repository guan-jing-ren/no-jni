#ifndef com_sun_management_VMOption$Origin_HPP
#define com_sun_management_VMOption$Origin_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::management::VMOption$Origin : public jObject<::com::sun::management::VMOption$Origin, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_management / "VMOption$Origin";

	constexpr static Enume field_signatures{
		jField<::com::sun::management::VMOption$Origin>("CONFIG_FILE"), //
		jField<::com::sun::management::VMOption$Origin>("DEFAULT"), //
		jField<::com::sun::management::VMOption$Origin>("ENVIRON_VAR"), //
		jField<::com::sun::management::VMOption$Origin>("ERGONOMIC"), //
		jField<::com::sun::management::VMOption$Origin>("MANAGEMENT"), //
		jField<::com::sun::management::VMOption$Origin>("OTHER"), //
		jField<::com::sun::management::VMOption$Origin>("VM_CREATION"), //
	};

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto CONFIG_FILE() {
		static_assert(field_signatures[jField<F>("CONFIG_FILE")] != -1);
		return sat<F>("CONFIG_FILE");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto DEFAULT() {
		static_assert(field_signatures[jField<F>("DEFAULT")] != -1);
		return sat<F>("DEFAULT");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto ENVIRON_VAR() {
		static_assert(field_signatures[jField<F>("ENVIRON_VAR")] != -1);
		return sat<F>("ENVIRON_VAR");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto ERGONOMIC() {
		static_assert(field_signatures[jField<F>("ERGONOMIC")] != -1);
		return sat<F>("ERGONOMIC");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto MANAGEMENT() {
		static_assert(field_signatures[jField<F>("MANAGEMENT")] != -1);
		return sat<F>("MANAGEMENT");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto OTHER() {
		static_assert(field_signatures[jField<F>("OTHER")] != -1);
		return sat<F>("OTHER");
	}

	template<typename F = ::com::sun::management::VMOption$Origin>
	static auto VM_CREATION() {
		static_assert(field_signatures[jField<F>("VM_CREATION")] != -1);
		return sat<F>("VM_CREATION");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::management::VMOption$Origin(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::management::VMOption$Origin *()>("values"), //
	};

	template<typename R = ::com::sun::management::VMOption$Origin, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::VMOption$Origin *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
