#ifndef com_sun_management_VMOption_HPP
#define com_sun_management_VMOption_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::management::VMOption : public jObject<::com::sun::management::VMOption, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_management / "VMOption";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::jboolean, ::com::sun::management::VMOption$Origin)>(), //
		jMethod<::com::sun::management::VMOption(::javax::management::openmbean::CompositeData)>("from"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::management::VMOption$Origin()>("getOrigin"), //
		jMethod<::java::lang::String()>("getValue"), //
		jMethod<::jboolean()>("isWriteable"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::management::VMOption, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::VMOption$Origin, typename... Args>
	auto getOrigin(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOrigin")] != -1);
		return call<R>("getOrigin", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWriteable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWriteable")] != -1);
		return call<R>("isWriteable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
