#ifndef com_sun_management_GarbageCollectionNotificationInfo_HPP
#define com_sun_management_GarbageCollectionNotificationInfo_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::management::GarbageCollectionNotificationInfo : public jObject<::com::sun::management::GarbageCollectionNotificationInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_management / "GarbageCollectionNotificationInfo";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("GARBAGE_COLLECTION_NOTIFICATION"), //
	};

	template<typename F = ::java::lang::String>
	static auto GARBAGE_COLLECTION_NOTIFICATION() {
		static_assert(field_signatures[jField<F>("GARBAGE_COLLECTION_NOTIFICATION")] != -1);
		return sat<F>("GARBAGE_COLLECTION_NOTIFICATION");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String, ::java::lang::String, ::com::sun::management::GcInfo)>(), //
		jMethod<::com::sun::management::GarbageCollectionNotificationInfo(::javax::management::openmbean::CompositeData)>("from"), //
		jMethod<::java::lang::String()>("getGcAction"), //
		jMethod<::java::lang::String()>("getGcCause"), //
		jMethod<::com::sun::management::GcInfo()>("getGcInfo"), //
		jMethod<::java::lang::String()>("getGcName"), //
		jMethod<::javax::management::openmbean::CompositeData(::javax::management::openmbean::CompositeType)>("toCompositeData"), //
	};

	template<typename R = ::com::sun::management::GarbageCollectionNotificationInfo, typename... Args>
	static auto from(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("from")] != -1);
		return scall<R>("from", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGcAction(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGcAction")] != -1);
		return call<R>("getGcAction", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGcCause(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGcCause")] != -1);
		return call<R>("getGcCause", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::management::GcInfo, typename... Args>
	auto getGcInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGcInfo")] != -1);
		return call<R>("getGcInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getGcName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGcName")] != -1);
		return call<R>("getGcName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::management::openmbean::CompositeData, typename... Args>
	auto toCompositeData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCompositeData")] != -1);
		return call<R>("toCompositeData", std::forward<Args>(args)...);
	}

};

#endif
