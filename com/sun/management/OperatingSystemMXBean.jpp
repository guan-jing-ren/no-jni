#ifndef com_sun_management_OperatingSystemMXBean_HPP
#define com_sun_management_OperatingSystemMXBean_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::management::OperatingSystemMXBean : public jObject<::com::sun::management::OperatingSystemMXBean, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_management / "OperatingSystemMXBean";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jlong()>("getCommittedVirtualMemorySize"), //
		jMethod<::jlong()>("getFreePhysicalMemorySize"), //
		jMethod<::jlong()>("getFreeSwapSpaceSize"), //
		jMethod<::jdouble()>("getProcessCpuLoad"), //
		jMethod<::jlong()>("getProcessCpuTime"), //
		jMethod<::jdouble()>("getSystemCpuLoad"), //
		jMethod<::jlong()>("getTotalPhysicalMemorySize"), //
		jMethod<::jlong()>("getTotalSwapSpaceSize"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getCommittedVirtualMemorySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCommittedVirtualMemorySize")] != -1);
		return call<R>("getCommittedVirtualMemorySize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFreePhysicalMemorySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFreePhysicalMemorySize")] != -1);
		return call<R>("getFreePhysicalMemorySize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFreeSwapSpaceSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFreeSwapSpaceSize")] != -1);
		return call<R>("getFreeSwapSpaceSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getProcessCpuLoad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProcessCpuLoad")] != -1);
		return call<R>("getProcessCpuLoad", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getProcessCpuTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProcessCpuTime")] != -1);
		return call<R>("getProcessCpuTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto getSystemCpuLoad(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSystemCpuLoad")] != -1);
		return call<R>("getSystemCpuLoad", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalPhysicalMemorySize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalPhysicalMemorySize")] != -1);
		return call<R>("getTotalPhysicalMemorySize", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getTotalSwapSpaceSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTotalSwapSpaceSize")] != -1);
		return call<R>("getTotalSwapSpaceSize", std::forward<Args>(args)...);
	}

};

#endif
