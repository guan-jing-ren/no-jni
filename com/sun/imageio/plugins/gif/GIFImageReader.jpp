#ifndef com_sun_imageio_plugins_gif_GIFImageReader_HPP
#define com_sun_imageio_plugins_gif_GIFImageReader_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::gif::GIFImageReader : public jObject<::com::sun::imageio::plugins::gif::GIFImageReader, ::javax::imageio::ImageReader> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_gif / "GIFImageReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::imageio::spi::ImageReaderSpi)>(), //
		jMethod<::javax::imageio::ImageReadParam()>("getDefaultReadParam"), //
		jMethod<::jint(::jint)>("getHeight"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::jint)>("getImageMetadata"), //
		jMethod<::java::util::Iterator(::jint)>("getImageTypes"), //
		jMethod<::jint(::jboolean)>("getNumImages"), //
		jMethod<::javax::imageio::metadata::IIOMetadata()>("getStreamMetadata"), //
		jMethod<::jint(::jint)>("getWidth"), //
		jMethod<::jvoid(::jint *, ::jbyte *, ::jbyte *, ::jint *)>("initializeStringTable"), //
		jMethod<::java::awt::image::BufferedImage(::jint, ::javax::imageio::ImageReadParam)>("read"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::Object, ::jboolean, ::jboolean)>("setInput"), //
	};

	template<typename R = ::javax::imageio::ImageReadParam, typename... Args>
	auto getDefaultReadParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultReadParam")] != -1);
		return call<R>("getDefaultReadParam", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHeight(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHeight")] != -1);
		return call<R>("getHeight", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageMetadata")] != -1);
		return call<R>("getImageMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Iterator, typename... Args>
	auto getImageTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getImageTypes")] != -1);
		return call<R>("getImageTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumImages(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumImages")] != -1);
		return call<R>("getNumImages", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStreamMetadata")] != -1);
		return call<R>("getStreamMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWidth")] != -1);
		return call<R>("getWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initializeStringTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initializeStringTable")] != -1);
		return call<R>("initializeStringTable", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::BufferedImage, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInput")] != -1);
		return call<R>("setInput", std::forward<Args>(args)...);
	}

};

#endif
