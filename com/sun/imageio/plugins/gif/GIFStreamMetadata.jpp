#ifndef com_sun_imageio_plugins_gif_GIFStreamMetadata_HPP
#define com_sun_imageio_plugins_gif_GIFStreamMetadata_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::gif::GIFStreamMetadata : public jObject<::com::sun::imageio::plugins::gif::GIFStreamMetadata, ::com::sun::imageio::plugins::gif::GIFMetadata> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_gif / "GIFStreamMetadata";

	constexpr static Enume field_signatures{
		jField<::jint>("backgroundColorIndex"), //
		jField<::jint>("colorResolution"), //
		jField<::jbyte *>("globalColorTable"), //
		jField<::jint>("logicalScreenHeight"), //
		jField<::jint>("logicalScreenWidth"), //
		jField<::jint>("pixelAspectRatio"), //
		jField<::jboolean>("sortFlag"), //
		jField<::java::lang::String>("version"), //
	};

	template<typename F = ::jint>
	auto backgroundColorIndex() const {
		static_assert(field_signatures[jField<F>("backgroundColorIndex")] != -1);
		return at<F>("backgroundColorIndex");
	}

	template<typename F = ::jint>
	auto colorResolution() const {
		static_assert(field_signatures[jField<F>("colorResolution")] != -1);
		return at<F>("colorResolution");
	}

	template<typename F = ::jbyte *>
	auto globalColorTable() const {
		static_assert(field_signatures[jField<F>("globalColorTable")] != -1);
		return at<F>("globalColorTable");
	}

	template<typename F = ::jint>
	auto logicalScreenHeight() const {
		static_assert(field_signatures[jField<F>("logicalScreenHeight")] != -1);
		return at<F>("logicalScreenHeight");
	}

	template<typename F = ::jint>
	auto logicalScreenWidth() const {
		static_assert(field_signatures[jField<F>("logicalScreenWidth")] != -1);
		return at<F>("logicalScreenWidth");
	}

	template<typename F = ::jint>
	auto pixelAspectRatio() const {
		static_assert(field_signatures[jField<F>("pixelAspectRatio")] != -1);
		return at<F>("pixelAspectRatio");
	}

	template<typename F = ::jboolean>
	auto sortFlag() const {
		static_assert(field_signatures[jField<F>("sortFlag")] != -1);
		return at<F>("sortFlag");
	}

	template<typename F = ::java::lang::String>
	auto version() const {
		static_assert(field_signatures[jField<F>("version")] != -1);
		return at<F>("version");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getAsTree"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardChromaNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardCompressionNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardDataNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardDimensionNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardDocumentNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardTextNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardTransparencyNode"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("mergeTree"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("setFromTree"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getAsTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsTree")] != -1);
		return call<R>("getAsTree", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardChromaNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardChromaNode")] != -1);
		return call<R>("getStandardChromaNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardCompressionNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardCompressionNode")] != -1);
		return call<R>("getStandardCompressionNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardDataNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardDataNode")] != -1);
		return call<R>("getStandardDataNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardDimensionNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardDimensionNode")] != -1);
		return call<R>("getStandardDimensionNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardDocumentNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardDocumentNode")] != -1);
		return call<R>("getStandardDocumentNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardTextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardTextNode")] != -1);
		return call<R>("getStandardTextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardTransparencyNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardTransparencyNode")] != -1);
		return call<R>("getStandardTransparencyNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mergeTree")] != -1);
		return call<R>("mergeTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromTree")] != -1);
		return call<R>("setFromTree", std::forward<Args>(args)...);
	}

};

#endif
