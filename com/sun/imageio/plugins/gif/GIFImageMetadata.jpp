#ifndef com_sun_imageio_plugins_gif_GIFImageMetadata_HPP
#define com_sun_imageio_plugins_gif_GIFImageMetadata_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::gif::GIFImageMetadata : public jObject<::com::sun::imageio::plugins::gif::GIFImageMetadata, ::com::sun::imageio::plugins::gif::GIFMetadata> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_gif / "GIFImageMetadata";

	constexpr static Enume field_signatures{
		jField<::java::util::List>("applicationData"), //
		jField<::java::util::List>("applicationIDs"), //
		jField<::java::util::List>("authenticationCodes"), //
		jField<::jint>("characterCellHeight"), //
		jField<::jint>("characterCellWidth"), //
		jField<::java::util::List>("comments"), //
		jField<::jint>("delayTime"), //
		jField<::jint>("disposalMethod"), //
		jField<::jboolean>("hasPlainTextExtension"), //
		jField<::jint>("imageHeight"), //
		jField<::jint>("imageLeftPosition"), //
		jField<::jint>("imageTopPosition"), //
		jField<::jint>("imageWidth"), //
		jField<::jboolean>("interlaceFlag"), //
		jField<::jbyte *>("localColorTable"), //
		jField<::jboolean>("sortFlag"), //
		jField<::jbyte *>("text"), //
		jField<::jint>("textBackgroundColor"), //
		jField<::jint>("textForegroundColor"), //
		jField<::jint>("textGridHeight"), //
		jField<::jint>("textGridLeft"), //
		jField<::jint>("textGridTop"), //
		jField<::jint>("textGridWidth"), //
		jField<::jboolean>("transparentColorFlag"), //
		jField<::jint>("transparentColorIndex"), //
		jField<::jboolean>("userInputFlag"), //
	};

	template<typename F = ::java::util::List>
	auto applicationData() const {
		static_assert(field_signatures[jField<F>("applicationData")] != -1);
		return at<F>("applicationData");
	}

	template<typename F = ::java::util::List>
	auto applicationIDs() const {
		static_assert(field_signatures[jField<F>("applicationIDs")] != -1);
		return at<F>("applicationIDs");
	}

	template<typename F = ::java::util::List>
	auto authenticationCodes() const {
		static_assert(field_signatures[jField<F>("authenticationCodes")] != -1);
		return at<F>("authenticationCodes");
	}

	template<typename F = ::jint>
	auto characterCellHeight() const {
		static_assert(field_signatures[jField<F>("characterCellHeight")] != -1);
		return at<F>("characterCellHeight");
	}

	template<typename F = ::jint>
	auto characterCellWidth() const {
		static_assert(field_signatures[jField<F>("characterCellWidth")] != -1);
		return at<F>("characterCellWidth");
	}

	template<typename F = ::java::util::List>
	auto comments() const {
		static_assert(field_signatures[jField<F>("comments")] != -1);
		return at<F>("comments");
	}

	template<typename F = ::jint>
	auto delayTime() const {
		static_assert(field_signatures[jField<F>("delayTime")] != -1);
		return at<F>("delayTime");
	}

	template<typename F = ::jint>
	auto disposalMethod() const {
		static_assert(field_signatures[jField<F>("disposalMethod")] != -1);
		return at<F>("disposalMethod");
	}

	template<typename F = ::jboolean>
	auto hasPlainTextExtension() const {
		static_assert(field_signatures[jField<F>("hasPlainTextExtension")] != -1);
		return at<F>("hasPlainTextExtension");
	}

	template<typename F = ::jint>
	auto imageHeight() const {
		static_assert(field_signatures[jField<F>("imageHeight")] != -1);
		return at<F>("imageHeight");
	}

	template<typename F = ::jint>
	auto imageLeftPosition() const {
		static_assert(field_signatures[jField<F>("imageLeftPosition")] != -1);
		return at<F>("imageLeftPosition");
	}

	template<typename F = ::jint>
	auto imageTopPosition() const {
		static_assert(field_signatures[jField<F>("imageTopPosition")] != -1);
		return at<F>("imageTopPosition");
	}

	template<typename F = ::jint>
	auto imageWidth() const {
		static_assert(field_signatures[jField<F>("imageWidth")] != -1);
		return at<F>("imageWidth");
	}

	template<typename F = ::jboolean>
	auto interlaceFlag() const {
		static_assert(field_signatures[jField<F>("interlaceFlag")] != -1);
		return at<F>("interlaceFlag");
	}

	template<typename F = ::jbyte *>
	auto localColorTable() const {
		static_assert(field_signatures[jField<F>("localColorTable")] != -1);
		return at<F>("localColorTable");
	}

	template<typename F = ::jboolean>
	auto sortFlag() const {
		static_assert(field_signatures[jField<F>("sortFlag")] != -1);
		return at<F>("sortFlag");
	}

	template<typename F = ::jbyte *>
	auto text() const {
		static_assert(field_signatures[jField<F>("text")] != -1);
		return at<F>("text");
	}

	template<typename F = ::jint>
	auto textBackgroundColor() const {
		static_assert(field_signatures[jField<F>("textBackgroundColor")] != -1);
		return at<F>("textBackgroundColor");
	}

	template<typename F = ::jint>
	auto textForegroundColor() const {
		static_assert(field_signatures[jField<F>("textForegroundColor")] != -1);
		return at<F>("textForegroundColor");
	}

	template<typename F = ::jint>
	auto textGridHeight() const {
		static_assert(field_signatures[jField<F>("textGridHeight")] != -1);
		return at<F>("textGridHeight");
	}

	template<typename F = ::jint>
	auto textGridLeft() const {
		static_assert(field_signatures[jField<F>("textGridLeft")] != -1);
		return at<F>("textGridLeft");
	}

	template<typename F = ::jint>
	auto textGridTop() const {
		static_assert(field_signatures[jField<F>("textGridTop")] != -1);
		return at<F>("textGridTop");
	}

	template<typename F = ::jint>
	auto textGridWidth() const {
		static_assert(field_signatures[jField<F>("textGridWidth")] != -1);
		return at<F>("textGridWidth");
	}

	template<typename F = ::jboolean>
	auto transparentColorFlag() const {
		static_assert(field_signatures[jField<F>("transparentColorFlag")] != -1);
		return at<F>("transparentColorFlag");
	}

	template<typename F = ::jint>
	auto transparentColorIndex() const {
		static_assert(field_signatures[jField<F>("transparentColorIndex")] != -1);
		return at<F>("transparentColorIndex");
	}

	template<typename F = ::jboolean>
	auto userInputFlag() const {
		static_assert(field_signatures[jField<F>("userInputFlag")] != -1);
		return at<F>("userInputFlag");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getAsTree"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardChromaNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardCompressionNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardDataNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardDimensionNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardTextNode"), //
		jMethod<::javax::imageio::metadata::IIOMetadataNode()>("getStandardTransparencyNode"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("mergeTree"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("setFromTree"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getAsTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsTree")] != -1);
		return call<R>("getAsTree", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardChromaNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardChromaNode")] != -1);
		return call<R>("getStandardChromaNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardCompressionNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardCompressionNode")] != -1);
		return call<R>("getStandardCompressionNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardDataNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardDataNode")] != -1);
		return call<R>("getStandardDataNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardDimensionNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardDimensionNode")] != -1);
		return call<R>("getStandardDimensionNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardTextNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardTextNode")] != -1);
		return call<R>("getStandardTextNode", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataNode, typename... Args>
	auto getStandardTransparencyNode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStandardTransparencyNode")] != -1);
		return call<R>("getStandardTransparencyNode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mergeTree")] != -1);
		return call<R>("mergeTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromTree")] != -1);
		return call<R>("setFromTree", std::forward<Args>(args)...);
	}

};

#endif
