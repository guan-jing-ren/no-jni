#ifndef com_sun_imageio_plugins_wbmp_WBMPMetadata_HPP
#define com_sun_imageio_plugins_wbmp_WBMPMetadata_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::wbmp::WBMPMetadata : public jObject<::com::sun::imageio::plugins::wbmp::WBMPMetadata, ::javax::imageio::metadata::IIOMetadata> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_wbmp / "WBMPMetadata";

	constexpr static Enume field_signatures{
		jField<::jint>("height"), //
		jField<::jint>("wbmpType"), //
		jField<::jint>("width"), //
	};

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jint>
	auto wbmpType() const {
		static_assert(field_signatures[jField<F>("wbmpType")] != -1);
		return at<F>("wbmpType");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getAsTree"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("mergeTree"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("setFromTree"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getAsTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsTree")] != -1);
		return call<R>("getAsTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mergeTree")] != -1);
		return call<R>("mergeTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromTree")] != -1);
		return call<R>("setFromTree", std::forward<Args>(args)...);
	}

};

#endif
