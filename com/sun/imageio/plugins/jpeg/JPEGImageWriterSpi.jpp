#ifndef com_sun_imageio_plugins_jpeg_JPEGImageWriterSpi_HPP
#define com_sun_imageio_plugins_jpeg_JPEGImageWriterSpi_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::jpeg::JPEGImageWriterSpi : public jObject<::com::sun::imageio::plugins::jpeg::JPEGImageWriterSpi, ::javax::imageio::spi::ImageWriterSpi> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_jpeg / "JPEGImageWriterSpi";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::javax::imageio::ImageTypeSpecifier)>("canEncodeImage"), //
		jMethod<::javax::imageio::ImageWriter(::java::lang::Object)>("createWriterInstance"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDescription"), //
		jMethod<::jboolean()>("isFormatLossless"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canEncodeImage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canEncodeImage")] != -1);
		return call<R>("canEncodeImage", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageWriter, typename... Args>
	auto createWriterInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createWriterInstance")] != -1);
		return call<R>("createWriterInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFormatLossless(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFormatLossless")] != -1);
		return call<R>("isFormatLossless", std::forward<Args>(args)...);
	}

};

#endif
