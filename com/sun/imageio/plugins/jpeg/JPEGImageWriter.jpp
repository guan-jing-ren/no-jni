#ifndef com_sun_imageio_plugins_jpeg_JPEGImageWriter_HPP
#define com_sun_imageio_plugins_jpeg_JPEGImageWriter_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::jpeg::JPEGImageWriter : public jObject<::com::sun::imageio::plugins::jpeg::JPEGImageWriter, ::javax::imageio::ImageWriter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_jpeg / "JPEGImageWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::imageio::spi::ImageWriterSpi)>(), //
		jMethod<::jvoid()>("abort"), //
		jMethod<::jboolean()>("canWriteRasters"), //
		jMethod<::jboolean()>("canWriteSequence"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam)>("convertImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::ImageWriteParam)>("convertStreamMetadata"), //
		jMethod<::jvoid()>("dispose"), //
		jMethod<::jvoid()>("endWriteSequence"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam)>("getDefaultImageMetadata"), //
		jMethod<::javax::imageio::metadata::IIOMetadata(::javax::imageio::ImageWriteParam)>("getDefaultStreamMetadata"), //
		jMethod<::javax::imageio::ImageWriteParam()>("getDefaultWriteParam"), //
		jMethod<::jint(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam, ::javax::imageio::metadata::IIOMetadata, ::javax::imageio::metadata::IIOMetadata)>("getNumThumbnailsSupported"), //
		jMethod<::java::awt::Dimension *(::javax::imageio::ImageTypeSpecifier, ::javax::imageio::ImageWriteParam, ::javax::imageio::metadata::IIOMetadata, ::javax::imageio::metadata::IIOMetadata)>("getPreferredThumbnailSizes"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata)>("prepareWriteSequence"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::Object)>("setOutput"), //
		jMethod<::jvoid(::javax::imageio::metadata::IIOMetadata, ::javax::imageio::IIOImage, ::javax::imageio::ImageWriteParam)>("write"), //
		jMethod<::jvoid(::javax::imageio::IIOImage, ::javax::imageio::ImageWriteParam)>("writeToSequence"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto abort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("abort")] != -1);
		return call<R>("abort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteRasters(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWriteRasters")] != -1);
		return call<R>("canWriteRasters", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto canWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canWriteSequence")] != -1);
		return call<R>("canWriteSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertImageMetadata")] != -1);
		return call<R>("convertImageMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto convertStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertStreamMetadata")] != -1);
		return call<R>("convertStreamMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dispose(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dispose")] != -1);
		return call<R>("dispose", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto endWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("endWriteSequence")] != -1);
		return call<R>("endWriteSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getDefaultImageMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultImageMetadata")] != -1);
		return call<R>("getDefaultImageMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadata, typename... Args>
	auto getDefaultStreamMetadata(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultStreamMetadata")] != -1);
		return call<R>("getDefaultStreamMetadata", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::ImageWriteParam, typename... Args>
	auto getDefaultWriteParam(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultWriteParam")] != -1);
		return call<R>("getDefaultWriteParam", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNumThumbnailsSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNumThumbnailsSupported")] != -1);
		return call<R>("getNumThumbnailsSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension *, typename... Args>
	auto getPreferredThumbnailSizes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredThumbnailSizes")] != -1);
		return call<R>("getPreferredThumbnailSizes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto prepareWriteSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prepareWriteSequence")] != -1);
		return call<R>("prepareWriteSequence", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutput")] != -1);
		return call<R>("setOutput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeToSequence(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeToSequence")] != -1);
		return call<R>("writeToSequence", std::forward<Args>(args)...);
	}

};

#endif
