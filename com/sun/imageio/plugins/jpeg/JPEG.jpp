#ifndef com_sun_imageio_plugins_jpeg_JPEG_HPP
#define com_sun_imageio_plugins_jpeg_JPEG_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::jpeg::JPEG : public jObject<::com::sun::imageio::plugins::jpeg::JPEG, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_jpeg / "JPEG";

	constexpr static Enume field_signatures{
		jField<::jint>("ADOBE_IMPOSSIBLE"), //
		jField<::jint>("ADOBE_UNKNOWN"), //
		jField<::jint>("ADOBE_YCC"), //
		jField<::jint>("ADOBE_YCCK"), //
		jField<::jint>("APP0"), //
		jField<::jint>("APP1"), //
		jField<::jint>("APP10"), //
		jField<::jint>("APP11"), //
		jField<::jint>("APP12"), //
		jField<::jint>("APP13"), //
		jField<::jint>("APP14"), //
		jField<::jint>("APP15"), //
		jField<::jint>("APP2"), //
		jField<::jint>("APP3"), //
		jField<::jint>("APP4"), //
		jField<::jint>("APP5"), //
		jField<::jint>("APP6"), //
		jField<::jint>("APP7"), //
		jField<::jint>("APP8"), //
		jField<::jint>("APP9"), //
		jField<::jint>("COM"), //
		jField<::jint>("DAC"), //
		jField<::jfloat>("DEFAULT_QUALITY"), //
		jField<::jint>("DENSITY_UNIT_ASPECT_RATIO"), //
		jField<::jint>("DENSITY_UNIT_DOTS_CM"), //
		jField<::jint>("DENSITY_UNIT_DOTS_INCH"), //
		jField<::jint>("DHP"), //
		jField<::jint>("DHT"), //
		jField<::jint>("DNL"), //
		jField<::jint>("DQT"), //
		jField<::jint>("DRI"), //
		jField<::jint>("EOI"), //
		jField<::jint>("EXP"), //
		jField<::jint>("JCS_CMYK"), //
		jField<::jint>("JCS_GRAYSCALE"), //
		jField<::jint>("JCS_RGB"), //
		jField<::jint>("JCS_RGBA"), //
		jField<::jint>("JCS_UNKNOWN"), //
		jField<::jint>("JCS_YCC"), //
		jField<::jint>("JCS_YCCA"), //
		jField<::jint>("JCS_YCCK"), //
		jField<::jint>("JCS_YCbCr"), //
		jField<::jint>("JCS_YCbCrA"), //
		jField<::jint>("JPG"), //
		jField<::jint>("NUM_DENSITY_UNIT"), //
		jField<::jint>("NUM_JCS_CODES"), //
		jField<::jint>("RESTART_RANGE"), //
		jField<::jint>("RST0"), //
		jField<::jint>("RST1"), //
		jField<::jint>("RST2"), //
		jField<::jint>("RST3"), //
		jField<::jint>("RST4"), //
		jField<::jint>("RST5"), //
		jField<::jint>("RST6"), //
		jField<::jint>("RST7"), //
		jField<::jint>("SOF0"), //
		jField<::jint>("SOF1"), //
		jField<::jint>("SOF10"), //
		jField<::jint>("SOF11"), //
		jField<::jint>("SOF13"), //
		jField<::jint>("SOF14"), //
		jField<::jint>("SOF15"), //
		jField<::jint>("SOF2"), //
		jField<::jint>("SOF3"), //
		jField<::jint>("SOF5"), //
		jField<::jint>("SOF6"), //
		jField<::jint>("SOF7"), //
		jField<::jint>("SOF9"), //
		jField<::jint>("SOI"), //
		jField<::jint>("SOS"), //
		jField<::jint>("TEM"), //
		jField<::java::lang::String>("nativeImageMetadataFormatClassName"), //
		jField<::java::lang::String>("nativeImageMetadataFormatName"), //
		jField<::java::lang::String>("nativeStreamMetadataFormatClassName"), //
		jField<::java::lang::String>("nativeStreamMetadataFormatName"), //
		jField<::java::lang::String>("vendor"), //
		jField<::java::lang::String>("version"), //
	};

	template<typename F = ::jint>
	static auto ADOBE_IMPOSSIBLE() {
		static_assert(field_signatures[jField<F>("ADOBE_IMPOSSIBLE")] != -1);
		return sat<F>("ADOBE_IMPOSSIBLE");
	}

	template<typename F = ::jint>
	static auto ADOBE_UNKNOWN() {
		static_assert(field_signatures[jField<F>("ADOBE_UNKNOWN")] != -1);
		return sat<F>("ADOBE_UNKNOWN");
	}

	template<typename F = ::jint>
	static auto ADOBE_YCC() {
		static_assert(field_signatures[jField<F>("ADOBE_YCC")] != -1);
		return sat<F>("ADOBE_YCC");
	}

	template<typename F = ::jint>
	static auto ADOBE_YCCK() {
		static_assert(field_signatures[jField<F>("ADOBE_YCCK")] != -1);
		return sat<F>("ADOBE_YCCK");
	}

	template<typename F = ::jint>
	static auto APP0() {
		static_assert(field_signatures[jField<F>("APP0")] != -1);
		return sat<F>("APP0");
	}

	template<typename F = ::jint>
	static auto APP1() {
		static_assert(field_signatures[jField<F>("APP1")] != -1);
		return sat<F>("APP1");
	}

	template<typename F = ::jint>
	static auto APP10() {
		static_assert(field_signatures[jField<F>("APP10")] != -1);
		return sat<F>("APP10");
	}

	template<typename F = ::jint>
	static auto APP11() {
		static_assert(field_signatures[jField<F>("APP11")] != -1);
		return sat<F>("APP11");
	}

	template<typename F = ::jint>
	static auto APP12() {
		static_assert(field_signatures[jField<F>("APP12")] != -1);
		return sat<F>("APP12");
	}

	template<typename F = ::jint>
	static auto APP13() {
		static_assert(field_signatures[jField<F>("APP13")] != -1);
		return sat<F>("APP13");
	}

	template<typename F = ::jint>
	static auto APP14() {
		static_assert(field_signatures[jField<F>("APP14")] != -1);
		return sat<F>("APP14");
	}

	template<typename F = ::jint>
	static auto APP15() {
		static_assert(field_signatures[jField<F>("APP15")] != -1);
		return sat<F>("APP15");
	}

	template<typename F = ::jint>
	static auto APP2() {
		static_assert(field_signatures[jField<F>("APP2")] != -1);
		return sat<F>("APP2");
	}

	template<typename F = ::jint>
	static auto APP3() {
		static_assert(field_signatures[jField<F>("APP3")] != -1);
		return sat<F>("APP3");
	}

	template<typename F = ::jint>
	static auto APP4() {
		static_assert(field_signatures[jField<F>("APP4")] != -1);
		return sat<F>("APP4");
	}

	template<typename F = ::jint>
	static auto APP5() {
		static_assert(field_signatures[jField<F>("APP5")] != -1);
		return sat<F>("APP5");
	}

	template<typename F = ::jint>
	static auto APP6() {
		static_assert(field_signatures[jField<F>("APP6")] != -1);
		return sat<F>("APP6");
	}

	template<typename F = ::jint>
	static auto APP7() {
		static_assert(field_signatures[jField<F>("APP7")] != -1);
		return sat<F>("APP7");
	}

	template<typename F = ::jint>
	static auto APP8() {
		static_assert(field_signatures[jField<F>("APP8")] != -1);
		return sat<F>("APP8");
	}

	template<typename F = ::jint>
	static auto APP9() {
		static_assert(field_signatures[jField<F>("APP9")] != -1);
		return sat<F>("APP9");
	}

	template<typename F = ::jint>
	static auto COM() {
		static_assert(field_signatures[jField<F>("COM")] != -1);
		return sat<F>("COM");
	}

	template<typename F = ::jint>
	static auto DAC() {
		static_assert(field_signatures[jField<F>("DAC")] != -1);
		return sat<F>("DAC");
	}

	template<typename F = ::jfloat>
	static auto DEFAULT_QUALITY() {
		static_assert(field_signatures[jField<F>("DEFAULT_QUALITY")] != -1);
		return sat<F>("DEFAULT_QUALITY");
	}

	template<typename F = ::jint>
	static auto DENSITY_UNIT_ASPECT_RATIO() {
		static_assert(field_signatures[jField<F>("DENSITY_UNIT_ASPECT_RATIO")] != -1);
		return sat<F>("DENSITY_UNIT_ASPECT_RATIO");
	}

	template<typename F = ::jint>
	static auto DENSITY_UNIT_DOTS_CM() {
		static_assert(field_signatures[jField<F>("DENSITY_UNIT_DOTS_CM")] != -1);
		return sat<F>("DENSITY_UNIT_DOTS_CM");
	}

	template<typename F = ::jint>
	static auto DENSITY_UNIT_DOTS_INCH() {
		static_assert(field_signatures[jField<F>("DENSITY_UNIT_DOTS_INCH")] != -1);
		return sat<F>("DENSITY_UNIT_DOTS_INCH");
	}

	template<typename F = ::jint>
	static auto DHP() {
		static_assert(field_signatures[jField<F>("DHP")] != -1);
		return sat<F>("DHP");
	}

	template<typename F = ::jint>
	static auto DHT() {
		static_assert(field_signatures[jField<F>("DHT")] != -1);
		return sat<F>("DHT");
	}

	template<typename F = ::jint>
	static auto DNL() {
		static_assert(field_signatures[jField<F>("DNL")] != -1);
		return sat<F>("DNL");
	}

	template<typename F = ::jint>
	static auto DQT() {
		static_assert(field_signatures[jField<F>("DQT")] != -1);
		return sat<F>("DQT");
	}

	template<typename F = ::jint>
	static auto DRI() {
		static_assert(field_signatures[jField<F>("DRI")] != -1);
		return sat<F>("DRI");
	}

	template<typename F = ::jint>
	static auto EOI() {
		static_assert(field_signatures[jField<F>("EOI")] != -1);
		return sat<F>("EOI");
	}

	template<typename F = ::jint>
	static auto EXP() {
		static_assert(field_signatures[jField<F>("EXP")] != -1);
		return sat<F>("EXP");
	}

	template<typename F = ::jint>
	static auto JCS_CMYK() {
		static_assert(field_signatures[jField<F>("JCS_CMYK")] != -1);
		return sat<F>("JCS_CMYK");
	}

	template<typename F = ::jint>
	static auto JCS_GRAYSCALE() {
		static_assert(field_signatures[jField<F>("JCS_GRAYSCALE")] != -1);
		return sat<F>("JCS_GRAYSCALE");
	}

	template<typename F = ::jint>
	static auto JCS_RGB() {
		static_assert(field_signatures[jField<F>("JCS_RGB")] != -1);
		return sat<F>("JCS_RGB");
	}

	template<typename F = ::jint>
	static auto JCS_RGBA() {
		static_assert(field_signatures[jField<F>("JCS_RGBA")] != -1);
		return sat<F>("JCS_RGBA");
	}

	template<typename F = ::jint>
	static auto JCS_UNKNOWN() {
		static_assert(field_signatures[jField<F>("JCS_UNKNOWN")] != -1);
		return sat<F>("JCS_UNKNOWN");
	}

	template<typename F = ::jint>
	static auto JCS_YCC() {
		static_assert(field_signatures[jField<F>("JCS_YCC")] != -1);
		return sat<F>("JCS_YCC");
	}

	template<typename F = ::jint>
	static auto JCS_YCCA() {
		static_assert(field_signatures[jField<F>("JCS_YCCA")] != -1);
		return sat<F>("JCS_YCCA");
	}

	template<typename F = ::jint>
	static auto JCS_YCCK() {
		static_assert(field_signatures[jField<F>("JCS_YCCK")] != -1);
		return sat<F>("JCS_YCCK");
	}

	template<typename F = ::jint>
	static auto JCS_YCbCr() {
		static_assert(field_signatures[jField<F>("JCS_YCbCr")] != -1);
		return sat<F>("JCS_YCbCr");
	}

	template<typename F = ::jint>
	static auto JCS_YCbCrA() {
		static_assert(field_signatures[jField<F>("JCS_YCbCrA")] != -1);
		return sat<F>("JCS_YCbCrA");
	}

	template<typename F = ::jint>
	static auto JPG() {
		static_assert(field_signatures[jField<F>("JPG")] != -1);
		return sat<F>("JPG");
	}

	template<typename F = ::jint>
	static auto NUM_DENSITY_UNIT() {
		static_assert(field_signatures[jField<F>("NUM_DENSITY_UNIT")] != -1);
		return sat<F>("NUM_DENSITY_UNIT");
	}

	template<typename F = ::jint>
	static auto NUM_JCS_CODES() {
		static_assert(field_signatures[jField<F>("NUM_JCS_CODES")] != -1);
		return sat<F>("NUM_JCS_CODES");
	}

	template<typename F = ::jint>
	static auto RESTART_RANGE() {
		static_assert(field_signatures[jField<F>("RESTART_RANGE")] != -1);
		return sat<F>("RESTART_RANGE");
	}

	template<typename F = ::jint>
	static auto RST0() {
		static_assert(field_signatures[jField<F>("RST0")] != -1);
		return sat<F>("RST0");
	}

	template<typename F = ::jint>
	static auto RST1() {
		static_assert(field_signatures[jField<F>("RST1")] != -1);
		return sat<F>("RST1");
	}

	template<typename F = ::jint>
	static auto RST2() {
		static_assert(field_signatures[jField<F>("RST2")] != -1);
		return sat<F>("RST2");
	}

	template<typename F = ::jint>
	static auto RST3() {
		static_assert(field_signatures[jField<F>("RST3")] != -1);
		return sat<F>("RST3");
	}

	template<typename F = ::jint>
	static auto RST4() {
		static_assert(field_signatures[jField<F>("RST4")] != -1);
		return sat<F>("RST4");
	}

	template<typename F = ::jint>
	static auto RST5() {
		static_assert(field_signatures[jField<F>("RST5")] != -1);
		return sat<F>("RST5");
	}

	template<typename F = ::jint>
	static auto RST6() {
		static_assert(field_signatures[jField<F>("RST6")] != -1);
		return sat<F>("RST6");
	}

	template<typename F = ::jint>
	static auto RST7() {
		static_assert(field_signatures[jField<F>("RST7")] != -1);
		return sat<F>("RST7");
	}

	template<typename F = ::jint>
	static auto SOF0() {
		static_assert(field_signatures[jField<F>("SOF0")] != -1);
		return sat<F>("SOF0");
	}

	template<typename F = ::jint>
	static auto SOF1() {
		static_assert(field_signatures[jField<F>("SOF1")] != -1);
		return sat<F>("SOF1");
	}

	template<typename F = ::jint>
	static auto SOF10() {
		static_assert(field_signatures[jField<F>("SOF10")] != -1);
		return sat<F>("SOF10");
	}

	template<typename F = ::jint>
	static auto SOF11() {
		static_assert(field_signatures[jField<F>("SOF11")] != -1);
		return sat<F>("SOF11");
	}

	template<typename F = ::jint>
	static auto SOF13() {
		static_assert(field_signatures[jField<F>("SOF13")] != -1);
		return sat<F>("SOF13");
	}

	template<typename F = ::jint>
	static auto SOF14() {
		static_assert(field_signatures[jField<F>("SOF14")] != -1);
		return sat<F>("SOF14");
	}

	template<typename F = ::jint>
	static auto SOF15() {
		static_assert(field_signatures[jField<F>("SOF15")] != -1);
		return sat<F>("SOF15");
	}

	template<typename F = ::jint>
	static auto SOF2() {
		static_assert(field_signatures[jField<F>("SOF2")] != -1);
		return sat<F>("SOF2");
	}

	template<typename F = ::jint>
	static auto SOF3() {
		static_assert(field_signatures[jField<F>("SOF3")] != -1);
		return sat<F>("SOF3");
	}

	template<typename F = ::jint>
	static auto SOF5() {
		static_assert(field_signatures[jField<F>("SOF5")] != -1);
		return sat<F>("SOF5");
	}

	template<typename F = ::jint>
	static auto SOF6() {
		static_assert(field_signatures[jField<F>("SOF6")] != -1);
		return sat<F>("SOF6");
	}

	template<typename F = ::jint>
	static auto SOF7() {
		static_assert(field_signatures[jField<F>("SOF7")] != -1);
		return sat<F>("SOF7");
	}

	template<typename F = ::jint>
	static auto SOF9() {
		static_assert(field_signatures[jField<F>("SOF9")] != -1);
		return sat<F>("SOF9");
	}

	template<typename F = ::jint>
	static auto SOI() {
		static_assert(field_signatures[jField<F>("SOI")] != -1);
		return sat<F>("SOI");
	}

	template<typename F = ::jint>
	static auto SOS() {
		static_assert(field_signatures[jField<F>("SOS")] != -1);
		return sat<F>("SOS");
	}

	template<typename F = ::jint>
	static auto TEM() {
		static_assert(field_signatures[jField<F>("TEM")] != -1);
		return sat<F>("TEM");
	}

	template<typename F = ::java::lang::String>
	static auto nativeImageMetadataFormatClassName() {
		static_assert(field_signatures[jField<F>("nativeImageMetadataFormatClassName")] != -1);
		return sat<F>("nativeImageMetadataFormatClassName");
	}

	template<typename F = ::java::lang::String>
	static auto nativeImageMetadataFormatName() {
		static_assert(field_signatures[jField<F>("nativeImageMetadataFormatName")] != -1);
		return sat<F>("nativeImageMetadataFormatName");
	}

	template<typename F = ::java::lang::String>
	static auto nativeStreamMetadataFormatClassName() {
		static_assert(field_signatures[jField<F>("nativeStreamMetadataFormatClassName")] != -1);
		return sat<F>("nativeStreamMetadataFormatClassName");
	}

	template<typename F = ::java::lang::String>
	static auto nativeStreamMetadataFormatName() {
		static_assert(field_signatures[jField<F>("nativeStreamMetadataFormatName")] != -1);
		return sat<F>("nativeStreamMetadataFormatName");
	}

	template<typename F = ::java::lang::String>
	static auto vendor() {
		static_assert(field_signatures[jField<F>("vendor")] != -1);
		return sat<F>("vendor");
	}

	template<typename F = ::java::lang::String>
	static auto version() {
		static_assert(field_signatures[jField<F>("version")] != -1);
		return sat<F>("version");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
