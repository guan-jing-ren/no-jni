#ifndef com_sun_imageio_plugins_bmp_BMPMetadata_HPP
#define com_sun_imageio_plugins_bmp_BMPMetadata_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::bmp::BMPMetadata : public jObject<::com::sun::imageio::plugins::bmp::BMPMetadata, ::javax::imageio::metadata::IIOMetadata> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_bmp / "BMPMetadata";

	constexpr static Enume field_signatures{
		jField<::jint>("alphaMask"), //
		jField<::jshort>("bitsPerPixel"), //
		jField<::jint>("blue"), //
		jField<::jint>("blueMask"), //
		jField<::jdouble>("blueX"), //
		jField<::jdouble>("blueY"), //
		jField<::jdouble>("blueZ"), //
		jField<::java::lang::String>("bmpVersion"), //
		jField<::jint>("colorSpace"), //
		jField<::jint>("colorsImportant"), //
		jField<::jint>("colorsUsed"), //
		jField<::java::util::List>("comments"), //
		jField<::jint>("compression"), //
		jField<::jint>("gammaBlue"), //
		jField<::jint>("gammaGreen"), //
		jField<::jint>("gammaRed"), //
		jField<::jint>("green"), //
		jField<::jint>("greenMask"), //
		jField<::jdouble>("greenX"), //
		jField<::jdouble>("greenY"), //
		jField<::jdouble>("greenZ"), //
		jField<::jint>("height"), //
		jField<::jint>("imageSize"), //
		jField<::jint>("intent"), //
		jField<::java::lang::String>("nativeMetadataFormatName"), //
		jField<::jbyte *>("palette"), //
		jField<::jint>("paletteSize"), //
		jField<::jint>("red"), //
		jField<::jint>("redMask"), //
		jField<::jdouble>("redX"), //
		jField<::jdouble>("redY"), //
		jField<::jdouble>("redZ"), //
		jField<::jint>("width"), //
		jField<::jint>("xPixelsPerMeter"), //
		jField<::jint>("yPixelsPerMeter"), //
	};

	template<typename F = ::jint>
	auto alphaMask() const {
		static_assert(field_signatures[jField<F>("alphaMask")] != -1);
		return at<F>("alphaMask");
	}

	template<typename F = ::jshort>
	auto bitsPerPixel() const {
		static_assert(field_signatures[jField<F>("bitsPerPixel")] != -1);
		return at<F>("bitsPerPixel");
	}

	template<typename F = ::jint>
	auto blue() const {
		static_assert(field_signatures[jField<F>("blue")] != -1);
		return at<F>("blue");
	}

	template<typename F = ::jint>
	auto blueMask() const {
		static_assert(field_signatures[jField<F>("blueMask")] != -1);
		return at<F>("blueMask");
	}

	template<typename F = ::jdouble>
	auto blueX() const {
		static_assert(field_signatures[jField<F>("blueX")] != -1);
		return at<F>("blueX");
	}

	template<typename F = ::jdouble>
	auto blueY() const {
		static_assert(field_signatures[jField<F>("blueY")] != -1);
		return at<F>("blueY");
	}

	template<typename F = ::jdouble>
	auto blueZ() const {
		static_assert(field_signatures[jField<F>("blueZ")] != -1);
		return at<F>("blueZ");
	}

	template<typename F = ::java::lang::String>
	auto bmpVersion() const {
		static_assert(field_signatures[jField<F>("bmpVersion")] != -1);
		return at<F>("bmpVersion");
	}

	template<typename F = ::jint>
	auto colorSpace() const {
		static_assert(field_signatures[jField<F>("colorSpace")] != -1);
		return at<F>("colorSpace");
	}

	template<typename F = ::jint>
	auto colorsImportant() const {
		static_assert(field_signatures[jField<F>("colorsImportant")] != -1);
		return at<F>("colorsImportant");
	}

	template<typename F = ::jint>
	auto colorsUsed() const {
		static_assert(field_signatures[jField<F>("colorsUsed")] != -1);
		return at<F>("colorsUsed");
	}

	template<typename F = ::java::util::List>
	auto comments() const {
		static_assert(field_signatures[jField<F>("comments")] != -1);
		return at<F>("comments");
	}

	template<typename F = ::jint>
	auto compression() const {
		static_assert(field_signatures[jField<F>("compression")] != -1);
		return at<F>("compression");
	}

	template<typename F = ::jint>
	auto gammaBlue() const {
		static_assert(field_signatures[jField<F>("gammaBlue")] != -1);
		return at<F>("gammaBlue");
	}

	template<typename F = ::jint>
	auto gammaGreen() const {
		static_assert(field_signatures[jField<F>("gammaGreen")] != -1);
		return at<F>("gammaGreen");
	}

	template<typename F = ::jint>
	auto gammaRed() const {
		static_assert(field_signatures[jField<F>("gammaRed")] != -1);
		return at<F>("gammaRed");
	}

	template<typename F = ::jint>
	auto green() const {
		static_assert(field_signatures[jField<F>("green")] != -1);
		return at<F>("green");
	}

	template<typename F = ::jint>
	auto greenMask() const {
		static_assert(field_signatures[jField<F>("greenMask")] != -1);
		return at<F>("greenMask");
	}

	template<typename F = ::jdouble>
	auto greenX() const {
		static_assert(field_signatures[jField<F>("greenX")] != -1);
		return at<F>("greenX");
	}

	template<typename F = ::jdouble>
	auto greenY() const {
		static_assert(field_signatures[jField<F>("greenY")] != -1);
		return at<F>("greenY");
	}

	template<typename F = ::jdouble>
	auto greenZ() const {
		static_assert(field_signatures[jField<F>("greenZ")] != -1);
		return at<F>("greenZ");
	}

	template<typename F = ::jint>
	auto height() const {
		static_assert(field_signatures[jField<F>("height")] != -1);
		return at<F>("height");
	}

	template<typename F = ::jint>
	auto imageSize() const {
		static_assert(field_signatures[jField<F>("imageSize")] != -1);
		return at<F>("imageSize");
	}

	template<typename F = ::jint>
	auto intent() const {
		static_assert(field_signatures[jField<F>("intent")] != -1);
		return at<F>("intent");
	}

	template<typename F = ::java::lang::String>
	static auto nativeMetadataFormatName() {
		static_assert(field_signatures[jField<F>("nativeMetadataFormatName")] != -1);
		return sat<F>("nativeMetadataFormatName");
	}

	template<typename F = ::jbyte *>
	auto palette() const {
		static_assert(field_signatures[jField<F>("palette")] != -1);
		return at<F>("palette");
	}

	template<typename F = ::jint>
	auto paletteSize() const {
		static_assert(field_signatures[jField<F>("paletteSize")] != -1);
		return at<F>("paletteSize");
	}

	template<typename F = ::jint>
	auto red() const {
		static_assert(field_signatures[jField<F>("red")] != -1);
		return at<F>("red");
	}

	template<typename F = ::jint>
	auto redMask() const {
		static_assert(field_signatures[jField<F>("redMask")] != -1);
		return at<F>("redMask");
	}

	template<typename F = ::jdouble>
	auto redX() const {
		static_assert(field_signatures[jField<F>("redX")] != -1);
		return at<F>("redX");
	}

	template<typename F = ::jdouble>
	auto redY() const {
		static_assert(field_signatures[jField<F>("redY")] != -1);
		return at<F>("redY");
	}

	template<typename F = ::jdouble>
	auto redZ() const {
		static_assert(field_signatures[jField<F>("redZ")] != -1);
		return at<F>("redZ");
	}

	template<typename F = ::jint>
	auto width() const {
		static_assert(field_signatures[jField<F>("width")] != -1);
		return at<F>("width");
	}

	template<typename F = ::jint>
	auto xPixelsPerMeter() const {
		static_assert(field_signatures[jField<F>("xPixelsPerMeter")] != -1);
		return at<F>("xPixelsPerMeter");
	}

	template<typename F = ::jint>
	auto yPixelsPerMeter() const {
		static_assert(field_signatures[jField<F>("yPixelsPerMeter")] != -1);
		return at<F>("yPixelsPerMeter");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::org::w3c::dom::Node(::java::lang::String)>("getAsTree"), //
		jMethod<::jboolean()>("isReadOnly"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("mergeTree"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::java::lang::String, ::org::w3c::dom::Node)>("setFromTree"), //
	};

	template<typename R = ::org::w3c::dom::Node, typename... Args>
	auto getAsTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAsTree")] != -1);
		return call<R>("getAsTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isReadOnly(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isReadOnly")] != -1);
		return call<R>("isReadOnly", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mergeTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mergeTree")] != -1);
		return call<R>("mergeTree", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFromTree(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFromTree")] != -1);
		return call<R>("setFromTree", std::forward<Args>(args)...);
	}

};

#endif
