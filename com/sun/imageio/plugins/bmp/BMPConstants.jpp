#ifndef com_sun_imageio_plugins_bmp_BMPConstants_HPP
#define com_sun_imageio_plugins_bmp_BMPConstants_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::bmp::BMPConstants : public jObject<::com::sun::imageio::plugins::bmp::BMPConstants, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_bmp / "BMPConstants";

	constexpr static Enume field_signatures{
		jField<::jint>("BI_BITFIELDS"), //
		jField<::jint>("BI_JPEG"), //
		jField<::jint>("BI_PNG"), //
		jField<::jint>("BI_RGB"), //
		jField<::jint>("BI_RLE4"), //
		jField<::jint>("BI_RLE8"), //
		jField<::jint>("LCS_CALIBRATED_RGB"), //
		jField<::jint>("LCS_WINDOWS_COLOR_SPACE"), //
		jField<::jint>("LCS_sRGB"), //
		jField<::jint>("PROFILE_EMBEDDED"), //
		jField<::jint>("PROFILE_LINKED"), //
		jField<::java::lang::String>("VERSION_2"), //
		jField<::java::lang::String>("VERSION_3"), //
		jField<::java::lang::String>("VERSION_3_NT"), //
		jField<::java::lang::String>("VERSION_4"), //
		jField<::java::lang::String>("VERSION_5"), //
	};

	template<typename F = ::jint>
	static auto BI_BITFIELDS() {
		static_assert(field_signatures[jField<F>("BI_BITFIELDS")] != -1);
		return sat<F>("BI_BITFIELDS");
	}

	template<typename F = ::jint>
	static auto BI_JPEG() {
		static_assert(field_signatures[jField<F>("BI_JPEG")] != -1);
		return sat<F>("BI_JPEG");
	}

	template<typename F = ::jint>
	static auto BI_PNG() {
		static_assert(field_signatures[jField<F>("BI_PNG")] != -1);
		return sat<F>("BI_PNG");
	}

	template<typename F = ::jint>
	static auto BI_RGB() {
		static_assert(field_signatures[jField<F>("BI_RGB")] != -1);
		return sat<F>("BI_RGB");
	}

	template<typename F = ::jint>
	static auto BI_RLE4() {
		static_assert(field_signatures[jField<F>("BI_RLE4")] != -1);
		return sat<F>("BI_RLE4");
	}

	template<typename F = ::jint>
	static auto BI_RLE8() {
		static_assert(field_signatures[jField<F>("BI_RLE8")] != -1);
		return sat<F>("BI_RLE8");
	}

	template<typename F = ::jint>
	static auto LCS_CALIBRATED_RGB() {
		static_assert(field_signatures[jField<F>("LCS_CALIBRATED_RGB")] != -1);
		return sat<F>("LCS_CALIBRATED_RGB");
	}

	template<typename F = ::jint>
	static auto LCS_WINDOWS_COLOR_SPACE() {
		static_assert(field_signatures[jField<F>("LCS_WINDOWS_COLOR_SPACE")] != -1);
		return sat<F>("LCS_WINDOWS_COLOR_SPACE");
	}

	template<typename F = ::jint>
	static auto LCS_sRGB() {
		static_assert(field_signatures[jField<F>("LCS_sRGB")] != -1);
		return sat<F>("LCS_sRGB");
	}

	template<typename F = ::jint>
	static auto PROFILE_EMBEDDED() {
		static_assert(field_signatures[jField<F>("PROFILE_EMBEDDED")] != -1);
		return sat<F>("PROFILE_EMBEDDED");
	}

	template<typename F = ::jint>
	static auto PROFILE_LINKED() {
		static_assert(field_signatures[jField<F>("PROFILE_LINKED")] != -1);
		return sat<F>("PROFILE_LINKED");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION_2() {
		static_assert(field_signatures[jField<F>("VERSION_2")] != -1);
		return sat<F>("VERSION_2");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION_3() {
		static_assert(field_signatures[jField<F>("VERSION_3")] != -1);
		return sat<F>("VERSION_3");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION_3_NT() {
		static_assert(field_signatures[jField<F>("VERSION_3_NT")] != -1);
		return sat<F>("VERSION_3_NT");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION_4() {
		static_assert(field_signatures[jField<F>("VERSION_4")] != -1);
		return sat<F>("VERSION_4");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION_5() {
		static_assert(field_signatures[jField<F>("VERSION_5")] != -1);
		return sat<F>("VERSION_5");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
