#ifndef com_sun_imageio_plugins_png_PNGMetadataFormat_HPP
#define com_sun_imageio_plugins_png_PNGMetadataFormat_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::png::PNGMetadataFormat : public jObject<::com::sun::imageio::plugins::png::PNGMetadataFormat, ::javax::imageio::metadata::IIOMetadataFormatImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_png / "PNGMetadataFormat";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::lang::String, ::javax::imageio::ImageTypeSpecifier)>("canNodeAppear"), //
		jMethod<::javax::imageio::metadata::IIOMetadataFormat()>("getInstance"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto canNodeAppear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canNodeAppear")] != -1);
		return call<R>("canNodeAppear", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::imageio::metadata::IIOMetadataFormat, typename... Args>
	static auto getInstance(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstance")] != -1);
		return scall<R>("getInstance", std::forward<Args>(args)...);
	}

};

#endif
