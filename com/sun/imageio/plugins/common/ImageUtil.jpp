#ifndef com_sun_imageio_plugins_common_ImageUtil_HPP
#define com_sun_imageio_plugins_common_ImageUtil_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::common::ImageUtil : public jObject<::com::sun::imageio::plugins::common::ImageUtil, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_common / "ImageUtil";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::java::awt::image::ColorModel, ::java::awt::image::SampleModel)>("canEncodeImage"), //
		jMethod<::jvoid(::javax::imageio::ImageWriter, ::javax::imageio::ImageTypeSpecifier)>("canEncodeImage"), //
		jMethod<::java::lang::String(::java::lang::Object)>("convertObjectToString"), //
		jMethod<::java::awt::image::ColorModel(::java::awt::color::ColorSpace, ::java::awt::image::SampleModel)>("createColorModel"), //
		jMethod<::java::awt::image::ColorModel(::java::awt::image::SampleModel)>("createColorModel"), //
		jMethod<::jlong(::java::awt::image::SampleModel)>("getBandSize"), //
		jMethod<::jint(::java::awt::image::SampleModel)>("getElementSize"), //
		jMethod<::jbyte *(::java::awt::image::Raster, ::java::awt::Rectangle)>("getPackedBinaryData"), //
		jMethod<::jlong(::java::awt::image::SampleModel)>("getTileSize"), //
		jMethod<::jbyte *(::java::awt::image::Raster, ::java::awt::Rectangle)>("getUnpackedBinaryData"), //
		jMethod<::jboolean(::java::awt::image::RenderedImage)>("imageIsContiguous"), //
		jMethod<::jboolean(::java::awt::image::SampleModel)>("isBinary"), //
		jMethod<::jboolean(::jbyte *, ::jbyte *, ::jbyte *)>("isIndicesForGrayscale"), //
		jMethod<::jvoid(::jbyte *, ::java::awt::image::WritableRaster, ::java::awt::Rectangle)>("setPackedBinaryData"), //
		jMethod<::jvoid(::jbyte *, ::java::awt::image::WritableRaster, ::java::awt::Rectangle)>("setUnpackedBinaryData"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto canEncodeImage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canEncodeImage")] != -1);
		return scall<R>("canEncodeImage", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto convertObjectToString(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("convertObjectToString")] != -1);
		return scall<R>("convertObjectToString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::ColorModel, typename... Args>
	static auto createColorModel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createColorModel")] != -1);
		return scall<R>("createColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getBandSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBandSize")] != -1);
		return scall<R>("getBandSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getElementSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getElementSize")] != -1);
		return scall<R>("getElementSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto getPackedBinaryData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackedBinaryData")] != -1);
		return scall<R>("getPackedBinaryData", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	static auto getTileSize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTileSize")] != -1);
		return scall<R>("getTileSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto getUnpackedBinaryData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnpackedBinaryData")] != -1);
		return scall<R>("getUnpackedBinaryData", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto imageIsContiguous(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imageIsContiguous")] != -1);
		return scall<R>("imageIsContiguous", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isBinary(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isBinary")] != -1);
		return scall<R>("isBinary", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isIndicesForGrayscale(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isIndicesForGrayscale")] != -1);
		return scall<R>("isIndicesForGrayscale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setPackedBinaryData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPackedBinaryData")] != -1);
		return scall<R>("setPackedBinaryData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setUnpackedBinaryData(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnpackedBinaryData")] != -1);
		return scall<R>("setUnpackedBinaryData", std::forward<Args>(args)...);
	}

};

#endif
