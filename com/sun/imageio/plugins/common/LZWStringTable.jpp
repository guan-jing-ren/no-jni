#ifndef com_sun_imageio_plugins_common_LZWStringTable_HPP
#define com_sun_imageio_plugins_common_LZWStringTable_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::common::LZWStringTable : public jObject<::com::sun::imageio::plugins::common::LZWStringTable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_common / "LZWStringTable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::jshort, ::jbyte)>("addCharString"), //
		jMethod<::jvoid(::jint)>("clearTable"), //
		jMethod<::jvoid(::java::io::PrintStream)>("dump"), //
		jMethod<::jint(::jbyte *, ::jint, ::jshort, ::jint)>("expandCode"), //
		jMethod<::jshort(::jshort, ::jbyte)>("findCharString"), //
		jMethod<::jint(::jshort, ::jbyte)>("hash"), //
	};

	template<typename R = ::jint, typename... Args>
	auto addCharString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addCharString")] != -1);
		return call<R>("addCharString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clearTable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clearTable")] != -1);
		return call<R>("clearTable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto dump(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dump")] != -1);
		return call<R>("dump", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto expandCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("expandCode")] != -1);
		return call<R>("expandCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto findCharString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("findCharString")] != -1);
		return call<R>("findCharString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto hash(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hash")] != -1);
		return scall<R>("hash", std::forward<Args>(args)...);
	}

};

#endif
