#ifndef com_sun_imageio_plugins_common_PaletteBuilder_HPP
#define com_sun_imageio_plugins_common_PaletteBuilder_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::common::PaletteBuilder : public jObject<::com::sun::imageio::plugins::common::PaletteBuilder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_common / "PaletteBuilder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean(::java::awt::image::RenderedImage)>("canCreatePalette"), //
		jMethod<::jboolean(::javax::imageio::ImageTypeSpecifier)>("canCreatePalette"), //
		jMethod<::java::awt::image::IndexColorModel(::java::awt::image::RenderedImage)>("createIndexColorModel"), //
		jMethod<::java::awt::image::RenderedImage(::java::awt::image::RenderedImage)>("createIndexedImage"), //
	};

	template<typename R = ::jboolean, typename... Args>
	static auto canCreatePalette(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canCreatePalette")] != -1);
		return scall<R>("canCreatePalette", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::IndexColorModel, typename... Args>
	static auto createIndexColorModel(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIndexColorModel")] != -1);
		return scall<R>("createIndexColorModel", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::image::RenderedImage, typename... Args>
	static auto createIndexedImage(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createIndexedImage")] != -1);
		return scall<R>("createIndexedImage", std::forward<Args>(args)...);
	}

};

#endif
