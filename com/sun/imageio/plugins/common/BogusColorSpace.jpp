#ifndef com_sun_imageio_plugins_common_BogusColorSpace_HPP
#define com_sun_imageio_plugins_common_BogusColorSpace_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::imageio::plugins::common::BogusColorSpace : public jObject<::com::sun::imageio::plugins::common::BogusColorSpace, ::java::awt::color::ColorSpace> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_plugins_common / "BogusColorSpace";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::jfloat *(::jfloat *)>("fromCIEXYZ"), //
		jMethod<::jfloat *(::jfloat *)>("fromRGB"), //
		jMethod<::jfloat *(::jfloat *)>("toCIEXYZ"), //
		jMethod<::jfloat *(::jfloat *)>("toRGB"), //
	};

	template<typename R = ::jfloat *, typename... Args>
	auto fromCIEXYZ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromCIEXYZ")] != -1);
		return call<R>("fromCIEXYZ", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto fromRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fromRGB")] != -1);
		return call<R>("fromRGB", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto toCIEXYZ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toCIEXYZ")] != -1);
		return call<R>("toCIEXYZ", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	auto toRGB(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toRGB")] != -1);
		return call<R>("toRGB", std::forward<Args>(args)...);
	}

};

#endif
