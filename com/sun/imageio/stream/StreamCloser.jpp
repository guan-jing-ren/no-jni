#ifndef com_sun_imageio_stream_StreamCloser_HPP
#define com_sun_imageio_stream_StreamCloser_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::imageio::stream::StreamCloser : public jObject<::com::sun::imageio::stream::StreamCloser, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_stream / "StreamCloser";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::com::sun::imageio::stream::StreamCloser$CloseAction)>("addToQueue"), //
		jMethod<::com::sun::imageio::stream::StreamCloser$CloseAction(::javax::imageio::stream::ImageInputStream)>("createCloseAction"), //
		jMethod<::jvoid(::com::sun::imageio::stream::StreamCloser$CloseAction)>("removeFromQueue"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto addToQueue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addToQueue")] != -1);
		return scall<R>("addToQueue", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::imageio::stream::StreamCloser$CloseAction, typename... Args>
	static auto createCloseAction(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCloseAction")] != -1);
		return scall<R>("createCloseAction", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto removeFromQueue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeFromQueue")] != -1);
		return scall<R>("removeFromQueue", std::forward<Args>(args)...);
	}

};

#endif
