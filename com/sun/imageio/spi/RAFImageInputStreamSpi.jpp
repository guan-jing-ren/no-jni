#ifndef com_sun_imageio_spi_RAFImageInputStreamSpi_HPP
#define com_sun_imageio_spi_RAFImageInputStreamSpi_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::imageio::spi::RAFImageInputStreamSpi : public jObject<::com::sun::imageio::spi::RAFImageInputStreamSpi, ::javax::imageio::spi::ImageInputStreamSpi> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_imageio_spi / "RAFImageInputStreamSpi";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::imageio::stream::ImageInputStream(::java::lang::Object, ::jboolean, ::java::io::File)>("createInputStreamInstance"), //
		jMethod<::java::lang::String(::java::util::Locale)>("getDescription"), //
	};

	template<typename R = ::javax::imageio::stream::ImageInputStream, typename... Args>
	auto createInputStreamInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createInputStreamInstance")] != -1);
		return call<R>("createInputStreamInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

};

#endif
