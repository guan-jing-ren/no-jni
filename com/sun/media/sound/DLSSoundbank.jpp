#ifndef com_sun_media_sound_DLSSoundbank_HPP
#define com_sun_media_sound_DLSSoundbank_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSSoundbank : public jObject<::com::sun::media::sound::DLSSoundbank, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSSoundbank";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::jvoid(::com::sun::media::sound::DLSInstrument)>("addInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::SoundbankResource)>("addResource"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::com::sun::media::sound::DLSInfo()>("getInfo"), //
		jMethod<::javax::sound::midi::Instrument(::javax::sound::midi::Patch)>("getInstrument"), //
		jMethod<::com::sun::media::sound::DLSInstrument *()>("getInstruments"), //
		jMethod<::javax::sound::midi::Instrument *()>("getInstruments"), //
		jMethod<::jlong()>("getMajor"), //
		jMethod<::jlong()>("getMinor"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::sound::midi::SoundbankResource *()>("getResources"), //
		jMethod<::com::sun::media::sound::DLSSample *()>("getSamples"), //
		jMethod<::java::lang::String()>("getVendor"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::jvoid(::com::sun::media::sound::DLSInstrument)>("removeInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::SoundbankResource)>("removeResource"), //
		jMethod<::jvoid(::java::io::File)>("save"), //
		jMethod<::jvoid(::java::io::OutputStream)>("save"), //
		jMethod<::jvoid(::java::lang::String)>("save"), //
		jMethod<::jvoid(::java::lang::String)>("setDescription"), //
		jMethod<::jvoid(::jlong)>("setMajor"), //
		jMethod<::jvoid(::jlong)>("setMinor"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setVendor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInstrument")] != -1);
		return call<R>("addInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addResource")] != -1);
		return call<R>("addResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSInfo, typename... Args>
	auto getInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInfo")] != -1);
		return call<R>("getInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Instrument, typename... Args>
	auto getInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstrument")] != -1);
		return call<R>("getInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSInstrument *, typename... Args>
	auto getInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstruments")] != -1);
		return call<R>("getInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMajor")] != -1);
		return call<R>("getMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinor")] != -1);
		return call<R>("getMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::SoundbankResource *, typename... Args>
	auto getResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResources")] != -1);
		return call<R>("getResources", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSSample *, typename... Args>
	auto getSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSamples")] != -1);
		return call<R>("getSamples", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVendor")] != -1);
		return call<R>("getVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeInstrument")] != -1);
		return call<R>("removeInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeResource")] != -1);
		return call<R>("removeResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto save(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("save")] != -1);
		return call<R>("save", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDescription")] != -1);
		return call<R>("setDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMajor")] != -1);
		return call<R>("setMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMinor")] != -1);
		return call<R>("setMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVendor")] != -1);
		return call<R>("setVendor", std::forward<Args>(args)...);
	}

};

#endif
