#ifndef com_sun_media_sound_DLSInstrument_HPP
#define com_sun_media_sound_DLSInstrument_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSInstrument : public jObject<::com::sun::media::sound::DLSInstrument, ::com::sun::media::sound::ModelInstrument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSInstrument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::media::sound::DLSSoundbank)>(), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::jbyte *()>("getGuid"), //
		jMethod<::com::sun::media::sound::DLSInfo()>("getInfo"), //
		jMethod<::java::util::List()>("getModulators"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::media::sound::ModelPatch()>("getPatch"), //
		jMethod<::javax::sound::midi::Patch()>("getPatch"), //
		jMethod<::com::sun::media::sound::ModelPerformer *()>("getPerformers"), //
		jMethod<::java::util::List()>("getRegions"), //
		jMethod<::jvoid(::jbyte *)>("setGuid"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::javax::sound::midi::Patch)>("setPatch"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getGuid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGuid")] != -1);
		return call<R>("getGuid", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSInfo, typename... Args>
	auto getInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInfo")] != -1);
		return call<R>("getInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getModulators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModulators")] != -1);
		return call<R>("getModulators", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPatch, typename... Args>
	auto getPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPatch")] != -1);
		return call<R>("getPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPerformer *, typename... Args>
	auto getPerformers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPerformers")] != -1);
		return call<R>("getPerformers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRegions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegions")] != -1);
		return call<R>("getRegions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGuid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGuid")] != -1);
		return call<R>("setGuid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPatch")] != -1);
		return call<R>("setPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
