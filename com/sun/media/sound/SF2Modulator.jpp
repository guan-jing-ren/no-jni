#ifndef com_sun_media_sound_SF2Modulator_HPP
#define com_sun_media_sound_SF2Modulator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SF2Modulator : public jObject<::com::sun::media::sound::SF2Modulator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SF2Modulator";

	constexpr static Enume field_signatures{
		jField<::jint>("SOURCE_CHANNEL_PRESSURE"), //
		jField<::jint>("SOURCE_DIRECTION_MAX_MIN"), //
		jField<::jint>("SOURCE_DIRECTION_MIN_MAX"), //
		jField<::jint>("SOURCE_MIDI_CONTROL"), //
		jField<::jint>("SOURCE_NONE"), //
		jField<::jint>("SOURCE_NOTE_ON_KEYNUMBER"), //
		jField<::jint>("SOURCE_NOTE_ON_VELOCITY"), //
		jField<::jint>("SOURCE_PITCH_SENSITIVITY"), //
		jField<::jint>("SOURCE_PITCH_WHEEL"), //
		jField<::jint>("SOURCE_POLARITY_BIPOLAR"), //
		jField<::jint>("SOURCE_POLARITY_UNIPOLAR"), //
		jField<::jint>("SOURCE_POLY_PRESSURE"), //
		jField<::jint>("SOURCE_TYPE_CONCAVE"), //
		jField<::jint>("SOURCE_TYPE_CONVEX"), //
		jField<::jint>("SOURCE_TYPE_LINEAR"), //
		jField<::jint>("SOURCE_TYPE_SWITCH"), //
		jField<::jint>("TRANSFORM_ABSOLUTE"), //
		jField<::jint>("TRANSFORM_LINEAR"), //
	};

	template<typename F = ::jint>
	static auto SOURCE_CHANNEL_PRESSURE() {
		static_assert(field_signatures[jField<F>("SOURCE_CHANNEL_PRESSURE")] != -1);
		return sat<F>("SOURCE_CHANNEL_PRESSURE");
	}

	template<typename F = ::jint>
	static auto SOURCE_DIRECTION_MAX_MIN() {
		static_assert(field_signatures[jField<F>("SOURCE_DIRECTION_MAX_MIN")] != -1);
		return sat<F>("SOURCE_DIRECTION_MAX_MIN");
	}

	template<typename F = ::jint>
	static auto SOURCE_DIRECTION_MIN_MAX() {
		static_assert(field_signatures[jField<F>("SOURCE_DIRECTION_MIN_MAX")] != -1);
		return sat<F>("SOURCE_DIRECTION_MIN_MAX");
	}

	template<typename F = ::jint>
	static auto SOURCE_MIDI_CONTROL() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_CONTROL")] != -1);
		return sat<F>("SOURCE_MIDI_CONTROL");
	}

	template<typename F = ::jint>
	static auto SOURCE_NONE() {
		static_assert(field_signatures[jField<F>("SOURCE_NONE")] != -1);
		return sat<F>("SOURCE_NONE");
	}

	template<typename F = ::jint>
	static auto SOURCE_NOTE_ON_KEYNUMBER() {
		static_assert(field_signatures[jField<F>("SOURCE_NOTE_ON_KEYNUMBER")] != -1);
		return sat<F>("SOURCE_NOTE_ON_KEYNUMBER");
	}

	template<typename F = ::jint>
	static auto SOURCE_NOTE_ON_VELOCITY() {
		static_assert(field_signatures[jField<F>("SOURCE_NOTE_ON_VELOCITY")] != -1);
		return sat<F>("SOURCE_NOTE_ON_VELOCITY");
	}

	template<typename F = ::jint>
	static auto SOURCE_PITCH_SENSITIVITY() {
		static_assert(field_signatures[jField<F>("SOURCE_PITCH_SENSITIVITY")] != -1);
		return sat<F>("SOURCE_PITCH_SENSITIVITY");
	}

	template<typename F = ::jint>
	static auto SOURCE_PITCH_WHEEL() {
		static_assert(field_signatures[jField<F>("SOURCE_PITCH_WHEEL")] != -1);
		return sat<F>("SOURCE_PITCH_WHEEL");
	}

	template<typename F = ::jint>
	static auto SOURCE_POLARITY_BIPOLAR() {
		static_assert(field_signatures[jField<F>("SOURCE_POLARITY_BIPOLAR")] != -1);
		return sat<F>("SOURCE_POLARITY_BIPOLAR");
	}

	template<typename F = ::jint>
	static auto SOURCE_POLARITY_UNIPOLAR() {
		static_assert(field_signatures[jField<F>("SOURCE_POLARITY_UNIPOLAR")] != -1);
		return sat<F>("SOURCE_POLARITY_UNIPOLAR");
	}

	template<typename F = ::jint>
	static auto SOURCE_POLY_PRESSURE() {
		static_assert(field_signatures[jField<F>("SOURCE_POLY_PRESSURE")] != -1);
		return sat<F>("SOURCE_POLY_PRESSURE");
	}

	template<typename F = ::jint>
	static auto SOURCE_TYPE_CONCAVE() {
		static_assert(field_signatures[jField<F>("SOURCE_TYPE_CONCAVE")] != -1);
		return sat<F>("SOURCE_TYPE_CONCAVE");
	}

	template<typename F = ::jint>
	static auto SOURCE_TYPE_CONVEX() {
		static_assert(field_signatures[jField<F>("SOURCE_TYPE_CONVEX")] != -1);
		return sat<F>("SOURCE_TYPE_CONVEX");
	}

	template<typename F = ::jint>
	static auto SOURCE_TYPE_LINEAR() {
		static_assert(field_signatures[jField<F>("SOURCE_TYPE_LINEAR")] != -1);
		return sat<F>("SOURCE_TYPE_LINEAR");
	}

	template<typename F = ::jint>
	static auto SOURCE_TYPE_SWITCH() {
		static_assert(field_signatures[jField<F>("SOURCE_TYPE_SWITCH")] != -1);
		return sat<F>("SOURCE_TYPE_SWITCH");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_ABSOLUTE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_ABSOLUTE")] != -1);
		return sat<F>("TRANSFORM_ABSOLUTE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_LINEAR() {
		static_assert(field_signatures[jField<F>("TRANSFORM_LINEAR")] != -1);
		return sat<F>("TRANSFORM_LINEAR");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jshort()>("getAmount"), //
		jMethod<::jint()>("getAmountSourceOperator"), //
		jMethod<::jint()>("getDestinationOperator"), //
		jMethod<::jint()>("getSourceOperator"), //
		jMethod<::jint()>("getTransportOperator"), //
		jMethod<::jvoid(::jshort)>("setAmount"), //
		jMethod<::jvoid(::jint)>("setAmountSourceOperator"), //
		jMethod<::jvoid(::jint)>("setDestinationOperator"), //
		jMethod<::jvoid(::jint)>("setSourceOperator"), //
		jMethod<::jvoid(::jint)>("setTransportOperator"), //
	};

	template<typename R = ::jshort, typename... Args>
	auto getAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAmount")] != -1);
		return call<R>("getAmount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAmountSourceOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAmountSourceOperator")] != -1);
		return call<R>("getAmountSourceOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDestinationOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestinationOperator")] != -1);
		return call<R>("getDestinationOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSourceOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceOperator")] != -1);
		return call<R>("getSourceOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransportOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransportOperator")] != -1);
		return call<R>("getTransportOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAmount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAmount")] != -1);
		return call<R>("setAmount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAmountSourceOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAmountSourceOperator")] != -1);
		return call<R>("setAmountSourceOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestinationOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestinationOperator")] != -1);
		return call<R>("setDestinationOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSourceOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSourceOperator")] != -1);
		return call<R>("setSourceOperator", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransportOperator(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransportOperator")] != -1);
		return call<R>("setTransportOperator", std::forward<Args>(args)...);
	}

};

#endif
