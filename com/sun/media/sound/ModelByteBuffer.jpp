#ifndef com_sun_media_sound_ModelByteBuffer_HPP
#define com_sun_media_sound_ModelByteBuffer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelByteBuffer : public jObject<::com::sun::media::sound::ModelByteBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelByteBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::File, ::jlong, ::jlong)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *, ::jint, ::jint)>(), //
		jMethod<::jbyte *()>("array"), //
		jMethod<::jlong()>("arrayOffset"), //
		jMethod<::jlong()>("capacity"), //
		jMethod<::java::io::File()>("getFile"), //
		jMethod<::jlong()>("getFilePointer"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("getRoot"), //
		jMethod<::jvoid()>("load"), //
		jMethod<::jvoid(::java::util::Collection)>("loadAll"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer(::jlong)>("subbuffer"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer(::jlong, ::jlong)>("subbuffer"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer(::jlong, ::jlong, ::jboolean)>("subbuffer"), //
		jMethod<::jvoid()>("unload"), //
		jMethod<::jvoid(::java::io::OutputStream)>("writeTo"), //
	};

	template<typename R = ::jbyte *, typename... Args>
	auto array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("array")] != -1);
		return call<R>("array", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto arrayOffset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("arrayOffset")] != -1);
		return call<R>("arrayOffset", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto capacity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("capacity")] != -1);
		return call<R>("capacity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFile")] != -1);
		return call<R>("getFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFilePointer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilePointer")] != -1);
		return call<R>("getFilePointer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto getRoot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRoot")] != -1);
		return call<R>("getRoot", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto loadAll(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loadAll")] != -1);
		return scall<R>("loadAll", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto subbuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("subbuffer")] != -1);
		return call<R>("subbuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unload(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unload")] != -1);
		return call<R>("unload", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeTo")] != -1);
		return call<R>("writeTo", std::forward<Args>(args)...);
	}

};

#endif
