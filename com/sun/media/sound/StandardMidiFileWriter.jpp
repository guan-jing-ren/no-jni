#ifndef com_sun_media_sound_StandardMidiFileWriter_HPP
#define com_sun_media_sound_StandardMidiFileWriter_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::StandardMidiFileWriter : public jObject<::com::sun::media::sound::StandardMidiFileWriter, ::javax::sound::midi::spi::MidiFileWriter> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "StandardMidiFileWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint *()>("getMidiFileTypes"), //
		jMethod<::jint *(::javax::sound::midi::Sequence)>("getMidiFileTypes"), //
		jMethod<::jboolean(::jint)>("isFileTypeSupported"), //
		jMethod<::jint(::javax::sound::midi::Sequence, ::jint, ::java::io::File)>("write"), //
		jMethod<::jint(::javax::sound::midi::Sequence, ::jint, ::java::io::OutputStream)>("write"), //
	};

	template<typename R = ::jint *, typename... Args>
	auto getMidiFileTypes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMidiFileTypes")] != -1);
		return call<R>("getMidiFileTypes", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFileTypeSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFileTypeSupported")] != -1);
		return call<R>("isFileTypeSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

};

#endif
