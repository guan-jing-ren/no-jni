#ifndef com_sun_media_sound_SoftAudioPusher_HPP
#define com_sun_media_sound_SoftAudioPusher_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftAudioPusher : public jObject<::com::sun::media::sound::SoftAudioPusher, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftAudioPusher";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::sound::sampled::SourceDataLine, ::javax::sound::sampled::AudioInputStream, ::jint)>(), //
		jMethod<::jvoid()>("run"), //
		jMethod<::jvoid()>("start"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto run(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("run")] != -1);
		return call<R>("run", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto start(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("start")] != -1);
		return call<R>("start", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
