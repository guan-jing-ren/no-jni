#ifndef com_sun_media_sound_AudioFloatInputStream_HPP
#define com_sun_media_sound_AudioFloatInputStream_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::AudioFloatInputStream : public jObject<::com::sun::media::sound::AudioFloatInputStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "AudioFloatInputStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jlong()>("getFrameLength"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream(::java::io::File)>("getInputStream"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream(::java::io::InputStream)>("getInputStream"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream(::java::net::URL)>("getInputStream"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream(::javax::sound::sampled::AudioFormat, ::jbyte *, ::jint, ::jint)>("getInputStream"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream(::javax::sound::sampled::AudioInputStream)>("getInputStream"), //
		jMethod<::jvoid(::jint)>("mark"), //
		jMethod<::jboolean()>("markSupported"), //
		jMethod<::jfloat()>("read"), //
		jMethod<::jint(::jfloat *)>("read"), //
		jMethod<::jint(::jfloat *, ::jint, ::jint)>("read"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jlong(::jlong)>("skip"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFrameLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFrameLength")] != -1);
		return call<R>("getFrameLength", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::AudioFloatInputStream, typename... Args>
	static auto getInputStream(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return scall<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto mark(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("mark")] != -1);
		return call<R>("mark", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto markSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("markSupported")] != -1);
		return call<R>("markSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", std::forward<Args>(args)...);
	}

};

#endif
