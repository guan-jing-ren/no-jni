#ifndef com_sun_media_sound_DLSSample_HPP
#define com_sun_media_sound_DLSSample_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSSample : public jObject<::com::sun::media::sound::DLSSample, ::javax::sound::midi::SoundbankResource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSSample";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::sound::midi::Soundbank)>(), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("getDataBuffer"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jbyte *()>("getGuid"), //
		jMethod<::com::sun::media::sound::DLSInfo()>("getInfo"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::media::sound::DLSSampleOptions()>("getSampleoptions"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelByteBuffer)>("setData"), //
		jMethod<::jvoid(::jbyte *)>("setData"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setData"), //
		jMethod<::jvoid(::javax::sound::sampled::AudioFormat)>("setFormat"), //
		jMethod<::jvoid(::jbyte *)>("setGuid"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::com::sun::media::sound::DLSSampleOptions)>("setSampleoptions"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto getDataBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataBuffer")] != -1);
		return call<R>("getDataBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getGuid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGuid")] != -1);
		return call<R>("getGuid", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSInfo, typename... Args>
	auto getInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInfo")] != -1);
		return call<R>("getInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSSampleOptions, typename... Args>
	auto getSampleoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleoptions")] != -1);
		return call<R>("getSampleoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFormat")] != -1);
		return call<R>("setFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGuid(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGuid")] != -1);
		return call<R>("setGuid", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleoptions")] != -1);
		return call<R>("setSampleoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
