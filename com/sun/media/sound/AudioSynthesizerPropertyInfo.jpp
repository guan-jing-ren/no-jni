#ifndef com_sun_media_sound_AudioSynthesizerPropertyInfo_HPP
#define com_sun_media_sound_AudioSynthesizerPropertyInfo_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::AudioSynthesizerPropertyInfo : public jObject<::com::sun::media::sound::AudioSynthesizerPropertyInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "AudioSynthesizerPropertyInfo";

	constexpr static Enume field_signatures{
		jField<::java::lang::Object *>("choices"), //
		jField<::java::lang::String>("description"), //
		jField<::java::lang::String>("name"), //
		jField<::java::lang::Object>("value"), //
		jField<::java::lang::Class>("valueClass"), //
	};

	template<typename F = ::java::lang::Object *>
	auto choices() const {
		static_assert(field_signatures[jField<F>("choices")] != -1);
		return at<F>("choices");
	}

	template<typename F = ::java::lang::String>
	auto description() const {
		static_assert(field_signatures[jField<F>("description")] != -1);
		return at<F>("description");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::java::lang::Object>
	auto value() const {
		static_assert(field_signatures[jField<F>("value")] != -1);
		return at<F>("value");
	}

	template<typename F = ::java::lang::Class>
	auto valueClass() const {
		static_assert(field_signatures[jField<F>("valueClass")] != -1);
		return at<F>("valueClass");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::lang::String, ::java::lang::Object)>(), //
	};

};

#endif
