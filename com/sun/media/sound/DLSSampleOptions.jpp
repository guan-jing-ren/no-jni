#ifndef com_sun_media_sound_DLSSampleOptions_HPP
#define com_sun_media_sound_DLSSampleOptions_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSSampleOptions : public jObject<::com::sun::media::sound::DLSSampleOptions, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSSampleOptions";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getAttenuation"), //
		jMethod<::jshort()>("getFinetune"), //
		jMethod<::java::util::List()>("getLoops"), //
		jMethod<::jlong()>("getOptions"), //
		jMethod<::jint()>("getUnitynote"), //
		jMethod<::jvoid(::jint)>("setAttenuation"), //
		jMethod<::jvoid(::jshort)>("setFinetune"), //
		jMethod<::jvoid(::jlong)>("setOptions"), //
		jMethod<::jvoid(::jint)>("setUnitynote"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttenuation")] != -1);
		return call<R>("getAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getFinetune(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFinetune")] != -1);
		return call<R>("getFinetune", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getLoops(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoops")] != -1);
		return call<R>("getLoops", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getUnitynote(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getUnitynote")] != -1);
		return call<R>("getUnitynote", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttenuation")] != -1);
		return call<R>("setAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFinetune(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFinetune")] != -1);
		return call<R>("setFinetune", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOptions")] != -1);
		return call<R>("setOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setUnitynote(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setUnitynote")] != -1);
		return call<R>("setUnitynote", std::forward<Args>(args)...);
	}

};

#endif
