#ifndef com_sun_media_sound_ModelDestination_HPP
#define com_sun_media_sound_ModelDestination_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelDestination : public jObject<::com::sun::media::sound::ModelDestination, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelDestination";

	constexpr static Enume field_signatures{
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_CHORUS"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_ATTACK"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_DECAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_DELAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_HOLD"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_RELEASE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_SHUTDOWN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG1_SUSTAIN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_ATTACK"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_DECAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_DELAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_HOLD"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_RELEASE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_SHUTDOWN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_EG2_SUSTAIN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_FILTER_FREQ"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_FILTER_Q"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_GAIN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_KEYNUMBER"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_LFO1_DELAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_LFO1_FREQ"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_LFO2_DELAY"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_LFO2_FREQ"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_NONE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_PAN"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_PITCH"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_REVERB"), //
		jField<::com::sun::media::sound::ModelIdentifier>("DESTINATION_VELOCITY"), //
	};

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_CHORUS() {
		static_assert(field_signatures[jField<F>("DESTINATION_CHORUS")] != -1);
		return sat<F>("DESTINATION_CHORUS");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_ATTACK() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_ATTACK")] != -1);
		return sat<F>("DESTINATION_EG1_ATTACK");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_DECAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_DECAY")] != -1);
		return sat<F>("DESTINATION_EG1_DECAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_DELAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_DELAY")] != -1);
		return sat<F>("DESTINATION_EG1_DELAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_HOLD() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_HOLD")] != -1);
		return sat<F>("DESTINATION_EG1_HOLD");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_RELEASE() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_RELEASE")] != -1);
		return sat<F>("DESTINATION_EG1_RELEASE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_SHUTDOWN() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_SHUTDOWN")] != -1);
		return sat<F>("DESTINATION_EG1_SHUTDOWN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG1_SUSTAIN() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG1_SUSTAIN")] != -1);
		return sat<F>("DESTINATION_EG1_SUSTAIN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_ATTACK() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_ATTACK")] != -1);
		return sat<F>("DESTINATION_EG2_ATTACK");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_DECAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_DECAY")] != -1);
		return sat<F>("DESTINATION_EG2_DECAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_DELAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_DELAY")] != -1);
		return sat<F>("DESTINATION_EG2_DELAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_HOLD() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_HOLD")] != -1);
		return sat<F>("DESTINATION_EG2_HOLD");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_RELEASE() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_RELEASE")] != -1);
		return sat<F>("DESTINATION_EG2_RELEASE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_SHUTDOWN() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_SHUTDOWN")] != -1);
		return sat<F>("DESTINATION_EG2_SHUTDOWN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_EG2_SUSTAIN() {
		static_assert(field_signatures[jField<F>("DESTINATION_EG2_SUSTAIN")] != -1);
		return sat<F>("DESTINATION_EG2_SUSTAIN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_FILTER_FREQ() {
		static_assert(field_signatures[jField<F>("DESTINATION_FILTER_FREQ")] != -1);
		return sat<F>("DESTINATION_FILTER_FREQ");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_FILTER_Q() {
		static_assert(field_signatures[jField<F>("DESTINATION_FILTER_Q")] != -1);
		return sat<F>("DESTINATION_FILTER_Q");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_GAIN() {
		static_assert(field_signatures[jField<F>("DESTINATION_GAIN")] != -1);
		return sat<F>("DESTINATION_GAIN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_KEYNUMBER() {
		static_assert(field_signatures[jField<F>("DESTINATION_KEYNUMBER")] != -1);
		return sat<F>("DESTINATION_KEYNUMBER");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_LFO1_DELAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_LFO1_DELAY")] != -1);
		return sat<F>("DESTINATION_LFO1_DELAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_LFO1_FREQ() {
		static_assert(field_signatures[jField<F>("DESTINATION_LFO1_FREQ")] != -1);
		return sat<F>("DESTINATION_LFO1_FREQ");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_LFO2_DELAY() {
		static_assert(field_signatures[jField<F>("DESTINATION_LFO2_DELAY")] != -1);
		return sat<F>("DESTINATION_LFO2_DELAY");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_LFO2_FREQ() {
		static_assert(field_signatures[jField<F>("DESTINATION_LFO2_FREQ")] != -1);
		return sat<F>("DESTINATION_LFO2_FREQ");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_NONE() {
		static_assert(field_signatures[jField<F>("DESTINATION_NONE")] != -1);
		return sat<F>("DESTINATION_NONE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_PAN() {
		static_assert(field_signatures[jField<F>("DESTINATION_PAN")] != -1);
		return sat<F>("DESTINATION_PAN");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_PITCH() {
		static_assert(field_signatures[jField<F>("DESTINATION_PITCH")] != -1);
		return sat<F>("DESTINATION_PITCH");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_REVERB() {
		static_assert(field_signatures[jField<F>("DESTINATION_REVERB")] != -1);
		return sat<F>("DESTINATION_REVERB");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto DESTINATION_VELOCITY() {
		static_assert(field_signatures[jField<F>("DESTINATION_VELOCITY")] != -1);
		return sat<F>("DESTINATION_VELOCITY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier)>(), //
		jMethod<::com::sun::media::sound::ModelIdentifier()>("getIdentifier"), //
		jMethod<::com::sun::media::sound::ModelTransform()>("getTransform"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelIdentifier)>("setIdentifier"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelTransform)>("setTransform"), //
	};

	template<typename R = ::com::sun::media::sound::ModelIdentifier, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdentifier")] != -1);
		return call<R>("setIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

};

#endif
