#ifndef com_sun_media_sound_SF2Sample_HPP
#define com_sun_media_sound_SF2Sample_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SF2Sample : public jObject<::com::sun::media::sound::SF2Sample, ::javax::sound::midi::SoundbankResource> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SF2Sample";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::sound::midi::Soundbank)>(), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("getData24Buffer"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("getDataBuffer"), //
		jMethod<::jlong()>("getEndLoop"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getOriginalPitch"), //
		jMethod<::jbyte()>("getPitchCorrection"), //
		jMethod<::jint()>("getSampleLink"), //
		jMethod<::jlong()>("getSampleRate"), //
		jMethod<::jint()>("getSampleType"), //
		jMethod<::jlong()>("getStartLoop"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelByteBuffer)>("setData"), //
		jMethod<::jvoid(::jbyte *)>("setData"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setData"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelByteBuffer)>("setData24"), //
		jMethod<::jvoid(::jbyte *)>("setData24"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("setData24"), //
		jMethod<::jvoid(::jlong)>("setEndLoop"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::jint)>("setOriginalPitch"), //
		jMethod<::jvoid(::jbyte)>("setPitchCorrection"), //
		jMethod<::jvoid(::jint)>("setSampleLink"), //
		jMethod<::jvoid(::jlong)>("setSampleRate"), //
		jMethod<::jvoid(::jint)>("setSampleType"), //
		jMethod<::jvoid(::jlong)>("setStartLoop"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto getData24Buffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData24Buffer")] != -1);
		return call<R>("getData24Buffer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto getDataBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataBuffer")] != -1);
		return call<R>("getDataBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getEndLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEndLoop")] != -1);
		return call<R>("getEndLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOriginalPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOriginalPitch")] != -1);
		return call<R>("getOriginalPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getPitchCorrection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitchCorrection")] != -1);
		return call<R>("getPitchCorrection", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSampleLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleLink")] != -1);
		return call<R>("getSampleLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSampleRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleRate")] != -1);
		return call<R>("getSampleRate", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSampleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleType")] != -1);
		return call<R>("getSampleType", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getStartLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStartLoop")] != -1);
		return call<R>("getStartLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData")] != -1);
		return call<R>("setData", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setData24(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setData24")] != -1);
		return call<R>("setData24", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setEndLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEndLoop")] != -1);
		return call<R>("setEndLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOriginalPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOriginalPitch")] != -1);
		return call<R>("setOriginalPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitchCorrection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitchCorrection")] != -1);
		return call<R>("setPitchCorrection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleLink(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleLink")] != -1);
		return call<R>("setSampleLink", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleRate")] != -1);
		return call<R>("setSampleRate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleType")] != -1);
		return call<R>("setSampleType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setStartLoop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setStartLoop")] != -1);
		return call<R>("setStartLoop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
