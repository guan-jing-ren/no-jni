#ifndef com_sun_media_sound_MidiUtils$TempoCache_HPP
#define com_sun_media_sound_MidiUtils$TempoCache_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::MidiUtils$TempoCache : public jObject<::com::sun::media::sound::MidiUtils$TempoCache, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "MidiUtils$TempoCache";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::sound::midi::Sequence)>(), //
		jMethod<::jint()>("getCurrTempoMPQ"), //
		jMethod<::jvoid(::javax::sound::midi::Sequence)>("refresh"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCurrTempoMPQ(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCurrTempoMPQ")] != -1);
		return call<R>("getCurrTempoMPQ", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto refresh(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("refresh")] != -1);
		return call<R>("refresh", std::forward<Args>(args)...);
	}

};

#endif
