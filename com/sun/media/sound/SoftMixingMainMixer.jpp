#ifndef com_sun_media_sound_SoftMixingMainMixer_HPP
#define com_sun_media_sound_SoftMixingMainMixer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftMixingMainMixer : public jObject<::com::sun::media::sound::SoftMixingMainMixer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftMixingMainMixer";

	constexpr static Enume field_signatures{
		jField<::jint>("CHANNEL_CHANNELMIXER_LEFT"), //
		jField<::jint>("CHANNEL_CHANNELMIXER_RIGHT"), //
		jField<::jint>("CHANNEL_EFFECT1"), //
		jField<::jint>("CHANNEL_EFFECT2"), //
		jField<::jint>("CHANNEL_EFFECT3"), //
		jField<::jint>("CHANNEL_EFFECT4"), //
		jField<::jint>("CHANNEL_LEFT"), //
		jField<::jint>("CHANNEL_LEFT_DRY"), //
		jField<::jint>("CHANNEL_RIGHT"), //
		jField<::jint>("CHANNEL_RIGHT_DRY"), //
		jField<::jint>("CHANNEL_SCRATCH1"), //
		jField<::jint>("CHANNEL_SCRATCH2"), //
	};

	template<typename F = ::jint>
	static auto CHANNEL_CHANNELMIXER_LEFT() {
		static_assert(field_signatures[jField<F>("CHANNEL_CHANNELMIXER_LEFT")] != -1);
		return sat<F>("CHANNEL_CHANNELMIXER_LEFT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_CHANNELMIXER_RIGHT() {
		static_assert(field_signatures[jField<F>("CHANNEL_CHANNELMIXER_RIGHT")] != -1);
		return sat<F>("CHANNEL_CHANNELMIXER_RIGHT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT1() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT1")] != -1);
		return sat<F>("CHANNEL_EFFECT1");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT2() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT2")] != -1);
		return sat<F>("CHANNEL_EFFECT2");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT3() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT3")] != -1);
		return sat<F>("CHANNEL_EFFECT3");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT4() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT4")] != -1);
		return sat<F>("CHANNEL_EFFECT4");
	}

	template<typename F = ::jint>
	static auto CHANNEL_LEFT() {
		static_assert(field_signatures[jField<F>("CHANNEL_LEFT")] != -1);
		return sat<F>("CHANNEL_LEFT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_LEFT_DRY() {
		static_assert(field_signatures[jField<F>("CHANNEL_LEFT_DRY")] != -1);
		return sat<F>("CHANNEL_LEFT_DRY");
	}

	template<typename F = ::jint>
	static auto CHANNEL_RIGHT() {
		static_assert(field_signatures[jField<F>("CHANNEL_RIGHT")] != -1);
		return sat<F>("CHANNEL_RIGHT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_RIGHT_DRY() {
		static_assert(field_signatures[jField<F>("CHANNEL_RIGHT_DRY")] != -1);
		return sat<F>("CHANNEL_RIGHT_DRY");
	}

	template<typename F = ::jint>
	static auto CHANNEL_SCRATCH1() {
		static_assert(field_signatures[jField<F>("CHANNEL_SCRATCH1")] != -1);
		return sat<F>("CHANNEL_SCRATCH1");
	}

	template<typename F = ::jint>
	static auto CHANNEL_SCRATCH2() {
		static_assert(field_signatures[jField<F>("CHANNEL_SCRATCH2")] != -1);
		return sat<F>("CHANNEL_SCRATCH2");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::media::sound::SoftMixingMixer)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftMixingDataLine)>("closeLine"), //
		jMethod<::javax::sound::sampled::AudioInputStream()>("getInputStream"), //
		jMethod<::com::sun::media::sound::SoftMixingDataLine *()>("getOpenLines"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftMixingDataLine)>("openLine"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto closeLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("closeLine")] != -1);
		return call<R>("closeLine", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioInputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SoftMixingDataLine *, typename... Args>
	auto getOpenLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOpenLines")] != -1);
		return call<R>("getOpenLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto openLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openLine")] != -1);
		return call<R>("openLine", std::forward<Args>(args)...);
	}

};

#endif
