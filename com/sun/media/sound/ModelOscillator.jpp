#ifndef com_sun_media_sound_ModelOscillator_HPP
#define com_sun_media_sound_ModelOscillator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelOscillator : public jObject<::com::sun::media::sound::ModelOscillator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelOscillator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jfloat()>("getAttenuation"), //
		jMethod<::jint()>("getChannels"), //
		jMethod<::com::sun::media::sound::ModelOscillatorStream(::jfloat)>("open"), //
	};

	template<typename R = ::jfloat, typename... Args>
	auto getAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttenuation")] != -1);
		return call<R>("getAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannels")] != -1);
		return call<R>("getChannels", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelOscillatorStream, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

};

#endif
