#ifndef com_sun_media_sound_RIFFReader_HPP
#define com_sun_media_sound_RIFFReader_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::RIFFReader : public jObject<::com::sun::media::sound::RIFFReader, ::java::io::InputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "RIFFReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::jint()>("available"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid()>("finish"), //
		jMethod<::jlong()>("getFilePointer"), //
		jMethod<::java::lang::String()>("getFormat"), //
		jMethod<::jlong()>("getSize"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::jboolean()>("hasNextChunk"), //
		jMethod<::com::sun::media::sound::RIFFReader()>("nextChunk"), //
		jMethod<::jint()>("read"), //
		jMethod<::jint(::jbyte *, ::jint, ::jint)>("read"), //
		jMethod<::jbyte()>("readByte"), //
		jMethod<::jvoid(::jbyte *)>("readFully"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("readFully"), //
		jMethod<::jint()>("readInt"), //
		jMethod<::jlong()>("readLong"), //
		jMethod<::jshort()>("readShort"), //
		jMethod<::java::lang::String(::jint)>("readString"), //
		jMethod<::jint()>("readUnsignedByte"), //
		jMethod<::jlong()>("readUnsignedInt"), //
		jMethod<::jint()>("readUnsignedShort"), //
		jMethod<::jlong(::jlong)>("skip"), //
		jMethod<::jlong(::jlong)>("skipBytes"), //
	};

	template<typename R = ::jint, typename... Args>
	auto available(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("available")] != -1);
		return call<R>("available", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto finish(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("finish")] != -1);
		return call<R>("finish", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFilePointer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilePointer")] != -1);
		return call<R>("getFilePointer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasNextChunk(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasNextChunk")] != -1);
		return call<R>("hasNextChunk", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::RIFFReader, typename... Args>
	auto nextChunk(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("nextChunk")] != -1);
		return call<R>("nextChunk", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto readByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readByte")] != -1);
		return call<R>("readByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFully(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFully")] != -1);
		return call<R>("readFully", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readInt")] != -1);
		return call<R>("readInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readLong")] != -1);
		return call<R>("readLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto readShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readShort")] != -1);
		return call<R>("readShort", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto readString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readString")] != -1);
		return call<R>("readString", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedByte")] != -1);
		return call<R>("readUnsignedByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto readUnsignedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedInt")] != -1);
		return call<R>("readUnsignedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto readUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readUnsignedShort")] != -1);
		return call<R>("readUnsignedShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skip")] != -1);
		return call<R>("skip", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto skipBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("skipBytes")] != -1);
		return call<R>("skipBytes", std::forward<Args>(args)...);
	}

};

#endif
