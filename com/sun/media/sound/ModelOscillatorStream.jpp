#ifndef com_sun_media_sound_ModelOscillatorStream_HPP
#define com_sun_media_sound_ModelOscillatorStream_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelOscillatorStream : public jObject<::com::sun::media::sound::ModelOscillatorStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelOscillatorStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid()>("close"), //
		jMethod<::jvoid(::jint)>("noteOff"), //
		jMethod<::jvoid(::javax::sound::midi::MidiChannel, ::javax::sound::midi::VoiceStatus, ::jint, ::jint)>("noteOn"), //
		jMethod<::jint(::jfloat **, ::jint, ::jint)>("read"), //
		jMethod<::jvoid(::jfloat)>("setPitch"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOff")] != -1);
		return call<R>("noteOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOn")] != -1);
		return call<R>("noteOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitch")] != -1);
		return call<R>("setPitch", std::forward<Args>(args)...);
	}

};

#endif
