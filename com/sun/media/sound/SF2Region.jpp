#ifndef com_sun_media_sound_SF2Region_HPP
#define com_sun_media_sound_SF2Region_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SF2Region : public jObject<::com::sun::media::sound::SF2Region, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SF2Region";

	constexpr static Enume field_signatures{
		jField<::jint>("GENERATOR_ATTACKMODENV"), //
		jField<::jint>("GENERATOR_ATTACKVOLENV"), //
		jField<::jint>("GENERATOR_CHORUSEFFECTSSEND"), //
		jField<::jint>("GENERATOR_COARSETUNE"), //
		jField<::jint>("GENERATOR_DECAYMODENV"), //
		jField<::jint>("GENERATOR_DECAYVOLENV"), //
		jField<::jint>("GENERATOR_DELAYMODENV"), //
		jField<::jint>("GENERATOR_DELAYMODLFO"), //
		jField<::jint>("GENERATOR_DELAYVIBLFO"), //
		jField<::jint>("GENERATOR_DELAYVOLENV"), //
		jField<::jint>("GENERATOR_ENDADDRSCOARSEOFFSET"), //
		jField<::jint>("GENERATOR_ENDADDRSOFFSET"), //
		jField<::jint>("GENERATOR_ENDLOOPADDRSCOARSEOFFSET"), //
		jField<::jint>("GENERATOR_ENDLOOPADDRSOFFSET"), //
		jField<::jint>("GENERATOR_ENDOPR"), //
		jField<::jint>("GENERATOR_EXCLUSIVECLASS"), //
		jField<::jint>("GENERATOR_FINETUNE"), //
		jField<::jint>("GENERATOR_FREQMODLFO"), //
		jField<::jint>("GENERATOR_FREQVIBLFO"), //
		jField<::jint>("GENERATOR_HOLDMODENV"), //
		jField<::jint>("GENERATOR_HOLDVOLENV"), //
		jField<::jint>("GENERATOR_INITIALATTENUATION"), //
		jField<::jint>("GENERATOR_INITIALFILTERFC"), //
		jField<::jint>("GENERATOR_INITIALFILTERQ"), //
		jField<::jint>("GENERATOR_INSTRUMENT"), //
		jField<::jint>("GENERATOR_KEYNUM"), //
		jField<::jint>("GENERATOR_KEYNUMTOMODENVDECAY"), //
		jField<::jint>("GENERATOR_KEYNUMTOMODENVHOLD"), //
		jField<::jint>("GENERATOR_KEYNUMTOVOLENVDECAY"), //
		jField<::jint>("GENERATOR_KEYNUMTOVOLENVHOLD"), //
		jField<::jint>("GENERATOR_KEYRANGE"), //
		jField<::jint>("GENERATOR_MODENVTOFILTERFC"), //
		jField<::jint>("GENERATOR_MODENVTOPITCH"), //
		jField<::jint>("GENERATOR_MODLFOTOFILTERFC"), //
		jField<::jint>("GENERATOR_MODLFOTOPITCH"), //
		jField<::jint>("GENERATOR_MODLFOTOVOLUME"), //
		jField<::jint>("GENERATOR_OVERRIDINGROOTKEY"), //
		jField<::jint>("GENERATOR_PAN"), //
		jField<::jint>("GENERATOR_RELEASEMODENV"), //
		jField<::jint>("GENERATOR_RELEASEVOLENV"), //
		jField<::jint>("GENERATOR_RESERVED1"), //
		jField<::jint>("GENERATOR_RESERVED2"), //
		jField<::jint>("GENERATOR_RESERVED3"), //
		jField<::jint>("GENERATOR_REVERBEFFECTSSEND"), //
		jField<::jint>("GENERATOR_SAMPLEID"), //
		jField<::jint>("GENERATOR_SAMPLEMODES"), //
		jField<::jint>("GENERATOR_SCALETUNING"), //
		jField<::jint>("GENERATOR_STARTADDRSCOARSEOFFSET"), //
		jField<::jint>("GENERATOR_STARTADDRSOFFSET"), //
		jField<::jint>("GENERATOR_STARTLOOPADDRSCOARSEOFFSET"), //
		jField<::jint>("GENERATOR_STARTLOOPADDRSOFFSET"), //
		jField<::jint>("GENERATOR_SUSTAINMODENV"), //
		jField<::jint>("GENERATOR_SUSTAINVOLENV"), //
		jField<::jint>("GENERATOR_UNUSED1"), //
		jField<::jint>("GENERATOR_UNUSED2"), //
		jField<::jint>("GENERATOR_UNUSED3"), //
		jField<::jint>("GENERATOR_UNUSED4"), //
		jField<::jint>("GENERATOR_UNUSED5"), //
		jField<::jint>("GENERATOR_VELOCITY"), //
		jField<::jint>("GENERATOR_VELRANGE"), //
		jField<::jint>("GENERATOR_VIBLFOTOPITCH"), //
	};

	template<typename F = ::jint>
	static auto GENERATOR_ATTACKMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_ATTACKMODENV")] != -1);
		return sat<F>("GENERATOR_ATTACKMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ATTACKVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_ATTACKVOLENV")] != -1);
		return sat<F>("GENERATOR_ATTACKVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_CHORUSEFFECTSSEND() {
		static_assert(field_signatures[jField<F>("GENERATOR_CHORUSEFFECTSSEND")] != -1);
		return sat<F>("GENERATOR_CHORUSEFFECTSSEND");
	}

	template<typename F = ::jint>
	static auto GENERATOR_COARSETUNE() {
		static_assert(field_signatures[jField<F>("GENERATOR_COARSETUNE")] != -1);
		return sat<F>("GENERATOR_COARSETUNE");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DECAYMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_DECAYMODENV")] != -1);
		return sat<F>("GENERATOR_DECAYMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DECAYVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_DECAYVOLENV")] != -1);
		return sat<F>("GENERATOR_DECAYVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DELAYMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_DELAYMODENV")] != -1);
		return sat<F>("GENERATOR_DELAYMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DELAYMODLFO() {
		static_assert(field_signatures[jField<F>("GENERATOR_DELAYMODLFO")] != -1);
		return sat<F>("GENERATOR_DELAYMODLFO");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DELAYVIBLFO() {
		static_assert(field_signatures[jField<F>("GENERATOR_DELAYVIBLFO")] != -1);
		return sat<F>("GENERATOR_DELAYVIBLFO");
	}

	template<typename F = ::jint>
	static auto GENERATOR_DELAYVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_DELAYVOLENV")] != -1);
		return sat<F>("GENERATOR_DELAYVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ENDADDRSCOARSEOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_ENDADDRSCOARSEOFFSET")] != -1);
		return sat<F>("GENERATOR_ENDADDRSCOARSEOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ENDADDRSOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_ENDADDRSOFFSET")] != -1);
		return sat<F>("GENERATOR_ENDADDRSOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ENDLOOPADDRSCOARSEOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_ENDLOOPADDRSCOARSEOFFSET")] != -1);
		return sat<F>("GENERATOR_ENDLOOPADDRSCOARSEOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ENDLOOPADDRSOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_ENDLOOPADDRSOFFSET")] != -1);
		return sat<F>("GENERATOR_ENDLOOPADDRSOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_ENDOPR() {
		static_assert(field_signatures[jField<F>("GENERATOR_ENDOPR")] != -1);
		return sat<F>("GENERATOR_ENDOPR");
	}

	template<typename F = ::jint>
	static auto GENERATOR_EXCLUSIVECLASS() {
		static_assert(field_signatures[jField<F>("GENERATOR_EXCLUSIVECLASS")] != -1);
		return sat<F>("GENERATOR_EXCLUSIVECLASS");
	}

	template<typename F = ::jint>
	static auto GENERATOR_FINETUNE() {
		static_assert(field_signatures[jField<F>("GENERATOR_FINETUNE")] != -1);
		return sat<F>("GENERATOR_FINETUNE");
	}

	template<typename F = ::jint>
	static auto GENERATOR_FREQMODLFO() {
		static_assert(field_signatures[jField<F>("GENERATOR_FREQMODLFO")] != -1);
		return sat<F>("GENERATOR_FREQMODLFO");
	}

	template<typename F = ::jint>
	static auto GENERATOR_FREQVIBLFO() {
		static_assert(field_signatures[jField<F>("GENERATOR_FREQVIBLFO")] != -1);
		return sat<F>("GENERATOR_FREQVIBLFO");
	}

	template<typename F = ::jint>
	static auto GENERATOR_HOLDMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_HOLDMODENV")] != -1);
		return sat<F>("GENERATOR_HOLDMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_HOLDVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_HOLDVOLENV")] != -1);
		return sat<F>("GENERATOR_HOLDVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_INITIALATTENUATION() {
		static_assert(field_signatures[jField<F>("GENERATOR_INITIALATTENUATION")] != -1);
		return sat<F>("GENERATOR_INITIALATTENUATION");
	}

	template<typename F = ::jint>
	static auto GENERATOR_INITIALFILTERFC() {
		static_assert(field_signatures[jField<F>("GENERATOR_INITIALFILTERFC")] != -1);
		return sat<F>("GENERATOR_INITIALFILTERFC");
	}

	template<typename F = ::jint>
	static auto GENERATOR_INITIALFILTERQ() {
		static_assert(field_signatures[jField<F>("GENERATOR_INITIALFILTERQ")] != -1);
		return sat<F>("GENERATOR_INITIALFILTERQ");
	}

	template<typename F = ::jint>
	static auto GENERATOR_INSTRUMENT() {
		static_assert(field_signatures[jField<F>("GENERATOR_INSTRUMENT")] != -1);
		return sat<F>("GENERATOR_INSTRUMENT");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYNUM() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYNUM")] != -1);
		return sat<F>("GENERATOR_KEYNUM");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYNUMTOMODENVDECAY() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYNUMTOMODENVDECAY")] != -1);
		return sat<F>("GENERATOR_KEYNUMTOMODENVDECAY");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYNUMTOMODENVHOLD() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYNUMTOMODENVHOLD")] != -1);
		return sat<F>("GENERATOR_KEYNUMTOMODENVHOLD");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYNUMTOVOLENVDECAY() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYNUMTOVOLENVDECAY")] != -1);
		return sat<F>("GENERATOR_KEYNUMTOVOLENVDECAY");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYNUMTOVOLENVHOLD() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYNUMTOVOLENVHOLD")] != -1);
		return sat<F>("GENERATOR_KEYNUMTOVOLENVHOLD");
	}

	template<typename F = ::jint>
	static auto GENERATOR_KEYRANGE() {
		static_assert(field_signatures[jField<F>("GENERATOR_KEYRANGE")] != -1);
		return sat<F>("GENERATOR_KEYRANGE");
	}

	template<typename F = ::jint>
	static auto GENERATOR_MODENVTOFILTERFC() {
		static_assert(field_signatures[jField<F>("GENERATOR_MODENVTOFILTERFC")] != -1);
		return sat<F>("GENERATOR_MODENVTOFILTERFC");
	}

	template<typename F = ::jint>
	static auto GENERATOR_MODENVTOPITCH() {
		static_assert(field_signatures[jField<F>("GENERATOR_MODENVTOPITCH")] != -1);
		return sat<F>("GENERATOR_MODENVTOPITCH");
	}

	template<typename F = ::jint>
	static auto GENERATOR_MODLFOTOFILTERFC() {
		static_assert(field_signatures[jField<F>("GENERATOR_MODLFOTOFILTERFC")] != -1);
		return sat<F>("GENERATOR_MODLFOTOFILTERFC");
	}

	template<typename F = ::jint>
	static auto GENERATOR_MODLFOTOPITCH() {
		static_assert(field_signatures[jField<F>("GENERATOR_MODLFOTOPITCH")] != -1);
		return sat<F>("GENERATOR_MODLFOTOPITCH");
	}

	template<typename F = ::jint>
	static auto GENERATOR_MODLFOTOVOLUME() {
		static_assert(field_signatures[jField<F>("GENERATOR_MODLFOTOVOLUME")] != -1);
		return sat<F>("GENERATOR_MODLFOTOVOLUME");
	}

	template<typename F = ::jint>
	static auto GENERATOR_OVERRIDINGROOTKEY() {
		static_assert(field_signatures[jField<F>("GENERATOR_OVERRIDINGROOTKEY")] != -1);
		return sat<F>("GENERATOR_OVERRIDINGROOTKEY");
	}

	template<typename F = ::jint>
	static auto GENERATOR_PAN() {
		static_assert(field_signatures[jField<F>("GENERATOR_PAN")] != -1);
		return sat<F>("GENERATOR_PAN");
	}

	template<typename F = ::jint>
	static auto GENERATOR_RELEASEMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_RELEASEMODENV")] != -1);
		return sat<F>("GENERATOR_RELEASEMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_RELEASEVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_RELEASEVOLENV")] != -1);
		return sat<F>("GENERATOR_RELEASEVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_RESERVED1() {
		static_assert(field_signatures[jField<F>("GENERATOR_RESERVED1")] != -1);
		return sat<F>("GENERATOR_RESERVED1");
	}

	template<typename F = ::jint>
	static auto GENERATOR_RESERVED2() {
		static_assert(field_signatures[jField<F>("GENERATOR_RESERVED2")] != -1);
		return sat<F>("GENERATOR_RESERVED2");
	}

	template<typename F = ::jint>
	static auto GENERATOR_RESERVED3() {
		static_assert(field_signatures[jField<F>("GENERATOR_RESERVED3")] != -1);
		return sat<F>("GENERATOR_RESERVED3");
	}

	template<typename F = ::jint>
	static auto GENERATOR_REVERBEFFECTSSEND() {
		static_assert(field_signatures[jField<F>("GENERATOR_REVERBEFFECTSSEND")] != -1);
		return sat<F>("GENERATOR_REVERBEFFECTSSEND");
	}

	template<typename F = ::jint>
	static auto GENERATOR_SAMPLEID() {
		static_assert(field_signatures[jField<F>("GENERATOR_SAMPLEID")] != -1);
		return sat<F>("GENERATOR_SAMPLEID");
	}

	template<typename F = ::jint>
	static auto GENERATOR_SAMPLEMODES() {
		static_assert(field_signatures[jField<F>("GENERATOR_SAMPLEMODES")] != -1);
		return sat<F>("GENERATOR_SAMPLEMODES");
	}

	template<typename F = ::jint>
	static auto GENERATOR_SCALETUNING() {
		static_assert(field_signatures[jField<F>("GENERATOR_SCALETUNING")] != -1);
		return sat<F>("GENERATOR_SCALETUNING");
	}

	template<typename F = ::jint>
	static auto GENERATOR_STARTADDRSCOARSEOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_STARTADDRSCOARSEOFFSET")] != -1);
		return sat<F>("GENERATOR_STARTADDRSCOARSEOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_STARTADDRSOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_STARTADDRSOFFSET")] != -1);
		return sat<F>("GENERATOR_STARTADDRSOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_STARTLOOPADDRSCOARSEOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_STARTLOOPADDRSCOARSEOFFSET")] != -1);
		return sat<F>("GENERATOR_STARTLOOPADDRSCOARSEOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_STARTLOOPADDRSOFFSET() {
		static_assert(field_signatures[jField<F>("GENERATOR_STARTLOOPADDRSOFFSET")] != -1);
		return sat<F>("GENERATOR_STARTLOOPADDRSOFFSET");
	}

	template<typename F = ::jint>
	static auto GENERATOR_SUSTAINMODENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_SUSTAINMODENV")] != -1);
		return sat<F>("GENERATOR_SUSTAINMODENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_SUSTAINVOLENV() {
		static_assert(field_signatures[jField<F>("GENERATOR_SUSTAINVOLENV")] != -1);
		return sat<F>("GENERATOR_SUSTAINVOLENV");
	}

	template<typename F = ::jint>
	static auto GENERATOR_UNUSED1() {
		static_assert(field_signatures[jField<F>("GENERATOR_UNUSED1")] != -1);
		return sat<F>("GENERATOR_UNUSED1");
	}

	template<typename F = ::jint>
	static auto GENERATOR_UNUSED2() {
		static_assert(field_signatures[jField<F>("GENERATOR_UNUSED2")] != -1);
		return sat<F>("GENERATOR_UNUSED2");
	}

	template<typename F = ::jint>
	static auto GENERATOR_UNUSED3() {
		static_assert(field_signatures[jField<F>("GENERATOR_UNUSED3")] != -1);
		return sat<F>("GENERATOR_UNUSED3");
	}

	template<typename F = ::jint>
	static auto GENERATOR_UNUSED4() {
		static_assert(field_signatures[jField<F>("GENERATOR_UNUSED4")] != -1);
		return sat<F>("GENERATOR_UNUSED4");
	}

	template<typename F = ::jint>
	static auto GENERATOR_UNUSED5() {
		static_assert(field_signatures[jField<F>("GENERATOR_UNUSED5")] != -1);
		return sat<F>("GENERATOR_UNUSED5");
	}

	template<typename F = ::jint>
	static auto GENERATOR_VELOCITY() {
		static_assert(field_signatures[jField<F>("GENERATOR_VELOCITY")] != -1);
		return sat<F>("GENERATOR_VELOCITY");
	}

	template<typename F = ::jint>
	static auto GENERATOR_VELRANGE() {
		static_assert(field_signatures[jField<F>("GENERATOR_VELRANGE")] != -1);
		return sat<F>("GENERATOR_VELRANGE");
	}

	template<typename F = ::jint>
	static auto GENERATOR_VIBLFOTOPITCH() {
		static_assert(field_signatures[jField<F>("GENERATOR_VIBLFOTOPITCH")] != -1);
		return sat<F>("GENERATOR_VIBLFOTOPITCH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jboolean(::jint)>("contains"), //
		jMethod<::jbyte *(::jint)>("getBytes"), //
		jMethod<::jshort(::jint)>("getDefaultValue"), //
		jMethod<::java::util::Map()>("getGenerators"), //
		jMethod<::jint(::jint)>("getInteger"), //
		jMethod<::java::util::List()>("getModulators"), //
		jMethod<::jshort(::jint)>("getShort"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("putBytes"), //
		jMethod<::jvoid(::jint, ::jint)>("putInteger"), //
		jMethod<::jvoid(::jint, ::jshort)>("putShort"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	static auto getDefaultValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultValue")] != -1);
		return scall<R>("getDefaultValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::Map, typename... Args>
	auto getGenerators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGenerators")] != -1);
		return call<R>("getGenerators", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInteger")] != -1);
		return call<R>("getInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getModulators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModulators")] != -1);
		return call<R>("getModulators", std::forward<Args>(args)...);
	}

	template<typename R = ::jshort, typename... Args>
	auto getShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShort")] != -1);
		return call<R>("getShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putBytes")] != -1);
		return call<R>("putBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInteger(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInteger")] != -1);
		return call<R>("putInteger", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putShort")] != -1);
		return call<R>("putShort", std::forward<Args>(args)...);
	}

};

#endif
