#ifndef com_sun_media_sound_JDK13Services_HPP
#define com_sun_media_sound_JDK13Services_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::JDK13Services : public jObject<::com::sun::media::sound::JDK13Services, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "JDK13Services";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::lang::Class)>("getDefaultInstanceName"), //
		jMethod<::java::lang::String(::java::lang::Class)>("getDefaultProviderClassName"), //
		jMethod<::java::util::List(::java::lang::Class)>("getProviders"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultInstanceName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultInstanceName")] != -1);
		return scall<R>("getDefaultInstanceName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDefaultProviderClassName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultProviderClassName")] != -1);
		return scall<R>("getDefaultProviderClassName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	static auto getProviders(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProviders")] != -1);
		return scall<R>("getProviders", std::forward<Args>(args)...);
	}

};

#endif
