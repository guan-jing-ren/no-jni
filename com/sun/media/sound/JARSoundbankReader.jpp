#ifndef com_sun_media_sound_JARSoundbankReader_HPP
#define com_sun_media_sound_JARSoundbankReader_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::JARSoundbankReader : public jObject<::com::sun::media::sound::JARSoundbankReader, ::javax::sound::midi::spi::SoundbankReader> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "JARSoundbankReader";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::sound::midi::Soundbank(::java::io::File)>("getSoundbank"), //
		jMethod<::javax::sound::midi::Soundbank(::java::io::InputStream)>("getSoundbank"), //
		jMethod<::javax::sound::midi::Soundbank(::java::net::URL)>("getSoundbank"), //
	};

	template<typename R = ::javax::sound::midi::Soundbank, typename... Args>
	auto getSoundbank(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoundbank")] != -1);
		return call<R>("getSoundbank", std::forward<Args>(args)...);
	}

};

#endif
