#ifndef com_sun_media_sound_SoftPerformer_HPP
#define com_sun_media_sound_SoftPerformer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftPerformer : public jObject<::com::sun::media::sound::SoftPerformer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftPerformer";

	constexpr static Enume field_signatures{
		jField<::com::sun::media::sound::ModelConnectionBlock *>("connections"), //
		jField<::jint *>("ctrl_connections"), //
		jField<::jint>("exclusiveClass"), //
		jField<::jboolean>("forcedKeynumber"), //
		jField<::jboolean>("forcedVelocity"), //
		jField<::jint>("keyFrom"), //
		jField<::jint>("keyTo"), //
		jField<::jint **>("midi_connections"), //
		jField<::jint **>("midi_ctrl_connections"), //
		jField<::java::util::Map>("midi_nrpn_connections"), //
		jField<::java::util::Map>("midi_rpn_connections"), //
		jField<::com::sun::media::sound::ModelOscillator *>("oscillators"), //
		jField<::com::sun::media::sound::ModelPerformer>("performer"), //
		jField<::jboolean>("selfNonExclusive"), //
		jField<::jint>("velFrom"), //
		jField<::jint>("velTo"), //
	};

	template<typename F = ::com::sun::media::sound::ModelConnectionBlock *>
	auto connections() const {
		static_assert(field_signatures[jField<F>("connections")] != -1);
		return at<F>("connections");
	}

	template<typename F = ::jint *>
	auto ctrl_connections() const {
		static_assert(field_signatures[jField<F>("ctrl_connections")] != -1);
		return at<F>("ctrl_connections");
	}

	template<typename F = ::jint>
	auto exclusiveClass() const {
		static_assert(field_signatures[jField<F>("exclusiveClass")] != -1);
		return at<F>("exclusiveClass");
	}

	template<typename F = ::jboolean>
	auto forcedKeynumber() const {
		static_assert(field_signatures[jField<F>("forcedKeynumber")] != -1);
		return at<F>("forcedKeynumber");
	}

	template<typename F = ::jboolean>
	auto forcedVelocity() const {
		static_assert(field_signatures[jField<F>("forcedVelocity")] != -1);
		return at<F>("forcedVelocity");
	}

	template<typename F = ::jint>
	auto keyFrom() const {
		static_assert(field_signatures[jField<F>("keyFrom")] != -1);
		return at<F>("keyFrom");
	}

	template<typename F = ::jint>
	auto keyTo() const {
		static_assert(field_signatures[jField<F>("keyTo")] != -1);
		return at<F>("keyTo");
	}

	template<typename F = ::jint **>
	auto midi_connections() const {
		static_assert(field_signatures[jField<F>("midi_connections")] != -1);
		return at<F>("midi_connections");
	}

	template<typename F = ::jint **>
	auto midi_ctrl_connections() const {
		static_assert(field_signatures[jField<F>("midi_ctrl_connections")] != -1);
		return at<F>("midi_ctrl_connections");
	}

	template<typename F = ::java::util::Map>
	auto midi_nrpn_connections() const {
		static_assert(field_signatures[jField<F>("midi_nrpn_connections")] != -1);
		return at<F>("midi_nrpn_connections");
	}

	template<typename F = ::java::util::Map>
	auto midi_rpn_connections() const {
		static_assert(field_signatures[jField<F>("midi_rpn_connections")] != -1);
		return at<F>("midi_rpn_connections");
	}

	template<typename F = ::com::sun::media::sound::ModelOscillator *>
	auto oscillators() const {
		static_assert(field_signatures[jField<F>("oscillators")] != -1);
		return at<F>("oscillators");
	}

	template<typename F = ::com::sun::media::sound::ModelPerformer>
	auto performer() const {
		static_assert(field_signatures[jField<F>("performer")] != -1);
		return at<F>("performer");
	}

	template<typename F = ::jboolean>
	auto selfNonExclusive() const {
		static_assert(field_signatures[jField<F>("selfNonExclusive")] != -1);
		return at<F>("selfNonExclusive");
	}

	template<typename F = ::jint>
	auto velFrom() const {
		static_assert(field_signatures[jField<F>("velFrom")] != -1);
		return at<F>("velFrom");
	}

	template<typename F = ::jint>
	auto velTo() const {
		static_assert(field_signatures[jField<F>("velTo")] != -1);
		return at<F>("velTo");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::media::sound::ModelPerformer)>(), //
	};

};

#endif
