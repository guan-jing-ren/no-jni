#ifndef com_sun_media_sound_ModelSource_HPP
#define com_sun_media_sound_ModelSource_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelSource : public jObject<::com::sun::media::sound::ModelSource, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelSource";

	constexpr static Enume field_signatures{
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_EG1"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_EG2"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_LFO1"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_LFO2"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_MIDI_CC_0"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_MIDI_CHANNEL_PRESSURE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_MIDI_PITCH"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_MIDI_POLY_PRESSURE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_MIDI_RPN_0"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_NONE"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_NOTEON_KEYNUMBER"), //
		jField<::com::sun::media::sound::ModelIdentifier>("SOURCE_NOTEON_VELOCITY"), //
	};

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_EG1() {
		static_assert(field_signatures[jField<F>("SOURCE_EG1")] != -1);
		return sat<F>("SOURCE_EG1");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_EG2() {
		static_assert(field_signatures[jField<F>("SOURCE_EG2")] != -1);
		return sat<F>("SOURCE_EG2");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_LFO1() {
		static_assert(field_signatures[jField<F>("SOURCE_LFO1")] != -1);
		return sat<F>("SOURCE_LFO1");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_LFO2() {
		static_assert(field_signatures[jField<F>("SOURCE_LFO2")] != -1);
		return sat<F>("SOURCE_LFO2");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_MIDI_CC_0() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_CC_0")] != -1);
		return sat<F>("SOURCE_MIDI_CC_0");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_MIDI_CHANNEL_PRESSURE() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_CHANNEL_PRESSURE")] != -1);
		return sat<F>("SOURCE_MIDI_CHANNEL_PRESSURE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_MIDI_PITCH() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_PITCH")] != -1);
		return sat<F>("SOURCE_MIDI_PITCH");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_MIDI_POLY_PRESSURE() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_POLY_PRESSURE")] != -1);
		return sat<F>("SOURCE_MIDI_POLY_PRESSURE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_MIDI_RPN_0() {
		static_assert(field_signatures[jField<F>("SOURCE_MIDI_RPN_0")] != -1);
		return sat<F>("SOURCE_MIDI_RPN_0");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_NONE() {
		static_assert(field_signatures[jField<F>("SOURCE_NONE")] != -1);
		return sat<F>("SOURCE_NONE");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_NOTEON_KEYNUMBER() {
		static_assert(field_signatures[jField<F>("SOURCE_NOTEON_KEYNUMBER")] != -1);
		return sat<F>("SOURCE_NOTEON_KEYNUMBER");
	}

	template<typename F = ::com::sun::media::sound::ModelIdentifier>
	static auto SOURCE_NOTEON_VELOCITY() {
		static_assert(field_signatures[jField<F>("SOURCE_NOTEON_VELOCITY")] != -1);
		return sat<F>("SOURCE_NOTEON_VELOCITY");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier, ::com::sun::media::sound::ModelTransform)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier, ::jboolean)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier, ::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelIdentifier, ::jboolean, ::jboolean, ::jint)>(), //
		jMethod<::com::sun::media::sound::ModelIdentifier()>("getIdentifier"), //
		jMethod<::com::sun::media::sound::ModelTransform()>("getTransform"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelIdentifier)>("setIdentifier"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelTransform)>("setTransform"), //
	};

	template<typename R = ::com::sun::media::sound::ModelIdentifier, typename... Args>
	auto getIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIdentifier")] != -1);
		return call<R>("getIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelTransform, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setIdentifier(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setIdentifier")] != -1);
		return call<R>("setIdentifier", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

};

#endif
