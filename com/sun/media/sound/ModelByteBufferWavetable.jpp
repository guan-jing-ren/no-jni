#ifndef com_sun_media_sound_ModelByteBufferWavetable_HPP
#define com_sun_media_sound_ModelByteBufferWavetable_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelByteBufferWavetable : public jObject<::com::sun::media::sound::ModelByteBufferWavetable, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelByteBufferWavetable";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::media::sound::ModelByteBuffer)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelByteBuffer, ::jfloat)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelByteBuffer, ::javax::sound::sampled::AudioFormat)>(), //
		jConstructor<::jvoid(::com::sun::media::sound::ModelByteBuffer, ::javax::sound::sampled::AudioFormat, ::jfloat)>(), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("get8BitExtensionBuffer"), //
		jMethod<::jfloat()>("getAttenuation"), //
		jMethod<::com::sun::media::sound::ModelByteBuffer()>("getBuffer"), //
		jMethod<::jint()>("getChannels"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jfloat()>("getLoopLength"), //
		jMethod<::jfloat()>("getLoopStart"), //
		jMethod<::jint()>("getLoopType"), //
		jMethod<::jfloat()>("getPitchcorrection"), //
		jMethod<::com::sun::media::sound::ModelOscillatorStream(::jfloat)>("open"), //
		jMethod<::com::sun::media::sound::AudioFloatInputStream()>("openStream"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelByteBuffer)>("set8BitExtensionBuffer"), //
		jMethod<::jvoid(::jfloat)>("setAttenuation"), //
		jMethod<::jvoid(::jfloat)>("setLoopLength"), //
		jMethod<::jvoid(::jfloat)>("setLoopStart"), //
		jMethod<::jvoid(::jint)>("setLoopType"), //
		jMethod<::jvoid(::jfloat)>("setPitchcorrection"), //
	};

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto get8BitExtensionBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get8BitExtensionBuffer")] != -1);
		return call<R>("get8BitExtensionBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttenuation")] != -1);
		return call<R>("getAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelByteBuffer, typename... Args>
	auto getBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBuffer")] != -1);
		return call<R>("getBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannels")] != -1);
		return call<R>("getChannels", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLoopLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopLength")] != -1);
		return call<R>("getLoopLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getLoopStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopStart")] != -1);
		return call<R>("getLoopStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLoopType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLoopType")] != -1);
		return call<R>("getLoopType", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPitchcorrection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitchcorrection")] != -1);
		return call<R>("getPitchcorrection", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelOscillatorStream, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::AudioFloatInputStream, typename... Args>
	auto openStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openStream")] != -1);
		return call<R>("openStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto set8BitExtensionBuffer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("set8BitExtensionBuffer")] != -1);
		return call<R>("set8BitExtensionBuffer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttenuation")] != -1);
		return call<R>("setAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopLength")] != -1);
		return call<R>("setLoopLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopStart(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopStart")] != -1);
		return call<R>("setLoopStart", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLoopType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLoopType")] != -1);
		return call<R>("setLoopType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitchcorrection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitchcorrection")] != -1);
		return call<R>("setPitchcorrection", std::forward<Args>(args)...);
	}

};

#endif
