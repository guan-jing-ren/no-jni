#ifndef com_sun_media_sound_ModelStandardTransform_HPP
#define com_sun_media_sound_ModelStandardTransform_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelStandardTransform : public jObject<::com::sun::media::sound::ModelStandardTransform, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelStandardTransform";

	constexpr static Enume field_signatures{
		jField<::jboolean>("DIRECTION_MAX2MIN"), //
		jField<::jboolean>("DIRECTION_MIN2MAX"), //
		jField<::jboolean>("POLARITY_BIPOLAR"), //
		jField<::jboolean>("POLARITY_UNIPOLAR"), //
		jField<::jint>("TRANSFORM_ABSOLUTE"), //
		jField<::jint>("TRANSFORM_CONCAVE"), //
		jField<::jint>("TRANSFORM_CONVEX"), //
		jField<::jint>("TRANSFORM_LINEAR"), //
		jField<::jint>("TRANSFORM_SWITCH"), //
	};

	template<typename F = ::jboolean>
	static auto DIRECTION_MAX2MIN() {
		static_assert(field_signatures[jField<F>("DIRECTION_MAX2MIN")] != -1);
		return sat<F>("DIRECTION_MAX2MIN");
	}

	template<typename F = ::jboolean>
	static auto DIRECTION_MIN2MAX() {
		static_assert(field_signatures[jField<F>("DIRECTION_MIN2MAX")] != -1);
		return sat<F>("DIRECTION_MIN2MAX");
	}

	template<typename F = ::jboolean>
	static auto POLARITY_BIPOLAR() {
		static_assert(field_signatures[jField<F>("POLARITY_BIPOLAR")] != -1);
		return sat<F>("POLARITY_BIPOLAR");
	}

	template<typename F = ::jboolean>
	static auto POLARITY_UNIPOLAR() {
		static_assert(field_signatures[jField<F>("POLARITY_UNIPOLAR")] != -1);
		return sat<F>("POLARITY_UNIPOLAR");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_ABSOLUTE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_ABSOLUTE")] != -1);
		return sat<F>("TRANSFORM_ABSOLUTE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_CONCAVE() {
		static_assert(field_signatures[jField<F>("TRANSFORM_CONCAVE")] != -1);
		return sat<F>("TRANSFORM_CONCAVE");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_CONVEX() {
		static_assert(field_signatures[jField<F>("TRANSFORM_CONVEX")] != -1);
		return sat<F>("TRANSFORM_CONVEX");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_LINEAR() {
		static_assert(field_signatures[jField<F>("TRANSFORM_LINEAR")] != -1);
		return sat<F>("TRANSFORM_LINEAR");
	}

	template<typename F = ::jint>
	static auto TRANSFORM_SWITCH() {
		static_assert(field_signatures[jField<F>("TRANSFORM_SWITCH")] != -1);
		return sat<F>("TRANSFORM_SWITCH");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::jboolean)>(), //
		jConstructor<::jvoid(::jboolean, ::jboolean)>(), //
		jConstructor<::jvoid(::jboolean, ::jboolean, ::jint)>(), //
		jMethod<::jboolean()>("getDirection"), //
		jMethod<::jboolean()>("getPolarity"), //
		jMethod<::jint()>("getTransform"), //
		jMethod<::jvoid(::jboolean)>("setDirection"), //
		jMethod<::jvoid(::jboolean)>("setPolarity"), //
		jMethod<::jvoid(::jint)>("setTransform"), //
		jMethod<::jdouble(::jdouble)>("transform"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto getDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirection")] != -1);
		return call<R>("getDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getPolarity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolarity")] != -1);
		return call<R>("getPolarity", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDirection(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDirection")] != -1);
		return call<R>("setDirection", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPolarity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPolarity")] != -1);
		return call<R>("setPolarity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble, typename... Args>
	auto transform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("transform")] != -1);
		return call<R>("transform", std::forward<Args>(args)...);
	}

};

#endif
