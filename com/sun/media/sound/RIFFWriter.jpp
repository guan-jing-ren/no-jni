#ifndef com_sun_media_sound_RIFFWriter_HPP
#define com_sun_media_sound_RIFFWriter_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::RIFFWriter : public jObject<::com::sun::media::sound::RIFFWriter, ::java::io::OutputStream> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "RIFFWriter";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::File, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::io::OutputStream, ::java::lang::String)>(), //
		jConstructor<::jvoid(::java::lang::String, ::java::lang::String)>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jlong()>("getFilePointer"), //
		jMethod<::jboolean()>("getWriteOverride"), //
		jMethod<::jvoid(::jlong)>("seek"), //
		jMethod<::jvoid(::jboolean)>("setWriteOverride"), //
		jMethod<::jvoid(::jint)>("write"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("write"), //
		jMethod<::jvoid(::jint)>("writeByte"), //
		jMethod<::com::sun::media::sound::RIFFWriter(::java::lang::String)>("writeChunk"), //
		jMethod<::jvoid(::jint)>("writeInt"), //
		jMethod<::com::sun::media::sound::RIFFWriter(::java::lang::String)>("writeList"), //
		jMethod<::jvoid(::jlong)>("writeLong"), //
		jMethod<::jvoid(::jshort)>("writeShort"), //
		jMethod<::jvoid(::java::lang::String)>("writeString"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("writeString"), //
		jMethod<::jvoid(::jint)>("writeUnsignedByte"), //
		jMethod<::jvoid(::jlong)>("writeUnsignedInt"), //
		jMethod<::jvoid(::jint)>("writeUnsignedShort"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFilePointer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilePointer")] != -1);
		return call<R>("getFilePointer", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getWriteOverride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getWriteOverride")] != -1);
		return call<R>("getWriteOverride", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto seek(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("seek")] != -1);
		return call<R>("seek", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setWriteOverride(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setWriteOverride")] != -1);
		return call<R>("setWriteOverride", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto write(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("write")] != -1);
		return call<R>("write", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeByte")] != -1);
		return call<R>("writeByte", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::RIFFWriter, typename... Args>
	auto writeChunk(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeChunk")] != -1);
		return call<R>("writeChunk", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeInt")] != -1);
		return call<R>("writeInt", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::RIFFWriter, typename... Args>
	auto writeList(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeList")] != -1);
		return call<R>("writeList", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeLong")] != -1);
		return call<R>("writeLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeShort")] != -1);
		return call<R>("writeShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeString")] != -1);
		return call<R>("writeString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUnsignedByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUnsignedByte")] != -1);
		return call<R>("writeUnsignedByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUnsignedInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUnsignedInt")] != -1);
		return call<R>("writeUnsignedInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeUnsignedShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeUnsignedShort")] != -1);
		return call<R>("writeUnsignedShort", std::forward<Args>(args)...);
	}

};

#endif
