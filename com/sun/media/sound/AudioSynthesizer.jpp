#ifndef com_sun_media_sound_AudioSynthesizer_HPP
#define com_sun_media_sound_AudioSynthesizer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::AudioSynthesizer : public jObject<::com::sun::media::sound::AudioSynthesizer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "AudioSynthesizer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::com::sun::media::sound::AudioSynthesizerPropertyInfo *(::java::util::Map)>("getPropertyInfo"), //
		jMethod<::jvoid(::javax::sound::sampled::SourceDataLine, ::java::util::Map)>("open"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::javax::sound::sampled::AudioFormat, ::java::util::Map)>("openStream"), //
	};

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::AudioSynthesizerPropertyInfo *, typename... Args>
	auto getPropertyInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPropertyInfo")] != -1);
		return call<R>("getPropertyInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioInputStream, typename... Args>
	auto openStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openStream")] != -1);
		return call<R>("openStream", std::forward<Args>(args)...);
	}

};

#endif
