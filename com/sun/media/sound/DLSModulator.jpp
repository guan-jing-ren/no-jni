#ifndef com_sun_media_sound_DLSModulator_HPP
#define com_sun_media_sound_DLSModulator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSModulator : public jObject<::com::sun::media::sound::DLSModulator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSModulator";

	constexpr static Enume field_signatures{
		jField<::jint>("CONN_DST_CENTER"), //
		jField<::jint>("CONN_DST_CHORUS"), //
		jField<::jint>("CONN_DST_EG1_ATTACKTIME"), //
		jField<::jint>("CONN_DST_EG1_DECAYTIME"), //
		jField<::jint>("CONN_DST_EG1_DELAYTIME"), //
		jField<::jint>("CONN_DST_EG1_HOLDTIME"), //
		jField<::jint>("CONN_DST_EG1_RELEASETIME"), //
		jField<::jint>("CONN_DST_EG1_SHUTDOWNTIME"), //
		jField<::jint>("CONN_DST_EG1_SUSTAINLEVEL"), //
		jField<::jint>("CONN_DST_EG2_ATTACKTIME"), //
		jField<::jint>("CONN_DST_EG2_DECAYTIME"), //
		jField<::jint>("CONN_DST_EG2_DELAYTIME"), //
		jField<::jint>("CONN_DST_EG2_HOLDTIME"), //
		jField<::jint>("CONN_DST_EG2_RELEASETIME"), //
		jField<::jint>("CONN_DST_EG2_SUSTAINLEVEL"), //
		jField<::jint>("CONN_DST_FILTER_CUTOFF"), //
		jField<::jint>("CONN_DST_FILTER_Q"), //
		jField<::jint>("CONN_DST_GAIN"), //
		jField<::jint>("CONN_DST_KEYNUMBER"), //
		jField<::jint>("CONN_DST_LEFT"), //
		jField<::jint>("CONN_DST_LEFTREAR"), //
		jField<::jint>("CONN_DST_LFE_CHANNEL"), //
		jField<::jint>("CONN_DST_LFO_FREQUENCY"), //
		jField<::jint>("CONN_DST_LFO_STARTDELAY"), //
		jField<::jint>("CONN_DST_NONE"), //
		jField<::jint>("CONN_DST_PAN"), //
		jField<::jint>("CONN_DST_PITCH"), //
		jField<::jint>("CONN_DST_REVERB"), //
		jField<::jint>("CONN_DST_RIGHT"), //
		jField<::jint>("CONN_DST_RIGHTREAR"), //
		jField<::jint>("CONN_DST_VIB_FREQUENCY"), //
		jField<::jint>("CONN_DST_VIB_STARTDELAY"), //
		jField<::jint>("CONN_SRC_CC1"), //
		jField<::jint>("CONN_SRC_CC10"), //
		jField<::jint>("CONN_SRC_CC11"), //
		jField<::jint>("CONN_SRC_CC7"), //
		jField<::jint>("CONN_SRC_CC91"), //
		jField<::jint>("CONN_SRC_CC93"), //
		jField<::jint>("CONN_SRC_CHANNELPRESSURE"), //
		jField<::jint>("CONN_SRC_EG1"), //
		jField<::jint>("CONN_SRC_EG2"), //
		jField<::jint>("CONN_SRC_KEYNUMBER"), //
		jField<::jint>("CONN_SRC_KEYONVELOCITY"), //
		jField<::jint>("CONN_SRC_LFO"), //
		jField<::jint>("CONN_SRC_MONOPRESSURE"), //
		jField<::jint>("CONN_SRC_NONE"), //
		jField<::jint>("CONN_SRC_PITCHWHEEL"), //
		jField<::jint>("CONN_SRC_POLYPRESSURE"), //
		jField<::jint>("CONN_SRC_RPN0"), //
		jField<::jint>("CONN_SRC_RPN1"), //
		jField<::jint>("CONN_SRC_RPN2"), //
		jField<::jint>("CONN_SRC_VIBRATO"), //
		jField<::jint>("CONN_TRN_CONCAVE"), //
		jField<::jint>("CONN_TRN_CONVEX"), //
		jField<::jint>("CONN_TRN_NONE"), //
		jField<::jint>("CONN_TRN_SWITCH"), //
		jField<::jint>("DST_FORMAT_CB"), //
		jField<::jint>("DST_FORMAT_CENT"), //
		jField<::jint>("DST_FORMAT_PERCENT"), //
		jField<::jint>("DST_FORMAT_TIMECENT"), //
	};

	template<typename F = ::jint>
	static auto CONN_DST_CENTER() {
		static_assert(field_signatures[jField<F>("CONN_DST_CENTER")] != -1);
		return sat<F>("CONN_DST_CENTER");
	}

	template<typename F = ::jint>
	static auto CONN_DST_CHORUS() {
		static_assert(field_signatures[jField<F>("CONN_DST_CHORUS")] != -1);
		return sat<F>("CONN_DST_CHORUS");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_ATTACKTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_ATTACKTIME")] != -1);
		return sat<F>("CONN_DST_EG1_ATTACKTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_DECAYTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_DECAYTIME")] != -1);
		return sat<F>("CONN_DST_EG1_DECAYTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_DELAYTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_DELAYTIME")] != -1);
		return sat<F>("CONN_DST_EG1_DELAYTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_HOLDTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_HOLDTIME")] != -1);
		return sat<F>("CONN_DST_EG1_HOLDTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_RELEASETIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_RELEASETIME")] != -1);
		return sat<F>("CONN_DST_EG1_RELEASETIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_SHUTDOWNTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_SHUTDOWNTIME")] != -1);
		return sat<F>("CONN_DST_EG1_SHUTDOWNTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG1_SUSTAINLEVEL() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG1_SUSTAINLEVEL")] != -1);
		return sat<F>("CONN_DST_EG1_SUSTAINLEVEL");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_ATTACKTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_ATTACKTIME")] != -1);
		return sat<F>("CONN_DST_EG2_ATTACKTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_DECAYTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_DECAYTIME")] != -1);
		return sat<F>("CONN_DST_EG2_DECAYTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_DELAYTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_DELAYTIME")] != -1);
		return sat<F>("CONN_DST_EG2_DELAYTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_HOLDTIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_HOLDTIME")] != -1);
		return sat<F>("CONN_DST_EG2_HOLDTIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_RELEASETIME() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_RELEASETIME")] != -1);
		return sat<F>("CONN_DST_EG2_RELEASETIME");
	}

	template<typename F = ::jint>
	static auto CONN_DST_EG2_SUSTAINLEVEL() {
		static_assert(field_signatures[jField<F>("CONN_DST_EG2_SUSTAINLEVEL")] != -1);
		return sat<F>("CONN_DST_EG2_SUSTAINLEVEL");
	}

	template<typename F = ::jint>
	static auto CONN_DST_FILTER_CUTOFF() {
		static_assert(field_signatures[jField<F>("CONN_DST_FILTER_CUTOFF")] != -1);
		return sat<F>("CONN_DST_FILTER_CUTOFF");
	}

	template<typename F = ::jint>
	static auto CONN_DST_FILTER_Q() {
		static_assert(field_signatures[jField<F>("CONN_DST_FILTER_Q")] != -1);
		return sat<F>("CONN_DST_FILTER_Q");
	}

	template<typename F = ::jint>
	static auto CONN_DST_GAIN() {
		static_assert(field_signatures[jField<F>("CONN_DST_GAIN")] != -1);
		return sat<F>("CONN_DST_GAIN");
	}

	template<typename F = ::jint>
	static auto CONN_DST_KEYNUMBER() {
		static_assert(field_signatures[jField<F>("CONN_DST_KEYNUMBER")] != -1);
		return sat<F>("CONN_DST_KEYNUMBER");
	}

	template<typename F = ::jint>
	static auto CONN_DST_LEFT() {
		static_assert(field_signatures[jField<F>("CONN_DST_LEFT")] != -1);
		return sat<F>("CONN_DST_LEFT");
	}

	template<typename F = ::jint>
	static auto CONN_DST_LEFTREAR() {
		static_assert(field_signatures[jField<F>("CONN_DST_LEFTREAR")] != -1);
		return sat<F>("CONN_DST_LEFTREAR");
	}

	template<typename F = ::jint>
	static auto CONN_DST_LFE_CHANNEL() {
		static_assert(field_signatures[jField<F>("CONN_DST_LFE_CHANNEL")] != -1);
		return sat<F>("CONN_DST_LFE_CHANNEL");
	}

	template<typename F = ::jint>
	static auto CONN_DST_LFO_FREQUENCY() {
		static_assert(field_signatures[jField<F>("CONN_DST_LFO_FREQUENCY")] != -1);
		return sat<F>("CONN_DST_LFO_FREQUENCY");
	}

	template<typename F = ::jint>
	static auto CONN_DST_LFO_STARTDELAY() {
		static_assert(field_signatures[jField<F>("CONN_DST_LFO_STARTDELAY")] != -1);
		return sat<F>("CONN_DST_LFO_STARTDELAY");
	}

	template<typename F = ::jint>
	static auto CONN_DST_NONE() {
		static_assert(field_signatures[jField<F>("CONN_DST_NONE")] != -1);
		return sat<F>("CONN_DST_NONE");
	}

	template<typename F = ::jint>
	static auto CONN_DST_PAN() {
		static_assert(field_signatures[jField<F>("CONN_DST_PAN")] != -1);
		return sat<F>("CONN_DST_PAN");
	}

	template<typename F = ::jint>
	static auto CONN_DST_PITCH() {
		static_assert(field_signatures[jField<F>("CONN_DST_PITCH")] != -1);
		return sat<F>("CONN_DST_PITCH");
	}

	template<typename F = ::jint>
	static auto CONN_DST_REVERB() {
		static_assert(field_signatures[jField<F>("CONN_DST_REVERB")] != -1);
		return sat<F>("CONN_DST_REVERB");
	}

	template<typename F = ::jint>
	static auto CONN_DST_RIGHT() {
		static_assert(field_signatures[jField<F>("CONN_DST_RIGHT")] != -1);
		return sat<F>("CONN_DST_RIGHT");
	}

	template<typename F = ::jint>
	static auto CONN_DST_RIGHTREAR() {
		static_assert(field_signatures[jField<F>("CONN_DST_RIGHTREAR")] != -1);
		return sat<F>("CONN_DST_RIGHTREAR");
	}

	template<typename F = ::jint>
	static auto CONN_DST_VIB_FREQUENCY() {
		static_assert(field_signatures[jField<F>("CONN_DST_VIB_FREQUENCY")] != -1);
		return sat<F>("CONN_DST_VIB_FREQUENCY");
	}

	template<typename F = ::jint>
	static auto CONN_DST_VIB_STARTDELAY() {
		static_assert(field_signatures[jField<F>("CONN_DST_VIB_STARTDELAY")] != -1);
		return sat<F>("CONN_DST_VIB_STARTDELAY");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC1() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC1")] != -1);
		return sat<F>("CONN_SRC_CC1");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC10() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC10")] != -1);
		return sat<F>("CONN_SRC_CC10");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC11() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC11")] != -1);
		return sat<F>("CONN_SRC_CC11");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC7() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC7")] != -1);
		return sat<F>("CONN_SRC_CC7");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC91() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC91")] != -1);
		return sat<F>("CONN_SRC_CC91");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CC93() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CC93")] != -1);
		return sat<F>("CONN_SRC_CC93");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_CHANNELPRESSURE() {
		static_assert(field_signatures[jField<F>("CONN_SRC_CHANNELPRESSURE")] != -1);
		return sat<F>("CONN_SRC_CHANNELPRESSURE");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_EG1() {
		static_assert(field_signatures[jField<F>("CONN_SRC_EG1")] != -1);
		return sat<F>("CONN_SRC_EG1");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_EG2() {
		static_assert(field_signatures[jField<F>("CONN_SRC_EG2")] != -1);
		return sat<F>("CONN_SRC_EG2");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_KEYNUMBER() {
		static_assert(field_signatures[jField<F>("CONN_SRC_KEYNUMBER")] != -1);
		return sat<F>("CONN_SRC_KEYNUMBER");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_KEYONVELOCITY() {
		static_assert(field_signatures[jField<F>("CONN_SRC_KEYONVELOCITY")] != -1);
		return sat<F>("CONN_SRC_KEYONVELOCITY");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_LFO() {
		static_assert(field_signatures[jField<F>("CONN_SRC_LFO")] != -1);
		return sat<F>("CONN_SRC_LFO");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_MONOPRESSURE() {
		static_assert(field_signatures[jField<F>("CONN_SRC_MONOPRESSURE")] != -1);
		return sat<F>("CONN_SRC_MONOPRESSURE");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_NONE() {
		static_assert(field_signatures[jField<F>("CONN_SRC_NONE")] != -1);
		return sat<F>("CONN_SRC_NONE");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_PITCHWHEEL() {
		static_assert(field_signatures[jField<F>("CONN_SRC_PITCHWHEEL")] != -1);
		return sat<F>("CONN_SRC_PITCHWHEEL");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_POLYPRESSURE() {
		static_assert(field_signatures[jField<F>("CONN_SRC_POLYPRESSURE")] != -1);
		return sat<F>("CONN_SRC_POLYPRESSURE");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_RPN0() {
		static_assert(field_signatures[jField<F>("CONN_SRC_RPN0")] != -1);
		return sat<F>("CONN_SRC_RPN0");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_RPN1() {
		static_assert(field_signatures[jField<F>("CONN_SRC_RPN1")] != -1);
		return sat<F>("CONN_SRC_RPN1");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_RPN2() {
		static_assert(field_signatures[jField<F>("CONN_SRC_RPN2")] != -1);
		return sat<F>("CONN_SRC_RPN2");
	}

	template<typename F = ::jint>
	static auto CONN_SRC_VIBRATO() {
		static_assert(field_signatures[jField<F>("CONN_SRC_VIBRATO")] != -1);
		return sat<F>("CONN_SRC_VIBRATO");
	}

	template<typename F = ::jint>
	static auto CONN_TRN_CONCAVE() {
		static_assert(field_signatures[jField<F>("CONN_TRN_CONCAVE")] != -1);
		return sat<F>("CONN_TRN_CONCAVE");
	}

	template<typename F = ::jint>
	static auto CONN_TRN_CONVEX() {
		static_assert(field_signatures[jField<F>("CONN_TRN_CONVEX")] != -1);
		return sat<F>("CONN_TRN_CONVEX");
	}

	template<typename F = ::jint>
	static auto CONN_TRN_NONE() {
		static_assert(field_signatures[jField<F>("CONN_TRN_NONE")] != -1);
		return sat<F>("CONN_TRN_NONE");
	}

	template<typename F = ::jint>
	static auto CONN_TRN_SWITCH() {
		static_assert(field_signatures[jField<F>("CONN_TRN_SWITCH")] != -1);
		return sat<F>("CONN_TRN_SWITCH");
	}

	template<typename F = ::jint>
	static auto DST_FORMAT_CB() {
		static_assert(field_signatures[jField<F>("DST_FORMAT_CB")] != -1);
		return sat<F>("DST_FORMAT_CB");
	}

	template<typename F = ::jint>
	static auto DST_FORMAT_CENT() {
		static_assert(field_signatures[jField<F>("DST_FORMAT_CENT")] != -1);
		return sat<F>("DST_FORMAT_CENT");
	}

	template<typename F = ::jint>
	static auto DST_FORMAT_PERCENT() {
		static_assert(field_signatures[jField<F>("DST_FORMAT_PERCENT")] != -1);
		return sat<F>("DST_FORMAT_PERCENT");
	}

	template<typename F = ::jint>
	static auto DST_FORMAT_TIMECENT() {
		static_assert(field_signatures[jField<F>("DST_FORMAT_TIMECENT")] != -1);
		return sat<F>("DST_FORMAT_TIMECENT");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getControl"), //
		jMethod<::jint()>("getDestination"), //
		jMethod<::jint(::jint)>("getDestinationFormat"), //
		jMethod<::java::lang::String(::jint)>("getDestinationName"), //
		jMethod<::jint()>("getScale"), //
		jMethod<::jint()>("getSource"), //
		jMethod<::java::lang::String(::jint)>("getSourceName"), //
		jMethod<::jint()>("getTransform"), //
		jMethod<::jint()>("getVersion"), //
		jMethod<::jvoid(::jint)>("setControl"), //
		jMethod<::jvoid(::jint)>("setDestination"), //
		jMethod<::jvoid(::jint)>("setScale"), //
		jMethod<::jvoid(::jint)>("setSource"), //
		jMethod<::jvoid(::jint)>("setTransform"), //
		jMethod<::jvoid(::jint)>("setVersion"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestination")] != -1);
		return call<R>("getDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	static auto getDestinationFormat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestinationFormat")] != -1);
		return scall<R>("getDestinationFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getDestinationName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDestinationName")] != -1);
		return scall<R>("getDestinationName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getScale")] != -1);
		return call<R>("getScale", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSource")] != -1);
		return call<R>("getSource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	static auto getSourceName(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceName")] != -1);
		return scall<R>("getSourceName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransform")] != -1);
		return call<R>("getTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setControl")] != -1);
		return call<R>("setControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDestination(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDestination")] != -1);
		return call<R>("setDestination", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setScale(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setScale")] != -1);
		return call<R>("setScale", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSource")] != -1);
		return call<R>("setSource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTransform(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTransform")] != -1);
		return call<R>("setTransform", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVersion")] != -1);
		return call<R>("setVersion", std::forward<Args>(args)...);
	}

};

#endif
