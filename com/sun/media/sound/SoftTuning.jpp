#ifndef com_sun_media_sound_SoftTuning_HPP
#define com_sun_media_sound_SoftTuning_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftTuning : public jObject<::com::sun::media::sound::SoftTuning, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftTuning";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::javax::sound::midi::Patch)>(), //
		jConstructor<::jvoid(::javax::sound::midi::Patch, ::jbyte *)>(), //
		jConstructor<::jvoid(::jbyte *)>(), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::sound::midi::Patch()>("getPatch"), //
		jMethod<::jdouble *()>("getTuning"), //
		jMethod<::jdouble(::jint)>("getTuning"), //
		jMethod<::jvoid(::jbyte *)>("load"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Patch, typename... Args>
	auto getPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPatch")] != -1);
		return call<R>("getPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	auto getTuning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTuning")] != -1);
		return call<R>("getTuning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto load(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("load")] != -1);
		return call<R>("load", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

};

#endif
