#ifndef com_sun_media_sound_DLSRegion_HPP
#define com_sun_media_sound_DLSRegion_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSRegion : public jObject<::com::sun::media::sound::DLSRegion, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSRegion";

	constexpr static Enume field_signatures{
		jField<::jint>("OPTION_SELFNONEXCLUSIVE"), //
	};

	template<typename F = ::jint>
	static auto OPTION_SELFNONEXCLUSIVE() {
		static_assert(field_signatures[jField<F>("OPTION_SELFNONEXCLUSIVE")] != -1);
		return sat<F>("OPTION_SELFNONEXCLUSIVE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jlong()>("getChannel"), //
		jMethod<::jint()>("getExclusiveClass"), //
		jMethod<::jint()>("getFusoptions"), //
		jMethod<::jint()>("getKeyfrom"), //
		jMethod<::jint()>("getKeyto"), //
		jMethod<::java::util::List()>("getModulators"), //
		jMethod<::jint()>("getOptions"), //
		jMethod<::jint()>("getPhasegroup"), //
		jMethod<::com::sun::media::sound::DLSSample()>("getSample"), //
		jMethod<::com::sun::media::sound::DLSSampleOptions()>("getSampleoptions"), //
		jMethod<::jint()>("getVelfrom"), //
		jMethod<::jint()>("getVelto"), //
		jMethod<::jvoid(::jlong)>("setChannel"), //
		jMethod<::jvoid(::jint)>("setExclusiveClass"), //
		jMethod<::jvoid(::jint)>("setFusoptions"), //
		jMethod<::jvoid(::jint)>("setKeyfrom"), //
		jMethod<::jvoid(::jint)>("setKeyto"), //
		jMethod<::jvoid(::java::util::List)>("setModulators"), //
		jMethod<::jvoid(::jint)>("setOptions"), //
		jMethod<::jvoid(::jint)>("setPhasegroup"), //
		jMethod<::jvoid(::com::sun::media::sound::DLSSample)>("setSample"), //
		jMethod<::jvoid(::com::sun::media::sound::DLSSampleOptions)>("setSampleoptions"), //
		jMethod<::jvoid(::jint)>("setVelfrom"), //
		jMethod<::jvoid(::jint)>("setVelto"), //
	};

	template<typename R = ::jlong, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getExclusiveClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getExclusiveClass")] != -1);
		return call<R>("getExclusiveClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFusoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFusoptions")] != -1);
		return call<R>("getFusoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyfrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyfrom")] != -1);
		return call<R>("getKeyfrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getKeyto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getKeyto")] != -1);
		return call<R>("getKeyto", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getModulators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getModulators")] != -1);
		return call<R>("getModulators", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOptions")] != -1);
		return call<R>("getOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPhasegroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPhasegroup")] != -1);
		return call<R>("getPhasegroup", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSSample, typename... Args>
	auto getSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSample")] != -1);
		return call<R>("getSample", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::DLSSampleOptions, typename... Args>
	auto getSampleoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleoptions")] != -1);
		return call<R>("getSampleoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVelfrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVelfrom")] != -1);
		return call<R>("getVelfrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVelto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVelto")] != -1);
		return call<R>("getVelto", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChannel")] != -1);
		return call<R>("setChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setExclusiveClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setExclusiveClass")] != -1);
		return call<R>("setExclusiveClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFusoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFusoptions")] != -1);
		return call<R>("setFusoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyfrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyfrom")] != -1);
		return call<R>("setKeyfrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setKeyto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setKeyto")] != -1);
		return call<R>("setKeyto", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setModulators(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setModulators")] != -1);
		return call<R>("setModulators", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOptions")] != -1);
		return call<R>("setOptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPhasegroup(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPhasegroup")] != -1);
		return call<R>("setPhasegroup", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSample(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSample")] != -1);
		return call<R>("setSample", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleoptions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleoptions")] != -1);
		return call<R>("setSampleoptions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVelfrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVelfrom")] != -1);
		return call<R>("setVelfrom", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVelto(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVelto")] != -1);
		return call<R>("setVelto", std::forward<Args>(args)...);
	}

};

#endif
