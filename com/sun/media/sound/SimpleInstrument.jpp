#ifndef com_sun_media_sound_SimpleInstrument_HPP
#define com_sun_media_sound_SimpleInstrument_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SimpleInstrument : public jObject<::com::sun::media::sound::SimpleInstrument, ::com::sun::media::sound::ModelInstrument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SimpleInstrument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::com::sun::media::sound::ModelInstrument)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelInstrument, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelInstrument, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelInstrument, ::jint, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer, ::jint, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer *)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer *, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer *, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelPerformer *, ::jint, ::jint, ::jint, ::jint, ::jint)>("add"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::media::sound::ModelPatch()>("getPatch"), //
		jMethod<::javax::sound::midi::Patch()>("getPatch"), //
		jMethod<::com::sun::media::sound::ModelPerformer *()>("getPerformers"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::javax::sound::midi::Patch)>("setPatch"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto add(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("add")] != -1);
		return call<R>("add", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPatch, typename... Args>
	auto getPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPatch")] != -1);
		return call<R>("getPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPerformer *, typename... Args>
	auto getPerformers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPerformers")] != -1);
		return call<R>("getPerformers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPatch")] != -1);
		return call<R>("setPatch", std::forward<Args>(args)...);
	}

};

#endif
