#ifndef com_sun_media_sound_JavaSoundAudioClip_HPP
#define com_sun_media_sound_JavaSoundAudioClip_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::JavaSoundAudioClip : public jObject<::com::sun::media::sound::JavaSoundAudioClip, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "JavaSoundAudioClip";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jMethod<::jvoid()>("loop"), //
		jMethod<::jvoid(::javax::sound::midi::MetaMessage)>("meta"), //
		jMethod<::jvoid()>("play"), //
		jMethod<::jvoid()>("stop"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::javax::sound::sampled::LineEvent)>("update"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto loop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loop")] != -1);
		return call<R>("loop", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto meta(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("meta")] != -1);
		return call<R>("meta", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto play(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("play")] != -1);
		return call<R>("play", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto update(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("update")] != -1);
		return call<R>("update", std::forward<Args>(args)...);
	}

};

#endif
