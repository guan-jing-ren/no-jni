#ifndef com_sun_media_sound_DLSInfo_HPP
#define com_sun_media_sound_DLSInfo_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::DLSInfo : public jObject<::com::sun::media::sound::DLSInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "DLSInfo";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("archival_location"), //
		jField<::java::lang::String>("artist"), //
		jField<::java::lang::String>("comments"), //
		jField<::java::lang::String>("commissioned"), //
		jField<::java::lang::String>("copyright"), //
		jField<::java::lang::String>("creationDate"), //
		jField<::java::lang::String>("engineers"), //
		jField<::java::lang::String>("genre"), //
		jField<::java::lang::String>("keywords"), //
		jField<::java::lang::String>("medium"), //
		jField<::java::lang::String>("name"), //
		jField<::java::lang::String>("product"), //
		jField<::java::lang::String>("source"), //
		jField<::java::lang::String>("source_form"), //
		jField<::java::lang::String>("subject"), //
		jField<::java::lang::String>("technician"), //
		jField<::java::lang::String>("tools"), //
	};

	template<typename F = ::java::lang::String>
	auto archival_location() const {
		static_assert(field_signatures[jField<F>("archival_location")] != -1);
		return at<F>("archival_location");
	}

	template<typename F = ::java::lang::String>
	auto artist() const {
		static_assert(field_signatures[jField<F>("artist")] != -1);
		return at<F>("artist");
	}

	template<typename F = ::java::lang::String>
	auto comments() const {
		static_assert(field_signatures[jField<F>("comments")] != -1);
		return at<F>("comments");
	}

	template<typename F = ::java::lang::String>
	auto commissioned() const {
		static_assert(field_signatures[jField<F>("commissioned")] != -1);
		return at<F>("commissioned");
	}

	template<typename F = ::java::lang::String>
	auto copyright() const {
		static_assert(field_signatures[jField<F>("copyright")] != -1);
		return at<F>("copyright");
	}

	template<typename F = ::java::lang::String>
	auto creationDate() const {
		static_assert(field_signatures[jField<F>("creationDate")] != -1);
		return at<F>("creationDate");
	}

	template<typename F = ::java::lang::String>
	auto engineers() const {
		static_assert(field_signatures[jField<F>("engineers")] != -1);
		return at<F>("engineers");
	}

	template<typename F = ::java::lang::String>
	auto genre() const {
		static_assert(field_signatures[jField<F>("genre")] != -1);
		return at<F>("genre");
	}

	template<typename F = ::java::lang::String>
	auto keywords() const {
		static_assert(field_signatures[jField<F>("keywords")] != -1);
		return at<F>("keywords");
	}

	template<typename F = ::java::lang::String>
	auto medium() const {
		static_assert(field_signatures[jField<F>("medium")] != -1);
		return at<F>("medium");
	}

	template<typename F = ::java::lang::String>
	auto name() const {
		static_assert(field_signatures[jField<F>("name")] != -1);
		return at<F>("name");
	}

	template<typename F = ::java::lang::String>
	auto product() const {
		static_assert(field_signatures[jField<F>("product")] != -1);
		return at<F>("product");
	}

	template<typename F = ::java::lang::String>
	auto source() const {
		static_assert(field_signatures[jField<F>("source")] != -1);
		return at<F>("source");
	}

	template<typename F = ::java::lang::String>
	auto source_form() const {
		static_assert(field_signatures[jField<F>("source_form")] != -1);
		return at<F>("source_form");
	}

	template<typename F = ::java::lang::String>
	auto subject() const {
		static_assert(field_signatures[jField<F>("subject")] != -1);
		return at<F>("subject");
	}

	template<typename F = ::java::lang::String>
	auto technician() const {
		static_assert(field_signatures[jField<F>("technician")] != -1);
		return at<F>("technician");
	}

	template<typename F = ::java::lang::String>
	auto tools() const {
		static_assert(field_signatures[jField<F>("tools")] != -1);
		return at<F>("tools");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
