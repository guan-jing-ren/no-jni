#ifndef com_sun_media_sound_ReferenceCountingDevice_HPP
#define com_sun_media_sound_ReferenceCountingDevice_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ReferenceCountingDevice : public jObject<::com::sun::media::sound::ReferenceCountingDevice, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ReferenceCountingDevice";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::javax::sound::midi::Receiver()>("getReceiverReferenceCounting"), //
		jMethod<::javax::sound::midi::Transmitter()>("getTransmitterReferenceCounting"), //
	};

	template<typename R = ::javax::sound::midi::Receiver, typename... Args>
	auto getReceiverReferenceCounting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getReceiverReferenceCounting")] != -1);
		return call<R>("getReceiverReferenceCounting", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Transmitter, typename... Args>
	auto getTransmitterReferenceCounting(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTransmitterReferenceCounting")] != -1);
		return call<R>("getTransmitterReferenceCounting", std::forward<Args>(args)...);
	}

};

#endif
