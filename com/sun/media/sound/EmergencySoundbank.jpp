#ifndef com_sun_media_sound_EmergencySoundbank_HPP
#define com_sun_media_sound_EmergencySoundbank_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::EmergencySoundbank : public jObject<::com::sun::media::sound::EmergencySoundbank, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "EmergencySoundbank";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::jdouble *, ::jdouble, ::jdouble, ::jdouble)>("complexGaussianDist"), //
		jMethod<::com::sun::media::sound::SF2Soundbank()>("createSoundbank"), //
		jMethod<::jvoid(::jdouble *, ::jint)>("fadeUp"), //
		jMethod<::jvoid(::jfloat *, ::jint)>("fadeUp"), //
		jMethod<::jvoid(::jdouble *)>("fft"), //
		jMethod<::jvoid(::jdouble *)>("ifft"), //
		jMethod<::jdouble *(::jdouble *)>("imgPart"), //
		jMethod<::jdouble *(::jdouble *, ::jint)>("loopExtend"), //
		jMethod<::jfloat *(::jfloat *, ::jint)>("loopExtend"), //
		jMethod<::com::sun::media::sound::SF2Instrument(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::javax::sound::midi::Patch, ::com::sun::media::sound::SF2Layer *)>("newInstrument"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::com::sun::media::sound::SF2Sample)>("newLayer"), //
		jMethod<::com::sun::media::sound::SF2Sample(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::jdouble *)>("newSimpleDrumSample"), //
		jMethod<::com::sun::media::sound::SF2Sample(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::jdouble *, ::jdouble)>("newSimpleFFTSample"), //
		jMethod<::com::sun::media::sound::SF2Sample(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::jdouble *, ::jdouble, ::jint)>("newSimpleFFTSample"), //
		jMethod<::com::sun::media::sound::SF2Sample(::com::sun::media::sound::SF2Soundbank, ::java::lang::String, ::jdouble *, ::jdouble, ::jdouble)>("newSimpleFFTSample_dist"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_bass1"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_bass2"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_bass_drum"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_bassoon"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_bell"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_brass_section"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_ch_organ"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_choir"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_clarinet"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_closed_hihat"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_crash_cymbal"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_epiano1"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_epiano2"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_flute"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_gpiano"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_gpiano2"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_guitar1"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_guitar_dist"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_guitar_pick"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_horn"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_melodic_toms"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_oboe"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_open_hihat"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_orchhit"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_organ"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_piano1"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_piano_hammer"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_reverse_cymbal"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_sax"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_side_stick"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_snare_drum"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_solostring"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_string2"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_synthbass"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_timpani"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_tom"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_trombone"), //
		jMethod<::com::sun::media::sound::SF2Layer(::com::sun::media::sound::SF2Soundbank)>("new_trumpet"), //
		jMethod<::jvoid(::jdouble *, ::jdouble)>("normalize"), //
		jMethod<::jvoid(::jfloat *, ::jdouble)>("normalize"), //
		jMethod<::jvoid(::jdouble *)>("randomPhase"), //
		jMethod<::jvoid(::jdouble *, ::java::util::Random)>("randomPhase"), //
		jMethod<::jdouble *(::jdouble *)>("realPart"), //
		jMethod<::jbyte *(::jfloat *, ::javax::sound::sampled::AudioFormat)>("toBytes"), //
		jMethod<::jfloat *(::jdouble *)>("toFloat"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto complexGaussianDist(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("complexGaussianDist")] != -1);
		return scall<R>("complexGaussianDist", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Soundbank, typename... Args>
	static auto createSoundbank(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createSoundbank")] != -1);
		return scall<R>("createSoundbank", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto fadeUp(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fadeUp")] != -1);
		return scall<R>("fadeUp", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto fft(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("fft")] != -1);
		return scall<R>("fft", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto ifft(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ifft")] != -1);
		return scall<R>("ifft", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	static auto imgPart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("imgPart")] != -1);
		return scall<R>("imgPart", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	static auto loopExtend(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("loopExtend")] != -1);
		return scall<R>("loopExtend", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Instrument, typename... Args>
	static auto newInstrument(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newInstrument")] != -1);
		return scall<R>("newInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto newLayer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newLayer")] != -1);
		return scall<R>("newLayer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Sample, typename... Args>
	static auto newSimpleDrumSample(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSimpleDrumSample")] != -1);
		return scall<R>("newSimpleDrumSample", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Sample, typename... Args>
	static auto newSimpleFFTSample(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSimpleFFTSample")] != -1);
		return scall<R>("newSimpleFFTSample", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Sample, typename... Args>
	static auto newSimpleFFTSample_dist(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("newSimpleFFTSample_dist")] != -1);
		return scall<R>("newSimpleFFTSample_dist", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_bass1(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_bass1")] != -1);
		return scall<R>("new_bass1", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_bass2(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_bass2")] != -1);
		return scall<R>("new_bass2", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_bass_drum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_bass_drum")] != -1);
		return scall<R>("new_bass_drum", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_bassoon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_bassoon")] != -1);
		return scall<R>("new_bassoon", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_bell(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_bell")] != -1);
		return scall<R>("new_bell", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_brass_section(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_brass_section")] != -1);
		return scall<R>("new_brass_section", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_ch_organ(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_ch_organ")] != -1);
		return scall<R>("new_ch_organ", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_choir(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_choir")] != -1);
		return scall<R>("new_choir", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_clarinet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_clarinet")] != -1);
		return scall<R>("new_clarinet", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_closed_hihat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_closed_hihat")] != -1);
		return scall<R>("new_closed_hihat", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_crash_cymbal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_crash_cymbal")] != -1);
		return scall<R>("new_crash_cymbal", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_epiano1(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_epiano1")] != -1);
		return scall<R>("new_epiano1", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_epiano2(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_epiano2")] != -1);
		return scall<R>("new_epiano2", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_flute(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_flute")] != -1);
		return scall<R>("new_flute", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_gpiano(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_gpiano")] != -1);
		return scall<R>("new_gpiano", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_gpiano2(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_gpiano2")] != -1);
		return scall<R>("new_gpiano2", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_guitar1(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_guitar1")] != -1);
		return scall<R>("new_guitar1", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_guitar_dist(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_guitar_dist")] != -1);
		return scall<R>("new_guitar_dist", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_guitar_pick(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_guitar_pick")] != -1);
		return scall<R>("new_guitar_pick", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_horn(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_horn")] != -1);
		return scall<R>("new_horn", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_melodic_toms(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_melodic_toms")] != -1);
		return scall<R>("new_melodic_toms", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_oboe(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_oboe")] != -1);
		return scall<R>("new_oboe", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_open_hihat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_open_hihat")] != -1);
		return scall<R>("new_open_hihat", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_orchhit(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_orchhit")] != -1);
		return scall<R>("new_orchhit", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_organ(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_organ")] != -1);
		return scall<R>("new_organ", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_piano1(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_piano1")] != -1);
		return scall<R>("new_piano1", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_piano_hammer(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_piano_hammer")] != -1);
		return scall<R>("new_piano_hammer", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_reverse_cymbal(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_reverse_cymbal")] != -1);
		return scall<R>("new_reverse_cymbal", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_sax(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_sax")] != -1);
		return scall<R>("new_sax", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_side_stick(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_side_stick")] != -1);
		return scall<R>("new_side_stick", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_snare_drum(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_snare_drum")] != -1);
		return scall<R>("new_snare_drum", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_solostring(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_solostring")] != -1);
		return scall<R>("new_solostring", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_string2(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_string2")] != -1);
		return scall<R>("new_string2", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_synthbass(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_synthbass")] != -1);
		return scall<R>("new_synthbass", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_timpani(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_timpani")] != -1);
		return scall<R>("new_timpani", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_tom(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_tom")] != -1);
		return scall<R>("new_tom", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_trombone(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_trombone")] != -1);
		return scall<R>("new_trombone", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer, typename... Args>
	static auto new_trumpet(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("new_trumpet")] != -1);
		return scall<R>("new_trumpet", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto normalize(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("normalize")] != -1);
		return scall<R>("normalize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto randomPhase(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("randomPhase")] != -1);
		return scall<R>("randomPhase", std::forward<Args>(args)...);
	}

	template<typename R = ::jdouble *, typename... Args>
	static auto realPart(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("realPart")] != -1);
		return scall<R>("realPart", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	static auto toBytes(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toBytes")] != -1);
		return scall<R>("toBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat *, typename... Args>
	static auto toFloat(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toFloat")] != -1);
		return scall<R>("toFloat", std::forward<Args>(args)...);
	}

};

#endif
