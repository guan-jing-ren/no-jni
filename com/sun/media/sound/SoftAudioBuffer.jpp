#ifndef com_sun_media_sound_SoftAudioBuffer_HPP
#define com_sun_media_sound_SoftAudioBuffer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftAudioBuffer : public jObject<::com::sun::media::sound::SoftAudioBuffer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftAudioBuffer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::javax::sound::sampled::AudioFormat)>(), //
		jMethod<::jfloat *()>("array"), //
		jMethod<::jvoid()>("clear"), //
		jMethod<::jvoid(::jbyte *, ::jint)>("get"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jint()>("getSize"), //
		jMethod<::jboolean()>("isSilent"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftAudioBuffer)>("swap"), //
	};

	template<typename R = ::jfloat *, typename... Args>
	auto array(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("array")] != -1);
		return call<R>("array", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto clear(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clear")] != -1);
		return call<R>("clear", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSize")] != -1);
		return call<R>("getSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSilent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSilent")] != -1);
		return call<R>("isSilent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto swap(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("swap")] != -1);
		return call<R>("swap", std::forward<Args>(args)...);
	}

};

#endif
