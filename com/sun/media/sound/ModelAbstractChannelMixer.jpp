#ifndef com_sun_media_sound_ModelAbstractChannelMixer_HPP
#define com_sun_media_sound_ModelAbstractChannelMixer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelAbstractChannelMixer : public jObject<::com::sun::media::sound::ModelAbstractChannelMixer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelAbstractChannelMixer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("allNotesOff"), //
		jMethod<::jvoid()>("allSoundOff"), //
		jMethod<::jvoid(::jint, ::jint)>("controlChange"), //
		jMethod<::jint()>("getChannelPressure"), //
		jMethod<::jint(::jint)>("getController"), //
		jMethod<::jboolean()>("getMono"), //
		jMethod<::jboolean()>("getMute"), //
		jMethod<::jboolean()>("getOmni"), //
		jMethod<::jint()>("getPitchBend"), //
		jMethod<::jint(::jint)>("getPolyPressure"), //
		jMethod<::jint()>("getProgram"), //
		jMethod<::jboolean()>("getSolo"), //
		jMethod<::jboolean(::jboolean)>("localControl"), //
		jMethod<::jvoid(::jint)>("noteOff"), //
		jMethod<::jvoid(::jint, ::jint)>("noteOff"), //
		jMethod<::jvoid(::jint, ::jint)>("noteOn"), //
		jMethod<::jboolean(::jfloat **, ::jint, ::jint)>("process"), //
		jMethod<::jvoid(::jint)>("programChange"), //
		jMethod<::jvoid(::jint, ::jint)>("programChange"), //
		jMethod<::jvoid()>("resetAllControllers"), //
		jMethod<::jvoid(::jint)>("setChannelPressure"), //
		jMethod<::jvoid(::jboolean)>("setMono"), //
		jMethod<::jvoid(::jboolean)>("setMute"), //
		jMethod<::jvoid(::jboolean)>("setOmni"), //
		jMethod<::jvoid(::jint)>("setPitchBend"), //
		jMethod<::jvoid(::jint, ::jint)>("setPolyPressure"), //
		jMethod<::jvoid(::jboolean)>("setSolo"), //
		jMethod<::jvoid()>("stop"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto allNotesOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allNotesOff")] != -1);
		return call<R>("allNotesOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto allSoundOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("allSoundOff")] != -1);
		return call<R>("allSoundOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto controlChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("controlChange")] != -1);
		return call<R>("controlChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChannelPressure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannelPressure")] != -1);
		return call<R>("getChannelPressure", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getController(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getController")] != -1);
		return call<R>("getController", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMono(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMono")] != -1);
		return call<R>("getMono", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMute")] != -1);
		return call<R>("getMute", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getOmni(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOmni")] != -1);
		return call<R>("getOmni", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPitchBend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitchBend")] != -1);
		return call<R>("getPitchBend", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPolyPressure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPolyPressure")] != -1);
		return call<R>("getPolyPressure", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProgram(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgram")] != -1);
		return call<R>("getProgram", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto getSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSolo")] != -1);
		return call<R>("getSolo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto localControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("localControl")] != -1);
		return call<R>("localControl", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOff")] != -1);
		return call<R>("noteOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOn")] != -1);
		return call<R>("noteOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto process(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("process")] != -1);
		return call<R>("process", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto programChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("programChange")] != -1);
		return call<R>("programChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto resetAllControllers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resetAllControllers")] != -1);
		return call<R>("resetAllControllers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setChannelPressure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setChannelPressure")] != -1);
		return call<R>("setChannelPressure", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMono(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMono")] != -1);
		return call<R>("setMono", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMute")] != -1);
		return call<R>("setMute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOmni(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOmni")] != -1);
		return call<R>("setOmni", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitchBend(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitchBend")] != -1);
		return call<R>("setPitchBend", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPolyPressure(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPolyPressure")] != -1);
		return call<R>("setPolyPressure", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSolo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSolo")] != -1);
		return call<R>("setSolo", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stop(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stop")] != -1);
		return call<R>("stop", std::forward<Args>(args)...);
	}

};

#endif
