#ifndef com_sun_media_sound_SoftLowFrequencyOscillator_HPP
#define com_sun_media_sound_SoftLowFrequencyOscillator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftLowFrequencyOscillator : public jObject<::com::sun::media::sound::SoftLowFrequencyOscillator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftLowFrequencyOscillator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jdouble *(::jint, ::java::lang::String)>("get"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftSynthesizer)>("init"), //
		jMethod<::jvoid()>("processControlLogic"), //
		jMethod<::jvoid()>("reset"), //
	};

	template<typename R = ::jdouble *, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processControlLogic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processControlLogic")] != -1);
		return call<R>("processControlLogic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

};

#endif
