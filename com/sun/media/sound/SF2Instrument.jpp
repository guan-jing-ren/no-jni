#ifndef com_sun_media_sound_SF2Instrument_HPP
#define com_sun_media_sound_SF2Instrument_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SF2Instrument : public jObject<::com::sun::media::sound::SF2Instrument, ::com::sun::media::sound::ModelInstrument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SF2Instrument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::com::sun::media::sound::SF2Soundbank)>(), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::jlong()>("getGenre"), //
		jMethod<::com::sun::media::sound::SF2GlobalRegion()>("getGlobalRegion"), //
		jMethod<::jlong()>("getLibrary"), //
		jMethod<::jlong()>("getMorphology"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::javax::sound::midi::Patch()>("getPatch"), //
		jMethod<::com::sun::media::sound::ModelPerformer *()>("getPerformers"), //
		jMethod<::java::util::List()>("getRegions"), //
		jMethod<::jvoid(::jlong)>("setGenre"), //
		jMethod<::jvoid(::com::sun::media::sound::SF2GlobalRegion)>("setGlobalZone"), //
		jMethod<::jvoid(::jlong)>("setLibrary"), //
		jMethod<::jvoid(::jlong)>("setMorphology"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::javax::sound::midi::Patch)>("setPatch"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getGenre(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGenre")] != -1);
		return call<R>("getGenre", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2GlobalRegion, typename... Args>
	auto getGlobalRegion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getGlobalRegion")] != -1);
		return call<R>("getGlobalRegion", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLibrary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLibrary")] != -1);
		return call<R>("getLibrary", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMorphology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMorphology")] != -1);
		return call<R>("getMorphology", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Patch, typename... Args>
	auto getPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPatch")] != -1);
		return call<R>("getPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPerformer *, typename... Args>
	auto getPerformers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPerformers")] != -1);
		return call<R>("getPerformers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getRegions(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRegions")] != -1);
		return call<R>("getRegions", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGenre(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGenre")] != -1);
		return call<R>("setGenre", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setGlobalZone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setGlobalZone")] != -1);
		return call<R>("setGlobalZone", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLibrary(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLibrary")] != -1);
		return call<R>("setLibrary", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMorphology(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMorphology")] != -1);
		return call<R>("setMorphology", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPatch")] != -1);
		return call<R>("setPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
