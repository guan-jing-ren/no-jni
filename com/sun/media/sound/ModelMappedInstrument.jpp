#ifndef com_sun_media_sound_ModelMappedInstrument_HPP
#define com_sun_media_sound_ModelMappedInstrument_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelMappedInstrument : public jObject<::com::sun::media::sound::ModelMappedInstrument, ::com::sun::media::sound::ModelInstrument> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelMappedInstrument";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::media::sound::ModelInstrument, ::javax::sound::midi::Patch)>(), //
		jMethod<::com::sun::media::sound::ModelChannelMixer(::javax::sound::midi::MidiChannel, ::javax::sound::sampled::AudioFormat)>("getChannelMixer"), //
		jMethod<::java::lang::Object()>("getData"), //
		jMethod<::com::sun::media::sound::ModelDirector(::com::sun::media::sound::ModelPerformer *, ::javax::sound::midi::MidiChannel, ::com::sun::media::sound::ModelDirectedPlayer)>("getDirector"), //
		jMethod<::com::sun::media::sound::ModelPerformer *()>("getPerformers"), //
	};

	template<typename R = ::com::sun::media::sound::ModelChannelMixer, typename... Args>
	auto getChannelMixer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannelMixer")] != -1);
		return call<R>("getChannelMixer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto getData(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getData")] != -1);
		return call<R>("getData", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelDirector, typename... Args>
	auto getDirector(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDirector")] != -1);
		return call<R>("getDirector", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPerformer *, typename... Args>
	auto getPerformers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPerformers")] != -1);
		return call<R>("getPerformers", std::forward<Args>(args)...);
	}

};

#endif
