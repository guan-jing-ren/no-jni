#ifndef com_sun_media_sound_SoftFilter_HPP
#define com_sun_media_sound_SoftFilter_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftFilter : public jObject<::com::sun::media::sound::SoftFilter, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftFilter";

	constexpr static Enume field_signatures{
		jField<::jint>("FILTERTYPE_BP12"), //
		jField<::jint>("FILTERTYPE_HP12"), //
		jField<::jint>("FILTERTYPE_HP24"), //
		jField<::jint>("FILTERTYPE_LP12"), //
		jField<::jint>("FILTERTYPE_LP24"), //
		jField<::jint>("FILTERTYPE_LP6"), //
		jField<::jint>("FILTERTYPE_NP12"), //
	};

	template<typename F = ::jint>
	static auto FILTERTYPE_BP12() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_BP12")] != -1);
		return sat<F>("FILTERTYPE_BP12");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_HP12() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_HP12")] != -1);
		return sat<F>("FILTERTYPE_HP12");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_HP24() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_HP24")] != -1);
		return sat<F>("FILTERTYPE_HP24");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_LP12() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_LP12")] != -1);
		return sat<F>("FILTERTYPE_LP12");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_LP24() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_LP24")] != -1);
		return sat<F>("FILTERTYPE_LP24");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_LP6() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_LP6")] != -1);
		return sat<F>("FILTERTYPE_LP6");
	}

	template<typename F = ::jint>
	static auto FILTERTYPE_NP12() {
		static_assert(field_signatures[jField<F>("FILTERTYPE_NP12")] != -1);
		return sat<F>("FILTERTYPE_NP12");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jfloat)>(), //
		jMethod<::jvoid(::com::sun::media::sound::SoftAudioBuffer)>("filter1"), //
		jMethod<::jvoid()>("filter1calc"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftAudioBuffer)>("filter2"), //
		jMethod<::jvoid()>("filter2calc"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftAudioBuffer)>("filter4"), //
		jMethod<::jvoid(::com::sun::media::sound::SoftAudioBuffer)>("processAudio"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("setFilterType"), //
		jMethod<::jvoid(::jdouble)>("setFrequency"), //
		jMethod<::jvoid(::jdouble)>("setResonance"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto filter1(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter1")] != -1);
		return call<R>("filter1", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto filter1calc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter1calc")] != -1);
		return call<R>("filter1calc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto filter2(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter2")] != -1);
		return call<R>("filter2", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto filter2calc(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter2calc")] != -1);
		return call<R>("filter2calc", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto filter4(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("filter4")] != -1);
		return call<R>("filter4", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processAudio(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processAudio")] != -1);
		return call<R>("processAudio", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilterType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilterType")] != -1);
		return call<R>("setFilterType", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrequency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrequency")] != -1);
		return call<R>("setFrequency", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setResonance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setResonance")] != -1);
		return call<R>("setResonance", std::forward<Args>(args)...);
	}

};

#endif
