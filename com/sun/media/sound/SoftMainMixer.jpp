#ifndef com_sun_media_sound_SoftMainMixer_HPP
#define com_sun_media_sound_SoftMainMixer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftMainMixer : public jObject<::com::sun::media::sound::SoftMainMixer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftMainMixer";

	constexpr static Enume field_signatures{
		jField<::jint>("CHANNEL_DELAY_EFFECT1"), //
		jField<::jint>("CHANNEL_DELAY_EFFECT2"), //
		jField<::jint>("CHANNEL_DELAY_LEFT"), //
		jField<::jint>("CHANNEL_DELAY_MONO"), //
		jField<::jint>("CHANNEL_DELAY_RIGHT"), //
		jField<::jint>("CHANNEL_EFFECT1"), //
		jField<::jint>("CHANNEL_EFFECT2"), //
		jField<::jint>("CHANNEL_LEFT"), //
		jField<::jint>("CHANNEL_LEFT_DRY"), //
		jField<::jint>("CHANNEL_MONO"), //
		jField<::jint>("CHANNEL_RIGHT"), //
		jField<::jint>("CHANNEL_RIGHT_DRY"), //
		jField<::jint>("CHANNEL_SCRATCH1"), //
		jField<::jint>("CHANNEL_SCRATCH2"), //
	};

	template<typename F = ::jint>
	static auto CHANNEL_DELAY_EFFECT1() {
		static_assert(field_signatures[jField<F>("CHANNEL_DELAY_EFFECT1")] != -1);
		return sat<F>("CHANNEL_DELAY_EFFECT1");
	}

	template<typename F = ::jint>
	static auto CHANNEL_DELAY_EFFECT2() {
		static_assert(field_signatures[jField<F>("CHANNEL_DELAY_EFFECT2")] != -1);
		return sat<F>("CHANNEL_DELAY_EFFECT2");
	}

	template<typename F = ::jint>
	static auto CHANNEL_DELAY_LEFT() {
		static_assert(field_signatures[jField<F>("CHANNEL_DELAY_LEFT")] != -1);
		return sat<F>("CHANNEL_DELAY_LEFT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_DELAY_MONO() {
		static_assert(field_signatures[jField<F>("CHANNEL_DELAY_MONO")] != -1);
		return sat<F>("CHANNEL_DELAY_MONO");
	}

	template<typename F = ::jint>
	static auto CHANNEL_DELAY_RIGHT() {
		static_assert(field_signatures[jField<F>("CHANNEL_DELAY_RIGHT")] != -1);
		return sat<F>("CHANNEL_DELAY_RIGHT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT1() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT1")] != -1);
		return sat<F>("CHANNEL_EFFECT1");
	}

	template<typename F = ::jint>
	static auto CHANNEL_EFFECT2() {
		static_assert(field_signatures[jField<F>("CHANNEL_EFFECT2")] != -1);
		return sat<F>("CHANNEL_EFFECT2");
	}

	template<typename F = ::jint>
	static auto CHANNEL_LEFT() {
		static_assert(field_signatures[jField<F>("CHANNEL_LEFT")] != -1);
		return sat<F>("CHANNEL_LEFT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_LEFT_DRY() {
		static_assert(field_signatures[jField<F>("CHANNEL_LEFT_DRY")] != -1);
		return sat<F>("CHANNEL_LEFT_DRY");
	}

	template<typename F = ::jint>
	static auto CHANNEL_MONO() {
		static_assert(field_signatures[jField<F>("CHANNEL_MONO")] != -1);
		return sat<F>("CHANNEL_MONO");
	}

	template<typename F = ::jint>
	static auto CHANNEL_RIGHT() {
		static_assert(field_signatures[jField<F>("CHANNEL_RIGHT")] != -1);
		return sat<F>("CHANNEL_RIGHT");
	}

	template<typename F = ::jint>
	static auto CHANNEL_RIGHT_DRY() {
		static_assert(field_signatures[jField<F>("CHANNEL_RIGHT_DRY")] != -1);
		return sat<F>("CHANNEL_RIGHT_DRY");
	}

	template<typename F = ::jint>
	static auto CHANNEL_SCRATCH1() {
		static_assert(field_signatures[jField<F>("CHANNEL_SCRATCH1")] != -1);
		return sat<F>("CHANNEL_SCRATCH1");
	}

	template<typename F = ::jint>
	static auto CHANNEL_SCRATCH2() {
		static_assert(field_signatures[jField<F>("CHANNEL_SCRATCH2")] != -1);
		return sat<F>("CHANNEL_SCRATCH2");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::media::sound::SoftSynthesizer)>(), //
		jMethod<::jvoid()>("activity"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jint()>("getBalance"), //
		jMethod<::jint()>("getCoarseTuning"), //
		jMethod<::jint()>("getFineTuning"), //
		jMethod<::javax::sound::sampled::AudioInputStream()>("getInputStream"), //
		jMethod<::jlong()>("getMicrosecondPosition"), //
		jMethod<::jint()>("getVolume"), //
		jMethod<::jvoid(::jint *, ::jlong *, ::jlong *)>("globalParameterControlChange"), //
		jMethod<::jvoid(::jint, ::jint, ::jint, ::jint)>("processMessage"), //
		jMethod<::jvoid(::java::lang::Object)>("processMessage"), //
		jMethod<::jvoid(::javax::sound::midi::MidiMessage)>("processMessage"), //
		jMethod<::jvoid(::jbyte *)>("processMessage"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelChannelMixer)>("registerMixer"), //
		jMethod<::jvoid()>("reset"), //
		jMethod<::jvoid(::jint)>("setBalance"), //
		jMethod<::jvoid(::jint)>("setCoarseTuning"), //
		jMethod<::jvoid(::jint)>("setFineTuning"), //
		jMethod<::jvoid(::jint)>("setVolume"), //
		jMethod<::jvoid(::com::sun::media::sound::ModelChannelMixer)>("stopMixer"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto activity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("activity")] != -1);
		return call<R>("activity", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBalance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBalance")] != -1);
		return call<R>("getBalance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCoarseTuning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCoarseTuning")] != -1);
		return call<R>("getCoarseTuning", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getFineTuning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFineTuning")] != -1);
		return call<R>("getFineTuning", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioInputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getMicrosecondPosition(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMicrosecondPosition")] != -1);
		return call<R>("getMicrosecondPosition", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVolume(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVolume")] != -1);
		return call<R>("getVolume", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto globalParameterControlChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("globalParameterControlChange")] != -1);
		return call<R>("globalParameterControlChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processMessage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processMessage")] != -1);
		return call<R>("processMessage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto registerMixer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("registerMixer")] != -1);
		return call<R>("registerMixer", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto reset(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("reset")] != -1);
		return call<R>("reset", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBalance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBalance")] != -1);
		return call<R>("setBalance", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCoarseTuning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCoarseTuning")] != -1);
		return call<R>("setCoarseTuning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFineTuning(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFineTuning")] != -1);
		return call<R>("setFineTuning", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVolume(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVolume")] != -1);
		return call<R>("setVolume", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto stopMixer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stopMixer")] != -1);
		return call<R>("stopMixer", std::forward<Args>(args)...);
	}

};

#endif
