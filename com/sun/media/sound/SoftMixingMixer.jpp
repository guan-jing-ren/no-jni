#ifndef com_sun_media_sound_SoftMixingMixer_HPP
#define com_sun_media_sound_SoftMixingMixer_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftMixingMixer : public jObject<::com::sun::media::sound::SoftMixingMixer, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftMixingMixer";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("addLineListener"), //
		jMethod<::jvoid()>("close"), //
		jMethod<::javax::sound::sampled::Control(::javax::sound::sampled::Control$Type)>("getControl"), //
		jMethod<::javax::sound::sampled::Control *()>("getControls"), //
		jMethod<::javax::sound::sampled::AudioFormat()>("getFormat"), //
		jMethod<::jlong()>("getLatency"), //
		jMethod<::javax::sound::sampled::Line(::javax::sound::sampled::Line$Info)>("getLine"), //
		jMethod<::javax::sound::sampled::Line$Info()>("getLineInfo"), //
		jMethod<::jint(::javax::sound::sampled::Line$Info)>("getMaxLines"), //
		jMethod<::javax::sound::sampled::Mixer$Info()>("getMixerInfo"), //
		jMethod<::javax::sound::sampled::Line$Info *()>("getSourceLineInfo"), //
		jMethod<::javax::sound::sampled::Line$Info *(::javax::sound::sampled::Line$Info)>("getSourceLineInfo"), //
		jMethod<::javax::sound::sampled::Line *()>("getSourceLines"), //
		jMethod<::javax::sound::sampled::Line$Info *()>("getTargetLineInfo"), //
		jMethod<::javax::sound::sampled::Line$Info *(::javax::sound::sampled::Line$Info)>("getTargetLineInfo"), //
		jMethod<::javax::sound::sampled::Line *()>("getTargetLines"), //
		jMethod<::jboolean(::javax::sound::sampled::Control$Type)>("isControlSupported"), //
		jMethod<::jboolean(::javax::sound::sampled::Line$Info)>("isLineSupported"), //
		jMethod<::jboolean()>("isOpen"), //
		jMethod<::jboolean(::javax::sound::sampled::Line *, ::jboolean)>("isSynchronizationSupported"), //
		jMethod<::jvoid()>("open"), //
		jMethod<::jvoid(::javax::sound::sampled::SourceDataLine)>("open"), //
		jMethod<::javax::sound::sampled::AudioInputStream(::javax::sound::sampled::AudioFormat)>("openStream"), //
		jMethod<::jvoid(::javax::sound::sampled::LineListener)>("removeLineListener"), //
		jMethod<::jvoid(::javax::sound::sampled::Line *, ::jboolean)>("synchronize"), //
		jMethod<::jvoid(::javax::sound::sampled::Line *)>("unsynchronize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLineListener")] != -1);
		return call<R>("addLineListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control, typename... Args>
	auto getControl(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControl")] != -1);
		return call<R>("getControl", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Control *, typename... Args>
	auto getControls(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControls")] != -1);
		return call<R>("getControls", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioFormat, typename... Args>
	auto getFormat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFormat")] != -1);
		return call<R>("getFormat", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getLatency(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLatency")] != -1);
		return call<R>("getLatency", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line, typename... Args>
	auto getLine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLine")] != -1);
		return call<R>("getLine", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info, typename... Args>
	auto getLineInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLineInfo")] != -1);
		return call<R>("getLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getMaxLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaxLines")] != -1);
		return call<R>("getMaxLines", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Mixer$Info, typename... Args>
	auto getMixerInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMixerInfo")] != -1);
		return call<R>("getMixerInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info *, typename... Args>
	auto getSourceLineInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceLineInfo")] != -1);
		return call<R>("getSourceLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line *, typename... Args>
	auto getSourceLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSourceLines")] != -1);
		return call<R>("getSourceLines", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line$Info *, typename... Args>
	auto getTargetLineInfo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetLineInfo")] != -1);
		return call<R>("getTargetLineInfo", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::Line *, typename... Args>
	auto getTargetLines(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetLines")] != -1);
		return call<R>("getTargetLines", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isControlSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isControlSupported")] != -1);
		return call<R>("isControlSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isLineSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isLineSupported")] != -1);
		return call<R>("isLineSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOpen(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOpen")] != -1);
		return call<R>("isOpen", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSynchronizationSupported(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSynchronizationSupported")] != -1);
		return call<R>("isSynchronizationSupported", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::sampled::AudioInputStream, typename... Args>
	auto openStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("openStream")] != -1);
		return call<R>("openStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLineListener(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLineListener")] != -1);
		return call<R>("removeLineListener", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto synchronize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("synchronize")] != -1);
		return call<R>("synchronize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto unsynchronize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unsynchronize")] != -1);
		return call<R>("unsynchronize", std::forward<Args>(args)...);
	}

};

#endif
