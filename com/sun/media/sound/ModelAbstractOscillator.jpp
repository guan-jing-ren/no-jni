#ifndef com_sun_media_sound_ModelAbstractOscillator_HPP
#define com_sun_media_sound_ModelAbstractOscillator_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::ModelAbstractOscillator : public jObject<::com::sun::media::sound::ModelAbstractOscillator, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "ModelAbstractOscillator";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid()>("close"), //
		jMethod<::jfloat()>("getAttenuation"), //
		jMethod<::javax::sound::midi::MidiChannel()>("getChannel"), //
		jMethod<::jint()>("getChannels"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::com::sun::media::sound::ModelInstrument()>("getInstrument"), //
		jMethod<::javax::sound::midi::Instrument(::javax::sound::midi::Patch)>("getInstrument"), //
		jMethod<::javax::sound::midi::Instrument *()>("getInstruments"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jint()>("getNoteNumber"), //
		jMethod<::javax::sound::midi::Patch()>("getPatch"), //
		jMethod<::com::sun::media::sound::ModelPerformer()>("getPerformer"), //
		jMethod<::jfloat()>("getPitch"), //
		jMethod<::javax::sound::midi::SoundbankResource *()>("getResources"), //
		jMethod<::jfloat()>("getSampleRate"), //
		jMethod<::javax::sound::midi::Soundbank()>("getSoundBank"), //
		jMethod<::jint()>("getVelocity"), //
		jMethod<::java::lang::String()>("getVendor"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::javax::sound::midi::VoiceStatus()>("getVoice"), //
		jMethod<::jvoid()>("init"), //
		jMethod<::jboolean()>("isOn"), //
		jMethod<::jvoid(::jint)>("noteOff"), //
		jMethod<::jvoid(::javax::sound::midi::MidiChannel, ::javax::sound::midi::VoiceStatus, ::jint, ::jint)>("noteOn"), //
		jMethod<::com::sun::media::sound::ModelOscillatorStream(::jfloat)>("open"), //
		jMethod<::jint(::jfloat **, ::jint, ::jint)>("read"), //
		jMethod<::jvoid(::jfloat)>("setPitch"), //
		jMethod<::jvoid(::jfloat)>("setSampleRate"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto close(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("close")] != -1);
		return call<R>("close", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getAttenuation(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttenuation")] != -1);
		return call<R>("getAttenuation", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::MidiChannel, typename... Args>
	auto getChannel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannel")] != -1);
		return call<R>("getChannel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getChannels(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getChannels")] != -1);
		return call<R>("getChannels", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelInstrument, typename... Args>
	auto getInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstrument")] != -1);
		return call<R>("getInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Instrument *, typename... Args>
	auto getInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstruments")] != -1);
		return call<R>("getInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNoteNumber(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNoteNumber")] != -1);
		return call<R>("getNoteNumber", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Patch, typename... Args>
	auto getPatch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPatch")] != -1);
		return call<R>("getPatch", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelPerformer, typename... Args>
	auto getPerformer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPerformer")] != -1);
		return call<R>("getPerformer", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPitch")] != -1);
		return call<R>("getPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::SoundbankResource *, typename... Args>
	auto getResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResources")] != -1);
		return call<R>("getResources", std::forward<Args>(args)...);
	}

	template<typename R = ::jfloat, typename... Args>
	auto getSampleRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSampleRate")] != -1);
		return call<R>("getSampleRate", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Soundbank, typename... Args>
	auto getSoundBank(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSoundBank")] != -1);
		return call<R>("getSoundBank", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getVelocity(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVelocity")] != -1);
		return call<R>("getVelocity", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVendor")] != -1);
		return call<R>("getVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::VoiceStatus, typename... Args>
	auto getVoice(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVoice")] != -1);
		return call<R>("getVoice", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isOn")] != -1);
		return call<R>("isOn", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOff(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOff")] != -1);
		return call<R>("noteOff", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteOn(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteOn")] != -1);
		return call<R>("noteOn", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::ModelOscillatorStream, typename... Args>
	auto open(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("open")] != -1);
		return call<R>("open", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto read(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("read")] != -1);
		return call<R>("read", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setPitch(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setPitch")] != -1);
		return call<R>("setPitch", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setSampleRate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setSampleRate")] != -1);
		return call<R>("setSampleRate", std::forward<Args>(args)...);
	}

};

#endif
