#ifndef com_sun_media_sound_SoftAudioProcessor_HPP
#define com_sun_media_sound_SoftAudioProcessor_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SoftAudioProcessor : public jObject<::com::sun::media::sound::SoftAudioProcessor, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SoftAudioProcessor";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jint *, ::jlong, ::jlong)>("globalParameterControlChange"), //
		jMethod<::jvoid(::jfloat, ::jfloat)>("init"), //
		jMethod<::jvoid()>("processAudio"), //
		jMethod<::jvoid()>("processControlLogic"), //
		jMethod<::jvoid(::jint, ::com::sun::media::sound::SoftAudioBuffer)>("setInput"), //
		jMethod<::jvoid(::jboolean)>("setMixMode"), //
		jMethod<::jvoid(::jint, ::com::sun::media::sound::SoftAudioBuffer)>("setOutput"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto globalParameterControlChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("globalParameterControlChange")] != -1);
		return call<R>("globalParameterControlChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto init(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("init")] != -1);
		return call<R>("init", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processAudio(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processAudio")] != -1);
		return call<R>("processAudio", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto processControlLogic(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("processControlLogic")] != -1);
		return call<R>("processControlLogic", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInput")] != -1);
		return call<R>("setInput", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setMixMode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMixMode")] != -1);
		return call<R>("setMixMode", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setOutput(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setOutput")] != -1);
		return call<R>("setOutput", std::forward<Args>(args)...);
	}

};

#endif
