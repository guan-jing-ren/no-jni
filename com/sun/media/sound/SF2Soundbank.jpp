#ifndef com_sun_media_sound_SF2Soundbank_HPP
#define com_sun_media_sound_SF2Soundbank_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::media::sound::SF2Soundbank : public jObject<::com::sun::media::sound::SF2Soundbank, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_media_sound / "SF2Soundbank";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::io::File)>(), //
		jConstructor<::jvoid(::java::io::InputStream)>(), //
		jConstructor<::jvoid(::java::net::URL)>(), //
		jMethod<::jvoid(::com::sun::media::sound::SF2Instrument)>("addInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::SoundbankResource)>("addResource"), //
		jMethod<::java::lang::String()>("getCreationDate"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::javax::sound::midi::Instrument(::javax::sound::midi::Patch)>("getInstrument"), //
		jMethod<::com::sun::media::sound::SF2Instrument *()>("getInstruments"), //
		jMethod<::javax::sound::midi::Instrument *()>("getInstruments"), //
		jMethod<::com::sun::media::sound::SF2Layer *()>("getLayers"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getProduct"), //
		jMethod<::javax::sound::midi::SoundbankResource *()>("getResources"), //
		jMethod<::java::lang::String()>("getRomName"), //
		jMethod<::jint()>("getRomVersionMajor"), //
		jMethod<::jint()>("getRomVersionMinor"), //
		jMethod<::com::sun::media::sound::SF2Sample *()>("getSamples"), //
		jMethod<::java::lang::String()>("getTargetEngine"), //
		jMethod<::java::lang::String()>("getTools"), //
		jMethod<::java::lang::String()>("getVendor"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::jvoid(::com::sun::media::sound::SF2Instrument)>("removeInstrument"), //
		jMethod<::jvoid(::javax::sound::midi::SoundbankResource)>("removeResource"), //
		jMethod<::jvoid(::java::io::File)>("save"), //
		jMethod<::jvoid(::java::io::OutputStream)>("save"), //
		jMethod<::jvoid(::java::lang::String)>("save"), //
		jMethod<::jvoid(::java::lang::String)>("setCreationDate"), //
		jMethod<::jvoid(::java::lang::String)>("setDescription"), //
		jMethod<::jvoid(::java::lang::String)>("setName"), //
		jMethod<::jvoid(::java::lang::String)>("setProduct"), //
		jMethod<::jvoid(::java::lang::String)>("setRomName"), //
		jMethod<::jvoid(::jint)>("setRomVersionMajor"), //
		jMethod<::jvoid(::jint)>("setRomVersionMinor"), //
		jMethod<::jvoid(::java::lang::String)>("setTargetEngine"), //
		jMethod<::jvoid(::java::lang::String)>("setTools"), //
		jMethod<::jvoid(::java::lang::String)>("setVendor"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addInstrument")] != -1);
		return call<R>("addInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addResource")] != -1);
		return call<R>("addResource", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getCreationDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCreationDate")] != -1);
		return call<R>("getCreationDate", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::Instrument, typename... Args>
	auto getInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstrument")] != -1);
		return call<R>("getInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Instrument *, typename... Args>
	auto getInstruments(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInstruments")] != -1);
		return call<R>("getInstruments", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Layer *, typename... Args>
	auto getLayers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayers")] != -1);
		return call<R>("getLayers", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProduct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProduct")] != -1);
		return call<R>("getProduct", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sound::midi::SoundbankResource *, typename... Args>
	auto getResources(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getResources")] != -1);
		return call<R>("getResources", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getRomName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRomName")] != -1);
		return call<R>("getRomName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRomVersionMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRomVersionMajor")] != -1);
		return call<R>("getRomVersionMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getRomVersionMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRomVersionMinor")] != -1);
		return call<R>("getRomVersionMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::media::sound::SF2Sample *, typename... Args>
	auto getSamples(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getSamples")] != -1);
		return call<R>("getSamples", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTargetEngine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTargetEngine")] != -1);
		return call<R>("getTargetEngine", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getTools(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTools")] != -1);
		return call<R>("getTools", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVendor")] != -1);
		return call<R>("getVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeInstrument(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeInstrument")] != -1);
		return call<R>("removeInstrument", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeResource(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeResource")] != -1);
		return call<R>("removeResource", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto save(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("save")] != -1);
		return call<R>("save", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCreationDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCreationDate")] != -1);
		return call<R>("setCreationDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDescription")] != -1);
		return call<R>("setDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setName")] != -1);
		return call<R>("setName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setProduct(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setProduct")] != -1);
		return call<R>("setProduct", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRomName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRomName")] != -1);
		return call<R>("setRomName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRomVersionMajor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRomVersionMajor")] != -1);
		return call<R>("setRomVersionMajor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setRomVersionMinor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setRomVersionMinor")] != -1);
		return call<R>("setRomVersionMinor", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTargetEngine(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTargetEngine")] != -1);
		return call<R>("setTargetEngine", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setTools(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setTools")] != -1);
		return call<R>("setTools", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVendor")] != -1);
		return call<R>("setVendor", std::forward<Args>(args)...);
	}

};

#endif
