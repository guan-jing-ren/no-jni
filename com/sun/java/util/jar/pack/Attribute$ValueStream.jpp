#ifndef com_sun_java_util_jar_pack_Attribute$ValueStream_HPP
#define com_sun_java_util_jar_pack_Attribute$ValueStream_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Attribute$ValueStream : public jObject<::com::sun::java::util::jar::pack::Attribute$ValueStream, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Attribute$ValueStream";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint(::jint)>("decodeBCI"), //
		jMethod<::jint(::jint)>("encodeBCI"), //
		jMethod<::jint(::jint)>("getInt"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry(::jint)>("getRef"), //
		jMethod<::jvoid(::jint)>("noteBackCall"), //
		jMethod<::jvoid(::jint, ::jint)>("putInt"), //
		jMethod<::jvoid(::jint, ::com::sun::java::util::jar::pack::ConstantPool$Entry)>("putRef"), //
	};

	template<typename R = ::jint, typename... Args>
	auto decodeBCI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("decodeBCI")] != -1);
		return call<R>("decodeBCI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto encodeBCI(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("encodeBCI")] != -1);
		return call<R>("encodeBCI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInt")] != -1);
		return call<R>("getInt", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto getRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRef")] != -1);
		return call<R>("getRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto noteBackCall(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("noteBackCall")] != -1);
		return call<R>("noteBackCall", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putInt")] != -1);
		return call<R>("putInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto putRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("putRef")] != -1);
		return call<R>("putRef", std::forward<Args>(args)...);
	}

};

#endif
