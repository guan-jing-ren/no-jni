#ifndef com_sun_java_util_jar_pack_ConstantPool$SignatureEntry_HPP
#define com_sun_java_util_jar_pack_ConstantPool$SignatureEntry_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::ConstantPool$SignatureEntry : public jObject<::com::sun::java::util::jar::pack::ConstantPool$SignatureEntry, ::com::sun::java::util::jar::pack::ConstantPool$Entry> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "ConstantPool$SignatureEntry";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Utf8Entry()>("asUtf8Entry"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint(::jboolean)>("computeSize"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jbyte()>("getLiteralTag"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry(::jint)>("getRef"), //
		jMethod<::jboolean()>("isMethod"), //
		jMethod<::java::lang::String()>("prettyString"), //
		jMethod<::java::lang::String()>("stringValue"), //
	};

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Utf8Entry, typename... Args>
	auto asUtf8Entry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("asUtf8Entry")] != -1);
		return call<R>("asUtf8Entry", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto computeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeSize")] != -1);
		return call<R>("computeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getLiteralTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLiteralTag")] != -1);
		return call<R>("getLiteralTag", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto getRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRef")] != -1);
		return call<R>("getRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isMethod(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMethod")] != -1);
		return call<R>("isMethod", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto prettyString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("prettyString")] != -1);
		return call<R>("prettyString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto stringValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("stringValue")] != -1);
		return call<R>("stringValue", std::forward<Args>(args)...);
	}

};

#endif
