#ifndef com_sun_java_util_jar_pack_Instruction$Switch_HPP
#define com_sun_java_util_jar_pack_Instruction$Switch_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Instruction$Switch : public jObject<::com::sun::java::util::jar::pack::Instruction$Switch, ::com::sun::java::util::jar::pack::Instruction> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Instruction$Switch";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint(::jint)>("alignPC"), //
		jMethod<::jboolean(::com::sun::java::util::jar::pack::Instruction)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::java::util::jar::pack::Instruction(::jint)>("forceNextPC"), //
		jMethod<::jint()>("getAlignedPC"), //
		jMethod<::jint()>("getBC"), //
		jMethod<::jint()>("getBranchLabel"), //
		jMethod<::jint(::jint)>("getByteAt"), //
		jMethod<::jbyte *()>("getBytes"), //
		jMethod<::jint()>("getCPIndex"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry(::com::sun::java::util::jar::pack::ConstantPool$Entry *)>("getCPRef"), //
		jMethod<::jbyte()>("getCPTag"), //
		jMethod<::jint()>("getCaseCount"), //
		jMethod<::jint(::jint)>("getCaseLabel"), //
		jMethod<::jint(::jint)>("getCaseValue"), //
		jMethod<::jint()>("getConstant"), //
		jMethod<::jint()>("getDefaultLabel"), //
		jMethod<::jint(::jint)>("getIntAt"), //
		jMethod<::jint()>("getLength"), //
		jMethod<::jint()>("getLocalSlot"), //
		jMethod<::jint()>("getNextPC"), //
		jMethod<::jint()>("getPC"), //
		jMethod<::jint(::jint)>("getShortAt"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isNonstandard"), //
		jMethod<::jboolean()>("isWide"), //
		jMethod<::com::sun::java::util::jar::pack::Instruction()>("next"), //
		jMethod<::jvoid(::jint)>("setBranchLabel"), //
		jMethod<::jvoid(::jint)>("setCPIndex"), //
		jMethod<::jvoid(::jint)>("setCaseCount"), //
		jMethod<::jvoid(::jint, ::jint)>("setCaseLabel"), //
		jMethod<::jvoid(::jint, ::jint)>("setCaseValue"), //
		jMethod<::jvoid(::jint)>("setConstant"), //
		jMethod<::jvoid(::jint)>("setDefaultLabel"), //
		jMethod<::jvoid(::jint)>("setNonstandardLength"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::String(::com::sun::java::util::jar::pack::ConstantPool$Entry *)>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto alignPC(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("alignPC")] != -1);
		return scall<R>("alignPC", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Instruction, typename... Args>
	auto forceNextPC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("forceNextPC")] != -1);
		return call<R>("forceNextPC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getAlignedPC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAlignedPC")] != -1);
		return call<R>("getAlignedPC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBC")] != -1);
		return call<R>("getBC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBranchLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBranchLabel")] != -1);
		return call<R>("getBranchLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getByteAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getByteAt")] != -1);
		return call<R>("getByteAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte *, typename... Args>
	auto getBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBytes")] != -1);
		return call<R>("getBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCPIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCPIndex")] != -1);
		return call<R>("getCPIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto getCPRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCPRef")] != -1);
		return call<R>("getCPRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getCPTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCPTag")] != -1);
		return call<R>("getCPTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaseCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseCount")] != -1);
		return call<R>("getCaseCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaseLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseLabel")] != -1);
		return call<R>("getCaseLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaseValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseValue")] != -1);
		return call<R>("getCaseValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getConstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getConstant")] != -1);
		return call<R>("getConstant", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getDefaultLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultLabel")] != -1);
		return call<R>("getDefaultLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getIntAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIntAt")] != -1);
		return call<R>("getIntAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLength")] != -1);
		return call<R>("getLength", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLocalSlot(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLocalSlot")] != -1);
		return call<R>("getLocalSlot", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getNextPC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNextPC")] != -1);
		return call<R>("getNextPC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPC(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPC")] != -1);
		return call<R>("getPC", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getShortAt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getShortAt")] != -1);
		return call<R>("getShortAt", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNonstandard(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNonstandard")] != -1);
		return call<R>("isNonstandard", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isWide(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isWide")] != -1);
		return call<R>("isWide", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Instruction, typename... Args>
	auto next(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("next")] != -1);
		return call<R>("next", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setBranchLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setBranchLabel")] != -1);
		return call<R>("setBranchLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCPIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCPIndex")] != -1);
		return call<R>("setCPIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseCount")] != -1);
		return call<R>("setCaseCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseLabel")] != -1);
		return call<R>("setCaseLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseValue")] != -1);
		return call<R>("setCaseValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setConstant(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setConstant")] != -1);
		return call<R>("setConstant", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultLabel")] != -1);
		return call<R>("setDefaultLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setNonstandardLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setNonstandardLength")] != -1);
		return call<R>("setNonstandardLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
