#ifndef com_sun_java_util_jar_pack_Package$File_HPP
#define com_sun_java_util_jar_pack_Package$File_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Package$File : public jObject<::com::sun::java::util::jar::pack::Package$File, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Package$File";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jvoid(::jbyte *)>("addBytes"), //
		jMethod<::jvoid(::jbyte *, ::jint, ::jint)>("addBytes"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::Package$File)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jlong()>("getFileLength"), //
		jMethod<::java::io::File()>("getFileName"), //
		jMethod<::java::io::File(::java::io::File)>("getFileName"), //
		jMethod<::java::io::InputStream()>("getInputStream"), //
		jMethod<::com::sun::java::util::jar::pack::Package$Class()>("getStubClass"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isClassStub"), //
		jMethod<::jboolean()>("isDirectory"), //
		jMethod<::jboolean()>("isTrivialClassStub"), //
		jMethod<::jvoid(::java::io::InputStream)>("readFrom"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid(::java::io::OutputStream)>("writeTo"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addBytes")] != -1);
		return call<R>("addBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jlong, typename... Args>
	auto getFileLength(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileLength")] != -1);
		return call<R>("getFileLength", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::InputStream, typename... Args>
	auto getInputStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInputStream")] != -1);
		return call<R>("getInputStream", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Package$Class, typename... Args>
	auto getStubClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getStubClass")] != -1);
		return call<R>("getStubClass", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isClassStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClassStub")] != -1);
		return call<R>("isClassStub", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isDirectory(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isDirectory")] != -1);
		return call<R>("isDirectory", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isTrivialClassStub(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isTrivialClassStub")] != -1);
		return call<R>("isTrivialClassStub", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto readFrom(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("readFrom")] != -1);
		return call<R>("readFrom", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto writeTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("writeTo")] != -1);
		return call<R>("writeTo", std::forward<Args>(args)...);
	}

};

#endif
