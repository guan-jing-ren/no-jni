#ifndef com_sun_java_util_jar_pack_Package$Class$Field_HPP
#define com_sun_java_util_jar_pack_Package$Class$Field_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Package$Class$Field : public jObject<::com::sun::java::util::jar::pack::Package$Class$Field, ::com::sun::java::util::jar::pack::Package$Class$Member> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Package$Class$Field";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::com::sun::java::util::jar::pack::Package$Class, ::jint, ::com::sun::java::util::jar::pack::ConstantPool$DescriptorEntry)>(), //
		jMethod<::jint(::com::sun::java::util::jar::pack::Package$Class$Member)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jbyte()>("getLiteralTag"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jbyte, typename... Args>
	auto getLiteralTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLiteralTag")] != -1);
		return call<R>("getLiteralTag", std::forward<Args>(args)...);
	}

};

#endif
