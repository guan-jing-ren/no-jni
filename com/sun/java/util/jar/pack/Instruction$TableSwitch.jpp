#ifndef com_sun_java_util_jar_pack_Instruction$TableSwitch_HPP
#define com_sun_java_util_jar_pack_Instruction$TableSwitch_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Instruction$TableSwitch : public jObject<::com::sun::java::util::jar::pack::Instruction$TableSwitch, ::com::sun::java::util::jar::pack::Instruction$Switch> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Instruction$TableSwitch";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getCaseCount"), //
		jMethod<::jint(::jint)>("getCaseLabel"), //
		jMethod<::jint(::jint)>("getCaseValue"), //
		jMethod<::jint()>("getHighCase"), //
		jMethod<::jint()>("getLowCase"), //
		jMethod<::jvoid(::jint)>("setCaseCount"), //
		jMethod<::jvoid(::jint, ::jint)>("setCaseLabel"), //
		jMethod<::jvoid(::jint, ::jint)>("setCaseValue"), //
		jMethod<::jvoid(::jint)>("setHighCase"), //
		jMethod<::jvoid(::jint)>("setLowCase"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getCaseCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseCount")] != -1);
		return call<R>("getCaseCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaseLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseLabel")] != -1);
		return call<R>("getCaseLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getCaseValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCaseValue")] != -1);
		return call<R>("getCaseValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getHighCase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHighCase")] != -1);
		return call<R>("getHighCase", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getLowCase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLowCase")] != -1);
		return call<R>("getLowCase", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseCount(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseCount")] != -1);
		return call<R>("setCaseCount", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseLabel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseLabel")] != -1);
		return call<R>("setCaseLabel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setCaseValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setCaseValue")] != -1);
		return call<R>("setCaseValue", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setHighCase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setHighCase")] != -1);
		return call<R>("setHighCase", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setLowCase(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setLowCase")] != -1);
		return call<R>("setLowCase", std::forward<Args>(args)...);
	}

};

#endif
