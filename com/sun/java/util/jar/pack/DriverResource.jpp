#ifndef com_sun_java_util_jar_pack_DriverResource_HPP
#define com_sun_java_util_jar_pack_DriverResource_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::DriverResource : public jObject<::com::sun::java::util::jar::pack::DriverResource, ::java::util::ListResourceBundle> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "DriverResource";

	constexpr static Enume field_signatures{
		jField<::java::lang::String>("BAD_ARGUMENT"), //
		jField<::java::lang::String>("BAD_OPTION"), //
		jField<::java::lang::String>("BAD_REPACK_OUTPUT"), //
		jField<::java::lang::String>("BAD_SPEC"), //
		jField<::java::lang::String>("DETECTED_ZIP_COMMENT"), //
		jField<::java::lang::String>("DUPLICATE_OPTION"), //
		jField<::java::lang::String>("MORE_INFO"), //
		jField<::java::lang::String>("PACK_HELP"), //
		jField<::java::lang::String>("SKIP_FOR_MOVE_FAILED"), //
		jField<::java::lang::String>("SKIP_FOR_REPACKED"), //
		jField<::java::lang::String>("UNPACK_HELP"), //
		jField<::java::lang::String>("VERSION"), //
		jField<::java::lang::String>("WRITE_PACKGZ_FILE"), //
		jField<::java::lang::String>("WRITE_PACK_FILE"), //
	};

	template<typename F = ::java::lang::String>
	static auto BAD_ARGUMENT() {
		static_assert(field_signatures[jField<F>("BAD_ARGUMENT")] != -1);
		return sat<F>("BAD_ARGUMENT");
	}

	template<typename F = ::java::lang::String>
	static auto BAD_OPTION() {
		static_assert(field_signatures[jField<F>("BAD_OPTION")] != -1);
		return sat<F>("BAD_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto BAD_REPACK_OUTPUT() {
		static_assert(field_signatures[jField<F>("BAD_REPACK_OUTPUT")] != -1);
		return sat<F>("BAD_REPACK_OUTPUT");
	}

	template<typename F = ::java::lang::String>
	static auto BAD_SPEC() {
		static_assert(field_signatures[jField<F>("BAD_SPEC")] != -1);
		return sat<F>("BAD_SPEC");
	}

	template<typename F = ::java::lang::String>
	static auto DETECTED_ZIP_COMMENT() {
		static_assert(field_signatures[jField<F>("DETECTED_ZIP_COMMENT")] != -1);
		return sat<F>("DETECTED_ZIP_COMMENT");
	}

	template<typename F = ::java::lang::String>
	static auto DUPLICATE_OPTION() {
		static_assert(field_signatures[jField<F>("DUPLICATE_OPTION")] != -1);
		return sat<F>("DUPLICATE_OPTION");
	}

	template<typename F = ::java::lang::String>
	static auto MORE_INFO() {
		static_assert(field_signatures[jField<F>("MORE_INFO")] != -1);
		return sat<F>("MORE_INFO");
	}

	template<typename F = ::java::lang::String>
	static auto PACK_HELP() {
		static_assert(field_signatures[jField<F>("PACK_HELP")] != -1);
		return sat<F>("PACK_HELP");
	}

	template<typename F = ::java::lang::String>
	static auto SKIP_FOR_MOVE_FAILED() {
		static_assert(field_signatures[jField<F>("SKIP_FOR_MOVE_FAILED")] != -1);
		return sat<F>("SKIP_FOR_MOVE_FAILED");
	}

	template<typename F = ::java::lang::String>
	static auto SKIP_FOR_REPACKED() {
		static_assert(field_signatures[jField<F>("SKIP_FOR_REPACKED")] != -1);
		return sat<F>("SKIP_FOR_REPACKED");
	}

	template<typename F = ::java::lang::String>
	static auto UNPACK_HELP() {
		static_assert(field_signatures[jField<F>("UNPACK_HELP")] != -1);
		return sat<F>("UNPACK_HELP");
	}

	template<typename F = ::java::lang::String>
	static auto VERSION() {
		static_assert(field_signatures[jField<F>("VERSION")] != -1);
		return sat<F>("VERSION");
	}

	template<typename F = ::java::lang::String>
	static auto WRITE_PACKGZ_FILE() {
		static_assert(field_signatures[jField<F>("WRITE_PACKGZ_FILE")] != -1);
		return sat<F>("WRITE_PACKGZ_FILE");
	}

	template<typename F = ::java::lang::String>
	static auto WRITE_PACK_FILE() {
		static_assert(field_signatures[jField<F>("WRITE_PACK_FILE")] != -1);
		return sat<F>("WRITE_PACK_FILE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
	};

};

#endif
