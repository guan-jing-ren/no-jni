#ifndef com_sun_java_util_jar_pack_Attribute$Layout_HPP
#define com_sun_java_util_jar_pack_Attribute$Layout_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Attribute$Layout : public jObject<::com::sun::java::util::jar::pack::Attribute$Layout, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Attribute$Layout";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::java::lang::String, ::java::lang::String)>(), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::jbyte *)>("addContent"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::jbyte *, ::java::lang::Object)>("addContent"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute()>("canonicalInstance"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::Attribute$Layout)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::jint()>("ctype"), //
		jMethod<::jboolean(::com::sun::java::util::jar::pack::Attribute$Layout)>("equals"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute$Layout$Element *()>("getCallables"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute$Layout$Element *()>("getEntryPoint"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry()>("getNameRef"), //
		jMethod<::jboolean()>("hasCallables"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jboolean()>("isEmpty"), //
		jMethod<::java::lang::String()>("layout"), //
		jMethod<::java::lang::String(::com::sun::java::util::jar::pack::Package$Version)>("layoutForClassVersion"), //
		jMethod<::java::lang::String()>("name"), //
		jMethod<::jvoid(::com::sun::java::util::jar::pack::Attribute$Holder, ::jbyte *, ::jint, ::jint, ::com::sun::java::util::jar::pack::Attribute$ValueStream)>("parse"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::java::lang::Object(::com::sun::java::util::jar::pack::Attribute$ValueStream, ::java::io::ByteArrayOutputStream)>("unparse"), //
	};

	template<typename R = ::com::sun::java::util::jar::pack::Attribute, typename... Args>
	auto addContent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addContent")] != -1);
		return call<R>("addContent", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Attribute, typename... Args>
	auto canonicalInstance(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalInstance")] != -1);
		return call<R>("canonicalInstance", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto ctype(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("ctype")] != -1);
		return call<R>("ctype", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Attribute$Layout$Element *, typename... Args>
	auto getCallables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCallables")] != -1);
		return call<R>("getCallables", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Attribute$Layout$Element *, typename... Args>
	auto getEntryPoint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntryPoint")] != -1);
		return call<R>("getEntryPoint", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto getNameRef(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getNameRef")] != -1);
		return call<R>("getNameRef", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto hasCallables(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hasCallables")] != -1);
		return call<R>("hasCallables", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isEmpty(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isEmpty")] != -1);
		return call<R>("isEmpty", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto layout(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layout")] != -1);
		return call<R>("layout", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto layoutForClassVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutForClassVersion")] != -1);
		return call<R>("layoutForClassVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto name(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("name")] != -1);
		return call<R>("name", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto parse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("parse")] != -1);
		return call<R>("parse", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto unparse(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("unparse")] != -1);
		return call<R>("unparse", std::forward<Args>(args)...);
	}

};

#endif
