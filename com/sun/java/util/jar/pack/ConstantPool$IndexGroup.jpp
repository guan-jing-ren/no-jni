#ifndef com_sun_java_util_jar_pack_ConstantPool$IndexGroup_HPP
#define com_sun_java_util_jar_pack_ConstantPool$IndexGroup_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::ConstantPool$IndexGroup : public jObject<::com::sun::java::util::jar::pack::ConstantPool$IndexGroup, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "ConstantPool$IndexGroup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Index(::jbyte)>("getIndexByTag"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Index(::jbyte, ::com::sun::java::util::jar::pack::ConstantPool$ClassEntry)>("getMemberIndex"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$MemberEntry(::jbyte, ::com::sun::java::util::jar::pack::ConstantPool$ClassEntry, ::java::lang::String, ::jint)>("getOverloadingForIndex"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::ConstantPool$MemberEntry)>("getOverloadingIndex"), //
		jMethod<::jboolean()>("haveExtraTags"), //
		jMethod<::jboolean()>("haveNumbers"), //
		jMethod<::jvoid(::jbyte, ::com::sun::java::util::jar::pack::ConstantPool$Index)>("initIndexByTag"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::ConstantPool$Entry)>("untypedIndexOf"), //
	};

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Index, typename... Args>
	auto getIndexByTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getIndexByTag")] != -1);
		return call<R>("getIndexByTag", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Index, typename... Args>
	auto getMemberIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMemberIndex")] != -1);
		return call<R>("getMemberIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$MemberEntry, typename... Args>
	auto getOverloadingForIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverloadingForIndex")] != -1);
		return call<R>("getOverloadingForIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getOverloadingIndex(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getOverloadingIndex")] != -1);
		return call<R>("getOverloadingIndex", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto haveExtraTags(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("haveExtraTags")] != -1);
		return call<R>("haveExtraTags", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto haveNumbers(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("haveNumbers")] != -1);
		return call<R>("haveNumbers", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initIndexByTag(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initIndexByTag")] != -1);
		return call<R>("initIndexByTag", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto untypedIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("untypedIndexOf")] != -1);
		return call<R>("untypedIndexOf", std::forward<Args>(args)...);
	}

};

#endif
