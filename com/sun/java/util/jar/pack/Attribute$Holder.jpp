#ifndef com_sun_java_util_jar_pack_Attribute$Holder_HPP
#define com_sun_java_util_jar_pack_Attribute$Holder_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Attribute$Holder : public jObject<::com::sun::java::util::jar::pack::Attribute$Holder, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Attribute$Holder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::com::sun::java::util::jar::pack::Attribute)>("addAttribute"), //
		jMethod<::jint()>("attributeSize"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::jint)>("getAttribute"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::com::sun::java::util::jar::pack::Attribute$Layout)>("getAttribute"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::java::lang::String)>("getAttribute"), //
		jMethod<::java::util::List()>("getAttributes"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::com::sun::java::util::jar::pack::Attribute$Layout)>("removeAttribute"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::com::sun::java::util::jar::pack::Attribute)>("removeAttribute"), //
		jMethod<::com::sun::java::util::jar::pack::Attribute(::java::lang::String)>("removeAttribute"), //
		jMethod<::jvoid(::java::util::List)>("setAttributes"), //
		jMethod<::jvoid(::java::lang::String)>("strip"), //
		jMethod<::jvoid()>("trimToSize"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto addAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addAttribute")] != -1);
		return call<R>("addAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto attributeSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("attributeSize")] != -1);
		return call<R>("attributeSize", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Attribute, typename... Args>
	auto getAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttribute")] != -1);
		return call<R>("getAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto getAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getAttributes")] != -1);
		return call<R>("getAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Attribute, typename... Args>
	auto removeAttribute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeAttribute")] != -1);
		return call<R>("removeAttribute", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setAttributes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setAttributes")] != -1);
		return call<R>("setAttributes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto strip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("strip")] != -1);
		return call<R>("strip", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trimToSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trimToSize")] != -1);
		return call<R>("trimToSize", std::forward<Args>(args)...);
	}

};

#endif
