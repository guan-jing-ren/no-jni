#ifndef com_sun_java_util_jar_pack_ConstantPool$Index_HPP
#define com_sun_java_util_jar_pack_ConstantPool$Index_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::ConstantPool$Index : public jObject<::com::sun::java::util::jar::pack::ConstantPool$Index, ::java::util::AbstractList> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "ConstantPool$Index";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::jboolean()>("assertIsSorted"), //
		jMethod<::java::lang::Object()>("clone"), //
		jMethod<::jboolean(::com::sun::java::util::jar::pack::ConstantPool$Entry)>("contains"), //
		jMethod<::java::lang::String()>("dumpString"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry(::jint)>("get"), //
		jMethod<::java::lang::Object(::jint)>("get"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry(::jint)>("getEntry"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::ConstantPool$Entry)>("indexOf"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::ConstantPool$Entry)>("lastIndexOf"), //
		jMethod<::jint()>("size"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry *()>("toArray"), //
		jMethod<::java::lang::Object *()>("toArray"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry *(::com::sun::java::util::jar::pack::ConstantPool$Entry *)>("toArray"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto assertIsSorted(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("assertIsSorted")] != -1);
		return call<R>("assertIsSorted", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::Object, typename... Args>
	auto clone(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("clone")] != -1);
		return call<R>("clone", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto contains(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("contains")] != -1);
		return call<R>("contains", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto dumpString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("dumpString")] != -1);
		return call<R>("dumpString", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto get(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("get")] != -1);
		return call<R>("get", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto getEntry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getEntry")] != -1);
		return call<R>("getEntry", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto indexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("indexOf")] != -1);
		return call<R>("indexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto lastIndexOf(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("lastIndexOf")] != -1);
		return call<R>("lastIndexOf", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto size(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("size")] != -1);
		return call<R>("size", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry *, typename... Args>
	auto toArray(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toArray")] != -1);
		return call<R>("toArray", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
