#ifndef com_sun_java_util_jar_pack_Package$Class_HPP
#define com_sun_java_util_jar_pack_Package$Class_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Package$Class : public jObject<::com::sun::java::util::jar::pack::Package$Class, ::com::sun::java::util::jar::pack::Attribute$Holder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Package$Class";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("canonicalFileName"), //
		jMethod<::jint(::com::sun::java::util::jar::pack::Package$Class)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::java::util::List()>("computeGloballyImpliedICs"), //
		jMethod<::java::io::File()>("getFileName"), //
		jMethod<::java::io::File(::java::io::File)>("getFileName"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::com::sun::java::util::jar::pack::Package()>("getPackage"), //
		jMethod<::jvoid(::com::sun::java::util::jar::pack::Package$File)>("initFile"), //
		jMethod<::jvoid()>("maybeChooseFileName"), //
		jMethod<::jvoid(::java::util::Collection)>("setInnerClasses"), //
		jMethod<::jvoid(::java::lang::String)>("strip"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::jvoid()>("trimToSize"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto canonicalFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("canonicalFileName")] != -1);
		return call<R>("canonicalFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::java::util::List, typename... Args>
	auto computeGloballyImpliedICs(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("computeGloballyImpliedICs")] != -1);
		return call<R>("computeGloballyImpliedICs", std::forward<Args>(args)...);
	}

	template<typename R = ::java::io::File, typename... Args>
	auto getFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFileName")] != -1);
		return call<R>("getFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Package, typename... Args>
	auto getPackage(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPackage")] != -1);
		return call<R>("getPackage", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initFile(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initFile")] != -1);
		return call<R>("initFile", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto maybeChooseFileName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("maybeChooseFileName")] != -1);
		return call<R>("maybeChooseFileName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setInnerClasses(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setInnerClasses")] != -1);
		return call<R>("setInnerClasses", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto strip(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("strip")] != -1);
		return call<R>("strip", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto trimToSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("trimToSize")] != -1);
		return call<R>("trimToSize", std::forward<Args>(args)...);
	}

};

#endif
