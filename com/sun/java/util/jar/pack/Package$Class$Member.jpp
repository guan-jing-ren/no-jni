#ifndef com_sun_java_util_jar_pack_Package$Class$Member_HPP
#define com_sun_java_util_jar_pack_Package$Class$Member_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Package$Class$Member : public jObject<::com::sun::java::util::jar::pack::Package$Class$Member, ::com::sun::java::util::jar::pack::Attribute$Holder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Package$Class$Member";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$DescriptorEntry()>("getDescriptor"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::java::lang::String()>("getType"), //
		jMethod<::com::sun::java::util::jar::pack::Package$Class()>("thisClass"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$DescriptorEntry, typename... Args>
	auto getDescriptor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescriptor")] != -1);
		return call<R>("getDescriptor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getType(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getType")] != -1);
		return call<R>("getType", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::Package$Class, typename... Args>
	auto thisClass(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("thisClass")] != -1);
		return call<R>("thisClass", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
