#ifndef com_sun_java_util_jar_pack_Fixups$Fixup_HPP
#define com_sun_java_util_jar_pack_Fixups$Fixup_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::util::jar::pack::Fixups$Fixup : public jObject<::com::sun::java::util::jar::pack::Fixups$Fixup, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_util_jar_pack / "Fixups$Fixup";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint, ::jint, ::com::sun::java::util::jar::pack::ConstantPool$Entry)>(), //
		jMethod<::jint(::com::sun::java::util::jar::pack::Fixups$Fixup)>("compareTo"), //
		jMethod<::jint(::java::lang::Object)>("compareTo"), //
		jMethod<::com::sun::java::util::jar::pack::ConstantPool$Entry()>("entry"), //
		jMethod<::jboolean(::java::lang::Object)>("equals"), //
		jMethod<::jint()>("format"), //
		jMethod<::jint()>("hashCode"), //
		jMethod<::jint()>("location"), //
		jMethod<::java::lang::String()>("toString"), //
	};

	template<typename R = ::jint, typename... Args>
	auto compareTo(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("compareTo")] != -1);
		return call<R>("compareTo", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::util::jar::pack::ConstantPool$Entry, typename... Args>
	auto entry(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("entry")] != -1);
		return call<R>("entry", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto equals(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("equals")] != -1);
		return call<R>("equals", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto format(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("format")] != -1);
		return call<R>("format", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto hashCode(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("hashCode")] != -1);
		return call<R>("hashCode", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto location(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("location")] != -1);
		return call<R>("location", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

};

#endif
