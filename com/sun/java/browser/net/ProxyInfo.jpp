#ifndef com_sun_java_browser_net_ProxyInfo_HPP
#define com_sun_java_browser_net_ProxyInfo_HPP

#include "../../../../../jfwd_decl.hpp"

class ::com::sun::java::browser::net::ProxyInfo : public jObject<::com::sun::java::browser::net::ProxyInfo, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_browser_net / "ProxyInfo";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("getHost"), //
		jMethod<::jint()>("getPort"), //
		jMethod<::jboolean()>("isSocks"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getHost(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getHost")] != -1);
		return call<R>("getHost", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getPort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPort")] != -1);
		return call<R>("getPort", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSocks(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSocks")] != -1);
		return call<R>("isSocks", std::forward<Args>(args)...);
	}

};

#endif
