#ifndef com_sun_java_swing_plaf_gtk_GTKConstants$ArrowType_HPP
#define com_sun_java_swing_plaf_gtk_GTKConstants$ArrowType_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType : public jObject<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKConstants$ArrowType";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>("DOWN"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>("LEFT"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>("RIGHT"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>("UP"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>
	static auto DOWN() {
		static_assert(field_signatures[jField<F>("DOWN")] != -1);
		return sat<F>("DOWN");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>
	static auto LEFT() {
		static_assert(field_signatures[jField<F>("LEFT")] != -1);
		return sat<F>("LEFT");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>
	static auto RIGHT() {
		static_assert(field_signatures[jField<F>("RIGHT")] != -1);
		return sat<F>("RIGHT");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType>
	static auto UP() {
		static_assert(field_signatures[jField<F>("UP")] != -1);
		return sat<F>("UP");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ArrowType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
