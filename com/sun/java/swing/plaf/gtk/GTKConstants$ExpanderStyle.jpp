#ifndef com_sun_java_swing_plaf_gtk_GTKConstants$ExpanderStyle_HPP
#define com_sun_java_swing_plaf_gtk_GTKConstants$ExpanderStyle_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle : public jObject<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKConstants$ExpanderStyle";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>("COLLAPSED"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>("EXPANDED"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>("SEMI_COLLAPSED"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>("SEMI_EXPANDED"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>
	static auto COLLAPSED() {
		static_assert(field_signatures[jField<F>("COLLAPSED")] != -1);
		return sat<F>("COLLAPSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>
	static auto EXPANDED() {
		static_assert(field_signatures[jField<F>("EXPANDED")] != -1);
		return sat<F>("EXPANDED");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>
	static auto SEMI_COLLAPSED() {
		static_assert(field_signatures[jField<F>("SEMI_COLLAPSED")] != -1);
		return sat<F>("SEMI_COLLAPSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle>
	static auto SEMI_EXPANDED() {
		static_assert(field_signatures[jField<F>("SEMI_EXPANDED")] != -1);
		return sat<F>("SEMI_EXPANDED");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ExpanderStyle *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
