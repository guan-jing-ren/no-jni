#ifndef com_sun_java_swing_plaf_gtk_GTKColorType_HPP
#define com_sun_java_swing_plaf_gtk_GTKColorType_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKColorType : public jObject<::com::sun::java::swing::plaf::gtk::GTKColorType, ::javax::swing::plaf::synth::ColorType> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKColorType";

	constexpr static Enume field_signatures{
		jField<::javax::swing::plaf::synth::ColorType>("BLACK"), //
		jField<::javax::swing::plaf::synth::ColorType>("DARK"), //
		jField<::javax::swing::plaf::synth::ColorType>("LIGHT"), //
		jField<::jint>("MAX_COUNT"), //
		jField<::javax::swing::plaf::synth::ColorType>("MID"), //
		jField<::javax::swing::plaf::synth::ColorType>("WHITE"), //
	};

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto BLACK() {
		static_assert(field_signatures[jField<F>("BLACK")] != -1);
		return sat<F>("BLACK");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto DARK() {
		static_assert(field_signatures[jField<F>("DARK")] != -1);
		return sat<F>("DARK");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto LIGHT() {
		static_assert(field_signatures[jField<F>("LIGHT")] != -1);
		return sat<F>("LIGHT");
	}

	template<typename F = ::jint>
	static auto MAX_COUNT() {
		static_assert(field_signatures[jField<F>("MAX_COUNT")] != -1);
		return sat<F>("MAX_COUNT");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto MID() {
		static_assert(field_signatures[jField<F>("MID")] != -1);
		return sat<F>("MID");
	}

	template<typename F = ::javax::swing::plaf::synth::ColorType>
	static auto WHITE() {
		static_assert(field_signatures[jField<F>("WHITE")] != -1);
		return sat<F>("WHITE");
	}

	constexpr static Enume method_signatures{
		cexprstr{"\0"}, //
	};

};

#endif
