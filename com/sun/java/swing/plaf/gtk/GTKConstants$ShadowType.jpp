#ifndef com_sun_java_swing_plaf_gtk_GTKConstants$ShadowType_HPP
#define com_sun_java_swing_plaf_gtk_GTKConstants$ShadowType_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType : public jObject<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKConstants$ShadowType";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>("ETCHED_IN"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>("ETCHED_OUT"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>("IN"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>("NONE"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>("OUT"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>
	static auto ETCHED_IN() {
		static_assert(field_signatures[jField<F>("ETCHED_IN")] != -1);
		return sat<F>("ETCHED_IN");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>
	static auto ETCHED_OUT() {
		static_assert(field_signatures[jField<F>("ETCHED_OUT")] != -1);
		return sat<F>("ETCHED_OUT");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>
	static auto IN() {
		static_assert(field_signatures[jField<F>("IN")] != -1);
		return sat<F>("IN");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>
	static auto NONE() {
		static_assert(field_signatures[jField<F>("NONE")] != -1);
		return sat<F>("NONE");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType>
	static auto OUT() {
		static_assert(field_signatures[jField<F>("OUT")] != -1);
		return sat<F>("OUT");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$ShadowType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
