#ifndef com_sun_java_swing_plaf_gtk_GTKConstants$StateType_HPP
#define com_sun_java_swing_plaf_gtk_GTKConstants$StateType_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType : public jObject<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKConstants$StateType";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>("ACTIVE"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>("INSENSITIVE"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>("NORMAL"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>("PRELIGHT"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>("SELECTED"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>
	static auto ACTIVE() {
		static_assert(field_signatures[jField<F>("ACTIVE")] != -1);
		return sat<F>("ACTIVE");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>
	static auto INSENSITIVE() {
		static_assert(field_signatures[jField<F>("INSENSITIVE")] != -1);
		return sat<F>("INSENSITIVE");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>
	static auto PRELIGHT() {
		static_assert(field_signatures[jField<F>("PRELIGHT")] != -1);
		return sat<F>("PRELIGHT");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$StateType *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$StateType *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
