#ifndef com_sun_java_swing_plaf_gtk_GTKLookAndFeel_HPP
#define com_sun_java_swing_plaf_gtk_GTKLookAndFeel_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKLookAndFeel : public jObject<::com::sun::java::swing::plaf::gtk::GTKLookAndFeel, ::javax::swing::plaf::synth::SynthLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::swing::UIDefaults()>("getDefaults"), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::javax::swing::LayoutStyle()>("getLayoutStyle"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jboolean()>("isNativeLookAndFeel"), //
		jMethod<::jboolean()>("isSupportedLookAndFeel"), //
		jMethod<::jboolean()>("shouldUpdateStyleOnAncestorChanged"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::UIDefaults, typename... Args>
	auto getDefaults(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaults")] != -1);
		return call<R>("getDefaults", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LayoutStyle, typename... Args>
	auto getLayoutStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutStyle")] != -1);
		return call<R>("getLayoutStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNativeLookAndFeel")] != -1);
		return call<R>("isNativeLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLookAndFeel")] != -1);
		return call<R>("isSupportedLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto shouldUpdateStyleOnAncestorChanged(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("shouldUpdateStyleOnAncestorChanged")] != -1);
		return call<R>("shouldUpdateStyleOnAncestorChanged", std::forward<Args>(args)...);
	}

};

#endif
