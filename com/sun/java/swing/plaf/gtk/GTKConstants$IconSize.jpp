#ifndef com_sun_java_swing_plaf_gtk_GTKConstants$IconSize_HPP
#define com_sun_java_swing_plaf_gtk_GTKConstants$IconSize_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize : public jObject<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_gtk / "GTKConstants$IconSize";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("BUTTON"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("DIALOG"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("DND"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("INVALID"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("LARGE_TOOLBAR"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("MENU"), //
		jField<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>("SMALL_TOOLBAR"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto BUTTON() {
		static_assert(field_signatures[jField<F>("BUTTON")] != -1);
		return sat<F>("BUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto DIALOG() {
		static_assert(field_signatures[jField<F>("DIALOG")] != -1);
		return sat<F>("DIALOG");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto DND() {
		static_assert(field_signatures[jField<F>("DND")] != -1);
		return sat<F>("DND");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto INVALID() {
		static_assert(field_signatures[jField<F>("INVALID")] != -1);
		return sat<F>("INVALID");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto LARGE_TOOLBAR() {
		static_assert(field_signatures[jField<F>("LARGE_TOOLBAR")] != -1);
		return sat<F>("LARGE_TOOLBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize>
	static auto SMALL_TOOLBAR() {
		static_assert(field_signatures[jField<F>("SMALL_TOOLBAR")] != -1);
		return sat<F>("SMALL_TOOLBAR");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::gtk::GTKConstants$IconSize *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
