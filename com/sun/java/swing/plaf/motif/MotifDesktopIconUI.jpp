#ifndef com_sun_java_swing_plaf_motif_MotifDesktopIconUI_HPP
#define com_sun_java_swing_plaf_motif_MotifDesktopIconUI_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifDesktopIconUI : public jObject<::com::sun::java::swing::plaf::motif::MotifDesktopIconUI, ::javax::swing::plaf::basic::BasicDesktopIconUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifDesktopIconUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::javax::swing::Icon()>("getDefaultIcon"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMaximumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getMinimumSize"), //
		jMethod<::java::awt::Dimension(::javax::swing::JComponent)>("getPreferredSize"), //
		jMethod<::jvoid(::javax::swing::Icon)>("setDefaultIcon"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDefaultIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDefaultIcon")] != -1);
		return call<R>("getDefaultIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDefaultIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDefaultIcon")] != -1);
		return call<R>("setDefaultIcon", std::forward<Args>(args)...);
	}

};

#endif
