#ifndef com_sun_java_swing_plaf_motif_MotifBorders$FocusBorder_HPP
#define com_sun_java_swing_plaf_motif_MotifBorders$FocusBorder_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifBorders$FocusBorder : public jObject<::com::sun::java::swing::plaf::motif::MotifBorders$FocusBorder, ::javax::swing::border::AbstractBorder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifBorders$FocusBorder";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::java::awt::Color, ::java::awt::Color)>(), //
		jMethod<::java::awt::Insets(::java::awt::Component, ::java::awt::Insets)>("getBorderInsets"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint)>("paintBorder"), //
	};

	template<typename R = ::java::awt::Insets, typename... Args>
	auto getBorderInsets(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBorderInsets")] != -1);
		return call<R>("getBorderInsets", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintBorder(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintBorder")] != -1);
		return call<R>("paintBorder", std::forward<Args>(args)...);
	}

};

#endif
