#ifndef com_sun_java_swing_plaf_motif_MotifScrollBarButton_HPP
#define com_sun_java_swing_plaf_motif_MotifScrollBarButton_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifScrollBarButton : public jObject<::com::sun::java::swing::plaf::motif::MotifScrollBarButton, ::javax::swing::plaf::basic::BasicArrowButton> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifScrollBarButton";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::jint)>(), //
		jMethod<::java::awt::Dimension()>("getMaximumSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jboolean()>("isFocusTraversable"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paint"), //
	};

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMaximumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMaximumSize")] != -1);
		return call<R>("getMaximumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isFocusTraversable(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isFocusTraversable")] != -1);
		return call<R>("isFocusTraversable", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paint(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paint")] != -1);
		return call<R>("paint", std::forward<Args>(args)...);
	}

};

#endif
