#ifndef com_sun_java_swing_plaf_motif_MotifBorders$InternalFrameBorder_HPP
#define com_sun_java_swing_plaf_motif_MotifBorders$InternalFrameBorder_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifBorders$InternalFrameBorder : public jObject<::com::sun::java::swing::plaf::motif::MotifBorders$InternalFrameBorder, ::com::sun::java::swing::plaf::motif::MotifBorders$FrameBorder> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifBorders$InternalFrameBorder";

	constexpr static Enume field_signatures{
		jField<::jint>("CORNER_SIZE"), //
	};

	template<typename F = ::jint>
	static auto CORNER_SIZE() {
		static_assert(field_signatures[jField<F>("CORNER_SIZE")] != -1);
		return sat<F>("CORNER_SIZE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame)>(), //
		jMethod<::javax::swing::JInternalFrame()>("frame"), //
		jMethod<::jint()>("resizePartWidth"), //
		jMethod<::jvoid(::javax::swing::JInternalFrame)>("setFrame"), //
	};

	template<typename R = ::javax::swing::JInternalFrame, typename... Args>
	auto frame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("frame")] != -1);
		return call<R>("frame", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto resizePartWidth(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("resizePartWidth")] != -1);
		return call<R>("resizePartWidth", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFrame(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFrame")] != -1);
		return call<R>("setFrame", std::forward<Args>(args)...);
	}

};

#endif
