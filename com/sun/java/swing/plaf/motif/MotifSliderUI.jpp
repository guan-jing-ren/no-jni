#ifndef com_sun_java_swing_plaf_motif_MotifSliderUI_HPP
#define com_sun_java_swing_plaf_motif_MotifSliderUI_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifSliderUI : public jObject<::com::sun::java::swing::plaf::motif::MotifSliderUI, ::javax::swing::plaf::basic::BasicSliderUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifSliderUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JSlider)>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::java::awt::Dimension()>("getMinimumHorizontalSize"), //
		jMethod<::java::awt::Dimension()>("getMinimumVerticalSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredHorizontalSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredVerticalSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintFocus"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintThumb"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintTrack"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumHorizontalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumHorizontalSize")] != -1);
		return call<R>("getMinimumHorizontalSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumVerticalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumVerticalSize")] != -1);
		return call<R>("getMinimumVerticalSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredHorizontalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredHorizontalSize")] != -1);
		return call<R>("getPreferredHorizontalSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredVerticalSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredVerticalSize")] != -1);
		return call<R>("getPreferredVerticalSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintFocus(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintFocus")] != -1);
		return call<R>("paintFocus", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintThumb(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintThumb")] != -1);
		return call<R>("paintThumb", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintTrack(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintTrack")] != -1);
		return call<R>("paintTrack", std::forward<Args>(args)...);
	}

};

#endif
