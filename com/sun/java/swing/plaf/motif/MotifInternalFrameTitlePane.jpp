#ifndef com_sun_java_swing_plaf_motif_MotifInternalFrameTitlePane_HPP
#define com_sun_java_swing_plaf_motif_MotifInternalFrameTitlePane_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifInternalFrameTitlePane : public jObject<::com::sun::java::swing::plaf::motif::MotifInternalFrameTitlePane, ::javax::swing::plaf::basic::BasicInternalFrameTitlePane> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifInternalFrameTitlePane";

	constexpr static Enume field_signatures{
		jField<::jint>("BUTTON_SIZE"), //
	};

	template<typename F = ::jint>
	static auto BUTTON_SIZE() {
		static_assert(field_signatures[jField<F>("BUTTON_SIZE")] != -1);
		return sat<F>("BUTTON_SIZE");
	}

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame)>(), //
		jMethod<::jvoid(::java::awt::event::ActionEvent)>("actionPerformed"), //
		jMethod<::jvoid(::java::lang::String, ::java::awt::Component)>("addLayoutComponent"), //
		jMethod<::jvoid(::java::awt::Container)>("layoutContainer"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("minimumLayoutSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintComponent"), //
		jMethod<::java::awt::Dimension(::java::awt::Container)>("preferredLayoutSize"), //
		jMethod<::jvoid(::java::beans::PropertyChangeEvent)>("propertyChange"), //
		jMethod<::jvoid(::java::awt::Component)>("removeLayoutComponent"), //
	};

	template<typename R = ::jvoid, typename... Args>
	auto actionPerformed(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("actionPerformed")] != -1);
		return call<R>("actionPerformed", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto addLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("addLayoutComponent")] != -1);
		return call<R>("addLayoutComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto layoutContainer(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("layoutContainer")] != -1);
		return call<R>("layoutContainer", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto minimumLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("minimumLayoutSize")] != -1);
		return call<R>("minimumLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintComponent")] != -1);
		return call<R>("paintComponent", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto preferredLayoutSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("preferredLayoutSize")] != -1);
		return call<R>("preferredLayoutSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto propertyChange(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("propertyChange")] != -1);
		return call<R>("propertyChange", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto removeLayoutComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("removeLayoutComponent")] != -1);
		return call<R>("removeLayoutComponent", std::forward<Args>(args)...);
	}

};

#endif
