#ifndef com_sun_java_swing_plaf_motif_MotifIconFactory_HPP
#define com_sun_java_swing_plaf_motif_MotifIconFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifIconFactory : public jObject<::com::sun::java::swing::plaf::motif::MotifIconFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifIconFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::Icon()>("getCheckBoxIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuArrowIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuItemArrowIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuItemCheckIcon"), //
		jMethod<::javax::swing::Icon()>("getRadioButtonIcon"), //
	};

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getCheckBoxIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckBoxIcon")] != -1);
		return scall<R>("getCheckBoxIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuArrowIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuArrowIcon")] != -1);
		return scall<R>("getMenuArrowIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuItemArrowIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemArrowIcon")] != -1);
		return scall<R>("getMenuItemArrowIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuItemCheckIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemCheckIcon")] != -1);
		return scall<R>("getMenuItemCheckIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getRadioButtonIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRadioButtonIcon")] != -1);
		return scall<R>("getRadioButtonIcon", std::forward<Args>(args)...);
	}

};

#endif
