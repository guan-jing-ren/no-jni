#ifndef com_sun_java_swing_plaf_motif_MotifGraphicsUtils_HPP
#define com_sun_java_swing_plaf_motif_MotifGraphicsUtils_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifGraphicsUtils : public jObject<::com::sun::java::swing::plaf::motif::MotifGraphicsUtils, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifGraphicsUtils";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jvoid(::java::awt::Graphics, ::jint, ::jint, ::jint, ::jint, ::java::awt::Color, ::java::awt::Color)>("drawGroove"), //
		jMethod<::jvoid(::java::awt::Graphics, ::java::lang::String, ::jint, ::jint, ::jint, ::jint, ::jint)>("drawStringInRect"), //
		jMethod<::jvoid(::java::awt::Graphics, ::javax::swing::JComponent, ::javax::swing::Icon, ::javax::swing::Icon, ::java::awt::Color, ::java::awt::Color, ::jint)>("paintMenuItem"), //
	};

	template<typename R = ::jvoid, typename... Args>
	static auto drawGroove(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawGroove")] != -1);
		return scall<R>("drawGroove", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto drawStringInRect(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("drawStringInRect")] != -1);
		return scall<R>("drawStringInRect", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto paintMenuItem(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintMenuItem")] != -1);
		return scall<R>("paintMenuItem", std::forward<Args>(args)...);
	}

};

#endif
