#ifndef com_sun_java_swing_plaf_motif_MotifLookAndFeel_HPP
#define com_sun_java_swing_plaf_motif_MotifLookAndFeel_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::motif::MotifLookAndFeel : public jObject<::com::sun::java::swing::plaf::motif::MotifLookAndFeel, ::javax::swing::plaf::basic::BasicLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_motif / "MotifLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jboolean()>("isNativeLookAndFeel"), //
		jMethod<::jboolean()>("isSupportedLookAndFeel"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNativeLookAndFeel")] != -1);
		return call<R>("isNativeLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLookAndFeel")] != -1);
		return call<R>("isSupportedLookAndFeel", std::forward<Args>(args)...);
	}

};

#endif
