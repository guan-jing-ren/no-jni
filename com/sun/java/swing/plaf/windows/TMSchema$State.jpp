#ifndef com_sun_java_swing_plaf_windows_TMSchema$State_HPP
#define com_sun_java_swing_plaf_windows_TMSchema$State_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::TMSchema$State : public jObject<::com::sun::java::swing::plaf::windows::TMSchema$State, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "TMSchema$State";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ACTIVE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ASSIST"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("BITMAP"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("BULLETDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("BULLETNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKEDDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKEDNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKEDPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKMARKDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CHECKMARKNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("CLOSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DEFAULTED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DISABLEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DISABLEDPUSHED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DOWNDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DOWNHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DOWNHOVER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DOWNNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("DOWNPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("FOCUSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("HOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("HOTCHECKED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("HOVER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONSORTEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONSORTEDNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("ICONSORTEDPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("INACTIVE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("INACTIVEDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("INACTIVEHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("INACTIVENORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("INACTIVEPUSHED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("LEFTDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("LEFTHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("LEFTHOVER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("LEFTNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("LEFTPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("MIXEDDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("MIXEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("MIXEDNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("MIXEDPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("NORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("OPENED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("PRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("PUSHED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("READONLY"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("RIGHTDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("RIGHTHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("RIGHTHOVER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("RIGHTNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("RIGHTPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SELECTED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SORTEDDOWN"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SORTEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SORTEDNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SORTEDPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("SORTEDUP"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UNCHECKEDDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UNCHECKEDHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UNCHECKEDNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UNCHECKEDPRESSED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UPDISABLED"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UPHOT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UPHOVER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UPNORMAL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$State>("UPPRESSED"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ACTIVE() {
		static_assert(field_signatures[jField<F>("ACTIVE")] != -1);
		return sat<F>("ACTIVE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ASSIST() {
		static_assert(field_signatures[jField<F>("ASSIST")] != -1);
		return sat<F>("ASSIST");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto BITMAP() {
		static_assert(field_signatures[jField<F>("BITMAP")] != -1);
		return sat<F>("BITMAP");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto BULLETDISABLED() {
		static_assert(field_signatures[jField<F>("BULLETDISABLED")] != -1);
		return sat<F>("BULLETDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto BULLETNORMAL() {
		static_assert(field_signatures[jField<F>("BULLETNORMAL")] != -1);
		return sat<F>("BULLETNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKED() {
		static_assert(field_signatures[jField<F>("CHECKED")] != -1);
		return sat<F>("CHECKED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKEDDISABLED() {
		static_assert(field_signatures[jField<F>("CHECKEDDISABLED")] != -1);
		return sat<F>("CHECKEDDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKEDHOT() {
		static_assert(field_signatures[jField<F>("CHECKEDHOT")] != -1);
		return sat<F>("CHECKEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKEDNORMAL() {
		static_assert(field_signatures[jField<F>("CHECKEDNORMAL")] != -1);
		return sat<F>("CHECKEDNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKEDPRESSED() {
		static_assert(field_signatures[jField<F>("CHECKEDPRESSED")] != -1);
		return sat<F>("CHECKEDPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKMARKDISABLED() {
		static_assert(field_signatures[jField<F>("CHECKMARKDISABLED")] != -1);
		return sat<F>("CHECKMARKDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CHECKMARKNORMAL() {
		static_assert(field_signatures[jField<F>("CHECKMARKNORMAL")] != -1);
		return sat<F>("CHECKMARKNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto CLOSED() {
		static_assert(field_signatures[jField<F>("CLOSED")] != -1);
		return sat<F>("CLOSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DEFAULTED() {
		static_assert(field_signatures[jField<F>("DEFAULTED")] != -1);
		return sat<F>("DEFAULTED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DISABLED() {
		static_assert(field_signatures[jField<F>("DISABLED")] != -1);
		return sat<F>("DISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DISABLEDHOT() {
		static_assert(field_signatures[jField<F>("DISABLEDHOT")] != -1);
		return sat<F>("DISABLEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DISABLEDPUSHED() {
		static_assert(field_signatures[jField<F>("DISABLEDPUSHED")] != -1);
		return sat<F>("DISABLEDPUSHED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DOWNDISABLED() {
		static_assert(field_signatures[jField<F>("DOWNDISABLED")] != -1);
		return sat<F>("DOWNDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DOWNHOT() {
		static_assert(field_signatures[jField<F>("DOWNHOT")] != -1);
		return sat<F>("DOWNHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DOWNHOVER() {
		static_assert(field_signatures[jField<F>("DOWNHOVER")] != -1);
		return sat<F>("DOWNHOVER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DOWNNORMAL() {
		static_assert(field_signatures[jField<F>("DOWNNORMAL")] != -1);
		return sat<F>("DOWNNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto DOWNPRESSED() {
		static_assert(field_signatures[jField<F>("DOWNPRESSED")] != -1);
		return sat<F>("DOWNPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto FOCUSED() {
		static_assert(field_signatures[jField<F>("FOCUSED")] != -1);
		return sat<F>("FOCUSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto HOT() {
		static_assert(field_signatures[jField<F>("HOT")] != -1);
		return sat<F>("HOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto HOTCHECKED() {
		static_assert(field_signatures[jField<F>("HOTCHECKED")] != -1);
		return sat<F>("HOTCHECKED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto HOVER() {
		static_assert(field_signatures[jField<F>("HOVER")] != -1);
		return sat<F>("HOVER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONHOT() {
		static_assert(field_signatures[jField<F>("ICONHOT")] != -1);
		return sat<F>("ICONHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONNORMAL() {
		static_assert(field_signatures[jField<F>("ICONNORMAL")] != -1);
		return sat<F>("ICONNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONPRESSED() {
		static_assert(field_signatures[jField<F>("ICONPRESSED")] != -1);
		return sat<F>("ICONPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONSORTEDHOT() {
		static_assert(field_signatures[jField<F>("ICONSORTEDHOT")] != -1);
		return sat<F>("ICONSORTEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONSORTEDNORMAL() {
		static_assert(field_signatures[jField<F>("ICONSORTEDNORMAL")] != -1);
		return sat<F>("ICONSORTEDNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto ICONSORTEDPRESSED() {
		static_assert(field_signatures[jField<F>("ICONSORTEDPRESSED")] != -1);
		return sat<F>("ICONSORTEDPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto INACTIVE() {
		static_assert(field_signatures[jField<F>("INACTIVE")] != -1);
		return sat<F>("INACTIVE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto INACTIVEDISABLED() {
		static_assert(field_signatures[jField<F>("INACTIVEDISABLED")] != -1);
		return sat<F>("INACTIVEDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto INACTIVEHOT() {
		static_assert(field_signatures[jField<F>("INACTIVEHOT")] != -1);
		return sat<F>("INACTIVEHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto INACTIVENORMAL() {
		static_assert(field_signatures[jField<F>("INACTIVENORMAL")] != -1);
		return sat<F>("INACTIVENORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto INACTIVEPUSHED() {
		static_assert(field_signatures[jField<F>("INACTIVEPUSHED")] != -1);
		return sat<F>("INACTIVEPUSHED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto LEFTDISABLED() {
		static_assert(field_signatures[jField<F>("LEFTDISABLED")] != -1);
		return sat<F>("LEFTDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto LEFTHOT() {
		static_assert(field_signatures[jField<F>("LEFTHOT")] != -1);
		return sat<F>("LEFTHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto LEFTHOVER() {
		static_assert(field_signatures[jField<F>("LEFTHOVER")] != -1);
		return sat<F>("LEFTHOVER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto LEFTNORMAL() {
		static_assert(field_signatures[jField<F>("LEFTNORMAL")] != -1);
		return sat<F>("LEFTNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto LEFTPRESSED() {
		static_assert(field_signatures[jField<F>("LEFTPRESSED")] != -1);
		return sat<F>("LEFTPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto MIXEDDISABLED() {
		static_assert(field_signatures[jField<F>("MIXEDDISABLED")] != -1);
		return sat<F>("MIXEDDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto MIXEDHOT() {
		static_assert(field_signatures[jField<F>("MIXEDHOT")] != -1);
		return sat<F>("MIXEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto MIXEDNORMAL() {
		static_assert(field_signatures[jField<F>("MIXEDNORMAL")] != -1);
		return sat<F>("MIXEDNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto MIXEDPRESSED() {
		static_assert(field_signatures[jField<F>("MIXEDPRESSED")] != -1);
		return sat<F>("MIXEDPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto NORMAL() {
		static_assert(field_signatures[jField<F>("NORMAL")] != -1);
		return sat<F>("NORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto OPENED() {
		static_assert(field_signatures[jField<F>("OPENED")] != -1);
		return sat<F>("OPENED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto PRESSED() {
		static_assert(field_signatures[jField<F>("PRESSED")] != -1);
		return sat<F>("PRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto PUSHED() {
		static_assert(field_signatures[jField<F>("PUSHED")] != -1);
		return sat<F>("PUSHED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto READONLY() {
		static_assert(field_signatures[jField<F>("READONLY")] != -1);
		return sat<F>("READONLY");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto RIGHTDISABLED() {
		static_assert(field_signatures[jField<F>("RIGHTDISABLED")] != -1);
		return sat<F>("RIGHTDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto RIGHTHOT() {
		static_assert(field_signatures[jField<F>("RIGHTHOT")] != -1);
		return sat<F>("RIGHTHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto RIGHTHOVER() {
		static_assert(field_signatures[jField<F>("RIGHTHOVER")] != -1);
		return sat<F>("RIGHTHOVER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto RIGHTNORMAL() {
		static_assert(field_signatures[jField<F>("RIGHTNORMAL")] != -1);
		return sat<F>("RIGHTNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto RIGHTPRESSED() {
		static_assert(field_signatures[jField<F>("RIGHTPRESSED")] != -1);
		return sat<F>("RIGHTPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SELECTED() {
		static_assert(field_signatures[jField<F>("SELECTED")] != -1);
		return sat<F>("SELECTED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SORTEDDOWN() {
		static_assert(field_signatures[jField<F>("SORTEDDOWN")] != -1);
		return sat<F>("SORTEDDOWN");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SORTEDHOT() {
		static_assert(field_signatures[jField<F>("SORTEDHOT")] != -1);
		return sat<F>("SORTEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SORTEDNORMAL() {
		static_assert(field_signatures[jField<F>("SORTEDNORMAL")] != -1);
		return sat<F>("SORTEDNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SORTEDPRESSED() {
		static_assert(field_signatures[jField<F>("SORTEDPRESSED")] != -1);
		return sat<F>("SORTEDPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto SORTEDUP() {
		static_assert(field_signatures[jField<F>("SORTEDUP")] != -1);
		return sat<F>("SORTEDUP");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UNCHECKEDDISABLED() {
		static_assert(field_signatures[jField<F>("UNCHECKEDDISABLED")] != -1);
		return sat<F>("UNCHECKEDDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UNCHECKEDHOT() {
		static_assert(field_signatures[jField<F>("UNCHECKEDHOT")] != -1);
		return sat<F>("UNCHECKEDHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UNCHECKEDNORMAL() {
		static_assert(field_signatures[jField<F>("UNCHECKEDNORMAL")] != -1);
		return sat<F>("UNCHECKEDNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UNCHECKEDPRESSED() {
		static_assert(field_signatures[jField<F>("UNCHECKEDPRESSED")] != -1);
		return sat<F>("UNCHECKEDPRESSED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UPDISABLED() {
		static_assert(field_signatures[jField<F>("UPDISABLED")] != -1);
		return sat<F>("UPDISABLED");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UPHOT() {
		static_assert(field_signatures[jField<F>("UPHOT")] != -1);
		return sat<F>("UPHOT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UPHOVER() {
		static_assert(field_signatures[jField<F>("UPHOVER")] != -1);
		return sat<F>("UPHOVER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UPNORMAL() {
		static_assert(field_signatures[jField<F>("UPNORMAL")] != -1);
		return sat<F>("UPNORMAL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$State>
	static auto UPPRESSED() {
		static_assert(field_signatures[jField<F>("UPPRESSED")] != -1);
		return sat<F>("UPPRESSED");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint(::com::sun::java::swing::plaf::windows::TMSchema$Part, ::com::sun::java::swing::plaf::windows::TMSchema$State)>("getValue"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$State(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$State *()>("values"), //
	};

	template<typename R = ::jint, typename... Args>
	static auto getValue(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return scall<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$State, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$State *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
