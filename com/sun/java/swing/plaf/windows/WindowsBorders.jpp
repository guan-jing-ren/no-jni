#ifndef com_sun_java_swing_plaf_windows_WindowsBorders_HPP
#define com_sun_java_swing_plaf_windows_WindowsBorders_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsBorders : public jObject<::com::sun::java::swing::plaf::windows::WindowsBorders, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsBorders";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::border::Border()>("getFocusCellHighlightBorder"), //
		jMethod<::javax::swing::border::Border()>("getInternalFrameBorder"), //
		jMethod<::javax::swing::border::Border()>("getProgressBarBorder"), //
		jMethod<::javax::swing::border::Border()>("getTableHeaderBorder"), //
		jMethod<::javax::swing::border::Border()>("getToolBarBorder"), //
	};

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getFocusCellHighlightBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFocusCellHighlightBorder")] != -1);
		return scall<R>("getFocusCellHighlightBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getInternalFrameBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getInternalFrameBorder")] != -1);
		return scall<R>("getInternalFrameBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getProgressBarBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProgressBarBorder")] != -1);
		return scall<R>("getProgressBarBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getTableHeaderBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getTableHeaderBorder")] != -1);
		return scall<R>("getTableHeaderBorder", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::border::Border, typename... Args>
	static auto getToolBarBorder(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getToolBarBorder")] != -1);
		return scall<R>("getToolBarBorder", std::forward<Args>(args)...);
	}

};

#endif
