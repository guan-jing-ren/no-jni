#ifndef com_sun_java_swing_plaf_windows_TMSchema$Control_HPP
#define com_sun_java_swing_plaf_windows_TMSchema$Control_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::TMSchema$Control : public jObject<::com::sun::java::swing::plaf::windows::TMSchema$Control, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "TMSchema$Control";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("BUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("COMBOBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("EDIT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("HEADER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("LISTBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("LISTVIEW"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("MENU"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("PROGRESS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("REBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("SCROLLBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("SPIN"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("TAB"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("TOOLBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("TRACKBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("TREEVIEW"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Control>("WINDOW"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto BUTTON() {
		static_assert(field_signatures[jField<F>("BUTTON")] != -1);
		return sat<F>("BUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto COMBOBOX() {
		static_assert(field_signatures[jField<F>("COMBOBOX")] != -1);
		return sat<F>("COMBOBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto EDIT() {
		static_assert(field_signatures[jField<F>("EDIT")] != -1);
		return sat<F>("EDIT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto HEADER() {
		static_assert(field_signatures[jField<F>("HEADER")] != -1);
		return sat<F>("HEADER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto LISTBOX() {
		static_assert(field_signatures[jField<F>("LISTBOX")] != -1);
		return sat<F>("LISTBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto LISTVIEW() {
		static_assert(field_signatures[jField<F>("LISTVIEW")] != -1);
		return sat<F>("LISTVIEW");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto PROGRESS() {
		static_assert(field_signatures[jField<F>("PROGRESS")] != -1);
		return sat<F>("PROGRESS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto REBAR() {
		static_assert(field_signatures[jField<F>("REBAR")] != -1);
		return sat<F>("REBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto SCROLLBAR() {
		static_assert(field_signatures[jField<F>("SCROLLBAR")] != -1);
		return sat<F>("SCROLLBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto SPIN() {
		static_assert(field_signatures[jField<F>("SPIN")] != -1);
		return sat<F>("SPIN");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto TAB() {
		static_assert(field_signatures[jField<F>("TAB")] != -1);
		return sat<F>("TAB");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto TOOLBAR() {
		static_assert(field_signatures[jField<F>("TOOLBAR")] != -1);
		return sat<F>("TOOLBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto TRACKBAR() {
		static_assert(field_signatures[jField<F>("TRACKBAR")] != -1);
		return sat<F>("TRACKBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto TREEVIEW() {
		static_assert(field_signatures[jField<F>("TREEVIEW")] != -1);
		return sat<F>("TREEVIEW");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Control>
	static auto WINDOW() {
		static_assert(field_signatures[jField<F>("WINDOW")] != -1);
		return sat<F>("WINDOW");
	}

	constexpr static Enume method_signatures{
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Control(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Control *()>("values"), //
	};

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Control, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Control *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
