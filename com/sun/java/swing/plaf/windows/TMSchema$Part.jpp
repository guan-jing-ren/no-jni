#ifndef com_sun_java_swing_plaf_windows_TMSchema$Part_HPP
#define com_sun_java_swing_plaf_windows_TMSchema$Part_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::TMSchema$Part : public jObject<::com::sun::java::swing::plaf::windows::TMSchema$Part, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "TMSchema$Part";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("BP_CHECKBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("BP_GROUPBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("BP_PUSHBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("BP_RADIOBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_BACKGROUND"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_BORDER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_COMBOBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_CUEBANNER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_DROPDOWNBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_DROPDOWNBUTTONLEFT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_DROPDOWNBUTTONRIGHT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_READONLY"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("CP_TRANSPARENTBACKGROUND"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("EP_EDIT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("EP_EDITTEXT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("HP_HEADERITEM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("HP_HEADERSORTARROW"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("LBP_LISTBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("LVP_LISTVIEW"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MENU"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_BARBACKGROUND"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_BARITEM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPBACKGROUND"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPBORDERS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPCHECK"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPCHECKBACKGROUND"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPGUTTER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPITEM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPSEPARATOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("MP_POPUPSUBMENU"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("PP_BAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("PP_BARVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("PP_CHUNK"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("PP_CHUNKVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("PP_PROGRESS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("RP_GRIPPER"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("RP_GRIPPERVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_ARROWBTN"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_GRIPPERHORZ"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_GRIPPERVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_LOWERTRACKHORZ"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_LOWERTRACKVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_SCROLLBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_SIZEBOX"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_THUMBBTNHORZ"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_THUMBBTNVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_UPPERTRACKHORZ"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SBP_UPPERTRACKVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SPNP_DOWN"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("SPNP_UP"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TABP_PANE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TABP_TABITEM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TABP_TABITEMLEFTEDGE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TABP_TABITEMRIGHTEDGE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMB"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMBBOTTOM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMBLEFT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMBRIGHT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMBTOP"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_THUMBVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_TICS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_TICSVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_TRACK"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TKP_TRACKVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TP_BUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TP_SEPARATOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TP_SEPARATORVERT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TP_TOOLBAR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TVP_GLYPH"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("TVP_TREEVIEW"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_CAPTION"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_CLOSEBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_FRAMEBOTTOM"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_FRAMELEFT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_FRAMERIGHT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MAXBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MAXCAPTION"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MDICLOSEBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MDIMINBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MDIRESTOREBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MDISYSBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MINBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_MINCAPTION"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_RESTOREBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_SYSBUTTON"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Part>("WP_WINDOW"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto BP_CHECKBOX() {
		static_assert(field_signatures[jField<F>("BP_CHECKBOX")] != -1);
		return sat<F>("BP_CHECKBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto BP_GROUPBOX() {
		static_assert(field_signatures[jField<F>("BP_GROUPBOX")] != -1);
		return sat<F>("BP_GROUPBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto BP_PUSHBUTTON() {
		static_assert(field_signatures[jField<F>("BP_PUSHBUTTON")] != -1);
		return sat<F>("BP_PUSHBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto BP_RADIOBUTTON() {
		static_assert(field_signatures[jField<F>("BP_RADIOBUTTON")] != -1);
		return sat<F>("BP_RADIOBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_BACKGROUND() {
		static_assert(field_signatures[jField<F>("CP_BACKGROUND")] != -1);
		return sat<F>("CP_BACKGROUND");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_BORDER() {
		static_assert(field_signatures[jField<F>("CP_BORDER")] != -1);
		return sat<F>("CP_BORDER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_COMBOBOX() {
		static_assert(field_signatures[jField<F>("CP_COMBOBOX")] != -1);
		return sat<F>("CP_COMBOBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_CUEBANNER() {
		static_assert(field_signatures[jField<F>("CP_CUEBANNER")] != -1);
		return sat<F>("CP_CUEBANNER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_DROPDOWNBUTTON() {
		static_assert(field_signatures[jField<F>("CP_DROPDOWNBUTTON")] != -1);
		return sat<F>("CP_DROPDOWNBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_DROPDOWNBUTTONLEFT() {
		static_assert(field_signatures[jField<F>("CP_DROPDOWNBUTTONLEFT")] != -1);
		return sat<F>("CP_DROPDOWNBUTTONLEFT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_DROPDOWNBUTTONRIGHT() {
		static_assert(field_signatures[jField<F>("CP_DROPDOWNBUTTONRIGHT")] != -1);
		return sat<F>("CP_DROPDOWNBUTTONRIGHT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_READONLY() {
		static_assert(field_signatures[jField<F>("CP_READONLY")] != -1);
		return sat<F>("CP_READONLY");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto CP_TRANSPARENTBACKGROUND() {
		static_assert(field_signatures[jField<F>("CP_TRANSPARENTBACKGROUND")] != -1);
		return sat<F>("CP_TRANSPARENTBACKGROUND");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto EP_EDIT() {
		static_assert(field_signatures[jField<F>("EP_EDIT")] != -1);
		return sat<F>("EP_EDIT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto EP_EDITTEXT() {
		static_assert(field_signatures[jField<F>("EP_EDITTEXT")] != -1);
		return sat<F>("EP_EDITTEXT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto HP_HEADERITEM() {
		static_assert(field_signatures[jField<F>("HP_HEADERITEM")] != -1);
		return sat<F>("HP_HEADERITEM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto HP_HEADERSORTARROW() {
		static_assert(field_signatures[jField<F>("HP_HEADERSORTARROW")] != -1);
		return sat<F>("HP_HEADERSORTARROW");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto LBP_LISTBOX() {
		static_assert(field_signatures[jField<F>("LBP_LISTBOX")] != -1);
		return sat<F>("LBP_LISTBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto LVP_LISTVIEW() {
		static_assert(field_signatures[jField<F>("LVP_LISTVIEW")] != -1);
		return sat<F>("LVP_LISTVIEW");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MENU() {
		static_assert(field_signatures[jField<F>("MENU")] != -1);
		return sat<F>("MENU");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_BARBACKGROUND() {
		static_assert(field_signatures[jField<F>("MP_BARBACKGROUND")] != -1);
		return sat<F>("MP_BARBACKGROUND");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_BARITEM() {
		static_assert(field_signatures[jField<F>("MP_BARITEM")] != -1);
		return sat<F>("MP_BARITEM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPBACKGROUND() {
		static_assert(field_signatures[jField<F>("MP_POPUPBACKGROUND")] != -1);
		return sat<F>("MP_POPUPBACKGROUND");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPBORDERS() {
		static_assert(field_signatures[jField<F>("MP_POPUPBORDERS")] != -1);
		return sat<F>("MP_POPUPBORDERS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPCHECK() {
		static_assert(field_signatures[jField<F>("MP_POPUPCHECK")] != -1);
		return sat<F>("MP_POPUPCHECK");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPCHECKBACKGROUND() {
		static_assert(field_signatures[jField<F>("MP_POPUPCHECKBACKGROUND")] != -1);
		return sat<F>("MP_POPUPCHECKBACKGROUND");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPGUTTER() {
		static_assert(field_signatures[jField<F>("MP_POPUPGUTTER")] != -1);
		return sat<F>("MP_POPUPGUTTER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPITEM() {
		static_assert(field_signatures[jField<F>("MP_POPUPITEM")] != -1);
		return sat<F>("MP_POPUPITEM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPSEPARATOR() {
		static_assert(field_signatures[jField<F>("MP_POPUPSEPARATOR")] != -1);
		return sat<F>("MP_POPUPSEPARATOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto MP_POPUPSUBMENU() {
		static_assert(field_signatures[jField<F>("MP_POPUPSUBMENU")] != -1);
		return sat<F>("MP_POPUPSUBMENU");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto PP_BAR() {
		static_assert(field_signatures[jField<F>("PP_BAR")] != -1);
		return sat<F>("PP_BAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto PP_BARVERT() {
		static_assert(field_signatures[jField<F>("PP_BARVERT")] != -1);
		return sat<F>("PP_BARVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto PP_CHUNK() {
		static_assert(field_signatures[jField<F>("PP_CHUNK")] != -1);
		return sat<F>("PP_CHUNK");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto PP_CHUNKVERT() {
		static_assert(field_signatures[jField<F>("PP_CHUNKVERT")] != -1);
		return sat<F>("PP_CHUNKVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto PP_PROGRESS() {
		static_assert(field_signatures[jField<F>("PP_PROGRESS")] != -1);
		return sat<F>("PP_PROGRESS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto RP_GRIPPER() {
		static_assert(field_signatures[jField<F>("RP_GRIPPER")] != -1);
		return sat<F>("RP_GRIPPER");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto RP_GRIPPERVERT() {
		static_assert(field_signatures[jField<F>("RP_GRIPPERVERT")] != -1);
		return sat<F>("RP_GRIPPERVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_ARROWBTN() {
		static_assert(field_signatures[jField<F>("SBP_ARROWBTN")] != -1);
		return sat<F>("SBP_ARROWBTN");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_GRIPPERHORZ() {
		static_assert(field_signatures[jField<F>("SBP_GRIPPERHORZ")] != -1);
		return sat<F>("SBP_GRIPPERHORZ");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_GRIPPERVERT() {
		static_assert(field_signatures[jField<F>("SBP_GRIPPERVERT")] != -1);
		return sat<F>("SBP_GRIPPERVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_LOWERTRACKHORZ() {
		static_assert(field_signatures[jField<F>("SBP_LOWERTRACKHORZ")] != -1);
		return sat<F>("SBP_LOWERTRACKHORZ");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_LOWERTRACKVERT() {
		static_assert(field_signatures[jField<F>("SBP_LOWERTRACKVERT")] != -1);
		return sat<F>("SBP_LOWERTRACKVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_SCROLLBAR() {
		static_assert(field_signatures[jField<F>("SBP_SCROLLBAR")] != -1);
		return sat<F>("SBP_SCROLLBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_SIZEBOX() {
		static_assert(field_signatures[jField<F>("SBP_SIZEBOX")] != -1);
		return sat<F>("SBP_SIZEBOX");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_THUMBBTNHORZ() {
		static_assert(field_signatures[jField<F>("SBP_THUMBBTNHORZ")] != -1);
		return sat<F>("SBP_THUMBBTNHORZ");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_THUMBBTNVERT() {
		static_assert(field_signatures[jField<F>("SBP_THUMBBTNVERT")] != -1);
		return sat<F>("SBP_THUMBBTNVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_UPPERTRACKHORZ() {
		static_assert(field_signatures[jField<F>("SBP_UPPERTRACKHORZ")] != -1);
		return sat<F>("SBP_UPPERTRACKHORZ");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SBP_UPPERTRACKVERT() {
		static_assert(field_signatures[jField<F>("SBP_UPPERTRACKVERT")] != -1);
		return sat<F>("SBP_UPPERTRACKVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SPNP_DOWN() {
		static_assert(field_signatures[jField<F>("SPNP_DOWN")] != -1);
		return sat<F>("SPNP_DOWN");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto SPNP_UP() {
		static_assert(field_signatures[jField<F>("SPNP_UP")] != -1);
		return sat<F>("SPNP_UP");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TABP_PANE() {
		static_assert(field_signatures[jField<F>("TABP_PANE")] != -1);
		return sat<F>("TABP_PANE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TABP_TABITEM() {
		static_assert(field_signatures[jField<F>("TABP_TABITEM")] != -1);
		return sat<F>("TABP_TABITEM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TABP_TABITEMLEFTEDGE() {
		static_assert(field_signatures[jField<F>("TABP_TABITEMLEFTEDGE")] != -1);
		return sat<F>("TABP_TABITEMLEFTEDGE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TABP_TABITEMRIGHTEDGE() {
		static_assert(field_signatures[jField<F>("TABP_TABITEMRIGHTEDGE")] != -1);
		return sat<F>("TABP_TABITEMRIGHTEDGE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMB() {
		static_assert(field_signatures[jField<F>("TKP_THUMB")] != -1);
		return sat<F>("TKP_THUMB");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMBBOTTOM() {
		static_assert(field_signatures[jField<F>("TKP_THUMBBOTTOM")] != -1);
		return sat<F>("TKP_THUMBBOTTOM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMBLEFT() {
		static_assert(field_signatures[jField<F>("TKP_THUMBLEFT")] != -1);
		return sat<F>("TKP_THUMBLEFT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMBRIGHT() {
		static_assert(field_signatures[jField<F>("TKP_THUMBRIGHT")] != -1);
		return sat<F>("TKP_THUMBRIGHT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMBTOP() {
		static_assert(field_signatures[jField<F>("TKP_THUMBTOP")] != -1);
		return sat<F>("TKP_THUMBTOP");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_THUMBVERT() {
		static_assert(field_signatures[jField<F>("TKP_THUMBVERT")] != -1);
		return sat<F>("TKP_THUMBVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_TICS() {
		static_assert(field_signatures[jField<F>("TKP_TICS")] != -1);
		return sat<F>("TKP_TICS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_TICSVERT() {
		static_assert(field_signatures[jField<F>("TKP_TICSVERT")] != -1);
		return sat<F>("TKP_TICSVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_TRACK() {
		static_assert(field_signatures[jField<F>("TKP_TRACK")] != -1);
		return sat<F>("TKP_TRACK");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TKP_TRACKVERT() {
		static_assert(field_signatures[jField<F>("TKP_TRACKVERT")] != -1);
		return sat<F>("TKP_TRACKVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TP_BUTTON() {
		static_assert(field_signatures[jField<F>("TP_BUTTON")] != -1);
		return sat<F>("TP_BUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TP_SEPARATOR() {
		static_assert(field_signatures[jField<F>("TP_SEPARATOR")] != -1);
		return sat<F>("TP_SEPARATOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TP_SEPARATORVERT() {
		static_assert(field_signatures[jField<F>("TP_SEPARATORVERT")] != -1);
		return sat<F>("TP_SEPARATORVERT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TP_TOOLBAR() {
		static_assert(field_signatures[jField<F>("TP_TOOLBAR")] != -1);
		return sat<F>("TP_TOOLBAR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TVP_GLYPH() {
		static_assert(field_signatures[jField<F>("TVP_GLYPH")] != -1);
		return sat<F>("TVP_GLYPH");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto TVP_TREEVIEW() {
		static_assert(field_signatures[jField<F>("TVP_TREEVIEW")] != -1);
		return sat<F>("TVP_TREEVIEW");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_CAPTION() {
		static_assert(field_signatures[jField<F>("WP_CAPTION")] != -1);
		return sat<F>("WP_CAPTION");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_CLOSEBUTTON() {
		static_assert(field_signatures[jField<F>("WP_CLOSEBUTTON")] != -1);
		return sat<F>("WP_CLOSEBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_FRAMEBOTTOM() {
		static_assert(field_signatures[jField<F>("WP_FRAMEBOTTOM")] != -1);
		return sat<F>("WP_FRAMEBOTTOM");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_FRAMELEFT() {
		static_assert(field_signatures[jField<F>("WP_FRAMELEFT")] != -1);
		return sat<F>("WP_FRAMELEFT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_FRAMERIGHT() {
		static_assert(field_signatures[jField<F>("WP_FRAMERIGHT")] != -1);
		return sat<F>("WP_FRAMERIGHT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MAXBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MAXBUTTON")] != -1);
		return sat<F>("WP_MAXBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MAXCAPTION() {
		static_assert(field_signatures[jField<F>("WP_MAXCAPTION")] != -1);
		return sat<F>("WP_MAXCAPTION");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MDICLOSEBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MDICLOSEBUTTON")] != -1);
		return sat<F>("WP_MDICLOSEBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MDIMINBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MDIMINBUTTON")] != -1);
		return sat<F>("WP_MDIMINBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MDIRESTOREBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MDIRESTOREBUTTON")] != -1);
		return sat<F>("WP_MDIRESTOREBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MDISYSBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MDISYSBUTTON")] != -1);
		return sat<F>("WP_MDISYSBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MINBUTTON() {
		static_assert(field_signatures[jField<F>("WP_MINBUTTON")] != -1);
		return sat<F>("WP_MINBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_MINCAPTION() {
		static_assert(field_signatures[jField<F>("WP_MINCAPTION")] != -1);
		return sat<F>("WP_MINCAPTION");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_RESTOREBUTTON() {
		static_assert(field_signatures[jField<F>("WP_RESTOREBUTTON")] != -1);
		return sat<F>("WP_RESTOREBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_SYSBUTTON() {
		static_assert(field_signatures[jField<F>("WP_SYSBUTTON")] != -1);
		return sat<F>("WP_SYSBUTTON");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Part>
	static auto WP_WINDOW() {
		static_assert(field_signatures[jField<F>("WP_WINDOW")] != -1);
		return sat<F>("WP_WINDOW");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String(::java::awt::Component)>("getControlName"), //
		jMethod<::jint()>("getValue"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Part(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Part *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getControlName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getControlName")] != -1);
		return call<R>("getControlName", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Part, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Part *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
