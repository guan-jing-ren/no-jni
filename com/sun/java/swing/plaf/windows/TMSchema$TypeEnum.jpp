#ifndef com_sun_java_swing_plaf_windows_TMSchema$TypeEnum_HPP
#define com_sun_java_swing_plaf_windows_TMSchema$TypeEnum_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum : public jObject<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "TMSchema$TypeEnum";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>("BT_BORDERFILL"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>("BT_IMAGEFILE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>("TST_CONTINUOUS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>("TST_NONE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>("TST_SINGLE"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>
	static auto BT_BORDERFILL() {
		static_assert(field_signatures[jField<F>("BT_BORDERFILL")] != -1);
		return sat<F>("BT_BORDERFILL");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>
	static auto BT_IMAGEFILE() {
		static_assert(field_signatures[jField<F>("BT_IMAGEFILE")] != -1);
		return sat<F>("BT_IMAGEFILE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>
	static auto TST_CONTINUOUS() {
		static_assert(field_signatures[jField<F>("TST_CONTINUOUS")] != -1);
		return sat<F>("TST_CONTINUOUS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>
	static auto TST_NONE() {
		static_assert(field_signatures[jField<F>("TST_NONE")] != -1);
		return sat<F>("TST_NONE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum>
	static auto TST_SINGLE() {
		static_assert(field_signatures[jField<F>("TST_SINGLE")] != -1);
		return sat<F>("TST_SINGLE");
	}

	constexpr static Enume method_signatures{
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum *()>("values"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$TypeEnum *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
