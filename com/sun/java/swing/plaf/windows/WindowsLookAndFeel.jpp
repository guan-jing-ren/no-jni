#ifndef com_sun_java_swing_plaf_windows_WindowsLookAndFeel_HPP
#define com_sun_java_swing_plaf_windows_WindowsLookAndFeel_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsLookAndFeel : public jObject<::com::sun::java::swing::plaf::windows::WindowsLookAndFeel, ::javax::swing::plaf::basic::BasicLookAndFeel> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsLookAndFeel";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::java::lang::String()>("getDescription"), //
		jMethod<::javax::swing::Icon(::javax::swing::JComponent, ::javax::swing::Icon)>("getDisabledIcon"), //
		jMethod<::java::lang::String()>("getID"), //
		jMethod<::javax::swing::LayoutStyle()>("getLayoutStyle"), //
		jMethod<::java::lang::String()>("getName"), //
		jMethod<::jvoid()>("initialize"), //
		jMethod<::jboolean()>("isClassicWindows"), //
		jMethod<::jboolean()>("isMnemonicHidden"), //
		jMethod<::jboolean()>("isNativeLookAndFeel"), //
		jMethod<::jboolean()>("isSupportedLookAndFeel"), //
		jMethod<::jvoid(::java::awt::Component)>("provideErrorFeedback"), //
		jMethod<::jvoid(::jboolean)>("setMnemonicHidden"), //
		jMethod<::jvoid()>("uninitialize"), //
	};

	template<typename R = ::java::lang::String, typename... Args>
	auto getDescription(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDescription")] != -1);
		return call<R>("getDescription", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	auto getDisabledIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDisabledIcon")] != -1);
		return call<R>("getDisabledIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getID")] != -1);
		return call<R>("getID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::LayoutStyle, typename... Args>
	auto getLayoutStyle(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getLayoutStyle")] != -1);
		return call<R>("getLayoutStyle", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getName(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getName")] != -1);
		return call<R>("getName", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto initialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("initialize")] != -1);
		return call<R>("initialize", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isClassicWindows(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isClassicWindows")] != -1);
		return scall<R>("isClassicWindows", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isMnemonicHidden(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isMnemonicHidden")] != -1);
		return scall<R>("isMnemonicHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isNativeLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isNativeLookAndFeel")] != -1);
		return call<R>("isNativeLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto isSupportedLookAndFeel(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isSupportedLookAndFeel")] != -1);
		return call<R>("isSupportedLookAndFeel", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto provideErrorFeedback(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("provideErrorFeedback")] != -1);
		return call<R>("provideErrorFeedback", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setMnemonicHidden(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setMnemonicHidden")] != -1);
		return scall<R>("setMnemonicHidden", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto uninitialize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("uninitialize")] != -1);
		return call<R>("uninitialize", std::forward<Args>(args)...);
	}

};

#endif
