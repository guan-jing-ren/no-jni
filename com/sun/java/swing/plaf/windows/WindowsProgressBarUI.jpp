#ifndef com_sun_java_swing_plaf_windows_WindowsProgressBarUI_HPP
#define com_sun_java_swing_plaf_windows_WindowsProgressBarUI_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsProgressBarUI : public jObject<::com::sun::java::swing::plaf::windows::WindowsProgressBarUI, ::javax::swing::plaf::basic::BasicProgressBarUI> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsProgressBarUI";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::plaf::ComponentUI(::javax::swing::JComponent)>("createUI"), //
		jMethod<::jint(::javax::swing::JComponent, ::jint, ::jint)>("getBaseline"), //
	};

	template<typename R = ::javax::swing::plaf::ComponentUI, typename... Args>
	static auto createUI(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createUI")] != -1);
		return scall<R>("createUI", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getBaseline(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getBaseline")] != -1);
		return call<R>("getBaseline", std::forward<Args>(args)...);
	}

};

#endif
