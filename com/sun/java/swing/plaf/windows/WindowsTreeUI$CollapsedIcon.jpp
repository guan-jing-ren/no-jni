#ifndef com_sun_java_swing_plaf_windows_WindowsTreeUI$CollapsedIcon_HPP
#define com_sun_java_swing_plaf_windows_WindowsTreeUI$CollapsedIcon_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsTreeUI$CollapsedIcon : public jObject<::com::sun::java::swing::plaf::windows::WindowsTreeUI$CollapsedIcon, ::com::sun::java::swing::plaf::windows::WindowsTreeUI$ExpandedIcon> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsTreeUI$CollapsedIcon";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::Icon()>("createCollapsedIcon"), //
		jMethod<::jvoid(::java::awt::Component, ::java::awt::Graphics, ::jint, ::jint)>("paintIcon"), //
	};

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createCollapsedIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createCollapsedIcon")] != -1);
		return scall<R>("createCollapsedIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintIcon(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintIcon")] != -1);
		return call<R>("paintIcon", std::forward<Args>(args)...);
	}

};

#endif
