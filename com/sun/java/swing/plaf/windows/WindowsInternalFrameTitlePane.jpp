#ifndef com_sun_java_swing_plaf_windows_WindowsInternalFrameTitlePane_HPP
#define com_sun_java_swing_plaf_windows_WindowsInternalFrameTitlePane_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsInternalFrameTitlePane : public jObject<::com::sun::java::swing::plaf::windows::WindowsInternalFrameTitlePane, ::javax::swing::plaf::basic::BasicInternalFrameTitlePane> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsInternalFrameTitlePane";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid(::javax::swing::JInternalFrame)>(), //
		jMethod<::java::awt::Dimension()>("getMinimumSize"), //
		jMethod<::java::awt::Dimension()>("getPreferredSize"), //
		jMethod<::jvoid(::java::awt::Graphics)>("paintComponent"), //
	};

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getMinimumSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMinimumSize")] != -1);
		return call<R>("getMinimumSize", std::forward<Args>(args)...);
	}

	template<typename R = ::java::awt::Dimension, typename... Args>
	auto getPreferredSize(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getPreferredSize")] != -1);
		return call<R>("getPreferredSize", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto paintComponent(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("paintComponent")] != -1);
		return call<R>("paintComponent", std::forward<Args>(args)...);
	}

};

#endif
