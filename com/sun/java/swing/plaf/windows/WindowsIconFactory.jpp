#ifndef com_sun_java_swing_plaf_windows_WindowsIconFactory_HPP
#define com_sun_java_swing_plaf_windows_WindowsIconFactory_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::WindowsIconFactory : public jObject<::com::sun::java::swing::plaf::windows::WindowsIconFactory, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "WindowsIconFactory";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::Icon()>("createFrameCloseIcon"), //
		jMethod<::javax::swing::Icon()>("createFrameIconifyIcon"), //
		jMethod<::javax::swing::Icon()>("createFrameMaximizeIcon"), //
		jMethod<::javax::swing::Icon()>("createFrameMinimizeIcon"), //
		jMethod<::javax::swing::Icon()>("createFrameResizeIcon"), //
		jMethod<::javax::swing::Icon()>("getCheckBoxIcon"), //
		jMethod<::javax::swing::Icon()>("getCheckBoxMenuItemIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuArrowIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuItemArrowIcon"), //
		jMethod<::javax::swing::Icon()>("getMenuItemCheckIcon"), //
		jMethod<::javax::swing::Icon()>("getRadioButtonIcon"), //
		jMethod<::javax::swing::Icon()>("getRadioButtonMenuItemIcon"), //
	};

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createFrameCloseIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrameCloseIcon")] != -1);
		return scall<R>("createFrameCloseIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createFrameIconifyIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrameIconifyIcon")] != -1);
		return scall<R>("createFrameIconifyIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createFrameMaximizeIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrameMaximizeIcon")] != -1);
		return scall<R>("createFrameMaximizeIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createFrameMinimizeIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrameMinimizeIcon")] != -1);
		return scall<R>("createFrameMinimizeIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto createFrameResizeIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("createFrameResizeIcon")] != -1);
		return scall<R>("createFrameResizeIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getCheckBoxIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckBoxIcon")] != -1);
		return scall<R>("getCheckBoxIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getCheckBoxMenuItemIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getCheckBoxMenuItemIcon")] != -1);
		return scall<R>("getCheckBoxMenuItemIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuArrowIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuArrowIcon")] != -1);
		return scall<R>("getMenuArrowIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuItemArrowIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemArrowIcon")] != -1);
		return scall<R>("getMenuItemArrowIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getMenuItemCheckIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getMenuItemCheckIcon")] != -1);
		return scall<R>("getMenuItemCheckIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getRadioButtonIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRadioButtonIcon")] != -1);
		return scall<R>("getRadioButtonIcon", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::swing::Icon, typename... Args>
	static auto getRadioButtonMenuItemIcon(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRadioButtonMenuItemIcon")] != -1);
		return scall<R>("getRadioButtonMenuItemIcon", std::forward<Args>(args)...);
	}

};

#endif
