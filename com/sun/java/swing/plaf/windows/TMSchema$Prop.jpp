#ifndef com_sun_java_swing_plaf_windows_TMSchema$Prop_HPP
#define com_sun_java_swing_plaf_windows_TMSchema$Prop_HPP

#include "../../../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::plaf::windows::TMSchema$Prop : public jObject<::com::sun::java::swing::plaf::windows::TMSchema$Prop, ::java::lang::Enum> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing_plaf_windows / "TMSchema$Prop";

	constexpr static Enume field_signatures{
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("BGTYPE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("BORDERCOLOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("BORDERONLY"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("BORDERSIZE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("CAPTIONMARGINS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("COLOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("CONTENTMARGINS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("FILLCOLOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("FLATMENUS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("IMAGECOUNT"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("NORMALSIZE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("PROGRESSCHUNKSIZE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("PROGRESSSPACESIZE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("SIZE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("SIZINGMARGINS"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("TEXTCOLOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("TEXTSHADOWCOLOR"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("TEXTSHADOWOFFSET"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("TEXTSHADOWTYPE"), //
		jField<::com::sun::java::swing::plaf::windows::TMSchema$Prop>("TRANSITIONDURATIONS"), //
	};

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto BGTYPE() {
		static_assert(field_signatures[jField<F>("BGTYPE")] != -1);
		return sat<F>("BGTYPE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto BORDERCOLOR() {
		static_assert(field_signatures[jField<F>("BORDERCOLOR")] != -1);
		return sat<F>("BORDERCOLOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto BORDERONLY() {
		static_assert(field_signatures[jField<F>("BORDERONLY")] != -1);
		return sat<F>("BORDERONLY");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto BORDERSIZE() {
		static_assert(field_signatures[jField<F>("BORDERSIZE")] != -1);
		return sat<F>("BORDERSIZE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto CAPTIONMARGINS() {
		static_assert(field_signatures[jField<F>("CAPTIONMARGINS")] != -1);
		return sat<F>("CAPTIONMARGINS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto COLOR() {
		static_assert(field_signatures[jField<F>("COLOR")] != -1);
		return sat<F>("COLOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto CONTENTMARGINS() {
		static_assert(field_signatures[jField<F>("CONTENTMARGINS")] != -1);
		return sat<F>("CONTENTMARGINS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto FILLCOLOR() {
		static_assert(field_signatures[jField<F>("FILLCOLOR")] != -1);
		return sat<F>("FILLCOLOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto FLATMENUS() {
		static_assert(field_signatures[jField<F>("FLATMENUS")] != -1);
		return sat<F>("FLATMENUS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto IMAGECOUNT() {
		static_assert(field_signatures[jField<F>("IMAGECOUNT")] != -1);
		return sat<F>("IMAGECOUNT");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto NORMALSIZE() {
		static_assert(field_signatures[jField<F>("NORMALSIZE")] != -1);
		return sat<F>("NORMALSIZE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto PROGRESSCHUNKSIZE() {
		static_assert(field_signatures[jField<F>("PROGRESSCHUNKSIZE")] != -1);
		return sat<F>("PROGRESSCHUNKSIZE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto PROGRESSSPACESIZE() {
		static_assert(field_signatures[jField<F>("PROGRESSSPACESIZE")] != -1);
		return sat<F>("PROGRESSSPACESIZE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto SIZE() {
		static_assert(field_signatures[jField<F>("SIZE")] != -1);
		return sat<F>("SIZE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto SIZINGMARGINS() {
		static_assert(field_signatures[jField<F>("SIZINGMARGINS")] != -1);
		return sat<F>("SIZINGMARGINS");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto TEXTCOLOR() {
		static_assert(field_signatures[jField<F>("TEXTCOLOR")] != -1);
		return sat<F>("TEXTCOLOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto TEXTSHADOWCOLOR() {
		static_assert(field_signatures[jField<F>("TEXTSHADOWCOLOR")] != -1);
		return sat<F>("TEXTSHADOWCOLOR");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto TEXTSHADOWOFFSET() {
		static_assert(field_signatures[jField<F>("TEXTSHADOWOFFSET")] != -1);
		return sat<F>("TEXTSHADOWOFFSET");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto TEXTSHADOWTYPE() {
		static_assert(field_signatures[jField<F>("TEXTSHADOWTYPE")] != -1);
		return sat<F>("TEXTSHADOWTYPE");
	}

	template<typename F = ::com::sun::java::swing::plaf::windows::TMSchema$Prop>
	static auto TRANSITIONDURATIONS() {
		static_assert(field_signatures[jField<F>("TRANSITIONDURATIONS")] != -1);
		return sat<F>("TRANSITIONDURATIONS");
	}

	constexpr static Enume method_signatures{
		jMethod<::jint()>("getValue"), //
		jMethod<::java::lang::String()>("toString"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Prop(::java::lang::String)>("valueOf"), //
		jMethod<::com::sun::java::swing::plaf::windows::TMSchema$Prop *()>("values"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getValue(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getValue")] != -1);
		return call<R>("getValue", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto toString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("toString")] != -1);
		return call<R>("toString", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Prop, typename... Args>
	static auto valueOf(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("valueOf")] != -1);
		return scall<R>("valueOf", std::forward<Args>(args)...);
	}

	template<typename R = ::com::sun::java::swing::plaf::windows::TMSchema$Prop *, typename... Args>
	static auto values(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("values")] != -1);
		return scall<R>("values", std::forward<Args>(args)...);
	}

};

#endif
