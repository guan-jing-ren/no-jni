#ifndef com_sun_java_swing_SwingUtilities3_HPP
#define com_sun_java_swing_SwingUtilities3_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::java::swing::SwingUtilities3 : public jObject<::com::sun::java::swing::SwingUtilities3, ::java::lang::Object> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_java_swing / "SwingUtilities3";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::javax::swing::RepaintManager(::java::awt::Component)>("getDelegateRepaintManager"), //
		jMethod<::jboolean(::java::awt::Container)>("isVsyncRequested"), //
		jMethod<::jvoid(::javax::swing::JComponent, ::javax::swing::RepaintManager)>("setDelegateRepaintManager"), //
		jMethod<::jvoid(::java::util::Map)>("setEventQueueDelegate"), //
		jMethod<::jvoid(::java::awt::Container, ::jboolean)>("setVsyncRequested"), //
	};

	template<typename R = ::javax::swing::RepaintManager, typename... Args>
	static auto getDelegateRepaintManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDelegateRepaintManager")] != -1);
		return scall<R>("getDelegateRepaintManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	static auto isVsyncRequested(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("isVsyncRequested")] != -1);
		return scall<R>("isVsyncRequested", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setDelegateRepaintManager(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDelegateRepaintManager")] != -1);
		return scall<R>("setDelegateRepaintManager", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setEventQueueDelegate(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setEventQueueDelegate")] != -1);
		return scall<R>("setEventQueueDelegate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	static auto setVsyncRequested(Args &&...args) {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setVsyncRequested")] != -1);
		return scall<R>("setVsyncRequested", std::forward<Args>(args)...);
	}

};

#endif
