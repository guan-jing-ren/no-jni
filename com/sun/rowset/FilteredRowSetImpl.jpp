#ifndef com_sun_rowset_FilteredRowSetImpl_HPP
#define com_sun_rowset_FilteredRowSetImpl_HPP

#include "../../../jfwd_decl.hpp"

class ::com::sun::rowset::FilteredRowSetImpl : public jObject<::com::sun::rowset::FilteredRowSetImpl, ::com::sun::rowset::WebRowSetImpl> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_rowset / "FilteredRowSetImpl";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jConstructor<::jvoid(::java::util::Hashtable)>(), //
		jMethod<::jboolean(::jint)>("absolute"), //
		jMethod<::javax::sql::rowset::Predicate()>("getFilter"), //
		jMethod<::jvoid()>("insertRow"), //
		jMethod<::jvoid()>("moveToInsertRow"), //
		jMethod<::jboolean(::jint)>("relative"), //
		jMethod<::jvoid(::javax::sql::rowset::Predicate)>("setFilter"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("updateAsciiStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("updateAsciiStream"), //
		jMethod<::jvoid(::jint, ::java::math::BigDecimal)>("updateBigDecimal"), //
		jMethod<::jvoid(::java::lang::String, ::java::math::BigDecimal)>("updateBigDecimal"), //
		jMethod<::jvoid(::jint, ::java::io::InputStream, ::jint)>("updateBinaryStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::InputStream, ::jint)>("updateBinaryStream"), //
		jMethod<::jvoid(::jint, ::jboolean)>("updateBoolean"), //
		jMethod<::jvoid(::java::lang::String, ::jboolean)>("updateBoolean"), //
		jMethod<::jvoid(::jint, ::jbyte)>("updateByte"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte)>("updateByte"), //
		jMethod<::jvoid(::jint, ::jbyte *)>("updateBytes"), //
		jMethod<::jvoid(::java::lang::String, ::jbyte *)>("updateBytes"), //
		jMethod<::jvoid(::jint, ::java::io::Reader, ::jint)>("updateCharacterStream"), //
		jMethod<::jvoid(::java::lang::String, ::java::io::Reader, ::jint)>("updateCharacterStream"), //
		jMethod<::jvoid(::jint, ::java::sql::Date)>("updateDate"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Date)>("updateDate"), //
		jMethod<::jvoid(::jint, ::jdouble)>("updateDouble"), //
		jMethod<::jvoid(::java::lang::String, ::jdouble)>("updateDouble"), //
		jMethod<::jvoid(::jint, ::jfloat)>("updateFloat"), //
		jMethod<::jvoid(::java::lang::String, ::jfloat)>("updateFloat"), //
		jMethod<::jvoid(::jint, ::jint)>("updateInt"), //
		jMethod<::jvoid(::java::lang::String, ::jint)>("updateInt"), //
		jMethod<::jvoid(::jint, ::jlong)>("updateLong"), //
		jMethod<::jvoid(::java::lang::String, ::jlong)>("updateLong"), //
		jMethod<::jvoid(::jint, ::java::lang::Object)>("updateObject"), //
		jMethod<::jvoid(::jint, ::java::lang::Object, ::jint)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object)>("updateObject"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::Object, ::jint)>("updateObject"), //
		jMethod<::jvoid(::jint, ::jshort)>("updateShort"), //
		jMethod<::jvoid(::java::lang::String, ::jshort)>("updateShort"), //
		jMethod<::jvoid(::jint, ::java::lang::String)>("updateString"), //
		jMethod<::jvoid(::java::lang::String, ::java::lang::String)>("updateString"), //
		jMethod<::jvoid(::jint, ::java::sql::Time)>("updateTime"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Time)>("updateTime"), //
		jMethod<::jvoid(::jint, ::java::sql::Timestamp)>("updateTimestamp"), //
		jMethod<::jvoid(::java::lang::String, ::java::sql::Timestamp)>("updateTimestamp"), //
	};

	template<typename R = ::jboolean, typename... Args>
	auto absolute(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("absolute")] != -1);
		return call<R>("absolute", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::rowset::Predicate, typename... Args>
	auto getFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getFilter")] != -1);
		return call<R>("getFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto insertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("insertRow")] != -1);
		return call<R>("insertRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto moveToInsertRow(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("moveToInsertRow")] != -1);
		return call<R>("moveToInsertRow", std::forward<Args>(args)...);
	}

	template<typename R = ::jboolean, typename... Args>
	auto relative(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("relative")] != -1);
		return call<R>("relative", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setFilter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setFilter")] != -1);
		return call<R>("setFilter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateAsciiStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateAsciiStream")] != -1);
		return call<R>("updateAsciiStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBigDecimal(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBigDecimal")] != -1);
		return call<R>("updateBigDecimal", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBinaryStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBinaryStream")] != -1);
		return call<R>("updateBinaryStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBoolean(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBoolean")] != -1);
		return call<R>("updateBoolean", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateByte(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateByte")] != -1);
		return call<R>("updateByte", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateBytes(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateBytes")] != -1);
		return call<R>("updateBytes", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateCharacterStream(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateCharacterStream")] != -1);
		return call<R>("updateCharacterStream", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateDate(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateDate")] != -1);
		return call<R>("updateDate", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateDouble(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateDouble")] != -1);
		return call<R>("updateDouble", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateFloat(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateFloat")] != -1);
		return call<R>("updateFloat", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateInt(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateInt")] != -1);
		return call<R>("updateInt", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateLong(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateLong")] != -1);
		return call<R>("updateLong", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateObject(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateObject")] != -1);
		return call<R>("updateObject", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateShort(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateShort")] != -1);
		return call<R>("updateShort", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateString(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateString")] != -1);
		return call<R>("updateString", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateTime(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateTime")] != -1);
		return call<R>("updateTime", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto updateTimestamp(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("updateTimestamp")] != -1);
		return call<R>("updateTimestamp", std::forward<Args>(args)...);
	}

};

#endif
