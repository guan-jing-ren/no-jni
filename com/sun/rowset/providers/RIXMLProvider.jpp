#ifndef com_sun_rowset_providers_RIXMLProvider_HPP
#define com_sun_rowset_providers_RIXMLProvider_HPP

#include "../../../../jfwd_decl.hpp"

class ::com::sun::rowset::providers::RIXMLProvider : public jObject<::com::sun::rowset::providers::RIXMLProvider, ::javax::sql::rowset::spi::SyncProvider> {
public:
	using jObject::jObject;

	static constexpr auto signature = ::com_sun_rowset_providers / "RIXMLProvider";

	constexpr static Enume field_signatures{
		cexprstr{"\0"}, //
	};

	constexpr static Enume method_signatures{
		jConstructor<::jvoid()>(), //
		jMethod<::jint()>("getDataSourceLock"), //
		jMethod<::jint()>("getProviderGrade"), //
		jMethod<::java::lang::String()>("getProviderID"), //
		jMethod<::javax::sql::RowSetReader()>("getRowSetReader"), //
		jMethod<::javax::sql::RowSetWriter()>("getRowSetWriter"), //
		jMethod<::java::lang::String()>("getVendor"), //
		jMethod<::java::lang::String()>("getVersion"), //
		jMethod<::javax::sql::rowset::spi::XmlReader()>("getXmlReader"), //
		jMethod<::javax::sql::rowset::spi::XmlWriter()>("getXmlWriter"), //
		jMethod<::jvoid(::jint)>("setDataSourceLock"), //
		jMethod<::jvoid(::javax::sql::rowset::spi::XmlReader)>("setXmlReader"), //
		jMethod<::jvoid(::javax::sql::rowset::spi::XmlWriter)>("setXmlWriter"), //
		jMethod<::jint()>("supportsUpdatableView"), //
	};

	template<typename R = ::jint, typename... Args>
	auto getDataSourceLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getDataSourceLock")] != -1);
		return call<R>("getDataSourceLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto getProviderGrade(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProviderGrade")] != -1);
		return call<R>("getProviderGrade", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getProviderID(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getProviderID")] != -1);
		return call<R>("getProviderID", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::RowSetReader, typename... Args>
	auto getRowSetReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowSetReader")] != -1);
		return call<R>("getRowSetReader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::RowSetWriter, typename... Args>
	auto getRowSetWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getRowSetWriter")] != -1);
		return call<R>("getRowSetWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVendor(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVendor")] != -1);
		return call<R>("getVendor", std::forward<Args>(args)...);
	}

	template<typename R = ::java::lang::String, typename... Args>
	auto getVersion(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getVersion")] != -1);
		return call<R>("getVersion", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::rowset::spi::XmlReader, typename... Args>
	auto getXmlReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXmlReader")] != -1);
		return call<R>("getXmlReader", std::forward<Args>(args)...);
	}

	template<typename R = ::javax::sql::rowset::spi::XmlWriter, typename... Args>
	auto getXmlWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("getXmlWriter")] != -1);
		return call<R>("getXmlWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setDataSourceLock(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setDataSourceLock")] != -1);
		return call<R>("setDataSourceLock", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXmlReader(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXmlReader")] != -1);
		return call<R>("setXmlReader", std::forward<Args>(args)...);
	}

	template<typename R = ::jvoid, typename... Args>
	auto setXmlWriter(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("setXmlWriter")] != -1);
		return call<R>("setXmlWriter", std::forward<Args>(args)...);
	}

	template<typename R = ::jint, typename... Args>
	auto supportsUpdatableView(Args &&...args) const {
		static_assert(method_signatures[jMethod<R(std::decay_t<Args>...)>("supportsUpdatableView")] != -1);
		return call<R>("supportsUpdatableView", std::forward<Args>(args)...);
	}

};

#endif
